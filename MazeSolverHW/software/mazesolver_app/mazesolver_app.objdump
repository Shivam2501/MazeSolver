
mazesolver_app.elf:     file format elf32-littlenios2
mazesolver_app.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00023d48 memsz 0x00023d48 flags r-x
    LOAD off    0x00024d68 vaddr 0x10023d68 paddr 0x10025c40 align 2**12
         filesz 0x00001ed8 memsz 0x00001ed8 flags rw-
    LOAD off    0x00027b18 vaddr 0x10027b18 paddr 0x10027b18 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00022590  100001b8  100001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001620  10022748  10022748  00023748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ed8  10023d68  10025c40  00024d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  10027b18  10027b18  00027b18  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00026c40  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000010b8  00000000  00000000  00026c68  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00037e58  00000000  00000000  00027d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c539  00000000  00000000  0005fb78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000febe  00000000  00000000  0006c0b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000034ac  00000000  00000000  0007bf70  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004eea  00000000  00000000  0007f41c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00016fbc  00000000  00000000  00084306  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0009b2c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001078  00000000  00000000  0009b2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000a173a  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  000a173d  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000a1749  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000a174a  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000a174b  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000a174f  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000a1753  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000a1757  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000a1762  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000a176d  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000e  00000000  00000000  000a1778  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002d  00000000  00000000  000a1786  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000505c8  00000000  00000000  000a17b3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001b8 l    d  .text	00000000 .text
10022748 l    d  .rodata	00000000 .rodata
10023d68 l    d  .rwdata	00000000 .rwdata
10027b18 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../mazesolver_app_bsp//obj/HAL/src/crt0.o
100001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 lodepng.c
100001f4 l     F .text	00000030 lodepng_malloc
10000224 l     F .text	00000038 lodepng_realloc
1000025c l     F .text	00000030 lodepng_free
1000028c l     F .text	00000058 uivector_cleanup
100002e4 l     F .text	000000bc uivector_reserve
100003a0 l     F .text	00000060 uivector_resize
10000400 l     F .text	0000009c uivector_resizev
1000049c l     F .text	00000040 uivector_init
100004dc l     F .text	0000007c uivector_push_back
10000558 l     F .text	000000bc ucvector_reserve
10000614 l     F .text	00000054 ucvector_resize
10000668 l     F .text	00000058 ucvector_cleanup
100006c0 l     F .text	00000040 ucvector_init
10000700 l     F .text	00000098 ucvector_resizev
10000798 l     F .text	00000050 ucvector_init_buffer
100007e8 l     F .text	00000078 ucvector_push_back
10000860 l     F .text	0000007c string_resize
100008dc l     F .text	0000003c string_init
10000918 l     F .text	00000040 string_cleanup
10000958 l     F .text	0000008c string_set
10000a58 l     F .text	00000070 lodepng_set32bitInt
10000ac8 l     F .text	00000068 lodepng_add32bitInt
10000cac l     F .text	000000e8 addBitsToStream
10000d94 l     F .text	000000f4 addBitsToStreamReversed
10000e88 l     F .text	00000070 readBitFromStream
10000ef8 l     F .text	000000a8 readBitsFromStream
1002275c l     O .rodata	00000074 LENGTHBASE
100227d0 l     O .rodata	00000074 LENGTHEXTRA
10022844 l     O .rodata	00000078 DISTANCEBASE
100228bc l     O .rodata	00000078 DISTANCEEXTRA
10022934 l     O .rodata	0000004c CLCL_ORDER
10000fa0 l     F .text	00000038 HuffmanTree_init
10000fd8 l     F .text	00000058 HuffmanTree_cleanup
10001030 l     F .text	00000308 HuffmanTree_make2DTree
10001338 l     F .text	00000274 HuffmanTree_makeFromLengths2
100015ac l     F .text	000000d8 HuffmanTree_makeFromLengths
10001684 l     F .text	00000210 bpmnode_create
10001894 l     F .text	00000084 bpmnode_compare
10001918 l     F .text	000002d0 boundaryPM
10002090 l     F .text	00000124 HuffmanTree_makeFromFrequencies
100021b4 l     F .text	00000040 HuffmanTree_getCode
100021f4 l     F .text	00000040 HuffmanTree_getLength
10002234 l     F .text	00000168 generateFixedLitLenTree
1000239c l     F .text	000000a8 generateFixedDistanceTree
10002444 l     F .text	00000100 huffmanDecodeSymbol
10002544 l     F .text	0000003c getTreeInflateFixed
10002580 l     F .text	00000744 getTreeInflateDynamic
10002cc4 l     F .text	0000044c inflateHuffmanBlock
10003110 l     F .text	000001e4 inflateNoCompression
100032f4 l     F .text	0000014c lodepng_inflatev
100034cc l     F .text	00000084 inflate
10025bb0 l     O .rwdata	00000004 MAX_SUPPORTED_DEFLATE_LENGTH
10003550 l     F .text	00000048 addHuffmanSymbol
10003598 l     F .text	000000d8 searchCodeIndex
10003670 l     F .text	000000e8 addLengthDistance
10025bb4 l     O .rwdata	00000004 HASH_NUM_VALUES
10025bb8 l     O .rwdata	00000004 HASH_BIT_MASK
10003758 l     F .text	00000258 hash_init
100039b0 l     F .text	00000088 hash_cleanup
10003a38 l     F .text	00000134 getHash
10003b6c l     F .text	000000ac countZeros
10003c18 l     F .text	0000015c updateHashChain
10003d74 l     F .text	00000758 encodeLZ77
100044cc l     F .text	000001bc deflateNoCompression
10004688 l     F .text	000001f0 writeLZ77data
10004878 l     F .text	00000d04 deflateDynamic
1000557c l     F .text	0000036c deflateFixed
100058e8 l     F .text	0000024c lodepng_deflatev
10005bc0 l     F .text	00000084 deflate
10005c44 l     F .text	000000fc update_adler32
10005d40 l     F .text	0000003c adler32
10005f24 l     F .text	00000084 zlib_decompress
10006160 l     F .text	00000084 zlib_compress
10023d68 l     O .rwdata	00000400 lodepng_crc32_table
10006340 l     F .text	00000074 readBitFromReversedStream
100063b4 l     F .text	00000084 readBitsFromReversedStream
10006438 l     F .text	00000098 setBitOfReversedStream0
100064d0 l     F .text	000000ec setBitOfReversedStream
10006c7c l     F .text	00000178 checkColorValidity
10006df4 l     F .text	00000094 getNumColorChannels
10006e88 l     F .text	00000040 lodepng_get_bpp_lct
10007084 l     F .text	00000164 lodepng_color_mode_equal
10007644 l     F .text	00000058 lodepng_get_raw_size_idat
1000769c l     F .text	00000098 LodePNGUnknownChunks_init
10007734 l     F .text	0000006c LodePNGUnknownChunks_cleanup
100077a0 l     F .text	000001a4 LodePNGUnknownChunks_copy
10007944 l     F .text	00000038 LodePNGText_init
1000797c l     F .text	000000ac LodePNGText_cleanup
10007a28 l     F .text	000000cc LodePNGText_copy
10007cac l     F .text	00000048 LodePNGIText_init
10007cf4 l     F .text	0000010c LodePNGIText_cleanup
10007e00 l     F .text	00000114 LodePNGIText_copy
10008484 l     F .text	00000110 addColorBits
10008594 l     F .text	00000064 color_tree_init
100085f8 l     F .text	000000a4 color_tree_cleanup
1000869c l     F .text	00000124 color_tree_get
100087c0 l     F .text	00000078 color_tree_has
10008838 l     F .text	00000158 color_tree_add
10008990 l     F .text	0000058c rgba8ToPixel
10008f1c l     F .text	00000318 rgba16ToPixel
10009234 l     F .text	00000854 getPixelColorRGBA8
10009a88 l     F .text	00000ad0 getPixelColorsRGBA8
1000a558 l     F .text	00000584 getPixelColorRGBA16
1000af34 l     F .text	0000008c getValueRequiredBits
1000bc50 l     F .text	000000c0 paethPredictor
100229b4 l     O .rodata	0000001c ADAM7_IX
100229d0 l     O .rodata	0000001c ADAM7_IY
100229ec l     O .rodata	0000001c ADAM7_DX
10022a08 l     O .rodata	0000001c ADAM7_DY
1000bd10 l     F .text	00000408 Adam7_getpassvalues
1000c4ac l     F .text	0000056c unfilterScanline
1000ca18 l     F .text	00000124 unfilter
1000cb3c l     F .text	000004a8 Adam7_deinterlace
1000cfe4 l     F .text	000000c8 removePaddingBits
1000d0ac l     F .text	00000368 postProcessScanlines
1000d414 l     F .text	000001c8 readChunk_PLTE
1000d5dc l     F .text	000001ec readChunk_tRNS
1000d7c8 l     F .text	000001ec readChunk_bKGD
1000d9b4 l     F .text	000001f0 readChunk_tEXt
1000dba4 l     F .text	0000021c readChunk_zTXt
1000ddc0 l     F .text	000004cc readChunk_iTXt
1000e28c l     F .text	000000f0 readChunk_tIME
1000e37c l     F .text	00000120 readChunk_pHYs
1000e49c l     F .text	00000a04 decodeGeneric
1000f500 l     F .text	00000084 addChunk
1000f584 l     F .text	00000088 writeSignature
1000f60c l     F .text	00000100 addChunk_IHDR
1000f70c l     F .text	000000d8 addChunk_PLTE
1000f7e4 l     F .text	00000270 addChunk_tRNS
1000fa54 l     F .text	000000ac addChunk_IDAT
1000fb00 l     F .text	0000004c addChunk_IEND
1000fb4c l     F .text	00000150 addChunk_tEXt
1000fc9c l     F .text	000001a8 addChunk_zTXt
1000fe44 l     F .text	00000300 addChunk_iTXt
10010144 l     F .text	000001d0 addChunk_bKGD
10010314 l     F .text	00000104 addChunk_tIME
10010418 l     F .text	000000bc addChunk_pHYs
100104d4 l     F .text	00000564 filterScanline
10010a38 l     F .text	000001a8 flog2
10010be0 l     F .text	00000e30 filter
10011a10 l     F .text	000000ec addPaddingBits
10011afc l     F .text	000004a8 Adam7_interlace
10011fa4 l     F .text	00000574 preProcessScanlines
10012518 l     F .text	000001b4 getPaletteTranslucency
100126cc l     F .text	000000a4 addUnknownChunks
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 fp-bit.c
10013ee4 l     F .text	000001f4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
100145cc l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
10015058 l     F .text	00000008 __fp_lock
10015060 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 ftell.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
10024168 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 qsort.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
10017f80 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rewind.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100184a8 l     F .text	00000034 __sprint_r
10023b7e l     O .rodata	00000010 blanks.3546
10023b8e l     O .rodata	00000010 zeroes.3547
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
1001a5c0 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
10023bc0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
10023d08 l     O .rodata	0000000c p05.2466
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
1001e834 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1001f9e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1001fb00 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1001fb2c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1001fc2c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1001fd20 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1001fe0c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
1001ffe8 l     F .text	00000050 alt_get_errno
10020038 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
10020280 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10025be8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
100204f4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10020634 l     F .text	00000038 alt_dev_reg
10024b24 l     O .rwdata	00001060 jtag_uart_0
10025b84 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10020918 l     F .text	00000204 altera_avalon_jtag_uart_irq
10020b1c l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
10025c28 l     O .rwdata	00000004 hcinfo.2311
10025c1c l     O .rwdata	00000004 hcinfo.2324
10025c10 l     O .rwdata	00000004 hcinfo.2333
10025c04 l     O .rwdata	00000004 hcinfo.2346
10025bf8 l     O .rwdata	00000004 hcinfo.2359
10025bec l     O .rwdata	00000004 hcinfo.2385
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100218d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10022060 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
100170d0 g     F .text	0000001c putchar
1001d5a8 g     F .text	00000074 _mprec_log10
1001d698 g     F .text	00000084 __any_on
1001c394 g     F .text	00000064 _isatty_r
10023bf0 g     O .rodata	00000028 __mprec_tinytens
1001ff30 g     F .text	00000078 alt_main
1001f9a0 g     F .text	00000044 __ashldi3
100170ec g     F .text	00000084 _puts_r
10027b74 g     O .bss	00000100 alt_irq
1001c4d4 g     F .text	0000006c _lseek_r
10008300 g     F .text	00000100 lodepng_info_copy
10007b24 g     F .text	00000188 lodepng_add_text
10025c40 g       *ABS*	00000000 __flash_rwdata_start
1001be18 g     F .text	00000098 __sflags
1001f0d4 g     F .text	0000005c __eqdf2
10007378 g     F .text	00000044 lodepng_get_bpp
10027e04 g       *ABS*	00000000 __alt_heap_start
1001708c g     F .text	0000003c printf
10018314 g     F .text	0000005c __sseek
100150fc g     F .text	0000010c __sinit
1001d998 g     F .text	0000013c __swbuf_r
1001c3f8 g     F .text	0000009c _setlocale_r
10015074 g     F .text	00000078 __sfmoreglue
1001ffc8 g     F .text	00000020 __malloc_unlock
10021154 g     F .text	0000016c alt_hostfs_open
1001430c g     F .text	0000013c __divsf3
1001c540 g     F .text	0000018c memmove
100065bc g     F .text	00000030 lodepng_chunk_length
100150ec g     F .text	00000010 _cleanup
1001c6cc g     F .text	000000a8 _Balloc
1001f18c g     F .text	00000064 __gtdf2
10006854 g     F .text	00000088 lodepng_chunk_check_crc
1000675c g     F .text	00000038 lodepng_chunk_ancillary
00000000  w      *UND*	00000000 __errno
10006804 g     F .text	00000028 lodepng_chunk_data
10000000 g     F .entry	0000000c __reset
10013214 g     F .text	00000058 lodepng_encode32_file
10022980 g     O .rodata	00000024 lodepng_default_compress_settings
10000020 g       *ABS*	00000000 __flash_exceptions_start
10015fb0 g     F .text	00000068 _fstat_r
10027b18 g     O .bss	00000004 errno
1000f31c g     F .text	0000005c lodepng_decoder_settings_init
100061e4 g     F .text	00000080 lodepng_compress_settings_init
10006264 g     F .text	00000040 lodepng_decompress_settings_init
10027b38 g     O .bss	00000004 alt_argv
1002dbac g       *ABS*	00000000 _gp
10014124 g     F .text	00000058 __subsf3
10017184 g     F .text	000007e4 qsort
10015034 g     F .text	00000024 fgets
100249a4 g     O .rwdata	00000180 alt_fd_list
100132c4 g     F .text	0000007c lodepng_encoder_settings_init
1002149c g     F .text	000000b8 alt_hostfs_seek
100170c8 g     F .text	00000008 _putchar_r
10021a80 g     F .text	00000090 alt_find_dev
10016dd8 g     F .text	00000140 memcpy
10005b34 g     F .text	0000008c lodepng_deflate
10015068 g     F .text	0000000c _cleanup_r
1001f2b0 g     F .text	000000d4 __floatsidf
10021c24 g     F .text	00000084 alt_fs_reg
10022140 g     F .text	00000078 alt_io_redirect
1001f254 g     F .text	0000005c __ltdf2
10022748 g       *ABS*	00000000 __DTOR_END__
10017170 g     F .text	00000014 puts
100229a4 g     O .rodata	00000010 lodepng_default_decompress_settings
1001d504 g     F .text	000000a4 __ratio
10020d1c g     F .text	00000218 altera_avalon_jtag_uart_read
10016534 g     F .text	00000014 malloc
10017060 g     F .text	0000002c _printf_r
10007f44 g     F .text	000002c4 lodepng_add_itext
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
100146ec g     F .text	00000008 __udivsi3
1001fc7c g     F .text	000000a4 isatty
10023c40 g     O .rodata	000000c8 __mprec_tens
1001c494 g     F .text	0000000c __locale_charset
10027b24 g     O .bss	00000004 __malloc_top_pad
10025bcc g     O .rwdata	00000004 __mb_cur_max
1001c4a0 g     F .text	0000000c _localeconv_r
1001cafc g     F .text	0000003c __i2b
1001beb0 g     F .text	000004e4 __sfvwrite_r
1000f1d0 g     F .text	0000009c lodepng_decode_file
100181d4 g     F .text	00000064 _sbrk_r
100067cc g     F .text	00000038 lodepng_chunk_safetocopy
10013340 g     F .text	0000058c lodepng_error_text
1002132c g     F .text	000000b8 alt_hostfs_read
10005d7c g     F .text	000001a8 lodepng_zlib_decompress
1001d8c8 g     F .text	0000006c _read_r
10024970 g     O .rwdata	0000000c __lc_ctype
10025be0 g     O .rwdata	00000004 alt_max_fd
1001f788 g     F .text	00000104 __unpack_d
10014b90 g     F .text	0000013c _fclose_r
10014ec8 g     F .text	00000030 fflush
10027b20 g     O .bss	00000004 __malloc_max_sbrked_mem
100069d4 g     F .text	00000118 lodepng_chunk_append
10007f14 g     F .text	00000030 lodepng_clear_itext
1001eb88 g     F .text	00000054 __adddf3
1001d278 g     F .text	00000148 __b2d
1001e20c g     F .text	00000628 __umoddi3
1001fe5c g     F .text	000000d4 lseek
10025bbc g     O .rwdata	00000004 _global_impure_ptr
100068dc g     F .text	00000070 lodepng_chunk_generate_crc
10008208 g     F .text	000000a8 lodepng_info_init
10017984 g     F .text	000005fc _realloc_r
10027e04 g       *ABS*	00000000 __bss_end
10021f70 g     F .text	000000f0 alt_iic_isr_register
10022250 g     F .text	00000104 alt_tick
1001dbbc g     F .text	00000650 __udivdi3
10008400 g     F .text	00000084 lodepng_info_swap
10023c18 g     O .rodata	00000028 __mprec_bigtens
1001c8e0 g     F .text	00000104 __s2b
1001f448 g     F .text	0000011c __floatunsidf
1001d018 g     F .text	00000058 __mcmp
1000c118 g     F .text	00000394 lodepng_inspect
10015314 g     F .text	00000018 __fp_lock_all
10021f24 g     F .text	0000004c alt_ic_irq_enabled
100221b8 g     F .text	00000098 alt_alarm_stop
1001326c g     F .text	00000058 lodepng_encode24_file
10027b40 g     O .bss	00000004 alt_irq_active
100071e8 g     F .text	00000054 lodepng_palette_clear
100212c0 g     F .text	0000006c alt_hostfs_close
100000ec g     F .exceptions	000000cc alt_irq_handler
1002497c g     O .rwdata	00000028 alt_dev_null
1000f084 g     F .text	0000008c lodepng_decode_memory
1000f110 g     F .text	00000060 lodepng_decode32
10014a0c g     F .text	000000c8 __unpack_f
100218bc g     F .text	0000001c alt_dcache_flush_all
1001c9e4 g     F .text	00000068 __hi0bits
1000f2c4 g     F .text	00000058 lodepng_decode24_file
100009e4 g     F .text	00000074 lodepng_read32bitInt
10000c38 g     F .text	00000074 lodepng_save_file
100130b4 g     F .text	00000060 lodepng_encode32
1000743c g     F .text	00000034 lodepng_is_alpha_type
1001f384 g     F .text	000000c4 __fixdfsi
10025c40 g       *ABS*	00000000 __ram_rwdata_end
10025bd8 g     O .rwdata	00000008 alt_dev_list
10020544 g     F .text	000000f0 write
1001d71c g     F .text	000000bc _putc_r
10018188 g     F .text	00000038 _rewind_r
10014448 g     F .text	0000005c __gtsf2
10023d68 g       *ABS*	00000000 __ram_rodata_end
1001fb7c g     F .text	000000b0 fstat
1001f95c g     F .text	00000044 __lshrdi3
10013174 g     F .text	000000a0 lodepng_encode_file
10000b30 g     F .text	00000108 lodepng_load_file
1001cd90 g     F .text	0000012c __pow5mult
10027b30 g     O .bss	00000004 __nlocale_changed
100146f4 g     F .text	00000008 __umodsi3
1000f26c g     F .text	00000058 lodepng_decode32_file
10027e04 g       *ABS*	00000000 end
100148e0 g     F .text	0000012c __pack_f
1000f170 g     F .text	00000060 lodepng_decode24
100082b0 g     F .text	00000050 lodepng_info_cleanup
10015f8c g     F .text	00000024 fseek
10020858 g     F .text	000000c0 altera_avalon_jtag_uart_init
10006794 g     F .text	00000038 lodepng_chunk_private
100074a0 g     F .text	0000007c lodepng_has_palette_alpha
10022748 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10014834 g     F .text	000000ac __clzsi2
10012770 g     F .text	000008a8 lodepng_encode
10020f34 g     F .text	00000220 altera_avalon_jtag_uart_write
10015304 g     F .text	00000004 __sfp_lock_acquire
10016ce0 g     F .text	000000f8 memchr
100184dc g     F .text	00001e7c ___vfprintf_internal_r
10015848 g     F .text	000002d0 _free_r
1000eea0 g     F .text	000001e4 lodepng_decode
1002256c g     F .text	000001a0 __call_exitprocs
10027b2c g     O .bss	00000004 __mlocale_changed
10025bc4 g     O .rwdata	00000004 __malloc_sbrk_base
100001b8 g     F .text	0000003c _start
10027b44 g     O .bss	00000004 _alt_tick_rate
10006990 g     F .text	00000044 lodepng_chunk_next_const
1001cebc g     F .text	0000015c __lshift
10027b48 g     O .bss	00000004 _alt_nticks
100202d0 g     F .text	000000f4 read
100206a0 g     F .text	00000054 alt_sys_init
100138cc g     F .text	00000478 displayAsciiArt
10016ff4 g     F .text	0000006c _open_r
1000aec0 g     F .text	00000074 lodepng_color_profile_init
1002243c g     F .text	00000130 __register_exitproc
10006660 g     F .text	000000fc lodepng_chunk_type_equals
1001cb38 g     F .text	00000258 __multiply
1000aadc g     F .text	000003e4 lodepng_convert
10020bc0 g     F .text	00000068 altera_avalon_jtag_uart_close
100146fc g     F .text	00000028 __mulsi3
10023d68 g       *ABS*	00000000 __ram_rwdata_start
10022748 g       *ABS*	00000000 __ram_rodata_start
10027b4c g     O .bss	00000028 __malloc_current_mallinfo
1001d3c0 g     F .text	00000144 __d2b
10017968 g     F .text	0000001c realloc
100206f4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10021ca8 g     F .text	000000d4 alt_get_fd
1000afc0 g     F .text	000008dc lodepng_get_color_profile
1001f88c g     F .text	000000d0 __fpcmp_parts_d
1001a55c g     F .text	00000064 _close_r
10013018 g     F .text	0000009c lodepng_encode_memory
100223c0 g     F .text	0000007c memcmp
100207b4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10027e04 g       *ABS*	00000000 __alt_stack_base
10020804 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1001629c g     F .text	000000b0 _fwrite_r
1001a3e8 g     F .text	00000174 __swsetup_r
1001ef20 g     F .text	000001b4 __divdf3
10015208 g     F .text	000000fc __sfp
1001d61c g     F .text	0000007c __copybits
10024568 g     O .rwdata	00000408 __malloc_av_
10003440 g     F .text	0000008c lodepng_inflate
10015310 g     F .text	00000004 __sinit_lock_release
1001ec3c g     F .text	000002e4 __muldf3
10018238 g     F .text	00000054 __sread
1000694c g     F .text	00000044 lodepng_chunk_next
10023a24 g     O .rodata	00000010 __thenan_sf
100156cc g     F .text	00000040 fread
10021b10 g     F .text	00000114 alt_find_file
10021928 g     F .text	000000a0 alt_dev_llist_insert
1001ffa8 g     F .text	00000020 __malloc_lock
10020444 g     F .text	000000b0 sbrk
10014ce0 g     F .text	000001e8 _fflush_r
1001daf0 g     F .text	000000cc _calloc_r
10015474 g     F .text	0000001c fopen
10027b18 g       *ABS*	00000000 __bss_start
10016f18 g     F .text	000000dc memset
10013d44 g     F .text	000001a0 main
10027b3c g     O .bss	00000004 alt_envp
10027b1c g     O .bss	00000004 __malloc_max_total_mem
100073bc g     F .text	00000038 lodepng_get_channels
10020754 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10016128 g     F .text	00000014 ftell
1001dad4 g     F .text	0000001c __swbuf
100144a4 g     F .text	00000054 __ltsf2
10015490 g     F .text	0000023c _fread_r
10018370 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000751c g     F .text	00000058 lodepng_can_have_alpha
10014ccc g     F .text	00000014 fclose
10027c74 g     O .bss	00000190 _atexit0
1001a7fc g     F .text	0000161c _dtoa_r
1001655c g     F .text	00000784 _malloc_r
10006ec8 g     F .text	00000078 lodepng_color_mode_init
10025be4 g     O .rwdata	00000004 alt_errno
1001613c g     F .text	000000a8 _fwalk
10005fa8 g     F .text	000001b8 lodepng_zlib_compress
10014ef8 g     F .text	0000013c _fgets_r
1001d7d8 g     F .text	000000f0 putc
10014640 g     F .text	00000050 __divsi3
10023d14 g     O .rodata	00000014 __thenan_df
1001570c g     F .text	0000013c _malloc_trim_r
10022748 g       *ABS*	00000000 __CTOR_END__
1001417c g     F .text	00000190 __mulsf3
1000b89c g     F .text	000003b4 lodepng_auto_choose_color
10018378 g     F .text	000000a4 strcmp
10022748 g       *ABS*	00000000 __flash_rodata_start
10022748 g       *ABS*	00000000 __DTOR_LIST__
10013114 g     F .text	00000060 lodepng_encode24
1001f130 g     F .text	0000005c __nedf2
1002066c g     F .text	00000034 alt_irq_init
100203c4 g     F .text	00000080 alt_release_fd
10023a34 g     O .rodata	00000100 __clz_tab
10027b28 g     O .bss	00000004 _PathLocale
10022374 g     F .text	00000014 atexit
1001a37c g     F .text	0000006c _write_r
100065ec g     F .text	00000074 lodepng_chunk_type
1001c4ac g     F .text	0000001c setlocale
10025bc0 g     O .rwdata	00000004 _impure_ptr
10027b34 g     O .bss	00000004 alt_argc
10007470 g     F .text	00000030 lodepng_is_palette_type
10021a24 g     F .text	0000005c _do_dtors
10015b18 g     F .text	00000474 _fseek_r
100073f4 g     F .text	00000048 lodepng_is_greyscale_type
10017f9c g     F .text	000001ec __srefill_r
10000020 g       .exceptions	00000000 alt_irq_entry
1001d218 g     F .text	00000060 __ulp
1001d934 g     F .text	00000038 __isinfd
1001532c g     F .text	00000018 __fp_unlock_all
10025bd0 g     O .rwdata	00000008 alt_fs_list
100213e4 g     F .text	000000b8 alt_hostfs_write
10000020 g       *ABS*	00000000 __ram_exceptions_start
1001c4c8 g     F .text	0000000c localeconv
10001be8 g     F .text	000004a8 lodepng_huffman_code_lengths
10021d98 g     F .text	00000050 alt_ic_isr_register
10006f40 g     F .text	00000030 lodepng_color_mode_cleanup
1001634c g     F .text	00000040 fwrite
10025c40 g       *ABS*	00000000 _edata
10027e04 g       *ABS*	00000000 _end
10007574 g     F .text	00000064 lodepng_get_raw_size
100001b8 g       *ABS*	00000000 __ram_exceptions_end
10020c28 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
100181c0 g     F .text	00000014 rewind
10006f70 g     F .text	00000114 lodepng_color_mode_copy
10021e84 g     F .text	000000a0 alt_ic_irq_disable
1001828c g     F .text	00000088 __swrite
100062a4 g     F .text	0000009c lodepng_crc32
10025bc8 g     O .rwdata	00000004 __malloc_trim_threshold
10022354 g     F .text	00000020 altera_nios2_qsys_irq_init
10022388 g     F .text	00000038 exit
100161e4 g     F .text	000000b8 _fwalk_reent
100144f8 g     F .text	000000d4 __floatunsisf
1001d070 g     F .text	000001a8 __mdiff
10006aec g     F .text	00000190 lodepng_chunk_create
10014690 g     F .text	0000005c __modsi3
1000f430 g     F .text	000000d0 lodepng_state_copy
100075d8 g     F .text	0000006c lodepng_get_raw_size_lct
1000f378 g     F .text	00000070 lodepng_state_init
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10015308 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10014ad4 g     F .text	000000bc __fpcmp_parts_f
10015344 g     F .text	00000130 _fopen_r
1002270c g     F .text	0000003c _exit
1001d96c g     F .text	0000002c __isnand
1000682c g     F .text	00000028 lodepng_chunk_data_const
1002177c g     F .text	00000140 alt_alarm_start
10014724 g     F .text	00000110 __muldi3
1000723c g     F .text	0000013c lodepng_palette_add
1001638c g     F .text	000001a8 __smakebuf_r
1001841c g     F .text	0000008c strlen
10020128 g     F .text	00000158 open
1001f1f0 g     F .text	00000064 __gedf2
10016018 g     F .text	00000110 _ftell_r
10021d7c g     F .text	0000001c alt_icache_flush_all
10025c34 g     O .rwdata	00000004 alt_priority_mask
10021de8 g     F .text	0000009c alt_ic_irq_enable
1001a358 g     F .text	00000024 __vfprintf_internal
10025bac g     O .rwdata	00000004 LODEPNG_VERSION_STRING
1001ebdc g     F .text	00000060 __subdf3
1001ca4c g     F .text	000000b0 __lo0bits
10007af4 g     F .text	00000030 lodepng_clear_text
10025c38 g     O .rwdata	00000008 alt_alarm_list
100219c8 g     F .text	0000005c _do_ctors
1001fa34 g     F .text	000000cc close
100140d8 g     F .text	0000004c __addsf3
1000f3e8 g     F .text	00000048 lodepng_state_cleanup
1001fd8c g     F .text	00000080 alt_load
1001f564 g     F .text	00000224 __pack_d
10016548 g     F .text	00000014 free
1001530c g     F .text	00000004 __sinit_lock_acquire
1001c79c g     F .text	00000144 __multadd
1001c774 g     F .text	00000028 _Bfree
10021554 g     F .text	00000228 alt_hostfs_fstat



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406e14 	ori	at,at,440
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001726 	beq	r2,zero,10000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00c400b4 	movhi	r3,4098
10000130:	18dedd04 	addi	r3,r3,31604
10000134:	e0bffd17 	ldw	r2,-12(fp)
10000138:	100490fa 	slli	r2,r2,3
1000013c:	1885883a 	add	r2,r3,r2
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	010400b4 	movhi	r4,4098
10000148:	211edd04 	addi	r4,r4,31604
1000014c:	e0bffd17 	ldw	r2,-12(fp)
10000150:	100490fa 	slli	r2,r2,3
10000154:	2085883a 	add	r2,r4,r2
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
10000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000017c:	e0bffb17 	ldw	r2,-20(fp)
10000180:	103fe31e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
10000184:	00000706 	br	100001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
10000188:	e0bffc17 	ldw	r2,-16(fp)
1000018c:	1085883a 	add	r2,r2,r2
10000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000194:	e0bffd17 	ldw	r2,-12(fp)
10000198:	10800044 	addi	r2,r2,1
1000019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a0:	003fde06 	br	1000011c <__alt_data_end+0xf800011c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
100001a4:	e037883a 	mov	sp,fp
100001a8:	dfc00117 	ldw	ra,4(sp)
100001ac:	df000017 	ldw	fp,0(sp)
100001b0:	dec00204 	addi	sp,sp,8
100001b4:	f800283a 	ret

Disassembly of section .text:

100001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001b8:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c0:	068400b4 	movhi	gp,4098
    ori gp, gp, %lo(_gp)
100001c4:	d6b6eb14 	ori	gp,gp,56236
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001c8:	008400b4 	movhi	r2,4098
    ori r2, r2, %lo(__bss_start)
100001cc:	109ec614 	ori	r2,r2,31512

    movhi r3, %hi(__bss_end)
100001d0:	00c400b4 	movhi	r3,4098
    ori r3, r3, %lo(__bss_end)
100001d4:	18df8114 	ori	r3,r3,32260

    beq r2, r3, 1f
100001d8:	10c00326 	beq	r2,r3,100001e8 <_start+0x30>

0:
    stw zero, (r2)
100001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e4:	10fffd36 	bltu	r2,r3,100001dc <__alt_data_end+0xf80001dc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001e8:	001fd8c0 	call	1001fd8c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001ec:	001ff300 	call	1001ff30 <alt_main>

100001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f0:	003fff06 	br	100001f0 <__alt_data_end+0xf80001f0>

100001f4 <lodepng_malloc>:
lodepng source code. Don't forget to remove "static" if you copypaste them
from here.*/

#ifdef LODEPNG_COMPILE_ALLOCATORS
static void* lodepng_malloc(size_t size)
{
100001f4:	defffd04 	addi	sp,sp,-12
100001f8:	dfc00215 	stw	ra,8(sp)
100001fc:	df000115 	stw	fp,4(sp)
10000200:	df000104 	addi	fp,sp,4
10000204:	e13fff15 	stw	r4,-4(fp)
  return malloc(size);
10000208:	e13fff17 	ldw	r4,-4(fp)
1000020c:	00165340 	call	10016534 <malloc>
}
10000210:	e037883a 	mov	sp,fp
10000214:	dfc00117 	ldw	ra,4(sp)
10000218:	df000017 	ldw	fp,0(sp)
1000021c:	dec00204 	addi	sp,sp,8
10000220:	f800283a 	ret

10000224 <lodepng_realloc>:

static void* lodepng_realloc(void* ptr, size_t new_size)
{
10000224:	defffc04 	addi	sp,sp,-16
10000228:	dfc00315 	stw	ra,12(sp)
1000022c:	df000215 	stw	fp,8(sp)
10000230:	df000204 	addi	fp,sp,8
10000234:	e13ffe15 	stw	r4,-8(fp)
10000238:	e17fff15 	stw	r5,-4(fp)
  return realloc(ptr, new_size);
1000023c:	e13ffe17 	ldw	r4,-8(fp)
10000240:	e17fff17 	ldw	r5,-4(fp)
10000244:	00179680 	call	10017968 <realloc>
}
10000248:	e037883a 	mov	sp,fp
1000024c:	dfc00117 	ldw	ra,4(sp)
10000250:	df000017 	ldw	fp,0(sp)
10000254:	dec00204 	addi	sp,sp,8
10000258:	f800283a 	ret

1000025c <lodepng_free>:

static void lodepng_free(void* ptr)
{
1000025c:	defffd04 	addi	sp,sp,-12
10000260:	dfc00215 	stw	ra,8(sp)
10000264:	df000115 	stw	fp,4(sp)
10000268:	df000104 	addi	fp,sp,4
1000026c:	e13fff15 	stw	r4,-4(fp)
  free(ptr);
10000270:	e13fff17 	ldw	r4,-4(fp)
10000274:	00165480 	call	10016548 <free>
}
10000278:	e037883a 	mov	sp,fp
1000027c:	dfc00117 	ldw	ra,4(sp)
10000280:	df000017 	ldw	fp,0(sp)
10000284:	dec00204 	addi	sp,sp,8
10000288:	f800283a 	ret

1000028c <uivector_cleanup>:
  size_t size; /*size in number of unsigned longs*/
  size_t allocsize; /*allocated size in bytes*/
} uivector;

static void uivector_cleanup(void* p)
{
1000028c:	defffd04 	addi	sp,sp,-12
10000290:	dfc00215 	stw	ra,8(sp)
10000294:	df000115 	stw	fp,4(sp)
10000298:	df000104 	addi	fp,sp,4
1000029c:	e13fff15 	stw	r4,-4(fp)
  ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
100002a0:	e0bfff17 	ldw	r2,-4(fp)
100002a4:	10000215 	stw	zero,8(r2)
100002a8:	e0bfff17 	ldw	r2,-4(fp)
100002ac:	10c00217 	ldw	r3,8(r2)
100002b0:	e0bfff17 	ldw	r2,-4(fp)
100002b4:	10c00115 	stw	r3,4(r2)
  lodepng_free(((uivector*)p)->data);
100002b8:	e0bfff17 	ldw	r2,-4(fp)
100002bc:	10800017 	ldw	r2,0(r2)
100002c0:	1009883a 	mov	r4,r2
100002c4:	000025c0 	call	1000025c <lodepng_free>
  ((uivector*)p)->data = NULL;
100002c8:	e0bfff17 	ldw	r2,-4(fp)
100002cc:	10000015 	stw	zero,0(r2)
}
100002d0:	e037883a 	mov	sp,fp
100002d4:	dfc00117 	ldw	ra,4(sp)
100002d8:	df000017 	ldw	fp,0(sp)
100002dc:	dec00204 	addi	sp,sp,8
100002e0:	f800283a 	ret

100002e4 <uivector_reserve>:

/*returns 1 if success, 0 if failure ==> nothing done*/
static unsigned uivector_reserve(uivector* p, size_t allocsize)
{
100002e4:	defffa04 	addi	sp,sp,-24
100002e8:	dfc00515 	stw	ra,20(sp)
100002ec:	df000415 	stw	fp,16(sp)
100002f0:	df000404 	addi	fp,sp,16
100002f4:	e13ffe15 	stw	r4,-8(fp)
100002f8:	e17fff15 	stw	r5,-4(fp)
  if(allocsize > p->allocsize)
100002fc:	e0bffe17 	ldw	r2,-8(fp)
10000300:	10c00217 	ldw	r3,8(r2)
10000304:	e0bfff17 	ldw	r2,-4(fp)
10000308:	18801f2e 	bgeu	r3,r2,10000388 <uivector_reserve+0xa4>
  {
    size_t newsize = (allocsize > p->allocsize * 2) ? allocsize : (allocsize * 3 / 2);
1000030c:	e0bffe17 	ldw	r2,-8(fp)
10000310:	10800217 	ldw	r2,8(r2)
10000314:	1085883a 	add	r2,r2,r2
10000318:	1007883a 	mov	r3,r2
1000031c:	e0bfff17 	ldw	r2,-4(fp)
10000320:	18800636 	bltu	r3,r2,1000033c <uivector_reserve+0x58>
10000324:	e0ffff17 	ldw	r3,-4(fp)
10000328:	1805883a 	mov	r2,r3
1000032c:	1085883a 	add	r2,r2,r2
10000330:	10c5883a 	add	r2,r2,r3
10000334:	1004d07a 	srli	r2,r2,1
10000338:	00000106 	br	10000340 <uivector_reserve+0x5c>
1000033c:	e0bfff17 	ldw	r2,-4(fp)
10000340:	e0bffc15 	stw	r2,-16(fp)
    void* data = lodepng_realloc(p->data, newsize);
10000344:	e0bffe17 	ldw	r2,-8(fp)
10000348:	10800017 	ldw	r2,0(r2)
1000034c:	1009883a 	mov	r4,r2
10000350:	e17ffc17 	ldw	r5,-16(fp)
10000354:	00002240 	call	10000224 <lodepng_realloc>
10000358:	e0bffd15 	stw	r2,-12(fp)
    if(data)
1000035c:	e0bffd17 	ldw	r2,-12(fp)
10000360:	10000726 	beq	r2,zero,10000380 <uivector_reserve+0x9c>
    {
      p->allocsize = newsize;
10000364:	e0bffe17 	ldw	r2,-8(fp)
10000368:	e0fffc17 	ldw	r3,-16(fp)
1000036c:	10c00215 	stw	r3,8(r2)
      p->data = (unsigned*)data;
10000370:	e0bffe17 	ldw	r2,-8(fp)
10000374:	e0fffd17 	ldw	r3,-12(fp)
10000378:	10c00015 	stw	r3,0(r2)
1000037c:	00000206 	br	10000388 <uivector_reserve+0xa4>
    }
    else return 0; /*error: not enough memory*/
10000380:	0005883a 	mov	r2,zero
10000384:	00000106 	br	1000038c <uivector_reserve+0xa8>
  }
  return 1;
10000388:	00800044 	movi	r2,1
}
1000038c:	e037883a 	mov	sp,fp
10000390:	dfc00117 	ldw	ra,4(sp)
10000394:	df000017 	ldw	fp,0(sp)
10000398:	dec00204 	addi	sp,sp,8
1000039c:	f800283a 	ret

100003a0 <uivector_resize>:

/*returns 1 if success, 0 if failure ==> nothing done*/
static unsigned uivector_resize(uivector* p, size_t size)
{
100003a0:	defffc04 	addi	sp,sp,-16
100003a4:	dfc00315 	stw	ra,12(sp)
100003a8:	df000215 	stw	fp,8(sp)
100003ac:	df000204 	addi	fp,sp,8
100003b0:	e13ffe15 	stw	r4,-8(fp)
100003b4:	e17fff15 	stw	r5,-4(fp)
  if(!uivector_reserve(p, size * sizeof(unsigned))) return 0;
100003b8:	e0bfff17 	ldw	r2,-4(fp)
100003bc:	1085883a 	add	r2,r2,r2
100003c0:	1085883a 	add	r2,r2,r2
100003c4:	e13ffe17 	ldw	r4,-8(fp)
100003c8:	100b883a 	mov	r5,r2
100003cc:	00002e40 	call	100002e4 <uivector_reserve>
100003d0:	1000021e 	bne	r2,zero,100003dc <uivector_resize+0x3c>
100003d4:	0005883a 	mov	r2,zero
100003d8:	00000406 	br	100003ec <uivector_resize+0x4c>
  p->size = size;
100003dc:	e0bffe17 	ldw	r2,-8(fp)
100003e0:	e0ffff17 	ldw	r3,-4(fp)
100003e4:	10c00115 	stw	r3,4(r2)
  return 1; /*success*/
100003e8:	00800044 	movi	r2,1
}
100003ec:	e037883a 	mov	sp,fp
100003f0:	dfc00117 	ldw	ra,4(sp)
100003f4:	df000017 	ldw	fp,0(sp)
100003f8:	dec00204 	addi	sp,sp,8
100003fc:	f800283a 	ret

10000400 <uivector_resizev>:

/*resize and give all new elements the value*/
static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
{
10000400:	defff904 	addi	sp,sp,-28
10000404:	dfc00615 	stw	ra,24(sp)
10000408:	df000515 	stw	fp,20(sp)
1000040c:	df000504 	addi	fp,sp,20
10000410:	e13ffd15 	stw	r4,-12(fp)
10000414:	e17ffe15 	stw	r5,-8(fp)
10000418:	e1bfff15 	stw	r6,-4(fp)
  size_t oldsize = p->size, i;
1000041c:	e0bffd17 	ldw	r2,-12(fp)
10000420:	10800117 	ldw	r2,4(r2)
10000424:	e0bffc15 	stw	r2,-16(fp)
  if(!uivector_resize(p, size)) return 0;
10000428:	e13ffd17 	ldw	r4,-12(fp)
1000042c:	e17ffe17 	ldw	r5,-8(fp)
10000430:	00003a00 	call	100003a0 <uivector_resize>
10000434:	1000021e 	bne	r2,zero,10000440 <uivector_resizev+0x40>
10000438:	0005883a 	mov	r2,zero
1000043c:	00001206 	br	10000488 <uivector_resizev+0x88>
  for(i = oldsize; i < size; ++i) p->data[i] = value;
10000440:	e0bffc17 	ldw	r2,-16(fp)
10000444:	e0bffb15 	stw	r2,-20(fp)
10000448:	00000b06 	br	10000478 <uivector_resizev+0x78>
1000044c:	e0bffd17 	ldw	r2,-12(fp)
10000450:	10c00017 	ldw	r3,0(r2)
10000454:	e0bffb17 	ldw	r2,-20(fp)
10000458:	1085883a 	add	r2,r2,r2
1000045c:	1085883a 	add	r2,r2,r2
10000460:	1885883a 	add	r2,r3,r2
10000464:	e0ffff17 	ldw	r3,-4(fp)
10000468:	10c00015 	stw	r3,0(r2)
1000046c:	e0bffb17 	ldw	r2,-20(fp)
10000470:	10800044 	addi	r2,r2,1
10000474:	e0bffb15 	stw	r2,-20(fp)
10000478:	e0fffb17 	ldw	r3,-20(fp)
1000047c:	e0bffe17 	ldw	r2,-8(fp)
10000480:	18bff236 	bltu	r3,r2,1000044c <__alt_data_end+0xf800044c>
  return 1;
10000484:	00800044 	movi	r2,1
}
10000488:	e037883a 	mov	sp,fp
1000048c:	dfc00117 	ldw	ra,4(sp)
10000490:	df000017 	ldw	fp,0(sp)
10000494:	dec00204 	addi	sp,sp,8
10000498:	f800283a 	ret

1000049c <uivector_init>:

static void uivector_init(uivector* p)
{
1000049c:	defffe04 	addi	sp,sp,-8
100004a0:	df000115 	stw	fp,4(sp)
100004a4:	df000104 	addi	fp,sp,4
100004a8:	e13fff15 	stw	r4,-4(fp)
  p->data = NULL;
100004ac:	e0bfff17 	ldw	r2,-4(fp)
100004b0:	10000015 	stw	zero,0(r2)
  p->size = p->allocsize = 0;
100004b4:	e0bfff17 	ldw	r2,-4(fp)
100004b8:	10000215 	stw	zero,8(r2)
100004bc:	e0bfff17 	ldw	r2,-4(fp)
100004c0:	10c00217 	ldw	r3,8(r2)
100004c4:	e0bfff17 	ldw	r2,-4(fp)
100004c8:	10c00115 	stw	r3,4(r2)
}
100004cc:	e037883a 	mov	sp,fp
100004d0:	df000017 	ldw	fp,0(sp)
100004d4:	dec00104 	addi	sp,sp,4
100004d8:	f800283a 	ret

100004dc <uivector_push_back>:

#ifdef LODEPNG_COMPILE_ENCODER
/*returns 1 if success, 0 if failure ==> nothing done*/
static unsigned uivector_push_back(uivector* p, unsigned c)
{
100004dc:	defffc04 	addi	sp,sp,-16
100004e0:	dfc00315 	stw	ra,12(sp)
100004e4:	df000215 	stw	fp,8(sp)
100004e8:	df000204 	addi	fp,sp,8
100004ec:	e13ffe15 	stw	r4,-8(fp)
100004f0:	e17fff15 	stw	r5,-4(fp)
  if(!uivector_resize(p, p->size + 1)) return 0;
100004f4:	e0bffe17 	ldw	r2,-8(fp)
100004f8:	10800117 	ldw	r2,4(r2)
100004fc:	10800044 	addi	r2,r2,1
10000500:	e13ffe17 	ldw	r4,-8(fp)
10000504:	100b883a 	mov	r5,r2
10000508:	00003a00 	call	100003a0 <uivector_resize>
1000050c:	1000021e 	bne	r2,zero,10000518 <uivector_push_back+0x3c>
10000510:	0005883a 	mov	r2,zero
10000514:	00000b06 	br	10000544 <uivector_push_back+0x68>
  p->data[p->size - 1] = c;
10000518:	e0bffe17 	ldw	r2,-8(fp)
1000051c:	10c00017 	ldw	r3,0(r2)
10000520:	e0bffe17 	ldw	r2,-8(fp)
10000524:	10800117 	ldw	r2,4(r2)
10000528:	10bfffc4 	addi	r2,r2,-1
1000052c:	1085883a 	add	r2,r2,r2
10000530:	1085883a 	add	r2,r2,r2
10000534:	1885883a 	add	r2,r3,r2
10000538:	e0ffff17 	ldw	r3,-4(fp)
1000053c:	10c00015 	stw	r3,0(r2)
  return 1;
10000540:	00800044 	movi	r2,1
}
10000544:	e037883a 	mov	sp,fp
10000548:	dfc00117 	ldw	ra,4(sp)
1000054c:	df000017 	ldw	fp,0(sp)
10000550:	dec00204 	addi	sp,sp,8
10000554:	f800283a 	ret

10000558 <ucvector_reserve>:
  size_t allocsize; /*allocated size*/
} ucvector;

/*returns 1 if success, 0 if failure ==> nothing done*/
static unsigned ucvector_reserve(ucvector* p, size_t allocsize)
{
10000558:	defffa04 	addi	sp,sp,-24
1000055c:	dfc00515 	stw	ra,20(sp)
10000560:	df000415 	stw	fp,16(sp)
10000564:	df000404 	addi	fp,sp,16
10000568:	e13ffe15 	stw	r4,-8(fp)
1000056c:	e17fff15 	stw	r5,-4(fp)
  if(allocsize > p->allocsize)
10000570:	e0bffe17 	ldw	r2,-8(fp)
10000574:	10c00217 	ldw	r3,8(r2)
10000578:	e0bfff17 	ldw	r2,-4(fp)
1000057c:	18801f2e 	bgeu	r3,r2,100005fc <ucvector_reserve+0xa4>
  {
    size_t newsize = (allocsize > p->allocsize * 2) ? allocsize : (allocsize * 3 / 2);
10000580:	e0bffe17 	ldw	r2,-8(fp)
10000584:	10800217 	ldw	r2,8(r2)
10000588:	1085883a 	add	r2,r2,r2
1000058c:	1007883a 	mov	r3,r2
10000590:	e0bfff17 	ldw	r2,-4(fp)
10000594:	18800636 	bltu	r3,r2,100005b0 <ucvector_reserve+0x58>
10000598:	e0ffff17 	ldw	r3,-4(fp)
1000059c:	1805883a 	mov	r2,r3
100005a0:	1085883a 	add	r2,r2,r2
100005a4:	10c5883a 	add	r2,r2,r3
100005a8:	1004d07a 	srli	r2,r2,1
100005ac:	00000106 	br	100005b4 <ucvector_reserve+0x5c>
100005b0:	e0bfff17 	ldw	r2,-4(fp)
100005b4:	e0bffc15 	stw	r2,-16(fp)
    void* data = lodepng_realloc(p->data, newsize);
100005b8:	e0bffe17 	ldw	r2,-8(fp)
100005bc:	10800017 	ldw	r2,0(r2)
100005c0:	1009883a 	mov	r4,r2
100005c4:	e17ffc17 	ldw	r5,-16(fp)
100005c8:	00002240 	call	10000224 <lodepng_realloc>
100005cc:	e0bffd15 	stw	r2,-12(fp)
    if(data)
100005d0:	e0bffd17 	ldw	r2,-12(fp)
100005d4:	10000726 	beq	r2,zero,100005f4 <ucvector_reserve+0x9c>
    {
      p->allocsize = newsize;
100005d8:	e0bffe17 	ldw	r2,-8(fp)
100005dc:	e0fffc17 	ldw	r3,-16(fp)
100005e0:	10c00215 	stw	r3,8(r2)
      p->data = (unsigned char*)data;
100005e4:	e0bffe17 	ldw	r2,-8(fp)
100005e8:	e0fffd17 	ldw	r3,-12(fp)
100005ec:	10c00015 	stw	r3,0(r2)
100005f0:	00000206 	br	100005fc <ucvector_reserve+0xa4>
    }
    else return 0; /*error: not enough memory*/
100005f4:	0005883a 	mov	r2,zero
100005f8:	00000106 	br	10000600 <ucvector_reserve+0xa8>
  }
  return 1;
100005fc:	00800044 	movi	r2,1
}
10000600:	e037883a 	mov	sp,fp
10000604:	dfc00117 	ldw	ra,4(sp)
10000608:	df000017 	ldw	fp,0(sp)
1000060c:	dec00204 	addi	sp,sp,8
10000610:	f800283a 	ret

10000614 <ucvector_resize>:

/*returns 1 if success, 0 if failure ==> nothing done*/
static unsigned ucvector_resize(ucvector* p, size_t size)
{
10000614:	defffc04 	addi	sp,sp,-16
10000618:	dfc00315 	stw	ra,12(sp)
1000061c:	df000215 	stw	fp,8(sp)
10000620:	df000204 	addi	fp,sp,8
10000624:	e13ffe15 	stw	r4,-8(fp)
10000628:	e17fff15 	stw	r5,-4(fp)
  if(!ucvector_reserve(p, size * sizeof(unsigned char))) return 0;
1000062c:	e13ffe17 	ldw	r4,-8(fp)
10000630:	e17fff17 	ldw	r5,-4(fp)
10000634:	00005580 	call	10000558 <ucvector_reserve>
10000638:	1000021e 	bne	r2,zero,10000644 <ucvector_resize+0x30>
1000063c:	0005883a 	mov	r2,zero
10000640:	00000406 	br	10000654 <ucvector_resize+0x40>
  p->size = size;
10000644:	e0bffe17 	ldw	r2,-8(fp)
10000648:	e0ffff17 	ldw	r3,-4(fp)
1000064c:	10c00115 	stw	r3,4(r2)
  return 1; /*success*/
10000650:	00800044 	movi	r2,1
}
10000654:	e037883a 	mov	sp,fp
10000658:	dfc00117 	ldw	ra,4(sp)
1000065c:	df000017 	ldw	fp,0(sp)
10000660:	dec00204 	addi	sp,sp,8
10000664:	f800283a 	ret

10000668 <ucvector_cleanup>:

#ifdef LODEPNG_COMPILE_PNG

static void ucvector_cleanup(void* p)
{
10000668:	defffd04 	addi	sp,sp,-12
1000066c:	dfc00215 	stw	ra,8(sp)
10000670:	df000115 	stw	fp,4(sp)
10000674:	df000104 	addi	fp,sp,4
10000678:	e13fff15 	stw	r4,-4(fp)
  ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
1000067c:	e0bfff17 	ldw	r2,-4(fp)
10000680:	10000215 	stw	zero,8(r2)
10000684:	e0bfff17 	ldw	r2,-4(fp)
10000688:	10c00217 	ldw	r3,8(r2)
1000068c:	e0bfff17 	ldw	r2,-4(fp)
10000690:	10c00115 	stw	r3,4(r2)
  lodepng_free(((ucvector*)p)->data);
10000694:	e0bfff17 	ldw	r2,-4(fp)
10000698:	10800017 	ldw	r2,0(r2)
1000069c:	1009883a 	mov	r4,r2
100006a0:	000025c0 	call	1000025c <lodepng_free>
  ((ucvector*)p)->data = NULL;
100006a4:	e0bfff17 	ldw	r2,-4(fp)
100006a8:	10000015 	stw	zero,0(r2)
}
100006ac:	e037883a 	mov	sp,fp
100006b0:	dfc00117 	ldw	ra,4(sp)
100006b4:	df000017 	ldw	fp,0(sp)
100006b8:	dec00204 	addi	sp,sp,8
100006bc:	f800283a 	ret

100006c0 <ucvector_init>:

static void ucvector_init(ucvector* p)
{
100006c0:	defffe04 	addi	sp,sp,-8
100006c4:	df000115 	stw	fp,4(sp)
100006c8:	df000104 	addi	fp,sp,4
100006cc:	e13fff15 	stw	r4,-4(fp)
  p->data = NULL;
100006d0:	e0bfff17 	ldw	r2,-4(fp)
100006d4:	10000015 	stw	zero,0(r2)
  p->size = p->allocsize = 0;
100006d8:	e0bfff17 	ldw	r2,-4(fp)
100006dc:	10000215 	stw	zero,8(r2)
100006e0:	e0bfff17 	ldw	r2,-4(fp)
100006e4:	10c00217 	ldw	r3,8(r2)
100006e8:	e0bfff17 	ldw	r2,-4(fp)
100006ec:	10c00115 	stw	r3,4(r2)
}
100006f0:	e037883a 	mov	sp,fp
100006f4:	df000017 	ldw	fp,0(sp)
100006f8:	dec00104 	addi	sp,sp,4
100006fc:	f800283a 	ret

10000700 <ucvector_resizev>:

#ifdef LODEPNG_COMPILE_DECODER
/*resize and give all new elements the value*/
static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
{
10000700:	defff904 	addi	sp,sp,-28
10000704:	dfc00615 	stw	ra,24(sp)
10000708:	df000515 	stw	fp,20(sp)
1000070c:	df000504 	addi	fp,sp,20
10000710:	e13ffd15 	stw	r4,-12(fp)
10000714:	e17ffe15 	stw	r5,-8(fp)
10000718:	3005883a 	mov	r2,r6
1000071c:	e0bfff05 	stb	r2,-4(fp)
  size_t oldsize = p->size, i;
10000720:	e0bffd17 	ldw	r2,-12(fp)
10000724:	10800117 	ldw	r2,4(r2)
10000728:	e0bffc15 	stw	r2,-16(fp)
  if(!ucvector_resize(p, size)) return 0;
1000072c:	e13ffd17 	ldw	r4,-12(fp)
10000730:	e17ffe17 	ldw	r5,-8(fp)
10000734:	00006140 	call	10000614 <ucvector_resize>
10000738:	1000021e 	bne	r2,zero,10000744 <ucvector_resizev+0x44>
1000073c:	0005883a 	mov	r2,zero
10000740:	00001006 	br	10000784 <ucvector_resizev+0x84>
  for(i = oldsize; i < size; ++i) p->data[i] = value;
10000744:	e0bffc17 	ldw	r2,-16(fp)
10000748:	e0bffb15 	stw	r2,-20(fp)
1000074c:	00000906 	br	10000774 <ucvector_resizev+0x74>
10000750:	e0bffd17 	ldw	r2,-12(fp)
10000754:	10c00017 	ldw	r3,0(r2)
10000758:	e0bffb17 	ldw	r2,-20(fp)
1000075c:	1885883a 	add	r2,r3,r2
10000760:	e0ffff03 	ldbu	r3,-4(fp)
10000764:	10c00005 	stb	r3,0(r2)
10000768:	e0bffb17 	ldw	r2,-20(fp)
1000076c:	10800044 	addi	r2,r2,1
10000770:	e0bffb15 	stw	r2,-20(fp)
10000774:	e0fffb17 	ldw	r3,-20(fp)
10000778:	e0bffe17 	ldw	r2,-8(fp)
1000077c:	18bff436 	bltu	r3,r2,10000750 <__alt_data_end+0xf8000750>
  return 1;
10000780:	00800044 	movi	r2,1
}
10000784:	e037883a 	mov	sp,fp
10000788:	dfc00117 	ldw	ra,4(sp)
1000078c:	df000017 	ldw	fp,0(sp)
10000790:	dec00204 	addi	sp,sp,8
10000794:	f800283a 	ret

10000798 <ucvector_init_buffer>:

#ifdef LODEPNG_COMPILE_ZLIB
/*you can both convert from vector to buffer&size and vica versa. If you use
init_buffer to take over a buffer and size, it is not needed to use cleanup*/
static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
{
10000798:	defffc04 	addi	sp,sp,-16
1000079c:	df000315 	stw	fp,12(sp)
100007a0:	df000304 	addi	fp,sp,12
100007a4:	e13ffd15 	stw	r4,-12(fp)
100007a8:	e17ffe15 	stw	r5,-8(fp)
100007ac:	e1bfff15 	stw	r6,-4(fp)
  p->data = buffer;
100007b0:	e0bffd17 	ldw	r2,-12(fp)
100007b4:	e0fffe17 	ldw	r3,-8(fp)
100007b8:	10c00015 	stw	r3,0(r2)
  p->allocsize = p->size = size;
100007bc:	e0bffd17 	ldw	r2,-12(fp)
100007c0:	e0ffff17 	ldw	r3,-4(fp)
100007c4:	10c00115 	stw	r3,4(r2)
100007c8:	e0bffd17 	ldw	r2,-12(fp)
100007cc:	10c00117 	ldw	r3,4(r2)
100007d0:	e0bffd17 	ldw	r2,-12(fp)
100007d4:	10c00215 	stw	r3,8(r2)
}
100007d8:	e037883a 	mov	sp,fp
100007dc:	df000017 	ldw	fp,0(sp)
100007e0:	dec00104 	addi	sp,sp,4
100007e4:	f800283a 	ret

100007e8 <ucvector_push_back>:
#endif /*LODEPNG_COMPILE_ZLIB*/

#if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
/*returns 1 if success, 0 if failure ==> nothing done*/
static unsigned ucvector_push_back(ucvector* p, unsigned char c)
{
100007e8:	defffc04 	addi	sp,sp,-16
100007ec:	dfc00315 	stw	ra,12(sp)
100007f0:	df000215 	stw	fp,8(sp)
100007f4:	df000204 	addi	fp,sp,8
100007f8:	e13ffe15 	stw	r4,-8(fp)
100007fc:	2805883a 	mov	r2,r5
10000800:	e0bfff05 	stb	r2,-4(fp)
  if(!ucvector_resize(p, p->size + 1)) return 0;
10000804:	e0bffe17 	ldw	r2,-8(fp)
10000808:	10800117 	ldw	r2,4(r2)
1000080c:	10800044 	addi	r2,r2,1
10000810:	e13ffe17 	ldw	r4,-8(fp)
10000814:	100b883a 	mov	r5,r2
10000818:	00006140 	call	10000614 <ucvector_resize>
1000081c:	1000021e 	bne	r2,zero,10000828 <ucvector_push_back+0x40>
10000820:	0005883a 	mov	r2,zero
10000824:	00000906 	br	1000084c <ucvector_push_back+0x64>
  p->data[p->size - 1] = c;
10000828:	e0bffe17 	ldw	r2,-8(fp)
1000082c:	10c00017 	ldw	r3,0(r2)
10000830:	e0bffe17 	ldw	r2,-8(fp)
10000834:	10800117 	ldw	r2,4(r2)
10000838:	10bfffc4 	addi	r2,r2,-1
1000083c:	1885883a 	add	r2,r3,r2
10000840:	e0ffff03 	ldbu	r3,-4(fp)
10000844:	10c00005 	stb	r3,0(r2)
  return 1;
10000848:	00800044 	movi	r2,1
}
1000084c:	e037883a 	mov	sp,fp
10000850:	dfc00117 	ldw	ra,4(sp)
10000854:	df000017 	ldw	fp,0(sp)
10000858:	dec00204 	addi	sp,sp,8
1000085c:	f800283a 	ret

10000860 <string_resize>:

#ifdef LODEPNG_COMPILE_PNG
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
/*returns 1 if success, 0 if failure ==> nothing done*/
static unsigned string_resize(char** out, size_t size)
{
10000860:	defffb04 	addi	sp,sp,-20
10000864:	dfc00415 	stw	ra,16(sp)
10000868:	df000315 	stw	fp,12(sp)
1000086c:	df000304 	addi	fp,sp,12
10000870:	e13ffe15 	stw	r4,-8(fp)
10000874:	e17fff15 	stw	r5,-4(fp)
  char* data = (char*)lodepng_realloc(*out, size + 1);
10000878:	e0bffe17 	ldw	r2,-8(fp)
1000087c:	10c00017 	ldw	r3,0(r2)
10000880:	e0bfff17 	ldw	r2,-4(fp)
10000884:	10800044 	addi	r2,r2,1
10000888:	1809883a 	mov	r4,r3
1000088c:	100b883a 	mov	r5,r2
10000890:	00002240 	call	10000224 <lodepng_realloc>
10000894:	e0bffd15 	stw	r2,-12(fp)
  if(data)
10000898:	e0bffd17 	ldw	r2,-12(fp)
1000089c:	10000726 	beq	r2,zero,100008bc <string_resize+0x5c>
  {
    data[size] = 0; /*null termination char*/
100008a0:	e0fffd17 	ldw	r3,-12(fp)
100008a4:	e0bfff17 	ldw	r2,-4(fp)
100008a8:	1885883a 	add	r2,r3,r2
100008ac:	10000005 	stb	zero,0(r2)
    *out = data;
100008b0:	e0bffe17 	ldw	r2,-8(fp)
100008b4:	e0fffd17 	ldw	r3,-12(fp)
100008b8:	10c00015 	stw	r3,0(r2)
  }
  return data != 0;
100008bc:	e0bffd17 	ldw	r2,-12(fp)
100008c0:	1004c03a 	cmpne	r2,r2,zero
100008c4:	10803fcc 	andi	r2,r2,255
}
100008c8:	e037883a 	mov	sp,fp
100008cc:	dfc00117 	ldw	ra,4(sp)
100008d0:	df000017 	ldw	fp,0(sp)
100008d4:	dec00204 	addi	sp,sp,8
100008d8:	f800283a 	ret

100008dc <string_init>:

/*init a {char*, size_t} pair for use as string*/
static void string_init(char** out)
{
100008dc:	defffd04 	addi	sp,sp,-12
100008e0:	dfc00215 	stw	ra,8(sp)
100008e4:	df000115 	stw	fp,4(sp)
100008e8:	df000104 	addi	fp,sp,4
100008ec:	e13fff15 	stw	r4,-4(fp)
  *out = NULL;
100008f0:	e0bfff17 	ldw	r2,-4(fp)
100008f4:	10000015 	stw	zero,0(r2)
  string_resize(out, 0);
100008f8:	e13fff17 	ldw	r4,-4(fp)
100008fc:	000b883a 	mov	r5,zero
10000900:	00008600 	call	10000860 <string_resize>
}
10000904:	e037883a 	mov	sp,fp
10000908:	dfc00117 	ldw	ra,4(sp)
1000090c:	df000017 	ldw	fp,0(sp)
10000910:	dec00204 	addi	sp,sp,8
10000914:	f800283a 	ret

10000918 <string_cleanup>:

/*free the above pair again*/
static void string_cleanup(char** out)
{
10000918:	defffd04 	addi	sp,sp,-12
1000091c:	dfc00215 	stw	ra,8(sp)
10000920:	df000115 	stw	fp,4(sp)
10000924:	df000104 	addi	fp,sp,4
10000928:	e13fff15 	stw	r4,-4(fp)
  lodepng_free(*out);
1000092c:	e0bfff17 	ldw	r2,-4(fp)
10000930:	10800017 	ldw	r2,0(r2)
10000934:	1009883a 	mov	r4,r2
10000938:	000025c0 	call	1000025c <lodepng_free>
  *out = NULL;
1000093c:	e0bfff17 	ldw	r2,-4(fp)
10000940:	10000015 	stw	zero,0(r2)
}
10000944:	e037883a 	mov	sp,fp
10000948:	dfc00117 	ldw	ra,4(sp)
1000094c:	df000017 	ldw	fp,0(sp)
10000950:	dec00204 	addi	sp,sp,8
10000954:	f800283a 	ret

10000958 <string_set>:

static void string_set(char** out, const char* in)
{
10000958:	defffa04 	addi	sp,sp,-24
1000095c:	dfc00515 	stw	ra,20(sp)
10000960:	df000415 	stw	fp,16(sp)
10000964:	df000404 	addi	fp,sp,16
10000968:	e13ffe15 	stw	r4,-8(fp)
1000096c:	e17fff15 	stw	r5,-4(fp)
  size_t insize = strlen(in), i;
10000970:	e13fff17 	ldw	r4,-4(fp)
10000974:	001841c0 	call	1001841c <strlen>
10000978:	e0bffd15 	stw	r2,-12(fp)
  if(string_resize(out, insize))
1000097c:	e13ffe17 	ldw	r4,-8(fp)
10000980:	e17ffd17 	ldw	r5,-12(fp)
10000984:	00008600 	call	10000860 <string_resize>
10000988:	10001126 	beq	r2,zero,100009d0 <string_set+0x78>
  {
    for(i = 0; i != insize; ++i)
1000098c:	e03ffc15 	stw	zero,-16(fp)
10000990:	00000c06 	br	100009c4 <string_set+0x6c>
    {
      (*out)[i] = in[i];
10000994:	e0bffe17 	ldw	r2,-8(fp)
10000998:	10c00017 	ldw	r3,0(r2)
1000099c:	e0bffc17 	ldw	r2,-16(fp)
100009a0:	1885883a 	add	r2,r3,r2
100009a4:	e13fff17 	ldw	r4,-4(fp)
100009a8:	e0fffc17 	ldw	r3,-16(fp)
100009ac:	20c7883a 	add	r3,r4,r3
100009b0:	18c00003 	ldbu	r3,0(r3)
100009b4:	10c00005 	stb	r3,0(r2)
static void string_set(char** out, const char* in)
{
  size_t insize = strlen(in), i;
  if(string_resize(out, insize))
  {
    for(i = 0; i != insize; ++i)
100009b8:	e0bffc17 	ldw	r2,-16(fp)
100009bc:	10800044 	addi	r2,r2,1
100009c0:	e0bffc15 	stw	r2,-16(fp)
100009c4:	e0fffc17 	ldw	r3,-16(fp)
100009c8:	e0bffd17 	ldw	r2,-12(fp)
100009cc:	18bff11e 	bne	r3,r2,10000994 <__alt_data_end+0xf8000994>
    {
      (*out)[i] = in[i];
    }
  }
}
100009d0:	e037883a 	mov	sp,fp
100009d4:	dfc00117 	ldw	ra,4(sp)
100009d8:	df000017 	ldw	fp,0(sp)
100009dc:	dec00204 	addi	sp,sp,8
100009e0:	f800283a 	ret

100009e4 <lodepng_read32bitInt>:
#endif /*LODEPNG_COMPILE_PNG*/

/* ////////////////////////////////////////////////////////////////////////// */

unsigned lodepng_read32bitInt(const unsigned char* buffer)
{
100009e4:	defffe04 	addi	sp,sp,-8
100009e8:	df000115 	stw	fp,4(sp)
100009ec:	df000104 	addi	fp,sp,4
100009f0:	e13fff15 	stw	r4,-4(fp)
  return (unsigned)((buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3]);
100009f4:	e0bfff17 	ldw	r2,-4(fp)
100009f8:	10800003 	ldbu	r2,0(r2)
100009fc:	10803fcc 	andi	r2,r2,255
10000a00:	1006963a 	slli	r3,r2,24
10000a04:	e0bfff17 	ldw	r2,-4(fp)
10000a08:	10800044 	addi	r2,r2,1
10000a0c:	10800003 	ldbu	r2,0(r2)
10000a10:	10803fcc 	andi	r2,r2,255
10000a14:	1004943a 	slli	r2,r2,16
10000a18:	1886b03a 	or	r3,r3,r2
10000a1c:	e0bfff17 	ldw	r2,-4(fp)
10000a20:	10800084 	addi	r2,r2,2
10000a24:	10800003 	ldbu	r2,0(r2)
10000a28:	10803fcc 	andi	r2,r2,255
10000a2c:	1004923a 	slli	r2,r2,8
10000a30:	1886b03a 	or	r3,r3,r2
10000a34:	e0bfff17 	ldw	r2,-4(fp)
10000a38:	108000c4 	addi	r2,r2,3
10000a3c:	10800003 	ldbu	r2,0(r2)
10000a40:	10803fcc 	andi	r2,r2,255
10000a44:	1884b03a 	or	r2,r3,r2
}
10000a48:	e037883a 	mov	sp,fp
10000a4c:	df000017 	ldw	fp,0(sp)
10000a50:	dec00104 	addi	sp,sp,4
10000a54:	f800283a 	ret

10000a58 <lodepng_set32bitInt>:

#if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
/*buffer must have at least 4 allocated bytes available*/
static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
{
10000a58:	defffd04 	addi	sp,sp,-12
10000a5c:	df000215 	stw	fp,8(sp)
10000a60:	df000204 	addi	fp,sp,8
10000a64:	e13ffe15 	stw	r4,-8(fp)
10000a68:	e17fff15 	stw	r5,-4(fp)
  buffer[0] = (unsigned char)((value >> 24) & 0xff);
10000a6c:	e0bfff17 	ldw	r2,-4(fp)
10000a70:	1004d63a 	srli	r2,r2,24
10000a74:	1007883a 	mov	r3,r2
10000a78:	e0bffe17 	ldw	r2,-8(fp)
10000a7c:	10c00005 	stb	r3,0(r2)
  buffer[1] = (unsigned char)((value >> 16) & 0xff);
10000a80:	e0bffe17 	ldw	r2,-8(fp)
10000a84:	10800044 	addi	r2,r2,1
10000a88:	e0ffff17 	ldw	r3,-4(fp)
10000a8c:	1806d43a 	srli	r3,r3,16
10000a90:	10c00005 	stb	r3,0(r2)
  buffer[2] = (unsigned char)((value >>  8) & 0xff);
10000a94:	e0bffe17 	ldw	r2,-8(fp)
10000a98:	10800084 	addi	r2,r2,2
10000a9c:	e0ffff17 	ldw	r3,-4(fp)
10000aa0:	1806d23a 	srli	r3,r3,8
10000aa4:	10c00005 	stb	r3,0(r2)
  buffer[3] = (unsigned char)((value      ) & 0xff);
10000aa8:	e0bffe17 	ldw	r2,-8(fp)
10000aac:	108000c4 	addi	r2,r2,3
10000ab0:	e0ffff17 	ldw	r3,-4(fp)
10000ab4:	10c00005 	stb	r3,0(r2)
}
10000ab8:	e037883a 	mov	sp,fp
10000abc:	df000017 	ldw	fp,0(sp)
10000ac0:	dec00104 	addi	sp,sp,4
10000ac4:	f800283a 	ret

10000ac8 <lodepng_add32bitInt>:
#endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/

#ifdef LODEPNG_COMPILE_ENCODER
static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
{
10000ac8:	defffc04 	addi	sp,sp,-16
10000acc:	dfc00315 	stw	ra,12(sp)
10000ad0:	df000215 	stw	fp,8(sp)
10000ad4:	df000204 	addi	fp,sp,8
10000ad8:	e13ffe15 	stw	r4,-8(fp)
10000adc:	e17fff15 	stw	r5,-4(fp)
  ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
10000ae0:	e0bffe17 	ldw	r2,-8(fp)
10000ae4:	10800117 	ldw	r2,4(r2)
10000ae8:	10800104 	addi	r2,r2,4
10000aec:	e13ffe17 	ldw	r4,-8(fp)
10000af0:	100b883a 	mov	r5,r2
10000af4:	00006140 	call	10000614 <ucvector_resize>
  lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
10000af8:	e0bffe17 	ldw	r2,-8(fp)
10000afc:	10c00017 	ldw	r3,0(r2)
10000b00:	e0bffe17 	ldw	r2,-8(fp)
10000b04:	10800117 	ldw	r2,4(r2)
10000b08:	10bfff04 	addi	r2,r2,-4
10000b0c:	1885883a 	add	r2,r3,r2
10000b10:	1009883a 	mov	r4,r2
10000b14:	e17fff17 	ldw	r5,-4(fp)
10000b18:	0000a580 	call	10000a58 <lodepng_set32bitInt>
}
10000b1c:	e037883a 	mov	sp,fp
10000b20:	dfc00117 	ldw	ra,4(sp)
10000b24:	df000017 	ldw	fp,0(sp)
10000b28:	dec00204 	addi	sp,sp,8
10000b2c:	f800283a 	ret

10000b30 <lodepng_load_file>:
/* ////////////////////////////////////////////////////////////////////////// */

#ifdef LODEPNG_COMPILE_DISK

unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
{
10000b30:	defff904 	addi	sp,sp,-28
10000b34:	dfc00615 	stw	ra,24(sp)
10000b38:	df000515 	stw	fp,20(sp)
10000b3c:	df000504 	addi	fp,sp,20
10000b40:	e13ffd15 	stw	r4,-12(fp)
10000b44:	e17ffe15 	stw	r5,-8(fp)
10000b48:	e1bfff15 	stw	r6,-4(fp)
  FILE* file;
  long size;

  /*provide some proper output values if error will happen*/
  *out = 0;
10000b4c:	e0bffd17 	ldw	r2,-12(fp)
10000b50:	10000015 	stw	zero,0(r2)
  *outsize = 0;
10000b54:	e0bffe17 	ldw	r2,-8(fp)
10000b58:	10000015 	stw	zero,0(r2)

  file = fopen(filename, "rb");
10000b5c:	e13fff17 	ldw	r4,-4(fp)
10000b60:	014400b4 	movhi	r5,4098
10000b64:	2949d504 	addi	r5,r5,10068
10000b68:	00154740 	call	10015474 <fopen>
10000b6c:	e0bffb15 	stw	r2,-20(fp)
  if(!file) return 78;
10000b70:	e0bffb17 	ldw	r2,-20(fp)
10000b74:	1000021e 	bne	r2,zero,10000b80 <lodepng_load_file+0x50>
10000b78:	00801384 	movi	r2,78
10000b7c:	00002906 	br	10000c24 <lodepng_load_file+0xf4>

  /*get filesize:*/
  fseek(file , 0 , SEEK_END);
10000b80:	e13ffb17 	ldw	r4,-20(fp)
10000b84:	000b883a 	mov	r5,zero
10000b88:	01800084 	movi	r6,2
10000b8c:	0015f8c0 	call	10015f8c <fseek>
  size = ftell(file);
10000b90:	e13ffb17 	ldw	r4,-20(fp)
10000b94:	00161280 	call	10016128 <ftell>
10000b98:	e0bffc15 	stw	r2,-16(fp)
  rewind(file);
10000b9c:	e13ffb17 	ldw	r4,-20(fp)
10000ba0:	00181c00 	call	100181c0 <rewind>

  /*read contents of the file into the vector*/
  *outsize = 0;
10000ba4:	e0bffe17 	ldw	r2,-8(fp)
10000ba8:	10000015 	stw	zero,0(r2)
  *out = (unsigned char*)lodepng_malloc((size_t)size);
10000bac:	e0bffc17 	ldw	r2,-16(fp)
10000bb0:	1009883a 	mov	r4,r2
10000bb4:	00001f40 	call	100001f4 <lodepng_malloc>
10000bb8:	e0fffd17 	ldw	r3,-12(fp)
10000bbc:	18800015 	stw	r2,0(r3)
  if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
10000bc0:	e0bffc17 	ldw	r2,-16(fp)
10000bc4:	10000d26 	beq	r2,zero,10000bfc <lodepng_load_file+0xcc>
10000bc8:	e0bffd17 	ldw	r2,-12(fp)
10000bcc:	10800017 	ldw	r2,0(r2)
10000bd0:	10000a26 	beq	r2,zero,10000bfc <lodepng_load_file+0xcc>
10000bd4:	e0bffd17 	ldw	r2,-12(fp)
10000bd8:	10c00017 	ldw	r3,0(r2)
10000bdc:	e0bffc17 	ldw	r2,-16(fp)
10000be0:	1809883a 	mov	r4,r3
10000be4:	01400044 	movi	r5,1
10000be8:	100d883a 	mov	r6,r2
10000bec:	e1fffb17 	ldw	r7,-20(fp)
10000bf0:	00156cc0 	call	100156cc <fread>
10000bf4:	e0fffe17 	ldw	r3,-8(fp)
10000bf8:	18800015 	stw	r2,0(r3)

  fclose(file);
10000bfc:	e13ffb17 	ldw	r4,-20(fp)
10000c00:	0014ccc0 	call	10014ccc <fclose>
  if(!(*out) && size) return 83; /*the above malloc failed*/
10000c04:	e0bffd17 	ldw	r2,-12(fp)
10000c08:	10800017 	ldw	r2,0(r2)
10000c0c:	1000041e 	bne	r2,zero,10000c20 <lodepng_load_file+0xf0>
10000c10:	e0bffc17 	ldw	r2,-16(fp)
10000c14:	10000226 	beq	r2,zero,10000c20 <lodepng_load_file+0xf0>
10000c18:	008014c4 	movi	r2,83
10000c1c:	00000106 	br	10000c24 <lodepng_load_file+0xf4>
  return 0;
10000c20:	0005883a 	mov	r2,zero
}
10000c24:	e037883a 	mov	sp,fp
10000c28:	dfc00117 	ldw	ra,4(sp)
10000c2c:	df000017 	ldw	fp,0(sp)
10000c30:	dec00204 	addi	sp,sp,8
10000c34:	f800283a 	ret

10000c38 <lodepng_save_file>:

/*write given buffer to the file, overwriting the file, it doesn't append to it.*/
unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
{
10000c38:	defffa04 	addi	sp,sp,-24
10000c3c:	dfc00515 	stw	ra,20(sp)
10000c40:	df000415 	stw	fp,16(sp)
10000c44:	df000404 	addi	fp,sp,16
10000c48:	e13ffd15 	stw	r4,-12(fp)
10000c4c:	e17ffe15 	stw	r5,-8(fp)
10000c50:	e1bfff15 	stw	r6,-4(fp)
  FILE* file;
  file = fopen(filename, "wb" );
10000c54:	e13fff17 	ldw	r4,-4(fp)
10000c58:	014400b4 	movhi	r5,4098
10000c5c:	2949d604 	addi	r5,r5,10072
10000c60:	00154740 	call	10015474 <fopen>
10000c64:	e0bffc15 	stw	r2,-16(fp)
  if(!file) return 79;
10000c68:	e0bffc17 	ldw	r2,-16(fp)
10000c6c:	1000021e 	bne	r2,zero,10000c78 <lodepng_save_file+0x40>
10000c70:	008013c4 	movi	r2,79
10000c74:	00000806 	br	10000c98 <lodepng_save_file+0x60>
  fwrite((char*)buffer , 1 , buffersize, file);
10000c78:	e13ffd17 	ldw	r4,-12(fp)
10000c7c:	01400044 	movi	r5,1
10000c80:	e1bffe17 	ldw	r6,-8(fp)
10000c84:	e1fffc17 	ldw	r7,-16(fp)
10000c88:	001634c0 	call	1001634c <fwrite>
  fclose(file);
10000c8c:	e13ffc17 	ldw	r4,-16(fp)
10000c90:	0014ccc0 	call	10014ccc <fclose>
  return 0;
10000c94:	0005883a 	mov	r2,zero
}
10000c98:	e037883a 	mov	sp,fp
10000c9c:	dfc00117 	ldw	ra,4(sp)
10000ca0:	df000017 	ldw	fp,0(sp)
10000ca4:	dec00204 	addi	sp,sp,8
10000ca8:	f800283a 	ret

10000cac <addBitsToStream>:
  (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));\
  ++(*bitpointer);\
}

static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
{
10000cac:	defff904 	addi	sp,sp,-28
10000cb0:	dfc00615 	stw	ra,24(sp)
10000cb4:	df000515 	stw	fp,20(sp)
10000cb8:	df000504 	addi	fp,sp,20
10000cbc:	e13ffc15 	stw	r4,-16(fp)
10000cc0:	e17ffd15 	stw	r5,-12(fp)
10000cc4:	e1bffe15 	stw	r6,-8(fp)
10000cc8:	e1ffff15 	stw	r7,-4(fp)
  size_t i;
  for(i = 0; i != nbits; ++i) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
10000ccc:	e03ffb15 	stw	zero,-20(fp)
10000cd0:	00002806 	br	10000d74 <addBitsToStream+0xc8>
10000cd4:	e0bffc17 	ldw	r2,-16(fp)
10000cd8:	10800017 	ldw	r2,0(r2)
10000cdc:	108001cc 	andi	r2,r2,7
10000ce0:	1000031e 	bne	r2,zero,10000cf0 <addBitsToStream+0x44>
10000ce4:	e13ffd17 	ldw	r4,-12(fp)
10000ce8:	000b883a 	mov	r5,zero
10000cec:	00007e80 	call	100007e8 <ucvector_push_back>
10000cf0:	e0bffd17 	ldw	r2,-12(fp)
10000cf4:	10c00017 	ldw	r3,0(r2)
10000cf8:	e0bffd17 	ldw	r2,-12(fp)
10000cfc:	10800117 	ldw	r2,4(r2)
10000d00:	10bfffc4 	addi	r2,r2,-1
10000d04:	1885883a 	add	r2,r3,r2
10000d08:	e0fffd17 	ldw	r3,-12(fp)
10000d0c:	19000017 	ldw	r4,0(r3)
10000d10:	e0fffd17 	ldw	r3,-12(fp)
10000d14:	18c00117 	ldw	r3,4(r3)
10000d18:	18ffffc4 	addi	r3,r3,-1
10000d1c:	20c7883a 	add	r3,r4,r3
10000d20:	18c00003 	ldbu	r3,0(r3)
10000d24:	1809883a 	mov	r4,r3
10000d28:	e0fffb17 	ldw	r3,-20(fp)
10000d2c:	e17ffe17 	ldw	r5,-8(fp)
10000d30:	28c6d83a 	srl	r3,r5,r3
10000d34:	18c03fcc 	andi	r3,r3,255
10000d38:	1940004c 	andi	r5,r3,1
10000d3c:	e0fffc17 	ldw	r3,-16(fp)
10000d40:	18c00017 	ldw	r3,0(r3)
10000d44:	18c001cc 	andi	r3,r3,7
10000d48:	28c6983a 	sll	r3,r5,r3
10000d4c:	20c6b03a 	or	r3,r4,r3
10000d50:	10c00005 	stb	r3,0(r2)
10000d54:	e0bffc17 	ldw	r2,-16(fp)
10000d58:	10800017 	ldw	r2,0(r2)
10000d5c:	10c00044 	addi	r3,r2,1
10000d60:	e0bffc17 	ldw	r2,-16(fp)
10000d64:	10c00015 	stw	r3,0(r2)
10000d68:	e0bffb17 	ldw	r2,-20(fp)
10000d6c:	10800044 	addi	r2,r2,1
10000d70:	e0bffb15 	stw	r2,-20(fp)
10000d74:	e0fffb17 	ldw	r3,-20(fp)
10000d78:	e0bfff17 	ldw	r2,-4(fp)
10000d7c:	18bfd51e 	bne	r3,r2,10000cd4 <__alt_data_end+0xf8000cd4>
}
10000d80:	e037883a 	mov	sp,fp
10000d84:	dfc00117 	ldw	ra,4(sp)
10000d88:	df000017 	ldw	fp,0(sp)
10000d8c:	dec00204 	addi	sp,sp,8
10000d90:	f800283a 	ret

10000d94 <addBitsToStreamReversed>:

static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
{
10000d94:	defff904 	addi	sp,sp,-28
10000d98:	dfc00615 	stw	ra,24(sp)
10000d9c:	df000515 	stw	fp,20(sp)
10000da0:	df000504 	addi	fp,sp,20
10000da4:	e13ffc15 	stw	r4,-16(fp)
10000da8:	e17ffd15 	stw	r5,-12(fp)
10000dac:	e1bffe15 	stw	r6,-8(fp)
10000db0:	e1ffff15 	stw	r7,-4(fp)
  size_t i;
  for(i = 0; i != nbits; ++i) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
10000db4:	e03ffb15 	stw	zero,-20(fp)
10000db8:	00002b06 	br	10000e68 <addBitsToStreamReversed+0xd4>
10000dbc:	e0bffc17 	ldw	r2,-16(fp)
10000dc0:	10800017 	ldw	r2,0(r2)
10000dc4:	108001cc 	andi	r2,r2,7
10000dc8:	1000031e 	bne	r2,zero,10000dd8 <addBitsToStreamReversed+0x44>
10000dcc:	e13ffd17 	ldw	r4,-12(fp)
10000dd0:	000b883a 	mov	r5,zero
10000dd4:	00007e80 	call	100007e8 <ucvector_push_back>
10000dd8:	e0bffd17 	ldw	r2,-12(fp)
10000ddc:	10c00017 	ldw	r3,0(r2)
10000de0:	e0bffd17 	ldw	r2,-12(fp)
10000de4:	10800117 	ldw	r2,4(r2)
10000de8:	10bfffc4 	addi	r2,r2,-1
10000dec:	1885883a 	add	r2,r3,r2
10000df0:	e0fffd17 	ldw	r3,-12(fp)
10000df4:	19000017 	ldw	r4,0(r3)
10000df8:	e0fffd17 	ldw	r3,-12(fp)
10000dfc:	18c00117 	ldw	r3,4(r3)
10000e00:	18ffffc4 	addi	r3,r3,-1
10000e04:	20c7883a 	add	r3,r4,r3
10000e08:	18c00003 	ldbu	r3,0(r3)
10000e0c:	1809883a 	mov	r4,r3
10000e10:	e17fff17 	ldw	r5,-4(fp)
10000e14:	e0fffb17 	ldw	r3,-20(fp)
10000e18:	28c7c83a 	sub	r3,r5,r3
10000e1c:	18ffffc4 	addi	r3,r3,-1
10000e20:	e17ffe17 	ldw	r5,-8(fp)
10000e24:	28c6d83a 	srl	r3,r5,r3
10000e28:	18c03fcc 	andi	r3,r3,255
10000e2c:	1940004c 	andi	r5,r3,1
10000e30:	e0fffc17 	ldw	r3,-16(fp)
10000e34:	18c00017 	ldw	r3,0(r3)
10000e38:	18c001cc 	andi	r3,r3,7
10000e3c:	28c6983a 	sll	r3,r5,r3
10000e40:	20c6b03a 	or	r3,r4,r3
10000e44:	10c00005 	stb	r3,0(r2)
10000e48:	e0bffc17 	ldw	r2,-16(fp)
10000e4c:	10800017 	ldw	r2,0(r2)
10000e50:	10c00044 	addi	r3,r2,1
10000e54:	e0bffc17 	ldw	r2,-16(fp)
10000e58:	10c00015 	stw	r3,0(r2)
10000e5c:	e0bffb17 	ldw	r2,-20(fp)
10000e60:	10800044 	addi	r2,r2,1
10000e64:	e0bffb15 	stw	r2,-20(fp)
10000e68:	e0fffb17 	ldw	r3,-20(fp)
10000e6c:	e0bfff17 	ldw	r2,-4(fp)
10000e70:	18bfd21e 	bne	r3,r2,10000dbc <__alt_data_end+0xf8000dbc>
}
10000e74:	e037883a 	mov	sp,fp
10000e78:	dfc00117 	ldw	ra,4(sp)
10000e7c:	df000017 	ldw	fp,0(sp)
10000e80:	dec00204 	addi	sp,sp,8
10000e84:	f800283a 	ret

10000e88 <readBitFromStream>:
#ifdef LODEPNG_COMPILE_DECODER

#define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)

static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
{
10000e88:	defffc04 	addi	sp,sp,-16
10000e8c:	df000315 	stw	fp,12(sp)
10000e90:	df000304 	addi	fp,sp,12
10000e94:	e13ffe15 	stw	r4,-8(fp)
10000e98:	e17fff15 	stw	r5,-4(fp)
  unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
10000e9c:	e0bffe17 	ldw	r2,-8(fp)
10000ea0:	10800017 	ldw	r2,0(r2)
10000ea4:	1004d0fa 	srli	r2,r2,3
10000ea8:	e0ffff17 	ldw	r3,-4(fp)
10000eac:	1885883a 	add	r2,r3,r2
10000eb0:	10800003 	ldbu	r2,0(r2)
10000eb4:	10c03fcc 	andi	r3,r2,255
10000eb8:	e0bffe17 	ldw	r2,-8(fp)
10000ebc:	10800017 	ldw	r2,0(r2)
10000ec0:	108001cc 	andi	r2,r2,7
10000ec4:	1885d83a 	sra	r2,r3,r2
10000ec8:	1080004c 	andi	r2,r2,1
10000ecc:	e0bffd05 	stb	r2,-12(fp)
  ++(*bitpointer);
10000ed0:	e0bffe17 	ldw	r2,-8(fp)
10000ed4:	10800017 	ldw	r2,0(r2)
10000ed8:	10c00044 	addi	r3,r2,1
10000edc:	e0bffe17 	ldw	r2,-8(fp)
10000ee0:	10c00015 	stw	r3,0(r2)
  return result;
10000ee4:	e0bffd03 	ldbu	r2,-12(fp)
}
10000ee8:	e037883a 	mov	sp,fp
10000eec:	df000017 	ldw	fp,0(sp)
10000ef0:	dec00104 	addi	sp,sp,4
10000ef4:	f800283a 	ret

10000ef8 <readBitsFromStream>:

static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
{
10000ef8:	defffa04 	addi	sp,sp,-24
10000efc:	df000515 	stw	fp,20(sp)
10000f00:	df000504 	addi	fp,sp,20
10000f04:	e13ffd15 	stw	r4,-12(fp)
10000f08:	e17ffe15 	stw	r5,-8(fp)
10000f0c:	e1bfff15 	stw	r6,-4(fp)
  unsigned result = 0, i;
10000f10:	e03ffb15 	stw	zero,-20(fp)
  for(i = 0; i != nbits; ++i)
10000f14:	e03ffc15 	stw	zero,-16(fp)
10000f18:	00001906 	br	10000f80 <readBitsFromStream+0x88>
  {
    result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
10000f1c:	e0bffd17 	ldw	r2,-12(fp)
10000f20:	10800017 	ldw	r2,0(r2)
10000f24:	1004d0fa 	srli	r2,r2,3
10000f28:	e0fffe17 	ldw	r3,-8(fp)
10000f2c:	1885883a 	add	r2,r3,r2
10000f30:	10800003 	ldbu	r2,0(r2)
10000f34:	10c03fcc 	andi	r3,r2,255
10000f38:	e0bffd17 	ldw	r2,-12(fp)
10000f3c:	10800017 	ldw	r2,0(r2)
10000f40:	108001cc 	andi	r2,r2,7
10000f44:	1885d83a 	sra	r2,r3,r2
10000f48:	10c0004c 	andi	r3,r2,1
10000f4c:	e0bffc17 	ldw	r2,-16(fp)
10000f50:	1884983a 	sll	r2,r3,r2
10000f54:	e0fffb17 	ldw	r3,-20(fp)
10000f58:	1885883a 	add	r2,r3,r2
10000f5c:	e0bffb15 	stw	r2,-20(fp)
    ++(*bitpointer);
10000f60:	e0bffd17 	ldw	r2,-12(fp)
10000f64:	10800017 	ldw	r2,0(r2)
10000f68:	10c00044 	addi	r3,r2,1
10000f6c:	e0bffd17 	ldw	r2,-12(fp)
10000f70:	10c00015 	stw	r3,0(r2)
}

static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
{
  unsigned result = 0, i;
  for(i = 0; i != nbits; ++i)
10000f74:	e0bffc17 	ldw	r2,-16(fp)
10000f78:	10800044 	addi	r2,r2,1
10000f7c:	e0bffc15 	stw	r2,-16(fp)
10000f80:	e0fffc17 	ldw	r3,-16(fp)
10000f84:	e0bfff17 	ldw	r2,-4(fp)
10000f88:	18bfe41e 	bne	r3,r2,10000f1c <__alt_data_end+0xf8000f1c>
  {
    result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
    ++(*bitpointer);
  }
  return result;
10000f8c:	e0bffb17 	ldw	r2,-20(fp)
}
10000f90:	e037883a 	mov	sp,fp
10000f94:	df000017 	ldw	fp,0(sp)
10000f98:	dec00104 	addi	sp,sp,4
10000f9c:	f800283a 	ret

10000fa0 <HuffmanTree_init>:
  }
  std::cout << std::endl;
}*/

static void HuffmanTree_init(HuffmanTree* tree)
{
10000fa0:	defffe04 	addi	sp,sp,-8
10000fa4:	df000115 	stw	fp,4(sp)
10000fa8:	df000104 	addi	fp,sp,4
10000fac:	e13fff15 	stw	r4,-4(fp)
  tree->tree2d = 0;
10000fb0:	e0bfff17 	ldw	r2,-4(fp)
10000fb4:	10000015 	stw	zero,0(r2)
  tree->tree1d = 0;
10000fb8:	e0bfff17 	ldw	r2,-4(fp)
10000fbc:	10000115 	stw	zero,4(r2)
  tree->lengths = 0;
10000fc0:	e0bfff17 	ldw	r2,-4(fp)
10000fc4:	10000215 	stw	zero,8(r2)
}
10000fc8:	e037883a 	mov	sp,fp
10000fcc:	df000017 	ldw	fp,0(sp)
10000fd0:	dec00104 	addi	sp,sp,4
10000fd4:	f800283a 	ret

10000fd8 <HuffmanTree_cleanup>:

static void HuffmanTree_cleanup(HuffmanTree* tree)
{
10000fd8:	defffd04 	addi	sp,sp,-12
10000fdc:	dfc00215 	stw	ra,8(sp)
10000fe0:	df000115 	stw	fp,4(sp)
10000fe4:	df000104 	addi	fp,sp,4
10000fe8:	e13fff15 	stw	r4,-4(fp)
  lodepng_free(tree->tree2d);
10000fec:	e0bfff17 	ldw	r2,-4(fp)
10000ff0:	10800017 	ldw	r2,0(r2)
10000ff4:	1009883a 	mov	r4,r2
10000ff8:	000025c0 	call	1000025c <lodepng_free>
  lodepng_free(tree->tree1d);
10000ffc:	e0bfff17 	ldw	r2,-4(fp)
10001000:	10800117 	ldw	r2,4(r2)
10001004:	1009883a 	mov	r4,r2
10001008:	000025c0 	call	1000025c <lodepng_free>
  lodepng_free(tree->lengths);
1000100c:	e0bfff17 	ldw	r2,-4(fp)
10001010:	10800217 	ldw	r2,8(r2)
10001014:	1009883a 	mov	r4,r2
10001018:	000025c0 	call	1000025c <lodepng_free>
}
1000101c:	e037883a 	mov	sp,fp
10001020:	dfc00117 	ldw	ra,4(sp)
10001024:	df000017 	ldw	fp,0(sp)
10001028:	dec00204 	addi	sp,sp,8
1000102c:	f800283a 	ret

10001030 <HuffmanTree_make2DTree>:

/*the tree representation used by the decoder. return value is error*/
static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
{
10001030:	defff804 	addi	sp,sp,-32
10001034:	dfc00715 	stw	ra,28(sp)
10001038:	df000615 	stw	fp,24(sp)
1000103c:	df000604 	addi	fp,sp,24
10001040:	e13fff15 	stw	r4,-4(fp)
  unsigned nodefilled = 0; /*up to which node it is filled*/
10001044:	e03ffa15 	stw	zero,-24(fp)
  unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
10001048:	e03ffb15 	stw	zero,-20(fp)
  unsigned n, i;

  tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
1000104c:	e0bfff17 	ldw	r2,-4(fp)
10001050:	10800417 	ldw	r2,16(r2)
10001054:	100490fa 	slli	r2,r2,3
10001058:	1009883a 	mov	r4,r2
1000105c:	00001f40 	call	100001f4 <lodepng_malloc>
10001060:	e0ffff17 	ldw	r3,-4(fp)
10001064:	18800015 	stw	r2,0(r3)
  if(!tree->tree2d) return 83; /*alloc fail*/
10001068:	e0bfff17 	ldw	r2,-4(fp)
1000106c:	10800017 	ldw	r2,0(r2)
10001070:	1000021e 	bne	r2,zero,1000107c <HuffmanTree_make2DTree+0x4c>
10001074:	008014c4 	movi	r2,83
10001078:	0000aa06 	br	10001324 <HuffmanTree_make2DTree+0x2f4>
  A good huffman tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
  Here, the internal nodes are stored (what their 0 and 1 option point to).
  There is only memory for such good tree currently, if there are more nodes
  (due to too long length codes), error 55 will happen
  */
  for(n = 0; n < tree->numcodes * 2; ++n)
1000107c:	e03ffc15 	stw	zero,-16(fp)
10001080:	00000b06 	br	100010b0 <HuffmanTree_make2DTree+0x80>
  {
    tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
10001084:	e0bfff17 	ldw	r2,-4(fp)
10001088:	10c00017 	ldw	r3,0(r2)
1000108c:	e0bffc17 	ldw	r2,-16(fp)
10001090:	1085883a 	add	r2,r2,r2
10001094:	1085883a 	add	r2,r2,r2
10001098:	1885883a 	add	r2,r3,r2
1000109c:	00dfffc4 	movi	r3,32767
100010a0:	10c00015 	stw	r3,0(r2)
  A good huffman tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
  Here, the internal nodes are stored (what their 0 and 1 option point to).
  There is only memory for such good tree currently, if there are more nodes
  (due to too long length codes), error 55 will happen
  */
  for(n = 0; n < tree->numcodes * 2; ++n)
100010a4:	e0bffc17 	ldw	r2,-16(fp)
100010a8:	10800044 	addi	r2,r2,1
100010ac:	e0bffc15 	stw	r2,-16(fp)
100010b0:	e0bfff17 	ldw	r2,-4(fp)
100010b4:	10800417 	ldw	r2,16(r2)
100010b8:	1085883a 	add	r2,r2,r2
100010bc:	e0fffc17 	ldw	r3,-16(fp)
100010c0:	18bff036 	bltu	r3,r2,10001084 <__alt_data_end+0xf8001084>
  {
    tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
  }

  for(n = 0; n < tree->numcodes; ++n) /*the codes*/
100010c4:	e03ffc15 	stw	zero,-16(fp)
100010c8:	00007706 	br	100012a8 <HuffmanTree_make2DTree+0x278>
  {
    for(i = 0; i != tree->lengths[n]; ++i) /*the bits for this code*/
100010cc:	e03ffd15 	stw	zero,-12(fp)
100010d0:	00006906 	br	10001278 <HuffmanTree_make2DTree+0x248>
    {
      unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
100010d4:	e0bfff17 	ldw	r2,-4(fp)
100010d8:	10c00117 	ldw	r3,4(r2)
100010dc:	e0bffc17 	ldw	r2,-16(fp)
100010e0:	1085883a 	add	r2,r2,r2
100010e4:	1085883a 	add	r2,r2,r2
100010e8:	1885883a 	add	r2,r3,r2
100010ec:	10c00017 	ldw	r3,0(r2)
100010f0:	e0bfff17 	ldw	r2,-4(fp)
100010f4:	11000217 	ldw	r4,8(r2)
100010f8:	e0bffc17 	ldw	r2,-16(fp)
100010fc:	1085883a 	add	r2,r2,r2
10001100:	1085883a 	add	r2,r2,r2
10001104:	2085883a 	add	r2,r4,r2
10001108:	11000017 	ldw	r4,0(r2)
1000110c:	e0bffd17 	ldw	r2,-12(fp)
10001110:	2085c83a 	sub	r2,r4,r2
10001114:	10bfffc4 	addi	r2,r2,-1
10001118:	1884d83a 	srl	r2,r3,r2
1000111c:	1080004c 	andi	r2,r2,1
10001120:	e0bffe05 	stb	r2,-8(fp)
      /*oversubscribed, see comment in lodepng_error_text*/
      if(treepos > 2147483647 || treepos + 2 > tree->numcodes) return 55;
10001124:	e0bffb17 	ldw	r2,-20(fp)
10001128:	10000516 	blt	r2,zero,10001140 <HuffmanTree_make2DTree+0x110>
1000112c:	e0bffb17 	ldw	r2,-20(fp)
10001130:	10800084 	addi	r2,r2,2
10001134:	e0ffff17 	ldw	r3,-4(fp)
10001138:	18c00417 	ldw	r3,16(r3)
1000113c:	1880022e 	bgeu	r3,r2,10001148 <HuffmanTree_make2DTree+0x118>
10001140:	00800dc4 	movi	r2,55
10001144:	00007706 	br	10001324 <HuffmanTree_make2DTree+0x2f4>
      if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
10001148:	e0bfff17 	ldw	r2,-4(fp)
1000114c:	10c00017 	ldw	r3,0(r2)
10001150:	e0bffb17 	ldw	r2,-20(fp)
10001154:	1085883a 	add	r2,r2,r2
10001158:	1009883a 	mov	r4,r2
1000115c:	e0bffe03 	ldbu	r2,-8(fp)
10001160:	2085883a 	add	r2,r4,r2
10001164:	1085883a 	add	r2,r2,r2
10001168:	1085883a 	add	r2,r2,r2
1000116c:	1885883a 	add	r2,r3,r2
10001170:	10800017 	ldw	r2,0(r2)
10001174:	109fffd8 	cmpnei	r2,r2,32767
10001178:	10002d1e 	bne	r2,zero,10001230 <HuffmanTree_make2DTree+0x200>
      {
        if(i + 1 == tree->lengths[n]) /*last bit*/
1000117c:	e0bffd17 	ldw	r2,-12(fp)
10001180:	10c00044 	addi	r3,r2,1
10001184:	e0bfff17 	ldw	r2,-4(fp)
10001188:	11000217 	ldw	r4,8(r2)
1000118c:	e0bffc17 	ldw	r2,-16(fp)
10001190:	1085883a 	add	r2,r2,r2
10001194:	1085883a 	add	r2,r2,r2
10001198:	2085883a 	add	r2,r4,r2
1000119c:	10800017 	ldw	r2,0(r2)
100011a0:	18800e1e 	bne	r3,r2,100011dc <HuffmanTree_make2DTree+0x1ac>
        {
          tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
100011a4:	e0bfff17 	ldw	r2,-4(fp)
100011a8:	10c00017 	ldw	r3,0(r2)
100011ac:	e0bffb17 	ldw	r2,-20(fp)
100011b0:	1085883a 	add	r2,r2,r2
100011b4:	1009883a 	mov	r4,r2
100011b8:	e0bffe03 	ldbu	r2,-8(fp)
100011bc:	2085883a 	add	r2,r4,r2
100011c0:	1085883a 	add	r2,r2,r2
100011c4:	1085883a 	add	r2,r2,r2
100011c8:	1885883a 	add	r2,r3,r2
100011cc:	e0fffc17 	ldw	r3,-16(fp)
100011d0:	10c00015 	stw	r3,0(r2)
          treepos = 0;
100011d4:	e03ffb15 	stw	zero,-20(fp)
100011d8:	00002406 	br	1000126c <HuffmanTree_make2DTree+0x23c>
        }
        else
        {
          /*put address of the next step in here, first that address has to be found of course
          (it's just nodefilled + 1)...*/
          ++nodefilled;
100011dc:	e0bffa17 	ldw	r2,-24(fp)
100011e0:	10800044 	addi	r2,r2,1
100011e4:	e0bffa15 	stw	r2,-24(fp)
          /*addresses encoded with numcodes added to it*/
          tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
100011e8:	e0bfff17 	ldw	r2,-4(fp)
100011ec:	10c00017 	ldw	r3,0(r2)
100011f0:	e0bffb17 	ldw	r2,-20(fp)
100011f4:	1085883a 	add	r2,r2,r2
100011f8:	1009883a 	mov	r4,r2
100011fc:	e0bffe03 	ldbu	r2,-8(fp)
10001200:	2085883a 	add	r2,r4,r2
10001204:	1085883a 	add	r2,r2,r2
10001208:	1085883a 	add	r2,r2,r2
1000120c:	1885883a 	add	r2,r3,r2
10001210:	e0ffff17 	ldw	r3,-4(fp)
10001214:	19000417 	ldw	r4,16(r3)
10001218:	e0fffa17 	ldw	r3,-24(fp)
1000121c:	20c7883a 	add	r3,r4,r3
10001220:	10c00015 	stw	r3,0(r2)
          treepos = nodefilled;
10001224:	e0bffa17 	ldw	r2,-24(fp)
10001228:	e0bffb15 	stw	r2,-20(fp)
1000122c:	00000f06 	br	1000126c <HuffmanTree_make2DTree+0x23c>
        }
      }
      else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
10001230:	e0bfff17 	ldw	r2,-4(fp)
10001234:	10c00017 	ldw	r3,0(r2)
10001238:	e0bffb17 	ldw	r2,-20(fp)
1000123c:	1085883a 	add	r2,r2,r2
10001240:	1009883a 	mov	r4,r2
10001244:	e0bffe03 	ldbu	r2,-8(fp)
10001248:	2085883a 	add	r2,r4,r2
1000124c:	1085883a 	add	r2,r2,r2
10001250:	1085883a 	add	r2,r2,r2
10001254:	1885883a 	add	r2,r3,r2
10001258:	10c00017 	ldw	r3,0(r2)
1000125c:	e0bfff17 	ldw	r2,-4(fp)
10001260:	10800417 	ldw	r2,16(r2)
10001264:	1885c83a 	sub	r2,r3,r2
10001268:	e0bffb15 	stw	r2,-20(fp)
    tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
  }

  for(n = 0; n < tree->numcodes; ++n) /*the codes*/
  {
    for(i = 0; i != tree->lengths[n]; ++i) /*the bits for this code*/
1000126c:	e0bffd17 	ldw	r2,-12(fp)
10001270:	10800044 	addi	r2,r2,1
10001274:	e0bffd15 	stw	r2,-12(fp)
10001278:	e0bfff17 	ldw	r2,-4(fp)
1000127c:	10c00217 	ldw	r3,8(r2)
10001280:	e0bffc17 	ldw	r2,-16(fp)
10001284:	1085883a 	add	r2,r2,r2
10001288:	1085883a 	add	r2,r2,r2
1000128c:	1885883a 	add	r2,r3,r2
10001290:	10c00017 	ldw	r3,0(r2)
10001294:	e0bffd17 	ldw	r2,-12(fp)
10001298:	18bf8e1e 	bne	r3,r2,100010d4 <__alt_data_end+0xf80010d4>
  for(n = 0; n < tree->numcodes * 2; ++n)
  {
    tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
  }

  for(n = 0; n < tree->numcodes; ++n) /*the codes*/
1000129c:	e0bffc17 	ldw	r2,-16(fp)
100012a0:	10800044 	addi	r2,r2,1
100012a4:	e0bffc15 	stw	r2,-16(fp)
100012a8:	e0bfff17 	ldw	r2,-4(fp)
100012ac:	10800417 	ldw	r2,16(r2)
100012b0:	e0fffc17 	ldw	r3,-16(fp)
100012b4:	18bf8536 	bltu	r3,r2,100010cc <__alt_data_end+0xf80010cc>
      }
      else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
    }
  }

  for(n = 0; n < tree->numcodes * 2; ++n)
100012b8:	e03ffc15 	stw	zero,-16(fp)
100012bc:	00001306 	br	1000130c <HuffmanTree_make2DTree+0x2dc>
  {
    if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
100012c0:	e0bfff17 	ldw	r2,-4(fp)
100012c4:	10c00017 	ldw	r3,0(r2)
100012c8:	e0bffc17 	ldw	r2,-16(fp)
100012cc:	1085883a 	add	r2,r2,r2
100012d0:	1085883a 	add	r2,r2,r2
100012d4:	1885883a 	add	r2,r3,r2
100012d8:	10800017 	ldw	r2,0(r2)
100012dc:	109fffd8 	cmpnei	r2,r2,32767
100012e0:	1000071e 	bne	r2,zero,10001300 <HuffmanTree_make2DTree+0x2d0>
100012e4:	e0bfff17 	ldw	r2,-4(fp)
100012e8:	10c00017 	ldw	r3,0(r2)
100012ec:	e0bffc17 	ldw	r2,-16(fp)
100012f0:	1085883a 	add	r2,r2,r2
100012f4:	1085883a 	add	r2,r2,r2
100012f8:	1885883a 	add	r2,r3,r2
100012fc:	10000015 	stw	zero,0(r2)
      }
      else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
    }
  }

  for(n = 0; n < tree->numcodes * 2; ++n)
10001300:	e0bffc17 	ldw	r2,-16(fp)
10001304:	10800044 	addi	r2,r2,1
10001308:	e0bffc15 	stw	r2,-16(fp)
1000130c:	e0bfff17 	ldw	r2,-4(fp)
10001310:	10800417 	ldw	r2,16(r2)
10001314:	1085883a 	add	r2,r2,r2
10001318:	e0fffc17 	ldw	r3,-16(fp)
1000131c:	18bfe836 	bltu	r3,r2,100012c0 <__alt_data_end+0xf80012c0>
  {
    if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
  }

  return 0;
10001320:	0005883a 	mov	r2,zero
}
10001324:	e037883a 	mov	sp,fp
10001328:	dfc00117 	ldw	ra,4(sp)
1000132c:	df000017 	ldw	fp,0(sp)
10001330:	dec00204 	addi	sp,sp,8
10001334:	f800283a 	ret

10001338 <HuffmanTree_makeFromLengths2>:
Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
numcodes, lengths and maxbitlen must already be filled in correctly. return
value is error.
*/
static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
{
10001338:	defff404 	addi	sp,sp,-48
1000133c:	dfc00b15 	stw	ra,44(sp)
10001340:	df000a15 	stw	fp,40(sp)
10001344:	df000a04 	addi	fp,sp,40
10001348:	e13fff15 	stw	r4,-4(fp)
  uivector blcount;
  uivector nextcode;
  unsigned error = 0;
1000134c:	e03ff615 	stw	zero,-40(fp)
  unsigned bits, n;

  uivector_init(&blcount);
10001350:	e0bff904 	addi	r2,fp,-28
10001354:	1009883a 	mov	r4,r2
10001358:	000049c0 	call	1000049c <uivector_init>
  uivector_init(&nextcode);
1000135c:	e0bffc04 	addi	r2,fp,-16
10001360:	1009883a 	mov	r4,r2
10001364:	000049c0 	call	1000049c <uivector_init>

  tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
10001368:	e0bfff17 	ldw	r2,-4(fp)
1000136c:	10800417 	ldw	r2,16(r2)
10001370:	1085883a 	add	r2,r2,r2
10001374:	1085883a 	add	r2,r2,r2
10001378:	1009883a 	mov	r4,r2
1000137c:	00001f40 	call	100001f4 <lodepng_malloc>
10001380:	e0ffff17 	ldw	r3,-4(fp)
10001384:	18800115 	stw	r2,4(r3)
  if(!tree->tree1d) error = 83; /*alloc fail*/
10001388:	e0bfff17 	ldw	r2,-4(fp)
1000138c:	10800117 	ldw	r2,4(r2)
10001390:	1000021e 	bne	r2,zero,1000139c <HuffmanTree_makeFromLengths2+0x64>
10001394:	008014c4 	movi	r2,83
10001398:	e0bff615 	stw	r2,-40(fp)

  if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
1000139c:	e0bfff17 	ldw	r2,-4(fp)
100013a0:	10800317 	ldw	r2,12(r2)
100013a4:	10800044 	addi	r2,r2,1
100013a8:	e0fff904 	addi	r3,fp,-28
100013ac:	1809883a 	mov	r4,r3
100013b0:	100b883a 	mov	r5,r2
100013b4:	000d883a 	mov	r6,zero
100013b8:	00004000 	call	10000400 <uivector_resizev>
100013bc:	10000926 	beq	r2,zero,100013e4 <HuffmanTree_makeFromLengths2+0xac>
  || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
100013c0:	e0bfff17 	ldw	r2,-4(fp)
100013c4:	10800317 	ldw	r2,12(r2)
100013c8:	10800044 	addi	r2,r2,1
100013cc:	e0fffc04 	addi	r3,fp,-16
100013d0:	1809883a 	mov	r4,r3
100013d4:	100b883a 	mov	r5,r2
100013d8:	000d883a 	mov	r6,zero
100013dc:	00004000 	call	10000400 <uivector_resizev>
100013e0:	1000021e 	bne	r2,zero,100013ec <HuffmanTree_makeFromLengths2+0xb4>
    error = 83; /*alloc fail*/
100013e4:	008014c4 	movi	r2,83
100013e8:	e0bff615 	stw	r2,-40(fp)

  if(!error)
100013ec:	e0bff617 	ldw	r2,-40(fp)
100013f0:	10005d1e 	bne	r2,zero,10001568 <HuffmanTree_makeFromLengths2+0x230>
  {
    /*step 1: count number of instances of each code length*/
    for(bits = 0; bits != tree->numcodes; ++bits) ++blcount.data[tree->lengths[bits]];
100013f4:	e03ff715 	stw	zero,-36(fp)
100013f8:	00001106 	br	10001440 <HuffmanTree_makeFromLengths2+0x108>
100013fc:	e0fff917 	ldw	r3,-28(fp)
10001400:	e0bfff17 	ldw	r2,-4(fp)
10001404:	11000217 	ldw	r4,8(r2)
10001408:	e0bff717 	ldw	r2,-36(fp)
1000140c:	1085883a 	add	r2,r2,r2
10001410:	1085883a 	add	r2,r2,r2
10001414:	2085883a 	add	r2,r4,r2
10001418:	10800017 	ldw	r2,0(r2)
1000141c:	1085883a 	add	r2,r2,r2
10001420:	1085883a 	add	r2,r2,r2
10001424:	1885883a 	add	r2,r3,r2
10001428:	10c00017 	ldw	r3,0(r2)
1000142c:	18c00044 	addi	r3,r3,1
10001430:	10c00015 	stw	r3,0(r2)
10001434:	e0bff717 	ldw	r2,-36(fp)
10001438:	10800044 	addi	r2,r2,1
1000143c:	e0bff715 	stw	r2,-36(fp)
10001440:	e0bfff17 	ldw	r2,-4(fp)
10001444:	10c00417 	ldw	r3,16(r2)
10001448:	e0bff717 	ldw	r2,-36(fp)
1000144c:	18bfeb1e 	bne	r3,r2,100013fc <__alt_data_end+0xf80013fc>
    /*step 2: generate the nextcode values*/
    for(bits = 1; bits <= tree->maxbitlen; ++bits)
10001450:	00800044 	movi	r2,1
10001454:	e0bff715 	stw	r2,-36(fp)
10001458:	00001906 	br	100014c0 <HuffmanTree_makeFromLengths2+0x188>
    {
      nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
1000145c:	e0fffc17 	ldw	r3,-16(fp)
10001460:	e0bff717 	ldw	r2,-36(fp)
10001464:	1085883a 	add	r2,r2,r2
10001468:	1085883a 	add	r2,r2,r2
1000146c:	1887883a 	add	r3,r3,r2
10001470:	e13ffc17 	ldw	r4,-16(fp)
10001474:	e0bff717 	ldw	r2,-36(fp)
10001478:	10bfffc4 	addi	r2,r2,-1
1000147c:	1085883a 	add	r2,r2,r2
10001480:	1085883a 	add	r2,r2,r2
10001484:	2085883a 	add	r2,r4,r2
10001488:	11000017 	ldw	r4,0(r2)
1000148c:	e17ff917 	ldw	r5,-28(fp)
10001490:	e0bff717 	ldw	r2,-36(fp)
10001494:	10bfffc4 	addi	r2,r2,-1
10001498:	1085883a 	add	r2,r2,r2
1000149c:	1085883a 	add	r2,r2,r2
100014a0:	2885883a 	add	r2,r5,r2
100014a4:	10800017 	ldw	r2,0(r2)
100014a8:	2085883a 	add	r2,r4,r2
100014ac:	1085883a 	add	r2,r2,r2
100014b0:	18800015 	stw	r2,0(r3)
  if(!error)
  {
    /*step 1: count number of instances of each code length*/
    for(bits = 0; bits != tree->numcodes; ++bits) ++blcount.data[tree->lengths[bits]];
    /*step 2: generate the nextcode values*/
    for(bits = 1; bits <= tree->maxbitlen; ++bits)
100014b4:	e0bff717 	ldw	r2,-36(fp)
100014b8:	10800044 	addi	r2,r2,1
100014bc:	e0bff715 	stw	r2,-36(fp)
100014c0:	e0bfff17 	ldw	r2,-4(fp)
100014c4:	10c00317 	ldw	r3,12(r2)
100014c8:	e0bff717 	ldw	r2,-36(fp)
100014cc:	18bfe32e 	bgeu	r3,r2,1000145c <__alt_data_end+0xf800145c>
    {
      nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
    }
    /*step 3: generate all the codes*/
    for(n = 0; n != tree->numcodes; ++n)
100014d0:	e03ff815 	stw	zero,-32(fp)
100014d4:	00002006 	br	10001558 <HuffmanTree_makeFromLengths2+0x220>
    {
      if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
100014d8:	e0bfff17 	ldw	r2,-4(fp)
100014dc:	10c00217 	ldw	r3,8(r2)
100014e0:	e0bff817 	ldw	r2,-32(fp)
100014e4:	1085883a 	add	r2,r2,r2
100014e8:	1085883a 	add	r2,r2,r2
100014ec:	1885883a 	add	r2,r3,r2
100014f0:	10800017 	ldw	r2,0(r2)
100014f4:	10001526 	beq	r2,zero,1000154c <HuffmanTree_makeFromLengths2+0x214>
100014f8:	e0bfff17 	ldw	r2,-4(fp)
100014fc:	10c00117 	ldw	r3,4(r2)
10001500:	e0bff817 	ldw	r2,-32(fp)
10001504:	1085883a 	add	r2,r2,r2
10001508:	1085883a 	add	r2,r2,r2
1000150c:	1889883a 	add	r4,r3,r2
10001510:	e0fffc17 	ldw	r3,-16(fp)
10001514:	e0bfff17 	ldw	r2,-4(fp)
10001518:	11400217 	ldw	r5,8(r2)
1000151c:	e0bff817 	ldw	r2,-32(fp)
10001520:	1085883a 	add	r2,r2,r2
10001524:	1085883a 	add	r2,r2,r2
10001528:	2885883a 	add	r2,r5,r2
1000152c:	10800017 	ldw	r2,0(r2)
10001530:	1085883a 	add	r2,r2,r2
10001534:	1085883a 	add	r2,r2,r2
10001538:	1885883a 	add	r2,r3,r2
1000153c:	10c00017 	ldw	r3,0(r2)
10001540:	20c00015 	stw	r3,0(r4)
10001544:	18c00044 	addi	r3,r3,1
10001548:	10c00015 	stw	r3,0(r2)
    for(bits = 1; bits <= tree->maxbitlen; ++bits)
    {
      nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
    }
    /*step 3: generate all the codes*/
    for(n = 0; n != tree->numcodes; ++n)
1000154c:	e0bff817 	ldw	r2,-32(fp)
10001550:	10800044 	addi	r2,r2,1
10001554:	e0bff815 	stw	r2,-32(fp)
10001558:	e0bfff17 	ldw	r2,-4(fp)
1000155c:	10c00417 	ldw	r3,16(r2)
10001560:	e0bff817 	ldw	r2,-32(fp)
10001564:	18bfdc1e 	bne	r3,r2,100014d8 <__alt_data_end+0xf80014d8>
    {
      if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
    }
  }

  uivector_cleanup(&blcount);
10001568:	e0bff904 	addi	r2,fp,-28
1000156c:	1009883a 	mov	r4,r2
10001570:	000028c0 	call	1000028c <uivector_cleanup>
  uivector_cleanup(&nextcode);
10001574:	e0bffc04 	addi	r2,fp,-16
10001578:	1009883a 	mov	r4,r2
1000157c:	000028c0 	call	1000028c <uivector_cleanup>

  if(!error) return HuffmanTree_make2DTree(tree);
10001580:	e0bff617 	ldw	r2,-40(fp)
10001584:	1000031e 	bne	r2,zero,10001594 <HuffmanTree_makeFromLengths2+0x25c>
10001588:	e13fff17 	ldw	r4,-4(fp)
1000158c:	00010300 	call	10001030 <HuffmanTree_make2DTree>
10001590:	00000106 	br	10001598 <HuffmanTree_makeFromLengths2+0x260>
  else return error;
10001594:	e0bff617 	ldw	r2,-40(fp)
}
10001598:	e037883a 	mov	sp,fp
1000159c:	dfc00117 	ldw	ra,4(sp)
100015a0:	df000017 	ldw	fp,0(sp)
100015a4:	dec00204 	addi	sp,sp,8
100015a8:	f800283a 	ret

100015ac <HuffmanTree_makeFromLengths>:
by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
return value is error.
*/
static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
                                            size_t numcodes, unsigned maxbitlen)
{
100015ac:	defff904 	addi	sp,sp,-28
100015b0:	dfc00615 	stw	ra,24(sp)
100015b4:	df000515 	stw	fp,20(sp)
100015b8:	df000504 	addi	fp,sp,20
100015bc:	e13ffc15 	stw	r4,-16(fp)
100015c0:	e17ffd15 	stw	r5,-12(fp)
100015c4:	e1bffe15 	stw	r6,-8(fp)
100015c8:	e1ffff15 	stw	r7,-4(fp)
  unsigned i;
  tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
100015cc:	e0bffe17 	ldw	r2,-8(fp)
100015d0:	1085883a 	add	r2,r2,r2
100015d4:	1085883a 	add	r2,r2,r2
100015d8:	1009883a 	mov	r4,r2
100015dc:	00001f40 	call	100001f4 <lodepng_malloc>
100015e0:	e0fffc17 	ldw	r3,-16(fp)
100015e4:	18800215 	stw	r2,8(r3)
  if(!tree->lengths) return 83; /*alloc fail*/
100015e8:	e0bffc17 	ldw	r2,-16(fp)
100015ec:	10800217 	ldw	r2,8(r2)
100015f0:	1000021e 	bne	r2,zero,100015fc <HuffmanTree_makeFromLengths+0x50>
100015f4:	008014c4 	movi	r2,83
100015f8:	00001d06 	br	10001670 <HuffmanTree_makeFromLengths+0xc4>
  for(i = 0; i != numcodes; ++i) tree->lengths[i] = bitlen[i];
100015fc:	e03ffb15 	stw	zero,-20(fp)
10001600:	00001006 	br	10001644 <HuffmanTree_makeFromLengths+0x98>
10001604:	e0bffc17 	ldw	r2,-16(fp)
10001608:	10c00217 	ldw	r3,8(r2)
1000160c:	e0bffb17 	ldw	r2,-20(fp)
10001610:	1085883a 	add	r2,r2,r2
10001614:	1085883a 	add	r2,r2,r2
10001618:	1887883a 	add	r3,r3,r2
1000161c:	e0bffb17 	ldw	r2,-20(fp)
10001620:	1085883a 	add	r2,r2,r2
10001624:	1085883a 	add	r2,r2,r2
10001628:	e13ffd17 	ldw	r4,-12(fp)
1000162c:	2085883a 	add	r2,r4,r2
10001630:	10800017 	ldw	r2,0(r2)
10001634:	18800015 	stw	r2,0(r3)
10001638:	e0bffb17 	ldw	r2,-20(fp)
1000163c:	10800044 	addi	r2,r2,1
10001640:	e0bffb15 	stw	r2,-20(fp)
10001644:	e0fffb17 	ldw	r3,-20(fp)
10001648:	e0bffe17 	ldw	r2,-8(fp)
1000164c:	18bfed1e 	bne	r3,r2,10001604 <__alt_data_end+0xf8001604>
  tree->numcodes = (unsigned)numcodes; /*number of symbols*/
10001650:	e0bffc17 	ldw	r2,-16(fp)
10001654:	e0fffe17 	ldw	r3,-8(fp)
10001658:	10c00415 	stw	r3,16(r2)
  tree->maxbitlen = maxbitlen;
1000165c:	e0bffc17 	ldw	r2,-16(fp)
10001660:	e0ffff17 	ldw	r3,-4(fp)
10001664:	10c00315 	stw	r3,12(r2)
  return HuffmanTree_makeFromLengths2(tree);
10001668:	e13ffc17 	ldw	r4,-16(fp)
1000166c:	00013380 	call	10001338 <HuffmanTree_makeFromLengths2>
}
10001670:	e037883a 	mov	sp,fp
10001674:	dfc00117 	ldw	ra,4(sp)
10001678:	df000017 	ldw	fp,0(sp)
1000167c:	dec00204 	addi	sp,sp,8
10001680:	f800283a 	ret

10001684 <bpmnode_create>:
  BPMNode** chains1;
} BPMLists;

/*creates a new chain node with the given parameters, from the memory in the lists */
static BPMNode* bpmnode_create(BPMLists* lists, int weight, unsigned index, BPMNode* tail)
{
10001684:	defff804 	addi	sp,sp,-32
10001688:	df000715 	stw	fp,28(sp)
1000168c:	df000704 	addi	fp,sp,28
10001690:	e13ffc15 	stw	r4,-16(fp)
10001694:	e17ffd15 	stw	r5,-12(fp)
10001698:	e1bffe15 	stw	r6,-8(fp)
1000169c:	e1ffff15 	stw	r7,-4(fp)
  unsigned i;
  BPMNode* result;

  /*memory full, so garbage collect*/
  if(lists->nextfree >= lists->numfree)
100016a0:	e0bffc17 	ldw	r2,-16(fp)
100016a4:	10c00317 	ldw	r3,12(r2)
100016a8:	e0bffc17 	ldw	r2,-16(fp)
100016ac:	10800217 	ldw	r2,8(r2)
100016b0:	18805e36 	bltu	r3,r2,1000182c <bpmnode_create+0x1a8>
  {
    /*mark only those that are in use*/
    for(i = 0; i != lists->memsize; ++i) lists->memory[i].in_use = 0;
100016b4:	e03ff915 	stw	zero,-28(fp)
100016b8:	00000906 	br	100016e0 <bpmnode_create+0x5c>
100016bc:	e0bffc17 	ldw	r2,-16(fp)
100016c0:	10c00117 	ldw	r3,4(r2)
100016c4:	e0bff917 	ldw	r2,-28(fp)
100016c8:	1004913a 	slli	r2,r2,4
100016cc:	1885883a 	add	r2,r3,r2
100016d0:	10000315 	stw	zero,12(r2)
100016d4:	e0bff917 	ldw	r2,-28(fp)
100016d8:	10800044 	addi	r2,r2,1
100016dc:	e0bff915 	stw	r2,-28(fp)
100016e0:	e0bffc17 	ldw	r2,-16(fp)
100016e4:	10c00017 	ldw	r3,0(r2)
100016e8:	e0bff917 	ldw	r2,-28(fp)
100016ec:	18bff31e 	bne	r3,r2,100016bc <__alt_data_end+0xf80016bc>
    for(i = 0; i != lists->listsize; ++i)
100016f0:	e03ff915 	stw	zero,-28(fp)
100016f4:	00002506 	br	1000178c <bpmnode_create+0x108>
    {
      BPMNode* node;
      for(node = lists->chains0[i]; node != 0; node = node->tail) node->in_use = 1;
100016f8:	e0bffc17 	ldw	r2,-16(fp)
100016fc:	10c00617 	ldw	r3,24(r2)
10001700:	e0bff917 	ldw	r2,-28(fp)
10001704:	1085883a 	add	r2,r2,r2
10001708:	1085883a 	add	r2,r2,r2
1000170c:	1885883a 	add	r2,r3,r2
10001710:	10800017 	ldw	r2,0(r2)
10001714:	e0bffa15 	stw	r2,-24(fp)
10001718:	00000606 	br	10001734 <bpmnode_create+0xb0>
1000171c:	e0bffa17 	ldw	r2,-24(fp)
10001720:	00c00044 	movi	r3,1
10001724:	10c00315 	stw	r3,12(r2)
10001728:	e0bffa17 	ldw	r2,-24(fp)
1000172c:	10800217 	ldw	r2,8(r2)
10001730:	e0bffa15 	stw	r2,-24(fp)
10001734:	e0bffa17 	ldw	r2,-24(fp)
10001738:	103ff81e 	bne	r2,zero,1000171c <__alt_data_end+0xf800171c>
      for(node = lists->chains1[i]; node != 0; node = node->tail) node->in_use = 1;
1000173c:	e0bffc17 	ldw	r2,-16(fp)
10001740:	10c00717 	ldw	r3,28(r2)
10001744:	e0bff917 	ldw	r2,-28(fp)
10001748:	1085883a 	add	r2,r2,r2
1000174c:	1085883a 	add	r2,r2,r2
10001750:	1885883a 	add	r2,r3,r2
10001754:	10800017 	ldw	r2,0(r2)
10001758:	e0bffa15 	stw	r2,-24(fp)
1000175c:	00000606 	br	10001778 <bpmnode_create+0xf4>
10001760:	e0bffa17 	ldw	r2,-24(fp)
10001764:	00c00044 	movi	r3,1
10001768:	10c00315 	stw	r3,12(r2)
1000176c:	e0bffa17 	ldw	r2,-24(fp)
10001770:	10800217 	ldw	r2,8(r2)
10001774:	e0bffa15 	stw	r2,-24(fp)
10001778:	e0bffa17 	ldw	r2,-24(fp)
1000177c:	103ff81e 	bne	r2,zero,10001760 <__alt_data_end+0xf8001760>
  /*memory full, so garbage collect*/
  if(lists->nextfree >= lists->numfree)
  {
    /*mark only those that are in use*/
    for(i = 0; i != lists->memsize; ++i) lists->memory[i].in_use = 0;
    for(i = 0; i != lists->listsize; ++i)
10001780:	e0bff917 	ldw	r2,-28(fp)
10001784:	10800044 	addi	r2,r2,1
10001788:	e0bff915 	stw	r2,-28(fp)
1000178c:	e0bffc17 	ldw	r2,-16(fp)
10001790:	10c00517 	ldw	r3,20(r2)
10001794:	e0bff917 	ldw	r2,-28(fp)
10001798:	18bfd71e 	bne	r3,r2,100016f8 <__alt_data_end+0xf80016f8>
      BPMNode* node;
      for(node = lists->chains0[i]; node != 0; node = node->tail) node->in_use = 1;
      for(node = lists->chains1[i]; node != 0; node = node->tail) node->in_use = 1;
    }
    /*collect those that are free*/
    lists->numfree = 0;
1000179c:	e0bffc17 	ldw	r2,-16(fp)
100017a0:	10000215 	stw	zero,8(r2)
    for(i = 0; i != lists->memsize; ++i)
100017a4:	e03ff915 	stw	zero,-28(fp)
100017a8:	00001a06 	br	10001814 <bpmnode_create+0x190>
    {
      if(!lists->memory[i].in_use) lists->freelist[lists->numfree++] = &lists->memory[i];
100017ac:	e0bffc17 	ldw	r2,-16(fp)
100017b0:	10c00117 	ldw	r3,4(r2)
100017b4:	e0bff917 	ldw	r2,-28(fp)
100017b8:	1004913a 	slli	r2,r2,4
100017bc:	1885883a 	add	r2,r3,r2
100017c0:	10800317 	ldw	r2,12(r2)
100017c4:	1000101e 	bne	r2,zero,10001808 <bpmnode_create+0x184>
100017c8:	e0bffc17 	ldw	r2,-16(fp)
100017cc:	11000417 	ldw	r4,16(r2)
100017d0:	e0bffc17 	ldw	r2,-16(fp)
100017d4:	10800217 	ldw	r2,8(r2)
100017d8:	1087883a 	add	r3,r2,r2
100017dc:	18c7883a 	add	r3,r3,r3
100017e0:	20c7883a 	add	r3,r4,r3
100017e4:	e13ffc17 	ldw	r4,-16(fp)
100017e8:	21400117 	ldw	r5,4(r4)
100017ec:	e13ff917 	ldw	r4,-28(fp)
100017f0:	2008913a 	slli	r4,r4,4
100017f4:	2909883a 	add	r4,r5,r4
100017f8:	19000015 	stw	r4,0(r3)
100017fc:	10c00044 	addi	r3,r2,1
10001800:	e0bffc17 	ldw	r2,-16(fp)
10001804:	10c00215 	stw	r3,8(r2)
      for(node = lists->chains0[i]; node != 0; node = node->tail) node->in_use = 1;
      for(node = lists->chains1[i]; node != 0; node = node->tail) node->in_use = 1;
    }
    /*collect those that are free*/
    lists->numfree = 0;
    for(i = 0; i != lists->memsize; ++i)
10001808:	e0bff917 	ldw	r2,-28(fp)
1000180c:	10800044 	addi	r2,r2,1
10001810:	e0bff915 	stw	r2,-28(fp)
10001814:	e0bffc17 	ldw	r2,-16(fp)
10001818:	10c00017 	ldw	r3,0(r2)
1000181c:	e0bff917 	ldw	r2,-28(fp)
10001820:	18bfe21e 	bne	r3,r2,100017ac <__alt_data_end+0xf80017ac>
    {
      if(!lists->memory[i].in_use) lists->freelist[lists->numfree++] = &lists->memory[i];
    }
    lists->nextfree = 0;
10001824:	e0bffc17 	ldw	r2,-16(fp)
10001828:	10000315 	stw	zero,12(r2)
  }

  result = lists->freelist[lists->nextfree++];
1000182c:	e0bffc17 	ldw	r2,-16(fp)
10001830:	11000417 	ldw	r4,16(r2)
10001834:	e0bffc17 	ldw	r2,-16(fp)
10001838:	10800317 	ldw	r2,12(r2)
1000183c:	1087883a 	add	r3,r2,r2
10001840:	18c7883a 	add	r3,r3,r3
10001844:	20c7883a 	add	r3,r4,r3
10001848:	18c00017 	ldw	r3,0(r3)
1000184c:	e0fffb15 	stw	r3,-20(fp)
10001850:	10c00044 	addi	r3,r2,1
10001854:	e0bffc17 	ldw	r2,-16(fp)
10001858:	10c00315 	stw	r3,12(r2)
  result->weight = weight;
1000185c:	e0bffb17 	ldw	r2,-20(fp)
10001860:	e0fffd17 	ldw	r3,-12(fp)
10001864:	10c00015 	stw	r3,0(r2)
  result->index = index;
10001868:	e0bffb17 	ldw	r2,-20(fp)
1000186c:	e0fffe17 	ldw	r3,-8(fp)
10001870:	10c00115 	stw	r3,4(r2)
  result->tail = tail;
10001874:	e0bffb17 	ldw	r2,-20(fp)
10001878:	e0ffff17 	ldw	r3,-4(fp)
1000187c:	10c00215 	stw	r3,8(r2)
  return result;
10001880:	e0bffb17 	ldw	r2,-20(fp)
}
10001884:	e037883a 	mov	sp,fp
10001888:	df000017 	ldw	fp,0(sp)
1000188c:	dec00104 	addi	sp,sp,4
10001890:	f800283a 	ret

10001894 <bpmnode_compare>:

static int bpmnode_compare(const void* a, const void* b)
{
10001894:	defffb04 	addi	sp,sp,-20
10001898:	df000415 	stw	fp,16(sp)
1000189c:	df000404 	addi	fp,sp,16
100018a0:	e13ffe15 	stw	r4,-8(fp)
100018a4:	e17fff15 	stw	r5,-4(fp)
  int wa = ((const BPMNode*)a)->weight;
100018a8:	e0bffe17 	ldw	r2,-8(fp)
100018ac:	10800017 	ldw	r2,0(r2)
100018b0:	e0bffc15 	stw	r2,-16(fp)
  int wb = ((const BPMNode*)b)->weight;
100018b4:	e0bfff17 	ldw	r2,-4(fp)
100018b8:	10800017 	ldw	r2,0(r2)
100018bc:	e0bffd15 	stw	r2,-12(fp)
  if(wa < wb) return -1;
100018c0:	e0fffc17 	ldw	r3,-16(fp)
100018c4:	e0bffd17 	ldw	r2,-12(fp)
100018c8:	1880020e 	bge	r3,r2,100018d4 <bpmnode_compare+0x40>
100018cc:	00bfffc4 	movi	r2,-1
100018d0:	00000d06 	br	10001908 <bpmnode_compare+0x74>
  if(wa > wb) return 1;
100018d4:	e0bffc17 	ldw	r2,-16(fp)
100018d8:	e0fffd17 	ldw	r3,-12(fp)
100018dc:	1880020e 	bge	r3,r2,100018e8 <bpmnode_compare+0x54>
100018e0:	00800044 	movi	r2,1
100018e4:	00000806 	br	10001908 <bpmnode_compare+0x74>
  /*make the qsort a stable sort*/
  return ((const BPMNode*)a)->index < ((const BPMNode*)b)->index ? 1 : -1;
100018e8:	e0bffe17 	ldw	r2,-8(fp)
100018ec:	10c00117 	ldw	r3,4(r2)
100018f0:	e0bfff17 	ldw	r2,-4(fp)
100018f4:	10800117 	ldw	r2,4(r2)
100018f8:	1880022e 	bgeu	r3,r2,10001904 <bpmnode_compare+0x70>
100018fc:	00800044 	movi	r2,1
10001900:	00000106 	br	10001908 <bpmnode_compare+0x74>
10001904:	00bfffc4 	movi	r2,-1
}
10001908:	e037883a 	mov	sp,fp
1000190c:	df000017 	ldw	fp,0(sp)
10001910:	dec00104 	addi	sp,sp,4
10001914:	f800283a 	ret

10001918 <boundaryPM>:

/*Boundary Package Merge step, numpresent is the amount of leaves, and c is the current chain.*/
static void boundaryPM(BPMLists* lists, BPMNode* leaves, size_t numpresent, int c, int num)
{
10001918:	defff604 	addi	sp,sp,-40
1000191c:	dfc00915 	stw	ra,36(sp)
10001920:	df000815 	stw	fp,32(sp)
10001924:	dc000715 	stw	r16,28(sp)
10001928:	df000704 	addi	fp,sp,28
1000192c:	e13ffc15 	stw	r4,-16(fp)
10001930:	e17ffd15 	stw	r5,-12(fp)
10001934:	e1bffe15 	stw	r6,-8(fp)
10001938:	e1ffff15 	stw	r7,-4(fp)
  unsigned lastindex = lists->chains1[c]->index;
1000193c:	e0bffc17 	ldw	r2,-16(fp)
10001940:	10c00717 	ldw	r3,28(r2)
10001944:	e0bfff17 	ldw	r2,-4(fp)
10001948:	1085883a 	add	r2,r2,r2
1000194c:	1085883a 	add	r2,r2,r2
10001950:	1885883a 	add	r2,r3,r2
10001954:	10800017 	ldw	r2,0(r2)
10001958:	10800117 	ldw	r2,4(r2)
1000195c:	e0bffa15 	stw	r2,-24(fp)

  if(c == 0)
10001960:	e0bfff17 	ldw	r2,-4(fp)
10001964:	1000251e 	bne	r2,zero,100019fc <boundaryPM+0xe4>
  {
    if(lastindex >= numpresent) return;
10001968:	e0fffa17 	ldw	r3,-24(fp)
1000196c:	e0bffe17 	ldw	r2,-8(fp)
10001970:	1880962e 	bgeu	r3,r2,10001bcc <boundaryPM+0x2b4>
    lists->chains0[c] = lists->chains1[c];
10001974:	e0bffc17 	ldw	r2,-16(fp)
10001978:	10c00617 	ldw	r3,24(r2)
1000197c:	e0bfff17 	ldw	r2,-4(fp)
10001980:	1085883a 	add	r2,r2,r2
10001984:	1085883a 	add	r2,r2,r2
10001988:	1887883a 	add	r3,r3,r2
1000198c:	e0bffc17 	ldw	r2,-16(fp)
10001990:	11000717 	ldw	r4,28(r2)
10001994:	e0bfff17 	ldw	r2,-4(fp)
10001998:	1085883a 	add	r2,r2,r2
1000199c:	1085883a 	add	r2,r2,r2
100019a0:	2085883a 	add	r2,r4,r2
100019a4:	10800017 	ldw	r2,0(r2)
100019a8:	18800015 	stw	r2,0(r3)
    lists->chains1[c] = bpmnode_create(lists, leaves[lastindex].weight, lastindex + 1, 0);
100019ac:	e0bffc17 	ldw	r2,-16(fp)
100019b0:	10c00717 	ldw	r3,28(r2)
100019b4:	e0bfff17 	ldw	r2,-4(fp)
100019b8:	1085883a 	add	r2,r2,r2
100019bc:	1085883a 	add	r2,r2,r2
100019c0:	18a1883a 	add	r16,r3,r2
100019c4:	e0bffa17 	ldw	r2,-24(fp)
100019c8:	1004913a 	slli	r2,r2,4
100019cc:	e0fffd17 	ldw	r3,-12(fp)
100019d0:	1885883a 	add	r2,r3,r2
100019d4:	10c00017 	ldw	r3,0(r2)
100019d8:	e0bffa17 	ldw	r2,-24(fp)
100019dc:	10800044 	addi	r2,r2,1
100019e0:	e13ffc17 	ldw	r4,-16(fp)
100019e4:	180b883a 	mov	r5,r3
100019e8:	100d883a 	mov	r6,r2
100019ec:	000f883a 	mov	r7,zero
100019f0:	00016840 	call	10001684 <bpmnode_create>
100019f4:	80800015 	stw	r2,0(r16)
100019f8:	00007506 	br	10001bd0 <boundaryPM+0x2b8>
  }
  else
  {
    /*sum of the weights of the head nodes of the previous lookahead chains.*/
    int sum = lists->chains0[c - 1]->weight + lists->chains1[c - 1]->weight;
100019fc:	e0bffc17 	ldw	r2,-16(fp)
10001a00:	10c00617 	ldw	r3,24(r2)
10001a04:	e0bfff17 	ldw	r2,-4(fp)
10001a08:	10bfffc4 	addi	r2,r2,-1
10001a0c:	1085883a 	add	r2,r2,r2
10001a10:	1085883a 	add	r2,r2,r2
10001a14:	1885883a 	add	r2,r3,r2
10001a18:	10800017 	ldw	r2,0(r2)
10001a1c:	10c00017 	ldw	r3,0(r2)
10001a20:	e0bffc17 	ldw	r2,-16(fp)
10001a24:	11000717 	ldw	r4,28(r2)
10001a28:	e0bfff17 	ldw	r2,-4(fp)
10001a2c:	10bfffc4 	addi	r2,r2,-1
10001a30:	1085883a 	add	r2,r2,r2
10001a34:	1085883a 	add	r2,r2,r2
10001a38:	2085883a 	add	r2,r4,r2
10001a3c:	10800017 	ldw	r2,0(r2)
10001a40:	10800017 	ldw	r2,0(r2)
10001a44:	1885883a 	add	r2,r3,r2
10001a48:	e0bffb15 	stw	r2,-20(fp)
    lists->chains0[c] = lists->chains1[c];
10001a4c:	e0bffc17 	ldw	r2,-16(fp)
10001a50:	10c00617 	ldw	r3,24(r2)
10001a54:	e0bfff17 	ldw	r2,-4(fp)
10001a58:	1085883a 	add	r2,r2,r2
10001a5c:	1085883a 	add	r2,r2,r2
10001a60:	1887883a 	add	r3,r3,r2
10001a64:	e0bffc17 	ldw	r2,-16(fp)
10001a68:	11000717 	ldw	r4,28(r2)
10001a6c:	e0bfff17 	ldw	r2,-4(fp)
10001a70:	1085883a 	add	r2,r2,r2
10001a74:	1085883a 	add	r2,r2,r2
10001a78:	2085883a 	add	r2,r4,r2
10001a7c:	10800017 	ldw	r2,0(r2)
10001a80:	18800015 	stw	r2,0(r3)
    if(lastindex < numpresent && sum > leaves[lastindex].weight)
10001a84:	e0fffa17 	ldw	r3,-24(fp)
10001a88:	e0bffe17 	ldw	r2,-8(fp)
10001a8c:	1880222e 	bgeu	r3,r2,10001b18 <boundaryPM+0x200>
10001a90:	e0bffa17 	ldw	r2,-24(fp)
10001a94:	1004913a 	slli	r2,r2,4
10001a98:	e0fffd17 	ldw	r3,-12(fp)
10001a9c:	1885883a 	add	r2,r3,r2
10001aa0:	10c00017 	ldw	r3,0(r2)
10001aa4:	e0bffb17 	ldw	r2,-20(fp)
10001aa8:	18801b0e 	bge	r3,r2,10001b18 <boundaryPM+0x200>
    {
      lists->chains1[c] = bpmnode_create(lists, leaves[lastindex].weight, lastindex + 1, lists->chains1[c]->tail);
10001aac:	e0bffc17 	ldw	r2,-16(fp)
10001ab0:	10c00717 	ldw	r3,28(r2)
10001ab4:	e0bfff17 	ldw	r2,-4(fp)
10001ab8:	1085883a 	add	r2,r2,r2
10001abc:	1085883a 	add	r2,r2,r2
10001ac0:	18a1883a 	add	r16,r3,r2
10001ac4:	e0bffa17 	ldw	r2,-24(fp)
10001ac8:	1004913a 	slli	r2,r2,4
10001acc:	e0fffd17 	ldw	r3,-12(fp)
10001ad0:	1885883a 	add	r2,r3,r2
10001ad4:	11400017 	ldw	r5,0(r2)
10001ad8:	e0bffa17 	ldw	r2,-24(fp)
10001adc:	10c00044 	addi	r3,r2,1
10001ae0:	e0bffc17 	ldw	r2,-16(fp)
10001ae4:	11000717 	ldw	r4,28(r2)
10001ae8:	e0bfff17 	ldw	r2,-4(fp)
10001aec:	1085883a 	add	r2,r2,r2
10001af0:	1085883a 	add	r2,r2,r2
10001af4:	2085883a 	add	r2,r4,r2
10001af8:	10800017 	ldw	r2,0(r2)
10001afc:	10800217 	ldw	r2,8(r2)
10001b00:	e13ffc17 	ldw	r4,-16(fp)
10001b04:	180d883a 	mov	r6,r3
10001b08:	100f883a 	mov	r7,r2
10001b0c:	00016840 	call	10001684 <bpmnode_create>
10001b10:	80800015 	stw	r2,0(r16)
      return;
10001b14:	00002e06 	br	10001bd0 <boundaryPM+0x2b8>
    }
    lists->chains1[c] = bpmnode_create(lists, sum, lastindex, lists->chains1[c - 1]);
10001b18:	e0bffc17 	ldw	r2,-16(fp)
10001b1c:	10c00717 	ldw	r3,28(r2)
10001b20:	e0bfff17 	ldw	r2,-4(fp)
10001b24:	1085883a 	add	r2,r2,r2
10001b28:	1085883a 	add	r2,r2,r2
10001b2c:	18a1883a 	add	r16,r3,r2
10001b30:	e0bffc17 	ldw	r2,-16(fp)
10001b34:	10c00717 	ldw	r3,28(r2)
10001b38:	e0bfff17 	ldw	r2,-4(fp)
10001b3c:	10bfffc4 	addi	r2,r2,-1
10001b40:	1085883a 	add	r2,r2,r2
10001b44:	1085883a 	add	r2,r2,r2
10001b48:	1885883a 	add	r2,r3,r2
10001b4c:	10800017 	ldw	r2,0(r2)
10001b50:	e13ffc17 	ldw	r4,-16(fp)
10001b54:	e17ffb17 	ldw	r5,-20(fp)
10001b58:	e1bffa17 	ldw	r6,-24(fp)
10001b5c:	100f883a 	mov	r7,r2
10001b60:	00016840 	call	10001684 <bpmnode_create>
10001b64:	80800015 	stw	r2,0(r16)
    /*in the end we are only interested in the chain of the last list, so no
    need to recurse if we're at the last one (this gives measurable speedup)*/
    if(num + 1 < (int)(2 * numpresent - 2))
10001b68:	e0800317 	ldw	r2,12(fp)
10001b6c:	10c00044 	addi	r3,r2,1
10001b70:	e0bffe17 	ldw	r2,-8(fp)
10001b74:	1085883a 	add	r2,r2,r2
10001b78:	10bfff84 	addi	r2,r2,-2
10001b7c:	1880140e 	bge	r3,r2,10001bd0 <boundaryPM+0x2b8>
    {
      boundaryPM(lists, leaves, numpresent, c - 1, num);
10001b80:	e0bfff17 	ldw	r2,-4(fp)
10001b84:	10bfffc4 	addi	r2,r2,-1
10001b88:	e0c00317 	ldw	r3,12(fp)
10001b8c:	d8c00015 	stw	r3,0(sp)
10001b90:	e13ffc17 	ldw	r4,-16(fp)
10001b94:	e17ffd17 	ldw	r5,-12(fp)
10001b98:	e1bffe17 	ldw	r6,-8(fp)
10001b9c:	100f883a 	mov	r7,r2
10001ba0:	00019180 	call	10001918 <boundaryPM>
      boundaryPM(lists, leaves, numpresent, c - 1, num);
10001ba4:	e0bfff17 	ldw	r2,-4(fp)
10001ba8:	10bfffc4 	addi	r2,r2,-1
10001bac:	e0c00317 	ldw	r3,12(fp)
10001bb0:	d8c00015 	stw	r3,0(sp)
10001bb4:	e13ffc17 	ldw	r4,-16(fp)
10001bb8:	e17ffd17 	ldw	r5,-12(fp)
10001bbc:	e1bffe17 	ldw	r6,-8(fp)
10001bc0:	100f883a 	mov	r7,r2
10001bc4:	00019180 	call	10001918 <boundaryPM>
10001bc8:	00000106 	br	10001bd0 <boundaryPM+0x2b8>
{
  unsigned lastindex = lists->chains1[c]->index;

  if(c == 0)
  {
    if(lastindex >= numpresent) return;
10001bcc:	0001883a 	nop
    {
      boundaryPM(lists, leaves, numpresent, c - 1, num);
      boundaryPM(lists, leaves, numpresent, c - 1, num);
    }
  }
}
10001bd0:	e037883a 	mov	sp,fp
10001bd4:	dfc00217 	ldw	ra,8(sp)
10001bd8:	df000117 	ldw	fp,4(sp)
10001bdc:	dc000017 	ldw	r16,0(sp)
10001be0:	dec00304 	addi	sp,sp,12
10001be4:	f800283a 	ret

10001be8 <lodepng_huffman_code_lengths>:

unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
                                      size_t numcodes, unsigned maxbitlen)
{
10001be8:	deffec04 	addi	sp,sp,-80
10001bec:	dfc01315 	stw	ra,76(sp)
10001bf0:	df001215 	stw	fp,72(sp)
10001bf4:	df001204 	addi	fp,sp,72
10001bf8:	e13ffc15 	stw	r4,-16(fp)
10001bfc:	e17ffd15 	stw	r5,-12(fp)
10001c00:	e1bffe15 	stw	r6,-8(fp)
10001c04:	e1ffff15 	stw	r7,-4(fp)
  unsigned error = 0;
10001c08:	e03fef15 	stw	zero,-68(fp)
  unsigned i;
  size_t numpresent = 0; /*number of symbols with non-zero frequency*/
10001c0c:	e03ff115 	stw	zero,-60(fp)
  BPMNode* leaves; /*the symbols, only those with > 0 frequency*/

  if(numcodes == 0) return 80; /*error: a tree of 0 symbols is not supposed to be made*/
10001c10:	e0bffe17 	ldw	r2,-8(fp)
10001c14:	1000021e 	bne	r2,zero,10001c20 <lodepng_huffman_code_lengths+0x38>
10001c18:	00801404 	movi	r2,80
10001c1c:	00011706 	br	1000207c <lodepng_huffman_code_lengths+0x494>
  if((1u << maxbitlen) < numcodes) return 80; /*error: represent all symbols*/
10001c20:	e0bfff17 	ldw	r2,-4(fp)
10001c24:	00c00044 	movi	r3,1
10001c28:	1886983a 	sll	r3,r3,r2
10001c2c:	e0bffe17 	ldw	r2,-8(fp)
10001c30:	1880022e 	bgeu	r3,r2,10001c3c <lodepng_huffman_code_lengths+0x54>
10001c34:	00801404 	movi	r2,80
10001c38:	00011006 	br	1000207c <lodepng_huffman_code_lengths+0x494>

  leaves = (BPMNode*)lodepng_malloc(numcodes * sizeof(*leaves));
10001c3c:	e0bffe17 	ldw	r2,-8(fp)
10001c40:	1004913a 	slli	r2,r2,4
10001c44:	1009883a 	mov	r4,r2
10001c48:	00001f40 	call	100001f4 <lodepng_malloc>
10001c4c:	e0bff315 	stw	r2,-52(fp)
  if(!leaves) return 83; /*alloc fail*/
10001c50:	e0bff317 	ldw	r2,-52(fp)
10001c54:	1000021e 	bne	r2,zero,10001c60 <lodepng_huffman_code_lengths+0x78>
10001c58:	008014c4 	movi	r2,83
10001c5c:	00010706 	br	1000207c <lodepng_huffman_code_lengths+0x494>

  for(i = 0; i != numcodes; ++i)
10001c60:	e03ff015 	stw	zero,-64(fp)
10001c64:	00001e06 	br	10001ce0 <lodepng_huffman_code_lengths+0xf8>
  {
    if(frequencies[i] > 0)
10001c68:	e0bff017 	ldw	r2,-64(fp)
10001c6c:	1085883a 	add	r2,r2,r2
10001c70:	1085883a 	add	r2,r2,r2
10001c74:	e0fffd17 	ldw	r3,-12(fp)
10001c78:	1885883a 	add	r2,r3,r2
10001c7c:	10800017 	ldw	r2,0(r2)
10001c80:	10001426 	beq	r2,zero,10001cd4 <lodepng_huffman_code_lengths+0xec>
    {
      leaves[numpresent].weight = (int)frequencies[i];
10001c84:	e0bff117 	ldw	r2,-60(fp)
10001c88:	1004913a 	slli	r2,r2,4
10001c8c:	e0fff317 	ldw	r3,-52(fp)
10001c90:	1887883a 	add	r3,r3,r2
10001c94:	e0bff017 	ldw	r2,-64(fp)
10001c98:	1085883a 	add	r2,r2,r2
10001c9c:	1085883a 	add	r2,r2,r2
10001ca0:	e13ffd17 	ldw	r4,-12(fp)
10001ca4:	2085883a 	add	r2,r4,r2
10001ca8:	10800017 	ldw	r2,0(r2)
10001cac:	18800015 	stw	r2,0(r3)
      leaves[numpresent].index = i;
10001cb0:	e0bff117 	ldw	r2,-60(fp)
10001cb4:	1004913a 	slli	r2,r2,4
10001cb8:	e0fff317 	ldw	r3,-52(fp)
10001cbc:	1885883a 	add	r2,r3,r2
10001cc0:	e0fff017 	ldw	r3,-64(fp)
10001cc4:	10c00115 	stw	r3,4(r2)
      ++numpresent;
10001cc8:	e0bff117 	ldw	r2,-60(fp)
10001ccc:	10800044 	addi	r2,r2,1
10001cd0:	e0bff115 	stw	r2,-60(fp)
  if((1u << maxbitlen) < numcodes) return 80; /*error: represent all symbols*/

  leaves = (BPMNode*)lodepng_malloc(numcodes * sizeof(*leaves));
  if(!leaves) return 83; /*alloc fail*/

  for(i = 0; i != numcodes; ++i)
10001cd4:	e0bff017 	ldw	r2,-64(fp)
10001cd8:	10800044 	addi	r2,r2,1
10001cdc:	e0bff015 	stw	r2,-64(fp)
10001ce0:	e0fff017 	ldw	r3,-64(fp)
10001ce4:	e0bffe17 	ldw	r2,-8(fp)
10001ce8:	18bfdf1e 	bne	r3,r2,10001c68 <__alt_data_end+0xf8001c68>
      leaves[numpresent].index = i;
      ++numpresent;
    }
  }

  for(i = 0; i != numcodes; ++i) lengths[i] = 0;
10001cec:	e03ff015 	stw	zero,-64(fp)
10001cf0:	00000906 	br	10001d18 <lodepng_huffman_code_lengths+0x130>
10001cf4:	e0bff017 	ldw	r2,-64(fp)
10001cf8:	1085883a 	add	r2,r2,r2
10001cfc:	1085883a 	add	r2,r2,r2
10001d00:	e0fffc17 	ldw	r3,-16(fp)
10001d04:	1885883a 	add	r2,r3,r2
10001d08:	10000015 	stw	zero,0(r2)
10001d0c:	e0bff017 	ldw	r2,-64(fp)
10001d10:	10800044 	addi	r2,r2,1
10001d14:	e0bff015 	stw	r2,-64(fp)
10001d18:	e0fff017 	ldw	r3,-64(fp)
10001d1c:	e0bffe17 	ldw	r2,-8(fp)
10001d20:	18bff41e 	bne	r3,r2,10001cf4 <__alt_data_end+0xf8001cf4>
  /*ensure at least two present symbols. There should be at least one symbol
  according to RFC 1951 section 3.2.7. Some decoders incorrectly require two. To
  make these work as well ensure there are at least two symbols. The
  Package-Merge code below also doesn't work correctly if there's only one
  symbol, it'd give it the theoritical 0 bits but in practice zlib wants 1 bit*/
  if(numpresent == 0)
10001d24:	e0bff117 	ldw	r2,-60(fp)
10001d28:	1000081e 	bne	r2,zero,10001d4c <lodepng_huffman_code_lengths+0x164>
  {
    lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
10001d2c:	e0bffc17 	ldw	r2,-16(fp)
10001d30:	10800104 	addi	r2,r2,4
10001d34:	00c00044 	movi	r3,1
10001d38:	10c00015 	stw	r3,0(r2)
10001d3c:	10c00017 	ldw	r3,0(r2)
10001d40:	e0bffc17 	ldw	r2,-16(fp)
10001d44:	10c00015 	stw	r3,0(r2)
10001d48:	0000c906 	br	10002070 <lodepng_huffman_code_lengths+0x488>
  }
  else if(numpresent == 1)
10001d4c:	e0bff117 	ldw	r2,-60(fp)
10001d50:	10800058 	cmpnei	r2,r2,1
10001d54:	1000131e 	bne	r2,zero,10001da4 <lodepng_huffman_code_lengths+0x1bc>
  {
    lengths[leaves[0].index] = 1;
10001d58:	e0bff317 	ldw	r2,-52(fp)
10001d5c:	10800117 	ldw	r2,4(r2)
10001d60:	1085883a 	add	r2,r2,r2
10001d64:	1085883a 	add	r2,r2,r2
10001d68:	e0fffc17 	ldw	r3,-16(fp)
10001d6c:	1885883a 	add	r2,r3,r2
10001d70:	00c00044 	movi	r3,1
10001d74:	10c00015 	stw	r3,0(r2)
    lengths[leaves[0].index == 0 ? 1 : 0] = 1;
10001d78:	e0bff317 	ldw	r2,-52(fp)
10001d7c:	10800117 	ldw	r2,4(r2)
10001d80:	1000021e 	bne	r2,zero,10001d8c <lodepng_huffman_code_lengths+0x1a4>
10001d84:	00800104 	movi	r2,4
10001d88:	00000106 	br	10001d90 <lodepng_huffman_code_lengths+0x1a8>
10001d8c:	0005883a 	mov	r2,zero
10001d90:	e0fffc17 	ldw	r3,-16(fp)
10001d94:	1885883a 	add	r2,r3,r2
10001d98:	00c00044 	movi	r3,1
10001d9c:	10c00015 	stw	r3,0(r2)
10001da0:	0000b306 	br	10002070 <lodepng_huffman_code_lengths+0x488>
  else
  {
    BPMLists lists;
    BPMNode* node;

    qsort(leaves, numpresent, sizeof(BPMNode), bpmnode_compare);
10001da4:	e13ff317 	ldw	r4,-52(fp)
10001da8:	e17ff117 	ldw	r5,-60(fp)
10001dac:	01800404 	movi	r6,16
10001db0:	01c40034 	movhi	r7,4096
10001db4:	39c62504 	addi	r7,r7,6292
10001db8:	00171840 	call	10017184 <qsort>

    lists.listsize = maxbitlen;
10001dbc:	e0bfff17 	ldw	r2,-4(fp)
10001dc0:	e0bff915 	stw	r2,-28(fp)
    lists.memsize = 2 * maxbitlen * (maxbitlen + 1);
10001dc4:	e0bfff17 	ldw	r2,-4(fp)
10001dc8:	10800044 	addi	r2,r2,1
10001dcc:	1009883a 	mov	r4,r2
10001dd0:	e17fff17 	ldw	r5,-4(fp)
10001dd4:	00146fc0 	call	100146fc <__mulsi3>
10001dd8:	1085883a 	add	r2,r2,r2
10001ddc:	e0bff415 	stw	r2,-48(fp)
    lists.nextfree = 0;
10001de0:	e03ff715 	stw	zero,-36(fp)
    lists.numfree = lists.memsize;
10001de4:	e0bff417 	ldw	r2,-48(fp)
10001de8:	e0bff615 	stw	r2,-40(fp)
    lists.memory = (BPMNode*)lodepng_malloc(lists.memsize * sizeof(*lists.memory));
10001dec:	e0bff417 	ldw	r2,-48(fp)
10001df0:	1004913a 	slli	r2,r2,4
10001df4:	1009883a 	mov	r4,r2
10001df8:	00001f40 	call	100001f4 <lodepng_malloc>
10001dfc:	e0bff515 	stw	r2,-44(fp)
    lists.freelist = (BPMNode**)lodepng_malloc(lists.memsize * sizeof(BPMNode*));
10001e00:	e0bff417 	ldw	r2,-48(fp)
10001e04:	1085883a 	add	r2,r2,r2
10001e08:	1085883a 	add	r2,r2,r2
10001e0c:	1009883a 	mov	r4,r2
10001e10:	00001f40 	call	100001f4 <lodepng_malloc>
10001e14:	e0bff815 	stw	r2,-32(fp)
    lists.chains0 = (BPMNode**)lodepng_malloc(lists.listsize * sizeof(BPMNode*));
10001e18:	e0bff917 	ldw	r2,-28(fp)
10001e1c:	1085883a 	add	r2,r2,r2
10001e20:	1085883a 	add	r2,r2,r2
10001e24:	1009883a 	mov	r4,r2
10001e28:	00001f40 	call	100001f4 <lodepng_malloc>
10001e2c:	e0bffa15 	stw	r2,-24(fp)
    lists.chains1 = (BPMNode**)lodepng_malloc(lists.listsize * sizeof(BPMNode*));
10001e30:	e0bff917 	ldw	r2,-28(fp)
10001e34:	1085883a 	add	r2,r2,r2
10001e38:	1085883a 	add	r2,r2,r2
10001e3c:	1009883a 	mov	r4,r2
10001e40:	00001f40 	call	100001f4 <lodepng_malloc>
10001e44:	e0bffb15 	stw	r2,-20(fp)
    if(!lists.memory || !lists.freelist || !lists.chains0 || !lists.chains1) error = 83; /*alloc fail*/
10001e48:	e0bff517 	ldw	r2,-44(fp)
10001e4c:	10000626 	beq	r2,zero,10001e68 <lodepng_huffman_code_lengths+0x280>
10001e50:	e0bff817 	ldw	r2,-32(fp)
10001e54:	10000426 	beq	r2,zero,10001e68 <lodepng_huffman_code_lengths+0x280>
10001e58:	e0bffa17 	ldw	r2,-24(fp)
10001e5c:	10000226 	beq	r2,zero,10001e68 <lodepng_huffman_code_lengths+0x280>
10001e60:	e0bffb17 	ldw	r2,-20(fp)
10001e64:	1000021e 	bne	r2,zero,10001e70 <lodepng_huffman_code_lengths+0x288>
10001e68:	008014c4 	movi	r2,83
10001e6c:	e0bfef15 	stw	r2,-68(fp)

    if(!error)
10001e70:	e0bfef17 	ldw	r2,-68(fp)
10001e74:	1000721e 	bne	r2,zero,10002040 <lodepng_huffman_code_lengths+0x458>
    {
      for(i = 0; i != lists.memsize; ++i) lists.freelist[i] = &lists.memory[i];
10001e78:	e03ff015 	stw	zero,-64(fp)
10001e7c:	00000d06 	br	10001eb4 <lodepng_huffman_code_lengths+0x2cc>
10001e80:	e0fff817 	ldw	r3,-32(fp)
10001e84:	e0bff017 	ldw	r2,-64(fp)
10001e88:	1085883a 	add	r2,r2,r2
10001e8c:	1085883a 	add	r2,r2,r2
10001e90:	1885883a 	add	r2,r3,r2
10001e94:	e13ff517 	ldw	r4,-44(fp)
10001e98:	e0fff017 	ldw	r3,-64(fp)
10001e9c:	1806913a 	slli	r3,r3,4
10001ea0:	20c7883a 	add	r3,r4,r3
10001ea4:	10c00015 	stw	r3,0(r2)
10001ea8:	e0bff017 	ldw	r2,-64(fp)
10001eac:	10800044 	addi	r2,r2,1
10001eb0:	e0bff015 	stw	r2,-64(fp)
10001eb4:	e0fff417 	ldw	r3,-48(fp)
10001eb8:	e0bff017 	ldw	r2,-64(fp)
10001ebc:	18bff01e 	bne	r3,r2,10001e80 <__alt_data_end+0xf8001e80>

      bpmnode_create(&lists, leaves[0].weight, 1, 0);
10001ec0:	e0bff317 	ldw	r2,-52(fp)
10001ec4:	10800017 	ldw	r2,0(r2)
10001ec8:	e0fff404 	addi	r3,fp,-48
10001ecc:	1809883a 	mov	r4,r3
10001ed0:	100b883a 	mov	r5,r2
10001ed4:	01800044 	movi	r6,1
10001ed8:	000f883a 	mov	r7,zero
10001edc:	00016840 	call	10001684 <bpmnode_create>
      bpmnode_create(&lists, leaves[1].weight, 2, 0);
10001ee0:	e0bff317 	ldw	r2,-52(fp)
10001ee4:	10800404 	addi	r2,r2,16
10001ee8:	10800017 	ldw	r2,0(r2)
10001eec:	e0fff404 	addi	r3,fp,-48
10001ef0:	1809883a 	mov	r4,r3
10001ef4:	100b883a 	mov	r5,r2
10001ef8:	01800084 	movi	r6,2
10001efc:	000f883a 	mov	r7,zero
10001f00:	00016840 	call	10001684 <bpmnode_create>

      for(i = 0; i != lists.listsize; ++i)
10001f04:	e03ff015 	stw	zero,-64(fp)
10001f08:	00001206 	br	10001f54 <lodepng_huffman_code_lengths+0x36c>
      {
        lists.chains0[i] = &lists.memory[0];
10001f0c:	e0fffa17 	ldw	r3,-24(fp)
10001f10:	e0bff017 	ldw	r2,-64(fp)
10001f14:	1085883a 	add	r2,r2,r2
10001f18:	1085883a 	add	r2,r2,r2
10001f1c:	1885883a 	add	r2,r3,r2
10001f20:	e0fff517 	ldw	r3,-44(fp)
10001f24:	10c00015 	stw	r3,0(r2)
        lists.chains1[i] = &lists.memory[1];
10001f28:	e0fffb17 	ldw	r3,-20(fp)
10001f2c:	e0bff017 	ldw	r2,-64(fp)
10001f30:	1085883a 	add	r2,r2,r2
10001f34:	1085883a 	add	r2,r2,r2
10001f38:	1885883a 	add	r2,r3,r2
10001f3c:	e0fff517 	ldw	r3,-44(fp)
10001f40:	18c00404 	addi	r3,r3,16
10001f44:	10c00015 	stw	r3,0(r2)
      for(i = 0; i != lists.memsize; ++i) lists.freelist[i] = &lists.memory[i];

      bpmnode_create(&lists, leaves[0].weight, 1, 0);
      bpmnode_create(&lists, leaves[1].weight, 2, 0);

      for(i = 0; i != lists.listsize; ++i)
10001f48:	e0bff017 	ldw	r2,-64(fp)
10001f4c:	10800044 	addi	r2,r2,1
10001f50:	e0bff015 	stw	r2,-64(fp)
10001f54:	e0fff917 	ldw	r3,-28(fp)
10001f58:	e0bff017 	ldw	r2,-64(fp)
10001f5c:	18bfeb1e 	bne	r3,r2,10001f0c <__alt_data_end+0xf8001f0c>
        lists.chains0[i] = &lists.memory[0];
        lists.chains1[i] = &lists.memory[1];
      }

      /*each boundaryPM call adds one chain to the last list, and we need 2 * numpresent - 2 chains.*/
      for(i = 2; i != 2 * numpresent - 2; ++i) boundaryPM(&lists, leaves, numpresent, (int)maxbitlen - 1, (int)i);
10001f60:	00800084 	movi	r2,2
10001f64:	e0bff015 	stw	r2,-64(fp)
10001f68:	00000d06 	br	10001fa0 <lodepng_huffman_code_lengths+0x3b8>
10001f6c:	e0bfff17 	ldw	r2,-4(fp)
10001f70:	10bfffc4 	addi	r2,r2,-1
10001f74:	e13ff017 	ldw	r4,-64(fp)
10001f78:	e0fff404 	addi	r3,fp,-48
10001f7c:	d9000015 	stw	r4,0(sp)
10001f80:	1809883a 	mov	r4,r3
10001f84:	e17ff317 	ldw	r5,-52(fp)
10001f88:	e1bff117 	ldw	r6,-60(fp)
10001f8c:	100f883a 	mov	r7,r2
10001f90:	00019180 	call	10001918 <boundaryPM>
10001f94:	e0bff017 	ldw	r2,-64(fp)
10001f98:	10800044 	addi	r2,r2,1
10001f9c:	e0bff015 	stw	r2,-64(fp)
10001fa0:	e0bff117 	ldw	r2,-60(fp)
10001fa4:	1085883a 	add	r2,r2,r2
10001fa8:	10ffff84 	addi	r3,r2,-2
10001fac:	e0bff017 	ldw	r2,-64(fp)
10001fb0:	18bfee1e 	bne	r3,r2,10001f6c <__alt_data_end+0xf8001f6c>

      for(node = lists.chains1[maxbitlen - 1]; node; node = node->tail)
10001fb4:	e0fffb17 	ldw	r3,-20(fp)
10001fb8:	e0bfff17 	ldw	r2,-4(fp)
10001fbc:	10bfffc4 	addi	r2,r2,-1
10001fc0:	1085883a 	add	r2,r2,r2
10001fc4:	1085883a 	add	r2,r2,r2
10001fc8:	1885883a 	add	r2,r3,r2
10001fcc:	10800017 	ldw	r2,0(r2)
10001fd0:	e0bff215 	stw	r2,-56(fp)
10001fd4:	00001806 	br	10002038 <lodepng_huffman_code_lengths+0x450>
      {
        for(i = 0; i != node->index; ++i) ++lengths[leaves[i].index];
10001fd8:	e03ff015 	stw	zero,-64(fp)
10001fdc:	00000f06 	br	1000201c <lodepng_huffman_code_lengths+0x434>
10001fe0:	e0bff017 	ldw	r2,-64(fp)
10001fe4:	1004913a 	slli	r2,r2,4
10001fe8:	e0fff317 	ldw	r3,-52(fp)
10001fec:	1885883a 	add	r2,r3,r2
10001ff0:	10800117 	ldw	r2,4(r2)
10001ff4:	1085883a 	add	r2,r2,r2
10001ff8:	1085883a 	add	r2,r2,r2
10001ffc:	e0fffc17 	ldw	r3,-16(fp)
10002000:	1885883a 	add	r2,r3,r2
10002004:	10c00017 	ldw	r3,0(r2)
10002008:	18c00044 	addi	r3,r3,1
1000200c:	10c00015 	stw	r3,0(r2)
10002010:	e0bff017 	ldw	r2,-64(fp)
10002014:	10800044 	addi	r2,r2,1
10002018:	e0bff015 	stw	r2,-64(fp)
1000201c:	e0bff217 	ldw	r2,-56(fp)
10002020:	10c00117 	ldw	r3,4(r2)
10002024:	e0bff017 	ldw	r2,-64(fp)
10002028:	18bfed1e 	bne	r3,r2,10001fe0 <__alt_data_end+0xf8001fe0>
      }

      /*each boundaryPM call adds one chain to the last list, and we need 2 * numpresent - 2 chains.*/
      for(i = 2; i != 2 * numpresent - 2; ++i) boundaryPM(&lists, leaves, numpresent, (int)maxbitlen - 1, (int)i);

      for(node = lists.chains1[maxbitlen - 1]; node; node = node->tail)
1000202c:	e0bff217 	ldw	r2,-56(fp)
10002030:	10800217 	ldw	r2,8(r2)
10002034:	e0bff215 	stw	r2,-56(fp)
10002038:	e0bff217 	ldw	r2,-56(fp)
1000203c:	103fe61e 	bne	r2,zero,10001fd8 <__alt_data_end+0xf8001fd8>
      {
        for(i = 0; i != node->index; ++i) ++lengths[leaves[i].index];
      }
    }

    lodepng_free(lists.memory);
10002040:	e0bff517 	ldw	r2,-44(fp)
10002044:	1009883a 	mov	r4,r2
10002048:	000025c0 	call	1000025c <lodepng_free>
    lodepng_free(lists.freelist);
1000204c:	e0bff817 	ldw	r2,-32(fp)
10002050:	1009883a 	mov	r4,r2
10002054:	000025c0 	call	1000025c <lodepng_free>
    lodepng_free(lists.chains0);
10002058:	e0bffa17 	ldw	r2,-24(fp)
1000205c:	1009883a 	mov	r4,r2
10002060:	000025c0 	call	1000025c <lodepng_free>
    lodepng_free(lists.chains1);
10002064:	e0bffb17 	ldw	r2,-20(fp)
10002068:	1009883a 	mov	r4,r2
1000206c:	000025c0 	call	1000025c <lodepng_free>
  }

  lodepng_free(leaves);
10002070:	e13ff317 	ldw	r4,-52(fp)
10002074:	000025c0 	call	1000025c <lodepng_free>
  return error;
10002078:	e0bfef17 	ldw	r2,-68(fp)
}
1000207c:	e037883a 	mov	sp,fp
10002080:	dfc00117 	ldw	ra,4(sp)
10002084:	df000017 	ldw	fp,0(sp)
10002088:	dec00204 	addi	sp,sp,8
1000208c:	f800283a 	ret

10002090 <HuffmanTree_makeFromFrequencies>:

/*Create the Huffman tree given the symbol frequencies*/
static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
                                                size_t mincodes, size_t numcodes, unsigned maxbitlen)
{
10002090:	defff904 	addi	sp,sp,-28
10002094:	dfc00615 	stw	ra,24(sp)
10002098:	df000515 	stw	fp,20(sp)
1000209c:	df000504 	addi	fp,sp,20
100020a0:	e13ffc15 	stw	r4,-16(fp)
100020a4:	e17ffd15 	stw	r5,-12(fp)
100020a8:	e1bffe15 	stw	r6,-8(fp)
100020ac:	e1ffff15 	stw	r7,-4(fp)
  unsigned error = 0;
100020b0:	e03ffb15 	stw	zero,-20(fp)
  while(!frequencies[numcodes - 1] && numcodes > mincodes) --numcodes; /*trim zeroes*/
100020b4:	00000306 	br	100020c4 <HuffmanTree_makeFromFrequencies+0x34>
100020b8:	e0bfff17 	ldw	r2,-4(fp)
100020bc:	10bfffc4 	addi	r2,r2,-1
100020c0:	e0bfff15 	stw	r2,-4(fp)
100020c4:	e0bfff17 	ldw	r2,-4(fp)
100020c8:	10bfffc4 	addi	r2,r2,-1
100020cc:	1085883a 	add	r2,r2,r2
100020d0:	1085883a 	add	r2,r2,r2
100020d4:	e0fffd17 	ldw	r3,-12(fp)
100020d8:	1885883a 	add	r2,r3,r2
100020dc:	10800017 	ldw	r2,0(r2)
100020e0:	1000031e 	bne	r2,zero,100020f0 <HuffmanTree_makeFromFrequencies+0x60>
100020e4:	e0bfff17 	ldw	r2,-4(fp)
100020e8:	e0fffe17 	ldw	r3,-8(fp)
100020ec:	18bff236 	bltu	r3,r2,100020b8 <__alt_data_end+0xf80020b8>
  tree->maxbitlen = maxbitlen;
100020f0:	e0bffc17 	ldw	r2,-16(fp)
100020f4:	e0c00217 	ldw	r3,8(fp)
100020f8:	10c00315 	stw	r3,12(r2)
  tree->numcodes = (unsigned)numcodes; /*number of symbols*/
100020fc:	e0bffc17 	ldw	r2,-16(fp)
10002100:	e0ffff17 	ldw	r3,-4(fp)
10002104:	10c00415 	stw	r3,16(r2)
  tree->lengths = (unsigned*)lodepng_realloc(tree->lengths, numcodes * sizeof(unsigned));
10002108:	e0bffc17 	ldw	r2,-16(fp)
1000210c:	10c00217 	ldw	r3,8(r2)
10002110:	e0bfff17 	ldw	r2,-4(fp)
10002114:	1085883a 	add	r2,r2,r2
10002118:	1085883a 	add	r2,r2,r2
1000211c:	1809883a 	mov	r4,r3
10002120:	100b883a 	mov	r5,r2
10002124:	00002240 	call	10000224 <lodepng_realloc>
10002128:	e0fffc17 	ldw	r3,-16(fp)
1000212c:	18800215 	stw	r2,8(r3)
  if(!tree->lengths) return 83; /*alloc fail*/
10002130:	e0bffc17 	ldw	r2,-16(fp)
10002134:	10800217 	ldw	r2,8(r2)
10002138:	1000021e 	bne	r2,zero,10002144 <HuffmanTree_makeFromFrequencies+0xb4>
1000213c:	008014c4 	movi	r2,83
10002140:	00001706 	br	100021a0 <HuffmanTree_makeFromFrequencies+0x110>
  /*initialize all lengths to 0*/
  memset(tree->lengths, 0, numcodes * sizeof(unsigned));
10002144:	e0bffc17 	ldw	r2,-16(fp)
10002148:	10c00217 	ldw	r3,8(r2)
1000214c:	e0bfff17 	ldw	r2,-4(fp)
10002150:	1085883a 	add	r2,r2,r2
10002154:	1085883a 	add	r2,r2,r2
10002158:	1809883a 	mov	r4,r3
1000215c:	000b883a 	mov	r5,zero
10002160:	100d883a 	mov	r6,r2
10002164:	0016f180 	call	10016f18 <memset>

  error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
10002168:	e0bffc17 	ldw	r2,-16(fp)
1000216c:	10800217 	ldw	r2,8(r2)
10002170:	1009883a 	mov	r4,r2
10002174:	e17ffd17 	ldw	r5,-12(fp)
10002178:	e1bfff17 	ldw	r6,-4(fp)
1000217c:	e1c00217 	ldw	r7,8(fp)
10002180:	0001be80 	call	10001be8 <lodepng_huffman_code_lengths>
10002184:	e0bffb15 	stw	r2,-20(fp)
  if(!error) error = HuffmanTree_makeFromLengths2(tree);
10002188:	e0bffb17 	ldw	r2,-20(fp)
1000218c:	1000031e 	bne	r2,zero,1000219c <HuffmanTree_makeFromFrequencies+0x10c>
10002190:	e13ffc17 	ldw	r4,-16(fp)
10002194:	00013380 	call	10001338 <HuffmanTree_makeFromLengths2>
10002198:	e0bffb15 	stw	r2,-20(fp)
  return error;
1000219c:	e0bffb17 	ldw	r2,-20(fp)
}
100021a0:	e037883a 	mov	sp,fp
100021a4:	dfc00117 	ldw	ra,4(sp)
100021a8:	df000017 	ldw	fp,0(sp)
100021ac:	dec00204 	addi	sp,sp,8
100021b0:	f800283a 	ret

100021b4 <HuffmanTree_getCode>:

static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)
{
100021b4:	defffd04 	addi	sp,sp,-12
100021b8:	df000215 	stw	fp,8(sp)
100021bc:	df000204 	addi	fp,sp,8
100021c0:	e13ffe15 	stw	r4,-8(fp)
100021c4:	e17fff15 	stw	r5,-4(fp)
  return tree->tree1d[index];
100021c8:	e0bffe17 	ldw	r2,-8(fp)
100021cc:	10c00117 	ldw	r3,4(r2)
100021d0:	e0bfff17 	ldw	r2,-4(fp)
100021d4:	1085883a 	add	r2,r2,r2
100021d8:	1085883a 	add	r2,r2,r2
100021dc:	1885883a 	add	r2,r3,r2
100021e0:	10800017 	ldw	r2,0(r2)
}
100021e4:	e037883a 	mov	sp,fp
100021e8:	df000017 	ldw	fp,0(sp)
100021ec:	dec00104 	addi	sp,sp,4
100021f0:	f800283a 	ret

100021f4 <HuffmanTree_getLength>:

static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)
{
100021f4:	defffd04 	addi	sp,sp,-12
100021f8:	df000215 	stw	fp,8(sp)
100021fc:	df000204 	addi	fp,sp,8
10002200:	e13ffe15 	stw	r4,-8(fp)
10002204:	e17fff15 	stw	r5,-4(fp)
  return tree->lengths[index];
10002208:	e0bffe17 	ldw	r2,-8(fp)
1000220c:	10c00217 	ldw	r3,8(r2)
10002210:	e0bfff17 	ldw	r2,-4(fp)
10002214:	1085883a 	add	r2,r2,r2
10002218:	1085883a 	add	r2,r2,r2
1000221c:	1885883a 	add	r2,r3,r2
10002220:	10800017 	ldw	r2,0(r2)
}
10002224:	e037883a 	mov	sp,fp
10002228:	df000017 	ldw	fp,0(sp)
1000222c:	dec00104 	addi	sp,sp,4
10002230:	f800283a 	ret

10002234 <generateFixedLitLenTree>:
#endif /*LODEPNG_COMPILE_ENCODER*/

/*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
static unsigned generateFixedLitLenTree(HuffmanTree* tree)
{
10002234:	defffa04 	addi	sp,sp,-24
10002238:	dfc00515 	stw	ra,20(sp)
1000223c:	df000415 	stw	fp,16(sp)
10002240:	df000404 	addi	fp,sp,16
10002244:	e13fff15 	stw	r4,-4(fp)
  unsigned i, error = 0;
10002248:	e03ffd15 	stw	zero,-12(fp)
  unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
1000224c:	01012004 	movi	r4,1152
10002250:	00001f40 	call	100001f4 <lodepng_malloc>
10002254:	e0bffe15 	stw	r2,-8(fp)
  if(!bitlen) return 83; /*alloc fail*/
10002258:	e0bffe17 	ldw	r2,-8(fp)
1000225c:	1000021e 	bne	r2,zero,10002268 <generateFixedLitLenTree+0x34>
10002260:	008014c4 	movi	r2,83
10002264:	00004806 	br	10002388 <generateFixedLitLenTree+0x154>

  /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
  for(i =   0; i <= 143; ++i) bitlen[i] = 8;
10002268:	e03ffc15 	stw	zero,-16(fp)
1000226c:	00000a06 	br	10002298 <generateFixedLitLenTree+0x64>
10002270:	e0bffc17 	ldw	r2,-16(fp)
10002274:	1085883a 	add	r2,r2,r2
10002278:	1085883a 	add	r2,r2,r2
1000227c:	e0fffe17 	ldw	r3,-8(fp)
10002280:	1885883a 	add	r2,r3,r2
10002284:	00c00204 	movi	r3,8
10002288:	10c00015 	stw	r3,0(r2)
1000228c:	e0bffc17 	ldw	r2,-16(fp)
10002290:	10800044 	addi	r2,r2,1
10002294:	e0bffc15 	stw	r2,-16(fp)
10002298:	e0bffc17 	ldw	r2,-16(fp)
1000229c:	10802430 	cmpltui	r2,r2,144
100022a0:	103ff31e 	bne	r2,zero,10002270 <__alt_data_end+0xf8002270>
  for(i = 144; i <= 255; ++i) bitlen[i] = 9;
100022a4:	00802404 	movi	r2,144
100022a8:	e0bffc15 	stw	r2,-16(fp)
100022ac:	00000a06 	br	100022d8 <generateFixedLitLenTree+0xa4>
100022b0:	e0bffc17 	ldw	r2,-16(fp)
100022b4:	1085883a 	add	r2,r2,r2
100022b8:	1085883a 	add	r2,r2,r2
100022bc:	e0fffe17 	ldw	r3,-8(fp)
100022c0:	1885883a 	add	r2,r3,r2
100022c4:	00c00244 	movi	r3,9
100022c8:	10c00015 	stw	r3,0(r2)
100022cc:	e0bffc17 	ldw	r2,-16(fp)
100022d0:	10800044 	addi	r2,r2,1
100022d4:	e0bffc15 	stw	r2,-16(fp)
100022d8:	e0bffc17 	ldw	r2,-16(fp)
100022dc:	10804030 	cmpltui	r2,r2,256
100022e0:	103ff31e 	bne	r2,zero,100022b0 <__alt_data_end+0xf80022b0>
  for(i = 256; i <= 279; ++i) bitlen[i] = 7;
100022e4:	00804004 	movi	r2,256
100022e8:	e0bffc15 	stw	r2,-16(fp)
100022ec:	00000a06 	br	10002318 <generateFixedLitLenTree+0xe4>
100022f0:	e0bffc17 	ldw	r2,-16(fp)
100022f4:	1085883a 	add	r2,r2,r2
100022f8:	1085883a 	add	r2,r2,r2
100022fc:	e0fffe17 	ldw	r3,-8(fp)
10002300:	1885883a 	add	r2,r3,r2
10002304:	00c001c4 	movi	r3,7
10002308:	10c00015 	stw	r3,0(r2)
1000230c:	e0bffc17 	ldw	r2,-16(fp)
10002310:	10800044 	addi	r2,r2,1
10002314:	e0bffc15 	stw	r2,-16(fp)
10002318:	e0bffc17 	ldw	r2,-16(fp)
1000231c:	10804630 	cmpltui	r2,r2,280
10002320:	103ff31e 	bne	r2,zero,100022f0 <__alt_data_end+0xf80022f0>
  for(i = 280; i <= 287; ++i) bitlen[i] = 8;
10002324:	00804604 	movi	r2,280
10002328:	e0bffc15 	stw	r2,-16(fp)
1000232c:	00000a06 	br	10002358 <generateFixedLitLenTree+0x124>
10002330:	e0bffc17 	ldw	r2,-16(fp)
10002334:	1085883a 	add	r2,r2,r2
10002338:	1085883a 	add	r2,r2,r2
1000233c:	e0fffe17 	ldw	r3,-8(fp)
10002340:	1885883a 	add	r2,r3,r2
10002344:	00c00204 	movi	r3,8
10002348:	10c00015 	stw	r3,0(r2)
1000234c:	e0bffc17 	ldw	r2,-16(fp)
10002350:	10800044 	addi	r2,r2,1
10002354:	e0bffc15 	stw	r2,-16(fp)
10002358:	e0bffc17 	ldw	r2,-16(fp)
1000235c:	10804830 	cmpltui	r2,r2,288
10002360:	103ff31e 	bne	r2,zero,10002330 <__alt_data_end+0xf8002330>

  error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
10002364:	e13fff17 	ldw	r4,-4(fp)
10002368:	e17ffe17 	ldw	r5,-8(fp)
1000236c:	01804804 	movi	r6,288
10002370:	01c003c4 	movi	r7,15
10002374:	00015ac0 	call	100015ac <HuffmanTree_makeFromLengths>
10002378:	e0bffd15 	stw	r2,-12(fp)

  lodepng_free(bitlen);
1000237c:	e13ffe17 	ldw	r4,-8(fp)
10002380:	000025c0 	call	1000025c <lodepng_free>
  return error;
10002384:	e0bffd17 	ldw	r2,-12(fp)
}
10002388:	e037883a 	mov	sp,fp
1000238c:	dfc00117 	ldw	ra,4(sp)
10002390:	df000017 	ldw	fp,0(sp)
10002394:	dec00204 	addi	sp,sp,8
10002398:	f800283a 	ret

1000239c <generateFixedDistanceTree>:

/*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
static unsigned generateFixedDistanceTree(HuffmanTree* tree)
{
1000239c:	defffa04 	addi	sp,sp,-24
100023a0:	dfc00515 	stw	ra,20(sp)
100023a4:	df000415 	stw	fp,16(sp)
100023a8:	df000404 	addi	fp,sp,16
100023ac:	e13fff15 	stw	r4,-4(fp)
  unsigned i, error = 0;
100023b0:	e03ffd15 	stw	zero,-12(fp)
  unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
100023b4:	01002004 	movi	r4,128
100023b8:	00001f40 	call	100001f4 <lodepng_malloc>
100023bc:	e0bffe15 	stw	r2,-8(fp)
  if(!bitlen) return 83; /*alloc fail*/
100023c0:	e0bffe17 	ldw	r2,-8(fp)
100023c4:	1000021e 	bne	r2,zero,100023d0 <generateFixedDistanceTree+0x34>
100023c8:	008014c4 	movi	r2,83
100023cc:	00001806 	br	10002430 <generateFixedDistanceTree+0x94>

  /*there are 32 distance codes, but 30-31 are unused*/
  for(i = 0; i != NUM_DISTANCE_SYMBOLS; ++i) bitlen[i] = 5;
100023d0:	e03ffc15 	stw	zero,-16(fp)
100023d4:	00000a06 	br	10002400 <generateFixedDistanceTree+0x64>
100023d8:	e0bffc17 	ldw	r2,-16(fp)
100023dc:	1085883a 	add	r2,r2,r2
100023e0:	1085883a 	add	r2,r2,r2
100023e4:	e0fffe17 	ldw	r3,-8(fp)
100023e8:	1885883a 	add	r2,r3,r2
100023ec:	00c00144 	movi	r3,5
100023f0:	10c00015 	stw	r3,0(r2)
100023f4:	e0bffc17 	ldw	r2,-16(fp)
100023f8:	10800044 	addi	r2,r2,1
100023fc:	e0bffc15 	stw	r2,-16(fp)
10002400:	e0bffc17 	ldw	r2,-16(fp)
10002404:	10800818 	cmpnei	r2,r2,32
10002408:	103ff31e 	bne	r2,zero,100023d8 <__alt_data_end+0xf80023d8>
  error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
1000240c:	e13fff17 	ldw	r4,-4(fp)
10002410:	e17ffe17 	ldw	r5,-8(fp)
10002414:	01800804 	movi	r6,32
10002418:	01c003c4 	movi	r7,15
1000241c:	00015ac0 	call	100015ac <HuffmanTree_makeFromLengths>
10002420:	e0bffd15 	stw	r2,-12(fp)

  lodepng_free(bitlen);
10002424:	e13ffe17 	ldw	r4,-8(fp)
10002428:	000025c0 	call	1000025c <lodepng_free>
  return error;
1000242c:	e0bffd17 	ldw	r2,-12(fp)
}
10002430:	e037883a 	mov	sp,fp
10002434:	dfc00117 	ldw	ra,4(sp)
10002438:	df000017 	ldw	fp,0(sp)
1000243c:	dec00204 	addi	sp,sp,8
10002440:	f800283a 	ret

10002444 <huffmanDecodeSymbol>:
returns the code, or (unsigned)(-1) if error happened
inbitlength is the length of the complete buffer, in bits (so its byte length times 8)
*/
static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,
                                    const HuffmanTree* codetree, size_t inbitlength)
{
10002444:	defff904 	addi	sp,sp,-28
10002448:	df000615 	stw	fp,24(sp)
1000244c:	df000604 	addi	fp,sp,24
10002450:	e13ffc15 	stw	r4,-16(fp)
10002454:	e17ffd15 	stw	r5,-12(fp)
10002458:	e1bffe15 	stw	r6,-8(fp)
1000245c:	e1ffff15 	stw	r7,-4(fp)
  unsigned treepos = 0, ct;
10002460:	e03ffa15 	stw	zero,-24(fp)
10002464:	00000106 	br	1000246c <huffmanDecodeSymbol+0x28>
    ++(*bp);
    if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/
    else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/

    if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/
  }
10002468:	0001883a 	nop
                                    const HuffmanTree* codetree, size_t inbitlength)
{
  unsigned treepos = 0, ct;
  for(;;)
  {
    if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/
1000246c:	e0bffd17 	ldw	r2,-12(fp)
10002470:	10c00017 	ldw	r3,0(r2)
10002474:	e0bfff17 	ldw	r2,-4(fp)
10002478:	18800236 	bltu	r3,r2,10002484 <huffmanDecodeSymbol+0x40>
1000247c:	00bfffc4 	movi	r2,-1
10002480:	00002c06 	br	10002534 <huffmanDecodeSymbol+0xf0>
    /*
    decode the symbol from the tree. The "readBitFromStream" code is inlined in
    the expression below because this is the biggest bottleneck while decoding
    */
    ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];
10002484:	e0bffe17 	ldw	r2,-8(fp)
10002488:	10c00017 	ldw	r3,0(r2)
1000248c:	e0bffa17 	ldw	r2,-24(fp)
10002490:	1085883a 	add	r2,r2,r2
10002494:	1009883a 	mov	r4,r2
10002498:	e0bffd17 	ldw	r2,-12(fp)
1000249c:	10800017 	ldw	r2,0(r2)
100024a0:	1004d0fa 	srli	r2,r2,3
100024a4:	e17ffc17 	ldw	r5,-16(fp)
100024a8:	2885883a 	add	r2,r5,r2
100024ac:	10800003 	ldbu	r2,0(r2)
100024b0:	11403fcc 	andi	r5,r2,255
100024b4:	e0bffd17 	ldw	r2,-12(fp)
100024b8:	10800017 	ldw	r2,0(r2)
100024bc:	108001cc 	andi	r2,r2,7
100024c0:	2885d83a 	sra	r2,r5,r2
100024c4:	1080004c 	andi	r2,r2,1
100024c8:	2085883a 	add	r2,r4,r2
100024cc:	1085883a 	add	r2,r2,r2
100024d0:	1085883a 	add	r2,r2,r2
100024d4:	1885883a 	add	r2,r3,r2
100024d8:	10800017 	ldw	r2,0(r2)
100024dc:	e0bffb15 	stw	r2,-20(fp)
    ++(*bp);
100024e0:	e0bffd17 	ldw	r2,-12(fp)
100024e4:	10800017 	ldw	r2,0(r2)
100024e8:	10c00044 	addi	r3,r2,1
100024ec:	e0bffd17 	ldw	r2,-12(fp)
100024f0:	10c00015 	stw	r3,0(r2)
    if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/
100024f4:	e0bffe17 	ldw	r2,-8(fp)
100024f8:	10800417 	ldw	r2,16(r2)
100024fc:	e0fffb17 	ldw	r3,-20(fp)
10002500:	1880022e 	bgeu	r3,r2,1000250c <huffmanDecodeSymbol+0xc8>
10002504:	e0bffb17 	ldw	r2,-20(fp)
10002508:	00000a06 	br	10002534 <huffmanDecodeSymbol+0xf0>
    else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/
1000250c:	e0bffe17 	ldw	r2,-8(fp)
10002510:	10800417 	ldw	r2,16(r2)
10002514:	e0fffb17 	ldw	r3,-20(fp)
10002518:	1885c83a 	sub	r2,r3,r2
1000251c:	e0bffa15 	stw	r2,-24(fp)

    if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/
10002520:	e0bffe17 	ldw	r2,-8(fp)
10002524:	10800417 	ldw	r2,16(r2)
10002528:	e0fffa17 	ldw	r3,-24(fp)
1000252c:	18bfce36 	bltu	r3,r2,10002468 <__alt_data_end+0xf8002468>
10002530:	00bfffc4 	movi	r2,-1
  }
}
10002534:	e037883a 	mov	sp,fp
10002538:	df000017 	ldw	fp,0(sp)
1000253c:	dec00104 	addi	sp,sp,4
10002540:	f800283a 	ret

10002544 <getTreeInflateFixed>:
/* / Inflator (Decompressor)                                                / */
/* ////////////////////////////////////////////////////////////////////////// */

/*get the tree of a deflated block with fixed tree, as specified in the deflate specification*/
static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)
{
10002544:	defffc04 	addi	sp,sp,-16
10002548:	dfc00315 	stw	ra,12(sp)
1000254c:	df000215 	stw	fp,8(sp)
10002550:	df000204 	addi	fp,sp,8
10002554:	e13ffe15 	stw	r4,-8(fp)
10002558:	e17fff15 	stw	r5,-4(fp)
  /*TODO: check for out of memory errors*/
  generateFixedLitLenTree(tree_ll);
1000255c:	e13ffe17 	ldw	r4,-8(fp)
10002560:	00022340 	call	10002234 <generateFixedLitLenTree>
  generateFixedDistanceTree(tree_d);
10002564:	e13fff17 	ldw	r4,-4(fp)
10002568:	000239c0 	call	1000239c <generateFixedDistanceTree>
}
1000256c:	e037883a 	mov	sp,fp
10002570:	dfc00117 	ldw	ra,4(sp)
10002574:	df000017 	ldw	fp,0(sp)
10002578:	dec00204 	addi	sp,sp,8
1000257c:	f800283a 	ret

10002580 <getTreeInflateDynamic>:

/*get the tree of a deflated block with dynamic tree, the tree itself is also Huffman compressed with a known tree*/
static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
                                      const unsigned char* in, size_t* bp, size_t inlength)
{
10002580:	deffe504 	addi	sp,sp,-108
10002584:	dfc01a15 	stw	ra,104(sp)
10002588:	df001915 	stw	fp,100(sp)
1000258c:	dc001815 	stw	r16,96(sp)
10002590:	df001804 	addi	fp,sp,96
10002594:	e13ffc15 	stw	r4,-16(fp)
10002598:	e17ffd15 	stw	r5,-12(fp)
1000259c:	e1bffe15 	stw	r6,-8(fp)
100025a0:	e1ffff15 	stw	r7,-4(fp)
  /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
  unsigned error = 0;
100025a4:	e03fe815 	stw	zero,-96(fp)
  unsigned n, HLIT, HDIST, HCLEN, i;
  size_t inbitlength = inlength * 8;
100025a8:	e0800317 	ldw	r2,12(fp)
100025ac:	100490fa 	slli	r2,r2,3
100025b0:	e0bfef15 	stw	r2,-68(fp)

  /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
  unsigned* bitlen_ll = 0; /*lit,len code lengths*/
100025b4:	e03feb15 	stw	zero,-84(fp)
  unsigned* bitlen_d = 0; /*dist code lengths*/
100025b8:	e03fec15 	stw	zero,-80(fp)
  /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
  unsigned* bitlen_cl = 0;
100025bc:	e03fed15 	stw	zero,-76(fp)
  HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/

  if((*bp) + 14 > (inlength << 3)) return 49; /*error: the bit pointer is or will go past the memory*/
100025c0:	e0bfff17 	ldw	r2,-4(fp)
100025c4:	10800017 	ldw	r2,0(r2)
100025c8:	10800384 	addi	r2,r2,14
100025cc:	e0c00317 	ldw	r3,12(fp)
100025d0:	180690fa 	slli	r3,r3,3
100025d4:	1880022e 	bgeu	r3,r2,100025e0 <getTreeInflateDynamic+0x60>
100025d8:	00800c44 	movi	r2,49
100025dc:	0001b306 	br	10002cac <getTreeInflateDynamic+0x72c>

  /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
  HLIT =  readBitsFromStream(bp, in, 5) + 257;
100025e0:	e13fff17 	ldw	r4,-4(fp)
100025e4:	e17ffe17 	ldw	r5,-8(fp)
100025e8:	01800144 	movi	r6,5
100025ec:	0000ef80 	call	10000ef8 <readBitsFromStream>
100025f0:	10804044 	addi	r2,r2,257
100025f4:	e0bff015 	stw	r2,-64(fp)
  /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
  HDIST = readBitsFromStream(bp, in, 5) + 1;
100025f8:	e13fff17 	ldw	r4,-4(fp)
100025fc:	e17ffe17 	ldw	r5,-8(fp)
10002600:	01800144 	movi	r6,5
10002604:	0000ef80 	call	10000ef8 <readBitsFromStream>
10002608:	10800044 	addi	r2,r2,1
1000260c:	e0bff115 	stw	r2,-60(fp)
  /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
  HCLEN = readBitsFromStream(bp, in, 4) + 4;
10002610:	e13fff17 	ldw	r4,-4(fp)
10002614:	e17ffe17 	ldw	r5,-8(fp)
10002618:	01800104 	movi	r6,4
1000261c:	0000ef80 	call	10000ef8 <readBitsFromStream>
10002620:	10800104 	addi	r2,r2,4
10002624:	e0bff215 	stw	r2,-56(fp)

  if((*bp) + HCLEN * 3 > (inlength << 3)) return 50; /*error: the bit pointer is or will go past the memory*/
10002628:	e0bfff17 	ldw	r2,-4(fp)
1000262c:	11000017 	ldw	r4,0(r2)
10002630:	e0fff217 	ldw	r3,-56(fp)
10002634:	1805883a 	mov	r2,r3
10002638:	1085883a 	add	r2,r2,r2
1000263c:	10c5883a 	add	r2,r2,r3
10002640:	2085883a 	add	r2,r4,r2
10002644:	e0c00317 	ldw	r3,12(fp)
10002648:	180690fa 	slli	r3,r3,3
1000264c:	1880022e 	bgeu	r3,r2,10002658 <getTreeInflateDynamic+0xd8>
10002650:	00800c84 	movi	r2,50
10002654:	00019506 	br	10002cac <getTreeInflateDynamic+0x72c>

  HuffmanTree_init(&tree_cl);
10002658:	e0bff704 	addi	r2,fp,-36
1000265c:	1009883a 	mov	r4,r2
10002660:	0000fa00 	call	10000fa0 <HuffmanTree_init>

  while(!error)
10002664:	e0bfe817 	ldw	r2,-96(fp)
10002668:	1001861e 	bne	r2,zero,10002c84 <getTreeInflateDynamic+0x704>
  {
    /*read the code length codes out of 3 * (amount of code length codes) bits*/

    bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
1000266c:	01001304 	movi	r4,76
10002670:	00001f40 	call	100001f4 <lodepng_malloc>
10002674:	e0bfed15 	stw	r2,-76(fp)
    if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);
10002678:	e0bfed17 	ldw	r2,-76(fp)
1000267c:	1000031e 	bne	r2,zero,1000268c <getTreeInflateDynamic+0x10c>
10002680:	008014c4 	movi	r2,83
10002684:	e0bfe815 	stw	r2,-96(fp)
10002688:	00017e06 	br	10002c84 <getTreeInflateDynamic+0x704>

    for(i = 0; i != NUM_CODE_LENGTH_CODES; ++i)
1000268c:	e03fea15 	stw	zero,-88(fp)
10002690:	00002306 	br	10002720 <getTreeInflateDynamic+0x1a0>
    {
      if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
10002694:	e0ffea17 	ldw	r3,-88(fp)
10002698:	e0bff217 	ldw	r2,-56(fp)
1000269c:	1880112e 	bgeu	r3,r2,100026e4 <getTreeInflateDynamic+0x164>
100026a0:	00c400b4 	movhi	r3,4098
100026a4:	18ca4d04 	addi	r3,r3,10548
100026a8:	e0bfea17 	ldw	r2,-88(fp)
100026ac:	1085883a 	add	r2,r2,r2
100026b0:	1085883a 	add	r2,r2,r2
100026b4:	1885883a 	add	r2,r3,r2
100026b8:	10800017 	ldw	r2,0(r2)
100026bc:	1085883a 	add	r2,r2,r2
100026c0:	1085883a 	add	r2,r2,r2
100026c4:	e0ffed17 	ldw	r3,-76(fp)
100026c8:	18a1883a 	add	r16,r3,r2
100026cc:	e13fff17 	ldw	r4,-4(fp)
100026d0:	e17ffe17 	ldw	r5,-8(fp)
100026d4:	018000c4 	movi	r6,3
100026d8:	0000ef80 	call	10000ef8 <readBitsFromStream>
100026dc:	80800015 	stw	r2,0(r16)
100026e0:	00000c06 	br	10002714 <getTreeInflateDynamic+0x194>
      else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
100026e4:	00c400b4 	movhi	r3,4098
100026e8:	18ca4d04 	addi	r3,r3,10548
100026ec:	e0bfea17 	ldw	r2,-88(fp)
100026f0:	1085883a 	add	r2,r2,r2
100026f4:	1085883a 	add	r2,r2,r2
100026f8:	1885883a 	add	r2,r3,r2
100026fc:	10800017 	ldw	r2,0(r2)
10002700:	1085883a 	add	r2,r2,r2
10002704:	1085883a 	add	r2,r2,r2
10002708:	e0ffed17 	ldw	r3,-76(fp)
1000270c:	1885883a 	add	r2,r3,r2
10002710:	10000015 	stw	zero,0(r2)
    /*read the code length codes out of 3 * (amount of code length codes) bits*/

    bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
    if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);

    for(i = 0; i != NUM_CODE_LENGTH_CODES; ++i)
10002714:	e0bfea17 	ldw	r2,-88(fp)
10002718:	10800044 	addi	r2,r2,1
1000271c:	e0bfea15 	stw	r2,-88(fp)
10002720:	e0bfea17 	ldw	r2,-88(fp)
10002724:	108004d8 	cmpnei	r2,r2,19
10002728:	103fda1e 	bne	r2,zero,10002694 <__alt_data_end+0xf8002694>
    {
      if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
      else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
    }

    error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
1000272c:	e0bff704 	addi	r2,fp,-36
10002730:	1009883a 	mov	r4,r2
10002734:	e17fed17 	ldw	r5,-76(fp)
10002738:	018004c4 	movi	r6,19
1000273c:	01c001c4 	movi	r7,7
10002740:	00015ac0 	call	100015ac <HuffmanTree_makeFromLengths>
10002744:	e0bfe815 	stw	r2,-96(fp)
    if(error) break;
10002748:	e0bfe817 	ldw	r2,-96(fp)
1000274c:	1001481e 	bne	r2,zero,10002c70 <getTreeInflateDynamic+0x6f0>

    /*now we can use this tree to read the lengths for the tree that this function will return*/
    bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
10002750:	01012004 	movi	r4,1152
10002754:	00001f40 	call	100001f4 <lodepng_malloc>
10002758:	e0bfeb15 	stw	r2,-84(fp)
    bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
1000275c:	01002004 	movi	r4,128
10002760:	00001f40 	call	100001f4 <lodepng_malloc>
10002764:	e0bfec15 	stw	r2,-80(fp)
    if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);
10002768:	e0bfeb17 	ldw	r2,-84(fp)
1000276c:	10000226 	beq	r2,zero,10002778 <getTreeInflateDynamic+0x1f8>
10002770:	e0bfec17 	ldw	r2,-80(fp)
10002774:	1000031e 	bne	r2,zero,10002784 <getTreeInflateDynamic+0x204>
10002778:	008014c4 	movi	r2,83
1000277c:	e0bfe815 	stw	r2,-96(fp)
10002780:	00014006 	br	10002c84 <getTreeInflateDynamic+0x704>
    for(i = 0; i != NUM_DEFLATE_CODE_SYMBOLS; ++i) bitlen_ll[i] = 0;
10002784:	e03fea15 	stw	zero,-88(fp)
10002788:	00000906 	br	100027b0 <getTreeInflateDynamic+0x230>
1000278c:	e0bfea17 	ldw	r2,-88(fp)
10002790:	1085883a 	add	r2,r2,r2
10002794:	1085883a 	add	r2,r2,r2
10002798:	e0ffeb17 	ldw	r3,-84(fp)
1000279c:	1885883a 	add	r2,r3,r2
100027a0:	10000015 	stw	zero,0(r2)
100027a4:	e0bfea17 	ldw	r2,-88(fp)
100027a8:	10800044 	addi	r2,r2,1
100027ac:	e0bfea15 	stw	r2,-88(fp)
100027b0:	e0bfea17 	ldw	r2,-88(fp)
100027b4:	10804818 	cmpnei	r2,r2,288
100027b8:	103ff41e 	bne	r2,zero,1000278c <__alt_data_end+0xf800278c>
    for(i = 0; i != NUM_DISTANCE_SYMBOLS; ++i) bitlen_d[i] = 0;
100027bc:	e03fea15 	stw	zero,-88(fp)
100027c0:	00000906 	br	100027e8 <getTreeInflateDynamic+0x268>
100027c4:	e0bfea17 	ldw	r2,-88(fp)
100027c8:	1085883a 	add	r2,r2,r2
100027cc:	1085883a 	add	r2,r2,r2
100027d0:	e0ffec17 	ldw	r3,-80(fp)
100027d4:	1885883a 	add	r2,r3,r2
100027d8:	10000015 	stw	zero,0(r2)
100027dc:	e0bfea17 	ldw	r2,-88(fp)
100027e0:	10800044 	addi	r2,r2,1
100027e4:	e0bfea15 	stw	r2,-88(fp)
100027e8:	e0bfea17 	ldw	r2,-88(fp)
100027ec:	10800818 	cmpnei	r2,r2,32
100027f0:	103ff41e 	bne	r2,zero,100027c4 <__alt_data_end+0xf80027c4>

    /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
    i = 0;
100027f4:	e03fea15 	stw	zero,-88(fp)
    while(i < HLIT + HDIST)
100027f8:	00010006 	br	10002bfc <getTreeInflateDynamic+0x67c>
    {
      unsigned code = huffmanDecodeSymbol(in, bp, &tree_cl, inbitlength);
100027fc:	e0bff704 	addi	r2,fp,-36
10002800:	e13ffe17 	ldw	r4,-8(fp)
10002804:	e17fff17 	ldw	r5,-4(fp)
10002808:	100d883a 	mov	r6,r2
1000280c:	e1ffef17 	ldw	r7,-68(fp)
10002810:	00024440 	call	10002444 <huffmanDecodeSymbol>
10002814:	e0bff315 	stw	r2,-52(fp)
      if(code <= 15) /*a length code*/
10002818:	e0bff317 	ldw	r2,-52(fp)
1000281c:	10800428 	cmpgeui	r2,r2,16
10002820:	1000181e 	bne	r2,zero,10002884 <getTreeInflateDynamic+0x304>
      {
        if(i < HLIT) bitlen_ll[i] = code;
10002824:	e0ffea17 	ldw	r3,-88(fp)
10002828:	e0bff017 	ldw	r2,-64(fp)
1000282c:	1880082e 	bgeu	r3,r2,10002850 <getTreeInflateDynamic+0x2d0>
10002830:	e0bfea17 	ldw	r2,-88(fp)
10002834:	1085883a 	add	r2,r2,r2
10002838:	1085883a 	add	r2,r2,r2
1000283c:	e0ffeb17 	ldw	r3,-84(fp)
10002840:	1885883a 	add	r2,r3,r2
10002844:	e0fff317 	ldw	r3,-52(fp)
10002848:	10c00015 	stw	r3,0(r2)
1000284c:	00000906 	br	10002874 <getTreeInflateDynamic+0x2f4>
        else bitlen_d[i - HLIT] = code;
10002850:	e0ffea17 	ldw	r3,-88(fp)
10002854:	e0bff017 	ldw	r2,-64(fp)
10002858:	1885c83a 	sub	r2,r3,r2
1000285c:	1085883a 	add	r2,r2,r2
10002860:	1085883a 	add	r2,r2,r2
10002864:	e0ffec17 	ldw	r3,-80(fp)
10002868:	1885883a 	add	r2,r3,r2
1000286c:	e0fff317 	ldw	r3,-52(fp)
10002870:	10c00015 	stw	r3,0(r2)
        ++i;
10002874:	e0bfea17 	ldw	r2,-88(fp)
10002878:	10800044 	addi	r2,r2,1
1000287c:	e0bfea15 	stw	r2,-88(fp)
10002880:	0000de06 	br	10002bfc <getTreeInflateDynamic+0x67c>
      }
      else if(code == 16) /*repeat previous*/
10002884:	e0bff317 	ldw	r2,-52(fp)
10002888:	10800418 	cmpnei	r2,r2,16
1000288c:	1000561e 	bne	r2,zero,100029e8 <getTreeInflateDynamic+0x468>
      {
        unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
10002890:	008000c4 	movi	r2,3
10002894:	e0bff415 	stw	r2,-48(fp)
        unsigned value; /*set value to the previous code*/

        if(i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/
10002898:	e0bfea17 	ldw	r2,-88(fp)
1000289c:	1000031e 	bne	r2,zero,100028ac <getTreeInflateDynamic+0x32c>
100028a0:	00800d84 	movi	r2,54
100028a4:	e0bfe815 	stw	r2,-96(fp)
100028a8:	0000d906 	br	10002c10 <getTreeInflateDynamic+0x690>

        if((*bp + 2) > inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
100028ac:	e0bfff17 	ldw	r2,-4(fp)
100028b0:	10800017 	ldw	r2,0(r2)
100028b4:	10800084 	addi	r2,r2,2
100028b8:	e0ffef17 	ldw	r3,-68(fp)
100028bc:	1880032e 	bgeu	r3,r2,100028cc <getTreeInflateDynamic+0x34c>
100028c0:	00800c84 	movi	r2,50
100028c4:	e0bfe815 	stw	r2,-96(fp)
100028c8:	0000d106 	br	10002c10 <getTreeInflateDynamic+0x690>
        replength += readBitsFromStream(bp, in, 2);
100028cc:	e13fff17 	ldw	r4,-4(fp)
100028d0:	e17ffe17 	ldw	r5,-8(fp)
100028d4:	01800084 	movi	r6,2
100028d8:	0000ef80 	call	10000ef8 <readBitsFromStream>
100028dc:	e0fff417 	ldw	r3,-48(fp)
100028e0:	1885883a 	add	r2,r3,r2
100028e4:	e0bff415 	stw	r2,-48(fp)

        if(i < HLIT + 1) value = bitlen_ll[i - 1];
100028e8:	e0bff017 	ldw	r2,-64(fp)
100028ec:	10800044 	addi	r2,r2,1
100028f0:	e0ffea17 	ldw	r3,-88(fp)
100028f4:	1880092e 	bgeu	r3,r2,1000291c <getTreeInflateDynamic+0x39c>
100028f8:	e0bfea17 	ldw	r2,-88(fp)
100028fc:	10bfffc4 	addi	r2,r2,-1
10002900:	1085883a 	add	r2,r2,r2
10002904:	1085883a 	add	r2,r2,r2
10002908:	e0ffeb17 	ldw	r3,-84(fp)
1000290c:	1885883a 	add	r2,r3,r2
10002910:	10800017 	ldw	r2,0(r2)
10002914:	e0bfee15 	stw	r2,-72(fp)
10002918:	00000a06 	br	10002944 <getTreeInflateDynamic+0x3c4>
        else value = bitlen_d[i - HLIT - 1];
1000291c:	e0ffea17 	ldw	r3,-88(fp)
10002920:	e0bff017 	ldw	r2,-64(fp)
10002924:	1885c83a 	sub	r2,r3,r2
10002928:	10bfffc4 	addi	r2,r2,-1
1000292c:	1085883a 	add	r2,r2,r2
10002930:	1085883a 	add	r2,r2,r2
10002934:	e0ffec17 	ldw	r3,-80(fp)
10002938:	1885883a 	add	r2,r3,r2
1000293c:	10800017 	ldw	r2,0(r2)
10002940:	e0bfee15 	stw	r2,-72(fp)
        /*repeat this value in the next lengths*/
        for(n = 0; n < replength; ++n)
10002944:	e03fe915 	stw	zero,-92(fp)
10002948:	00002306 	br	100029d8 <getTreeInflateDynamic+0x458>
        {
          if(i >= HLIT + HDIST) ERROR_BREAK(13); /*error: i is larger than the amount of codes*/
1000294c:	e0fff017 	ldw	r3,-64(fp)
10002950:	e0bff117 	ldw	r2,-60(fp)
10002954:	1885883a 	add	r2,r3,r2
10002958:	e0ffea17 	ldw	r3,-88(fp)
1000295c:	18800436 	bltu	r3,r2,10002970 <getTreeInflateDynamic+0x3f0>
10002960:	00800344 	movi	r2,13
10002964:	e0bfe815 	stw	r2,-96(fp)
10002968:	0001883a 	nop
1000296c:	0000a306 	br	10002bfc <getTreeInflateDynamic+0x67c>
          if(i < HLIT) bitlen_ll[i] = value;
10002970:	e0ffea17 	ldw	r3,-88(fp)
10002974:	e0bff017 	ldw	r2,-64(fp)
10002978:	1880082e 	bgeu	r3,r2,1000299c <getTreeInflateDynamic+0x41c>
1000297c:	e0bfea17 	ldw	r2,-88(fp)
10002980:	1085883a 	add	r2,r2,r2
10002984:	1085883a 	add	r2,r2,r2
10002988:	e0ffeb17 	ldw	r3,-84(fp)
1000298c:	1885883a 	add	r2,r3,r2
10002990:	e0ffee17 	ldw	r3,-72(fp)
10002994:	10c00015 	stw	r3,0(r2)
10002998:	00000906 	br	100029c0 <getTreeInflateDynamic+0x440>
          else bitlen_d[i - HLIT] = value;
1000299c:	e0ffea17 	ldw	r3,-88(fp)
100029a0:	e0bff017 	ldw	r2,-64(fp)
100029a4:	1885c83a 	sub	r2,r3,r2
100029a8:	1085883a 	add	r2,r2,r2
100029ac:	1085883a 	add	r2,r2,r2
100029b0:	e0ffec17 	ldw	r3,-80(fp)
100029b4:	1885883a 	add	r2,r3,r2
100029b8:	e0ffee17 	ldw	r3,-72(fp)
100029bc:	10c00015 	stw	r3,0(r2)
          ++i;
100029c0:	e0bfea17 	ldw	r2,-88(fp)
100029c4:	10800044 	addi	r2,r2,1
100029c8:	e0bfea15 	stw	r2,-88(fp)
        replength += readBitsFromStream(bp, in, 2);

        if(i < HLIT + 1) value = bitlen_ll[i - 1];
        else value = bitlen_d[i - HLIT - 1];
        /*repeat this value in the next lengths*/
        for(n = 0; n < replength; ++n)
100029cc:	e0bfe917 	ldw	r2,-92(fp)
100029d0:	10800044 	addi	r2,r2,1
100029d4:	e0bfe915 	stw	r2,-92(fp)
100029d8:	e0ffe917 	ldw	r3,-92(fp)
100029dc:	e0bff417 	ldw	r2,-48(fp)
100029e0:	18bfda36 	bltu	r3,r2,1000294c <__alt_data_end+0xf800294c>
100029e4:	00008506 	br	10002bfc <getTreeInflateDynamic+0x67c>
          if(i < HLIT) bitlen_ll[i] = value;
          else bitlen_d[i - HLIT] = value;
          ++i;
        }
      }
      else if(code == 17) /*repeat "0" 3-10 times*/
100029e8:	e0bff317 	ldw	r2,-52(fp)
100029ec:	10800458 	cmpnei	r2,r2,17
100029f0:	1000381e 	bne	r2,zero,10002ad4 <getTreeInflateDynamic+0x554>
      {
        unsigned replength = 3; /*read in the bits that indicate repeat length*/
100029f4:	008000c4 	movi	r2,3
100029f8:	e0bff515 	stw	r2,-44(fp)
        if((*bp + 3) > inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
100029fc:	e0bfff17 	ldw	r2,-4(fp)
10002a00:	10800017 	ldw	r2,0(r2)
10002a04:	108000c4 	addi	r2,r2,3
10002a08:	e0ffef17 	ldw	r3,-68(fp)
10002a0c:	1880032e 	bgeu	r3,r2,10002a1c <getTreeInflateDynamic+0x49c>
10002a10:	00800c84 	movi	r2,50
10002a14:	e0bfe815 	stw	r2,-96(fp)
10002a18:	00007d06 	br	10002c10 <getTreeInflateDynamic+0x690>
        replength += readBitsFromStream(bp, in, 3);
10002a1c:	e13fff17 	ldw	r4,-4(fp)
10002a20:	e17ffe17 	ldw	r5,-8(fp)
10002a24:	018000c4 	movi	r6,3
10002a28:	0000ef80 	call	10000ef8 <readBitsFromStream>
10002a2c:	e0fff517 	ldw	r3,-44(fp)
10002a30:	1885883a 	add	r2,r3,r2
10002a34:	e0bff515 	stw	r2,-44(fp)

        /*repeat this value in the next lengths*/
        for(n = 0; n < replength; ++n)
10002a38:	e03fe915 	stw	zero,-92(fp)
10002a3c:	00002106 	br	10002ac4 <getTreeInflateDynamic+0x544>
        {
          if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/
10002a40:	e0fff017 	ldw	r3,-64(fp)
10002a44:	e0bff117 	ldw	r2,-60(fp)
10002a48:	1885883a 	add	r2,r3,r2
10002a4c:	e0ffea17 	ldw	r3,-88(fp)
10002a50:	18800436 	bltu	r3,r2,10002a64 <getTreeInflateDynamic+0x4e4>
10002a54:	00800384 	movi	r2,14
10002a58:	e0bfe815 	stw	r2,-96(fp)
10002a5c:	0001883a 	nop
10002a60:	00006606 	br	10002bfc <getTreeInflateDynamic+0x67c>

          if(i < HLIT) bitlen_ll[i] = 0;
10002a64:	e0ffea17 	ldw	r3,-88(fp)
10002a68:	e0bff017 	ldw	r2,-64(fp)
10002a6c:	1880072e 	bgeu	r3,r2,10002a8c <getTreeInflateDynamic+0x50c>
10002a70:	e0bfea17 	ldw	r2,-88(fp)
10002a74:	1085883a 	add	r2,r2,r2
10002a78:	1085883a 	add	r2,r2,r2
10002a7c:	e0ffeb17 	ldw	r3,-84(fp)
10002a80:	1885883a 	add	r2,r3,r2
10002a84:	10000015 	stw	zero,0(r2)
10002a88:	00000806 	br	10002aac <getTreeInflateDynamic+0x52c>
          else bitlen_d[i - HLIT] = 0;
10002a8c:	e0ffea17 	ldw	r3,-88(fp)
10002a90:	e0bff017 	ldw	r2,-64(fp)
10002a94:	1885c83a 	sub	r2,r3,r2
10002a98:	1085883a 	add	r2,r2,r2
10002a9c:	1085883a 	add	r2,r2,r2
10002aa0:	e0ffec17 	ldw	r3,-80(fp)
10002aa4:	1885883a 	add	r2,r3,r2
10002aa8:	10000015 	stw	zero,0(r2)
          ++i;
10002aac:	e0bfea17 	ldw	r2,-88(fp)
10002ab0:	10800044 	addi	r2,r2,1
10002ab4:	e0bfea15 	stw	r2,-88(fp)
        unsigned replength = 3; /*read in the bits that indicate repeat length*/
        if((*bp + 3) > inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
        replength += readBitsFromStream(bp, in, 3);

        /*repeat this value in the next lengths*/
        for(n = 0; n < replength; ++n)
10002ab8:	e0bfe917 	ldw	r2,-92(fp)
10002abc:	10800044 	addi	r2,r2,1
10002ac0:	e0bfe915 	stw	r2,-92(fp)
10002ac4:	e0ffe917 	ldw	r3,-92(fp)
10002ac8:	e0bff517 	ldw	r2,-44(fp)
10002acc:	18bfdc36 	bltu	r3,r2,10002a40 <__alt_data_end+0xf8002a40>
10002ad0:	00004a06 	br	10002bfc <getTreeInflateDynamic+0x67c>
          if(i < HLIT) bitlen_ll[i] = 0;
          else bitlen_d[i - HLIT] = 0;
          ++i;
        }
      }
      else if(code == 18) /*repeat "0" 11-138 times*/
10002ad4:	e0bff317 	ldw	r2,-52(fp)
10002ad8:	10800498 	cmpnei	r2,r2,18
10002adc:	1000381e 	bne	r2,zero,10002bc0 <getTreeInflateDynamic+0x640>
      {
        unsigned replength = 11; /*read in the bits that indicate repeat length*/
10002ae0:	008002c4 	movi	r2,11
10002ae4:	e0bff615 	stw	r2,-40(fp)
        if((*bp + 7) > inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
10002ae8:	e0bfff17 	ldw	r2,-4(fp)
10002aec:	10800017 	ldw	r2,0(r2)
10002af0:	108001c4 	addi	r2,r2,7
10002af4:	e0ffef17 	ldw	r3,-68(fp)
10002af8:	1880032e 	bgeu	r3,r2,10002b08 <getTreeInflateDynamic+0x588>
10002afc:	00800c84 	movi	r2,50
10002b00:	e0bfe815 	stw	r2,-96(fp)
10002b04:	00004206 	br	10002c10 <getTreeInflateDynamic+0x690>
        replength += readBitsFromStream(bp, in, 7);
10002b08:	e13fff17 	ldw	r4,-4(fp)
10002b0c:	e17ffe17 	ldw	r5,-8(fp)
10002b10:	018001c4 	movi	r6,7
10002b14:	0000ef80 	call	10000ef8 <readBitsFromStream>
10002b18:	e0fff617 	ldw	r3,-40(fp)
10002b1c:	1885883a 	add	r2,r3,r2
10002b20:	e0bff615 	stw	r2,-40(fp)

        /*repeat this value in the next lengths*/
        for(n = 0; n < replength; ++n)
10002b24:	e03fe915 	stw	zero,-92(fp)
10002b28:	00002106 	br	10002bb0 <getTreeInflateDynamic+0x630>
        {
          if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/
10002b2c:	e0fff017 	ldw	r3,-64(fp)
10002b30:	e0bff117 	ldw	r2,-60(fp)
10002b34:	1885883a 	add	r2,r3,r2
10002b38:	e0ffea17 	ldw	r3,-88(fp)
10002b3c:	18800436 	bltu	r3,r2,10002b50 <getTreeInflateDynamic+0x5d0>
10002b40:	008003c4 	movi	r2,15
10002b44:	e0bfe815 	stw	r2,-96(fp)
10002b48:	0001883a 	nop
10002b4c:	00002b06 	br	10002bfc <getTreeInflateDynamic+0x67c>

          if(i < HLIT) bitlen_ll[i] = 0;
10002b50:	e0ffea17 	ldw	r3,-88(fp)
10002b54:	e0bff017 	ldw	r2,-64(fp)
10002b58:	1880072e 	bgeu	r3,r2,10002b78 <getTreeInflateDynamic+0x5f8>
10002b5c:	e0bfea17 	ldw	r2,-88(fp)
10002b60:	1085883a 	add	r2,r2,r2
10002b64:	1085883a 	add	r2,r2,r2
10002b68:	e0ffeb17 	ldw	r3,-84(fp)
10002b6c:	1885883a 	add	r2,r3,r2
10002b70:	10000015 	stw	zero,0(r2)
10002b74:	00000806 	br	10002b98 <getTreeInflateDynamic+0x618>
          else bitlen_d[i - HLIT] = 0;
10002b78:	e0ffea17 	ldw	r3,-88(fp)
10002b7c:	e0bff017 	ldw	r2,-64(fp)
10002b80:	1885c83a 	sub	r2,r3,r2
10002b84:	1085883a 	add	r2,r2,r2
10002b88:	1085883a 	add	r2,r2,r2
10002b8c:	e0ffec17 	ldw	r3,-80(fp)
10002b90:	1885883a 	add	r2,r3,r2
10002b94:	10000015 	stw	zero,0(r2)
          ++i;
10002b98:	e0bfea17 	ldw	r2,-88(fp)
10002b9c:	10800044 	addi	r2,r2,1
10002ba0:	e0bfea15 	stw	r2,-88(fp)
        unsigned replength = 11; /*read in the bits that indicate repeat length*/
        if((*bp + 7) > inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
        replength += readBitsFromStream(bp, in, 7);

        /*repeat this value in the next lengths*/
        for(n = 0; n < replength; ++n)
10002ba4:	e0bfe917 	ldw	r2,-92(fp)
10002ba8:	10800044 	addi	r2,r2,1
10002bac:	e0bfe915 	stw	r2,-92(fp)
10002bb0:	e0ffe917 	ldw	r3,-92(fp)
10002bb4:	e0bff617 	ldw	r2,-40(fp)
10002bb8:	18bfdc36 	bltu	r3,r2,10002b2c <__alt_data_end+0xf8002b2c>
10002bbc:	00000f06 	br	10002bfc <getTreeInflateDynamic+0x67c>
          ++i;
        }
      }
      else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
      {
        if(code == (unsigned)(-1))
10002bc0:	e0bff317 	ldw	r2,-52(fp)
10002bc4:	10bfffd8 	cmpnei	r2,r2,-1
10002bc8:	1000091e 	bne	r2,zero,10002bf0 <getTreeInflateDynamic+0x670>
        {
          /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
          (10=no endcode, 11=wrong jump outside of tree)*/
          error = (*bp) > inbitlength ? 10 : 11;
10002bcc:	e0bfff17 	ldw	r2,-4(fp)
10002bd0:	10800017 	ldw	r2,0(r2)
10002bd4:	e0ffef17 	ldw	r3,-68(fp)
10002bd8:	1880022e 	bgeu	r3,r2,10002be4 <getTreeInflateDynamic+0x664>
10002bdc:	00800284 	movi	r2,10
10002be0:	00000106 	br	10002be8 <getTreeInflateDynamic+0x668>
10002be4:	008002c4 	movi	r2,11
10002be8:	e0bfe815 	stw	r2,-96(fp)
        }
        else error = 16; /*unexisting code, this can never happen*/
        break;
10002bec:	00000806 	br	10002c10 <getTreeInflateDynamic+0x690>
        {
          /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
          (10=no endcode, 11=wrong jump outside of tree)*/
          error = (*bp) > inbitlength ? 10 : 11;
        }
        else error = 16; /*unexisting code, this can never happen*/
10002bf0:	00800404 	movi	r2,16
10002bf4:	e0bfe815 	stw	r2,-96(fp)
        break;
10002bf8:	00000506 	br	10002c10 <getTreeInflateDynamic+0x690>
    for(i = 0; i != NUM_DEFLATE_CODE_SYMBOLS; ++i) bitlen_ll[i] = 0;
    for(i = 0; i != NUM_DISTANCE_SYMBOLS; ++i) bitlen_d[i] = 0;

    /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
    i = 0;
    while(i < HLIT + HDIST)
10002bfc:	e0fff017 	ldw	r3,-64(fp)
10002c00:	e0bff117 	ldw	r2,-60(fp)
10002c04:	1885883a 	add	r2,r3,r2
10002c08:	e0ffea17 	ldw	r3,-88(fp)
10002c0c:	18befb36 	bltu	r3,r2,100027fc <__alt_data_end+0xf80027fc>
        }
        else error = 16; /*unexisting code, this can never happen*/
        break;
      }
    }
    if(error) break;
10002c10:	e0bfe817 	ldw	r2,-96(fp)
10002c14:	1000181e 	bne	r2,zero,10002c78 <getTreeInflateDynamic+0x6f8>

    if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/
10002c18:	e0bfeb17 	ldw	r2,-84(fp)
10002c1c:	10810004 	addi	r2,r2,1024
10002c20:	10800017 	ldw	r2,0(r2)
10002c24:	1000031e 	bne	r2,zero,10002c34 <getTreeInflateDynamic+0x6b4>
10002c28:	00801004 	movi	r2,64
10002c2c:	e0bfe815 	stw	r2,-96(fp)
10002c30:	00001406 	br	10002c84 <getTreeInflateDynamic+0x704>

    /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
    error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
10002c34:	e13ffc17 	ldw	r4,-16(fp)
10002c38:	e17feb17 	ldw	r5,-84(fp)
10002c3c:	01804804 	movi	r6,288
10002c40:	01c003c4 	movi	r7,15
10002c44:	00015ac0 	call	100015ac <HuffmanTree_makeFromLengths>
10002c48:	e0bfe815 	stw	r2,-96(fp)
    if(error) break;
10002c4c:	e0bfe817 	ldw	r2,-96(fp)
10002c50:	10000b1e 	bne	r2,zero,10002c80 <getTreeInflateDynamic+0x700>
    error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);
10002c54:	e13ffd17 	ldw	r4,-12(fp)
10002c58:	e17fec17 	ldw	r5,-80(fp)
10002c5c:	01800804 	movi	r6,32
10002c60:	01c003c4 	movi	r7,15
10002c64:	00015ac0 	call	100015ac <HuffmanTree_makeFromLengths>
10002c68:	e0bfe815 	stw	r2,-96(fp)

    break; /*end of error-while*/
10002c6c:	00000506 	br	10002c84 <getTreeInflateDynamic+0x704>
      if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
      else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
    }

    error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
    if(error) break;
10002c70:	0001883a 	nop
10002c74:	00000306 	br	10002c84 <getTreeInflateDynamic+0x704>
        }
        else error = 16; /*unexisting code, this can never happen*/
        break;
      }
    }
    if(error) break;
10002c78:	0001883a 	nop
10002c7c:	00000106 	br	10002c84 <getTreeInflateDynamic+0x704>

    if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/

    /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
    error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
    if(error) break;
10002c80:	0001883a 	nop
    error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);

    break; /*end of error-while*/
  }

  lodepng_free(bitlen_cl);
10002c84:	e13fed17 	ldw	r4,-76(fp)
10002c88:	000025c0 	call	1000025c <lodepng_free>
  lodepng_free(bitlen_ll);
10002c8c:	e13feb17 	ldw	r4,-84(fp)
10002c90:	000025c0 	call	1000025c <lodepng_free>
  lodepng_free(bitlen_d);
10002c94:	e13fec17 	ldw	r4,-80(fp)
10002c98:	000025c0 	call	1000025c <lodepng_free>
  HuffmanTree_cleanup(&tree_cl);
10002c9c:	e0bff704 	addi	r2,fp,-36
10002ca0:	1009883a 	mov	r4,r2
10002ca4:	0000fd80 	call	10000fd8 <HuffmanTree_cleanup>

  return error;
10002ca8:	e0bfe817 	ldw	r2,-96(fp)
}
10002cac:	e037883a 	mov	sp,fp
10002cb0:	dfc00217 	ldw	ra,8(sp)
10002cb4:	df000117 	ldw	fp,4(sp)
10002cb8:	dc000017 	ldw	r16,0(sp)
10002cbc:	dec00304 	addi	sp,sp,12
10002cc0:	f800283a 	ret

10002cc4 <inflateHuffmanBlock>:

/*inflate a block with dynamic of fixed Huffman tree*/
static unsigned inflateHuffmanBlock(ucvector* out, const unsigned char* in, size_t* bp,
                                    size_t* pos, size_t inlength, unsigned btype)
{
10002cc4:	deffe404 	addi	sp,sp,-112
10002cc8:	dfc01b15 	stw	ra,108(sp)
10002ccc:	df001a15 	stw	fp,104(sp)
10002cd0:	df001a04 	addi	fp,sp,104
10002cd4:	e13ffc15 	stw	r4,-16(fp)
10002cd8:	e17ffd15 	stw	r5,-12(fp)
10002cdc:	e1bffe15 	stw	r6,-8(fp)
10002ce0:	e1ffff15 	stw	r7,-4(fp)
  unsigned error = 0;
10002ce4:	e03fe715 	stw	zero,-100(fp)
  HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
  HuffmanTree tree_d; /*the huffman tree for distance codes*/
  size_t inbitlength = inlength * 8;
10002ce8:	e0800217 	ldw	r2,8(fp)
10002cec:	100490fa 	slli	r2,r2,3
10002cf0:	e0bfea15 	stw	r2,-88(fp)

  HuffmanTree_init(&tree_ll);
10002cf4:	e0bff204 	addi	r2,fp,-56
10002cf8:	1009883a 	mov	r4,r2
10002cfc:	0000fa00 	call	10000fa0 <HuffmanTree_init>
  HuffmanTree_init(&tree_d);
10002d00:	e0bff704 	addi	r2,fp,-36
10002d04:	1009883a 	mov	r4,r2
10002d08:	0000fa00 	call	10000fa0 <HuffmanTree_init>

  if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
10002d0c:	e0800317 	ldw	r2,12(fp)
10002d10:	10800058 	cmpnei	r2,r2,1
10002d14:	1000061e 	bne	r2,zero,10002d30 <inflateHuffmanBlock+0x6c>
10002d18:	e0fff204 	addi	r3,fp,-56
10002d1c:	e0bff704 	addi	r2,fp,-36
10002d20:	1809883a 	mov	r4,r3
10002d24:	100b883a 	mov	r5,r2
10002d28:	00025440 	call	10002544 <getTreeInflateFixed>
  else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);

  while(!error) /*decode all symbols until end reached, breaks at end code*/
10002d2c:	0000e806 	br	100030d0 <inflateHuffmanBlock+0x40c>

  HuffmanTree_init(&tree_ll);
  HuffmanTree_init(&tree_d);

  if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
  else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);
10002d30:	e0800317 	ldw	r2,12(fp)
10002d34:	10800098 	cmpnei	r2,r2,2
10002d38:	1000e51e 	bne	r2,zero,100030d0 <inflateHuffmanBlock+0x40c>
10002d3c:	e0fff204 	addi	r3,fp,-56
10002d40:	e0bff704 	addi	r2,fp,-36
10002d44:	e1000217 	ldw	r4,8(fp)
10002d48:	d9000015 	stw	r4,0(sp)
10002d4c:	1809883a 	mov	r4,r3
10002d50:	100b883a 	mov	r5,r2
10002d54:	e1bffd17 	ldw	r6,-12(fp)
10002d58:	e1fffe17 	ldw	r7,-8(fp)
10002d5c:	00025800 	call	10002580 <getTreeInflateDynamic>
10002d60:	e0bfe715 	stw	r2,-100(fp)

  while(!error) /*decode all symbols until end reached, breaks at end code*/
10002d64:	0000da06 	br	100030d0 <inflateHuffmanBlock+0x40c>
  {
    /*code_ll is literal, length or end code*/
    unsigned code_ll = huffmanDecodeSymbol(in, bp, &tree_ll, inbitlength);
10002d68:	e0bff204 	addi	r2,fp,-56
10002d6c:	e13ffd17 	ldw	r4,-12(fp)
10002d70:	e17ffe17 	ldw	r5,-8(fp)
10002d74:	100d883a 	mov	r6,r2
10002d78:	e1ffea17 	ldw	r7,-88(fp)
10002d7c:	00024440 	call	10002444 <huffmanDecodeSymbol>
10002d80:	e0bfeb15 	stw	r2,-84(fp)
    if(code_ll <= 255) /*literal symbol*/
10002d84:	e0bfeb17 	ldw	r2,-84(fp)
10002d88:	10804028 	cmpgeui	r2,r2,256
10002d8c:	1000171e 	bne	r2,zero,10002dec <inflateHuffmanBlock+0x128>
    {
      /*ucvector_push_back would do the same, but for some reason the two lines below run 10% faster*/
      if(!ucvector_resize(out, (*pos) + 1)) ERROR_BREAK(83 /*alloc fail*/);
10002d90:	e0bfff17 	ldw	r2,-4(fp)
10002d94:	10800017 	ldw	r2,0(r2)
10002d98:	10800044 	addi	r2,r2,1
10002d9c:	e13ffc17 	ldw	r4,-16(fp)
10002da0:	100b883a 	mov	r5,r2
10002da4:	00006140 	call	10000614 <ucvector_resize>
10002da8:	1000031e 	bne	r2,zero,10002db8 <inflateHuffmanBlock+0xf4>
10002dac:	008014c4 	movi	r2,83
10002db0:	e0bfe715 	stw	r2,-100(fp)
10002db4:	0000ca06 	br	100030e0 <inflateHuffmanBlock+0x41c>
      out->data[*pos] = (unsigned char)code_ll;
10002db8:	e0bffc17 	ldw	r2,-16(fp)
10002dbc:	10c00017 	ldw	r3,0(r2)
10002dc0:	e0bfff17 	ldw	r2,-4(fp)
10002dc4:	10800017 	ldw	r2,0(r2)
10002dc8:	1885883a 	add	r2,r3,r2
10002dcc:	e0ffeb17 	ldw	r3,-84(fp)
10002dd0:	10c00005 	stb	r3,0(r2)
      ++(*pos);
10002dd4:	e0bfff17 	ldw	r2,-4(fp)
10002dd8:	10800017 	ldw	r2,0(r2)
10002ddc:	10c00044 	addi	r3,r2,1
10002de0:	e0bfff17 	ldw	r2,-4(fp)
10002de4:	10c00015 	stw	r3,0(r2)
10002de8:	0000b906 	br	100030d0 <inflateHuffmanBlock+0x40c>
    }
    else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/
10002dec:	e0bfeb17 	ldw	r2,-84(fp)
10002df0:	10804070 	cmpltui	r2,r2,257
10002df4:	1000a91e 	bne	r2,zero,1000309c <inflateHuffmanBlock+0x3d8>
10002df8:	e0bfeb17 	ldw	r2,-84(fp)
10002dfc:	108047a8 	cmpgeui	r2,r2,286
10002e00:	1000a61e 	bne	r2,zero,1000309c <inflateHuffmanBlock+0x3d8>
      unsigned code_d, distance;
      unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
      size_t start, forward, backward, length;

      /*part 1: get length base*/
      length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
10002e04:	e0bfeb17 	ldw	r2,-84(fp)
10002e08:	10bfbfc4 	addi	r2,r2,-257
10002e0c:	00c400b4 	movhi	r3,4098
10002e10:	18c9d704 	addi	r3,r3,10076
10002e14:	1085883a 	add	r2,r2,r2
10002e18:	1085883a 	add	r2,r2,r2
10002e1c:	1885883a 	add	r2,r3,r2
10002e20:	10800017 	ldw	r2,0(r2)
10002e24:	e0bfec15 	stw	r2,-80(fp)

      /*part 2: get extra bits and add the value of that to length*/
      numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
10002e28:	e0bfeb17 	ldw	r2,-84(fp)
10002e2c:	10bfbfc4 	addi	r2,r2,-257
10002e30:	00c400b4 	movhi	r3,4098
10002e34:	18c9f404 	addi	r3,r3,10192
10002e38:	1085883a 	add	r2,r2,r2
10002e3c:	1085883a 	add	r2,r2,r2
10002e40:	1885883a 	add	r2,r3,r2
10002e44:	10800017 	ldw	r2,0(r2)
10002e48:	e0bfed15 	stw	r2,-76(fp)
      if((*bp + numextrabits_l) > inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
10002e4c:	e0bffe17 	ldw	r2,-8(fp)
10002e50:	10c00017 	ldw	r3,0(r2)
10002e54:	e0bfed17 	ldw	r2,-76(fp)
10002e58:	1885883a 	add	r2,r3,r2
10002e5c:	e0ffea17 	ldw	r3,-88(fp)
10002e60:	1880032e 	bgeu	r3,r2,10002e70 <inflateHuffmanBlock+0x1ac>
10002e64:	00800cc4 	movi	r2,51
10002e68:	e0bfe715 	stw	r2,-100(fp)
10002e6c:	00009c06 	br	100030e0 <inflateHuffmanBlock+0x41c>
      length += readBitsFromStream(bp, in, numextrabits_l);
10002e70:	e13ffe17 	ldw	r4,-8(fp)
10002e74:	e17ffd17 	ldw	r5,-12(fp)
10002e78:	e1bfed17 	ldw	r6,-76(fp)
10002e7c:	0000ef80 	call	10000ef8 <readBitsFromStream>
10002e80:	e0ffec17 	ldw	r3,-80(fp)
10002e84:	1885883a 	add	r2,r3,r2
10002e88:	e0bfec15 	stw	r2,-80(fp)

      /*part 3: get distance code*/
      code_d = huffmanDecodeSymbol(in, bp, &tree_d, inbitlength);
10002e8c:	e0bff704 	addi	r2,fp,-36
10002e90:	e13ffd17 	ldw	r4,-12(fp)
10002e94:	e17ffe17 	ldw	r5,-8(fp)
10002e98:	100d883a 	mov	r6,r2
10002e9c:	e1ffea17 	ldw	r7,-88(fp)
10002ea0:	00024440 	call	10002444 <huffmanDecodeSymbol>
10002ea4:	e0bfee15 	stw	r2,-72(fp)
      if(code_d > 29)
10002ea8:	e0bfee17 	ldw	r2,-72(fp)
10002eac:	108007b0 	cmpltui	r2,r2,30
10002eb0:	1000101e 	bne	r2,zero,10002ef4 <inflateHuffmanBlock+0x230>
      {
        if(code_ll == (unsigned)(-1)) /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
10002eb4:	e0bfeb17 	ldw	r2,-84(fp)
10002eb8:	10bfffd8 	cmpnei	r2,r2,-1
10002ebc:	10000a1e 	bne	r2,zero,10002ee8 <inflateHuffmanBlock+0x224>
        {
          /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
          (10=no endcode, 11=wrong jump outside of tree)*/
          error = (*bp) > inlength * 8 ? 10 : 11;
10002ec0:	e0bffe17 	ldw	r2,-8(fp)
10002ec4:	10800017 	ldw	r2,0(r2)
10002ec8:	e0c00217 	ldw	r3,8(fp)
10002ecc:	180690fa 	slli	r3,r3,3
10002ed0:	1880022e 	bgeu	r3,r2,10002edc <inflateHuffmanBlock+0x218>
10002ed4:	00800284 	movi	r2,10
10002ed8:	00000106 	br	10002ee0 <inflateHuffmanBlock+0x21c>
10002edc:	008002c4 	movi	r2,11
10002ee0:	e0bfe715 	stw	r2,-100(fp)
        }
        else error = 18; /*error: invalid distance code (30-31 are never used)*/
        break;
10002ee4:	00007e06 	br	100030e0 <inflateHuffmanBlock+0x41c>
        {
          /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
          (10=no endcode, 11=wrong jump outside of tree)*/
          error = (*bp) > inlength * 8 ? 10 : 11;
        }
        else error = 18; /*error: invalid distance code (30-31 are never used)*/
10002ee8:	00800484 	movi	r2,18
10002eec:	e0bfe715 	stw	r2,-100(fp)
        break;
10002ef0:	00007b06 	br	100030e0 <inflateHuffmanBlock+0x41c>
      }
      distance = DISTANCEBASE[code_d];
10002ef4:	00c400b4 	movhi	r3,4098
10002ef8:	18ca1104 	addi	r3,r3,10308
10002efc:	e0bfee17 	ldw	r2,-72(fp)
10002f00:	1085883a 	add	r2,r2,r2
10002f04:	1085883a 	add	r2,r2,r2
10002f08:	1885883a 	add	r2,r3,r2
10002f0c:	10800017 	ldw	r2,0(r2)
10002f10:	e0bfef15 	stw	r2,-68(fp)

      /*part 4: get extra bits from distance*/
      numextrabits_d = DISTANCEEXTRA[code_d];
10002f14:	00c400b4 	movhi	r3,4098
10002f18:	18ca2f04 	addi	r3,r3,10428
10002f1c:	e0bfee17 	ldw	r2,-72(fp)
10002f20:	1085883a 	add	r2,r2,r2
10002f24:	1085883a 	add	r2,r2,r2
10002f28:	1885883a 	add	r2,r3,r2
10002f2c:	10800017 	ldw	r2,0(r2)
10002f30:	e0bff015 	stw	r2,-64(fp)
      if((*bp + numextrabits_d) > inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
10002f34:	e0bffe17 	ldw	r2,-8(fp)
10002f38:	10c00017 	ldw	r3,0(r2)
10002f3c:	e0bff017 	ldw	r2,-64(fp)
10002f40:	1885883a 	add	r2,r3,r2
10002f44:	e0ffea17 	ldw	r3,-88(fp)
10002f48:	1880032e 	bgeu	r3,r2,10002f58 <inflateHuffmanBlock+0x294>
10002f4c:	00800cc4 	movi	r2,51
10002f50:	e0bfe715 	stw	r2,-100(fp)
10002f54:	00006206 	br	100030e0 <inflateHuffmanBlock+0x41c>
      distance += readBitsFromStream(bp, in, numextrabits_d);
10002f58:	e13ffe17 	ldw	r4,-8(fp)
10002f5c:	e17ffd17 	ldw	r5,-12(fp)
10002f60:	e1bff017 	ldw	r6,-64(fp)
10002f64:	0000ef80 	call	10000ef8 <readBitsFromStream>
10002f68:	e0ffef17 	ldw	r3,-68(fp)
10002f6c:	1885883a 	add	r2,r3,r2
10002f70:	e0bfef15 	stw	r2,-68(fp)

      /*part 5: fill in all the out[n] values based on the length and dist*/
      start = (*pos);
10002f74:	e0bfff17 	ldw	r2,-4(fp)
10002f78:	10800017 	ldw	r2,0(r2)
10002f7c:	e0bff115 	stw	r2,-60(fp)
      if(distance > start) ERROR_BREAK(52); /*too long backward distance*/
10002f80:	e0bfef17 	ldw	r2,-68(fp)
10002f84:	e0fff117 	ldw	r3,-60(fp)
10002f88:	1880032e 	bgeu	r3,r2,10002f98 <inflateHuffmanBlock+0x2d4>
10002f8c:	00800d04 	movi	r2,52
10002f90:	e0bfe715 	stw	r2,-100(fp)
10002f94:	00005206 	br	100030e0 <inflateHuffmanBlock+0x41c>
      backward = start - distance;
10002f98:	e0fff117 	ldw	r3,-60(fp)
10002f9c:	e0bfef17 	ldw	r2,-68(fp)
10002fa0:	1885c83a 	sub	r2,r3,r2
10002fa4:	e0bfe915 	stw	r2,-92(fp)

      if(!ucvector_resize(out, (*pos) + length)) ERROR_BREAK(83 /*alloc fail*/);
10002fa8:	e0bfff17 	ldw	r2,-4(fp)
10002fac:	10c00017 	ldw	r3,0(r2)
10002fb0:	e0bfec17 	ldw	r2,-80(fp)
10002fb4:	1885883a 	add	r2,r3,r2
10002fb8:	e13ffc17 	ldw	r4,-16(fp)
10002fbc:	100b883a 	mov	r5,r2
10002fc0:	00006140 	call	10000614 <ucvector_resize>
10002fc4:	1000031e 	bne	r2,zero,10002fd4 <inflateHuffmanBlock+0x310>
10002fc8:	008014c4 	movi	r2,83
10002fcc:	e0bfe715 	stw	r2,-100(fp)
10002fd0:	00004306 	br	100030e0 <inflateHuffmanBlock+0x41c>
      if (distance < length) {
10002fd4:	e0ffef17 	ldw	r3,-68(fp)
10002fd8:	e0bfec17 	ldw	r2,-80(fp)
10002fdc:	18801a2e 	bgeu	r3,r2,10003048 <inflateHuffmanBlock+0x384>
        for(forward = 0; forward < length; ++forward)
10002fe0:	e03fe815 	stw	zero,-96(fp)
10002fe4:	00001406 	br	10003038 <inflateHuffmanBlock+0x374>
        {
          out->data[(*pos)++] = out->data[backward++];
10002fe8:	e0bffc17 	ldw	r2,-16(fp)
10002fec:	10c00017 	ldw	r3,0(r2)
10002ff0:	e0bfff17 	ldw	r2,-4(fp)
10002ff4:	10800017 	ldw	r2,0(r2)
10002ff8:	1887883a 	add	r3,r3,r2
10002ffc:	e13ffc17 	ldw	r4,-16(fp)
10003000:	21400017 	ldw	r5,0(r4)
10003004:	e13fe917 	ldw	r4,-92(fp)
10003008:	2909883a 	add	r4,r5,r4
1000300c:	21000003 	ldbu	r4,0(r4)
10003010:	19000005 	stb	r4,0(r3)
10003014:	10c00044 	addi	r3,r2,1
10003018:	e0bfff17 	ldw	r2,-4(fp)
1000301c:	10c00015 	stw	r3,0(r2)
10003020:	e0bfe917 	ldw	r2,-92(fp)
10003024:	10800044 	addi	r2,r2,1
10003028:	e0bfe915 	stw	r2,-92(fp)
      if(distance > start) ERROR_BREAK(52); /*too long backward distance*/
      backward = start - distance;

      if(!ucvector_resize(out, (*pos) + length)) ERROR_BREAK(83 /*alloc fail*/);
      if (distance < length) {
        for(forward = 0; forward < length; ++forward)
1000302c:	e0bfe817 	ldw	r2,-96(fp)
10003030:	10800044 	addi	r2,r2,1
10003034:	e0bfe815 	stw	r2,-96(fp)
10003038:	e0ffe817 	ldw	r3,-96(fp)
1000303c:	e0bfec17 	ldw	r2,-80(fp)
10003040:	18bfe936 	bltu	r3,r2,10002fe8 <__alt_data_end+0xf8002fe8>
10003044:	00001406 	br	10003098 <inflateHuffmanBlock+0x3d4>
        {
          out->data[(*pos)++] = out->data[backward++];
        }
      } else {
        memcpy(out->data + *pos, out->data + backward, length);
10003048:	e0bffc17 	ldw	r2,-16(fp)
1000304c:	10c00017 	ldw	r3,0(r2)
10003050:	e0bfff17 	ldw	r2,-4(fp)
10003054:	10800017 	ldw	r2,0(r2)
10003058:	1887883a 	add	r3,r3,r2
1000305c:	e0bffc17 	ldw	r2,-16(fp)
10003060:	11000017 	ldw	r4,0(r2)
10003064:	e0bfe917 	ldw	r2,-92(fp)
10003068:	2085883a 	add	r2,r4,r2
1000306c:	1809883a 	mov	r4,r3
10003070:	100b883a 	mov	r5,r2
10003074:	e1bfec17 	ldw	r6,-80(fp)
10003078:	0016dd80 	call	10016dd8 <memcpy>
        *pos += length;
1000307c:	e0bfff17 	ldw	r2,-4(fp)
10003080:	10c00017 	ldw	r3,0(r2)
10003084:	e0bfec17 	ldw	r2,-80(fp)
10003088:	1887883a 	add	r3,r3,r2
1000308c:	e0bfff17 	ldw	r2,-4(fp)
10003090:	10c00015 	stw	r3,0(r2)
      if(!ucvector_resize(out, (*pos) + 1)) ERROR_BREAK(83 /*alloc fail*/);
      out->data[*pos] = (unsigned char)code_ll;
      ++(*pos);
    }
    else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/
    {
10003094:	00000e06 	br	100030d0 <inflateHuffmanBlock+0x40c>
10003098:	00000d06 	br	100030d0 <inflateHuffmanBlock+0x40c>
      } else {
        memcpy(out->data + *pos, out->data + backward, length);
        *pos += length;
      }
    }
    else if(code_ll == 256)
1000309c:	e0bfeb17 	ldw	r2,-84(fp)
100030a0:	10804018 	cmpnei	r2,r2,256
100030a4:	10000d26 	beq	r2,zero,100030dc <inflateHuffmanBlock+0x418>
    }
    else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
    {
      /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
      (10=no endcode, 11=wrong jump outside of tree)*/
      error = ((*bp) > inlength * 8) ? 10 : 11;
100030a8:	e0bffe17 	ldw	r2,-8(fp)
100030ac:	10800017 	ldw	r2,0(r2)
100030b0:	e0c00217 	ldw	r3,8(fp)
100030b4:	180690fa 	slli	r3,r3,3
100030b8:	1880022e 	bgeu	r3,r2,100030c4 <inflateHuffmanBlock+0x400>
100030bc:	00800284 	movi	r2,10
100030c0:	00000106 	br	100030c8 <inflateHuffmanBlock+0x404>
100030c4:	008002c4 	movi	r2,11
100030c8:	e0bfe715 	stw	r2,-100(fp)
      break;
100030cc:	00000406 	br	100030e0 <inflateHuffmanBlock+0x41c>
  HuffmanTree_init(&tree_d);

  if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
  else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);

  while(!error) /*decode all symbols until end reached, breaks at end code*/
100030d0:	e0bfe717 	ldw	r2,-100(fp)
100030d4:	103f2426 	beq	r2,zero,10002d68 <__alt_data_end+0xf8002d68>
100030d8:	00000106 	br	100030e0 <inflateHuffmanBlock+0x41c>
        *pos += length;
      }
    }
    else if(code_ll == 256)
    {
      break; /*end code, break the loop*/
100030dc:	0001883a 	nop
      error = ((*bp) > inlength * 8) ? 10 : 11;
      break;
    }
  }

  HuffmanTree_cleanup(&tree_ll);
100030e0:	e0bff204 	addi	r2,fp,-56
100030e4:	1009883a 	mov	r4,r2
100030e8:	0000fd80 	call	10000fd8 <HuffmanTree_cleanup>
  HuffmanTree_cleanup(&tree_d);
100030ec:	e0bff704 	addi	r2,fp,-36
100030f0:	1009883a 	mov	r4,r2
100030f4:	0000fd80 	call	10000fd8 <HuffmanTree_cleanup>

  return error;
100030f8:	e0bfe717 	ldw	r2,-100(fp)
}
100030fc:	e037883a 	mov	sp,fp
10003100:	dfc00117 	ldw	ra,4(sp)
10003104:	df000017 	ldw	fp,0(sp)
10003108:	dec00204 	addi	sp,sp,8
1000310c:	f800283a 	ret

10003110 <inflateNoCompression>:

static unsigned inflateNoCompression(ucvector* out, const unsigned char* in, size_t* bp, size_t* pos, size_t inlength)
{
10003110:	defff504 	addi	sp,sp,-44
10003114:	dfc00a15 	stw	ra,40(sp)
10003118:	df000915 	stw	fp,36(sp)
1000311c:	df000904 	addi	fp,sp,36
10003120:	e13ffc15 	stw	r4,-16(fp)
10003124:	e17ffd15 	stw	r5,-12(fp)
10003128:	e1bffe15 	stw	r6,-8(fp)
1000312c:	e1ffff15 	stw	r7,-4(fp)
  size_t p;
  unsigned LEN, NLEN, n, error = 0;
10003130:	e03ff915 	stw	zero,-28(fp)

  /*go to first boundary of byte*/
  while(((*bp) & 0x7) != 0) ++(*bp);
10003134:	00000506 	br	1000314c <inflateNoCompression+0x3c>
10003138:	e0bffe17 	ldw	r2,-8(fp)
1000313c:	10800017 	ldw	r2,0(r2)
10003140:	10c00044 	addi	r3,r2,1
10003144:	e0bffe17 	ldw	r2,-8(fp)
10003148:	10c00015 	stw	r3,0(r2)
1000314c:	e0bffe17 	ldw	r2,-8(fp)
10003150:	10800017 	ldw	r2,0(r2)
10003154:	108001cc 	andi	r2,r2,7
10003158:	103ff71e 	bne	r2,zero,10003138 <__alt_data_end+0xf8003138>
  p = (*bp) / 8; /*byte position*/
1000315c:	e0bffe17 	ldw	r2,-8(fp)
10003160:	10800017 	ldw	r2,0(r2)
10003164:	1004d0fa 	srli	r2,r2,3
10003168:	e0bff715 	stw	r2,-36(fp)

  /*read LEN (2 bytes) and NLEN (2 bytes)*/
  if(p + 4 >= inlength) return 52; /*error, bit pointer will jump past memory*/
1000316c:	e0bff717 	ldw	r2,-36(fp)
10003170:	10c00104 	addi	r3,r2,4
10003174:	e0800217 	ldw	r2,8(fp)
10003178:	18800236 	bltu	r3,r2,10003184 <inflateNoCompression+0x74>
1000317c:	00800d04 	movi	r2,52
10003180:	00005706 	br	100032e0 <inflateNoCompression+0x1d0>
  LEN = in[p] + 256u * in[p + 1]; p += 2;
10003184:	e0fffd17 	ldw	r3,-12(fp)
10003188:	e0bff717 	ldw	r2,-36(fp)
1000318c:	1885883a 	add	r2,r3,r2
10003190:	10800003 	ldbu	r2,0(r2)
10003194:	10c03fcc 	andi	r3,r2,255
10003198:	e0bff717 	ldw	r2,-36(fp)
1000319c:	10800044 	addi	r2,r2,1
100031a0:	e13ffd17 	ldw	r4,-12(fp)
100031a4:	2085883a 	add	r2,r4,r2
100031a8:	10800003 	ldbu	r2,0(r2)
100031ac:	10803fcc 	andi	r2,r2,255
100031b0:	1004923a 	slli	r2,r2,8
100031b4:	1885883a 	add	r2,r3,r2
100031b8:	e0bffa15 	stw	r2,-24(fp)
100031bc:	e0bff717 	ldw	r2,-36(fp)
100031c0:	10800084 	addi	r2,r2,2
100031c4:	e0bff715 	stw	r2,-36(fp)
  NLEN = in[p] + 256u * in[p + 1]; p += 2;
100031c8:	e0fffd17 	ldw	r3,-12(fp)
100031cc:	e0bff717 	ldw	r2,-36(fp)
100031d0:	1885883a 	add	r2,r3,r2
100031d4:	10800003 	ldbu	r2,0(r2)
100031d8:	10c03fcc 	andi	r3,r2,255
100031dc:	e0bff717 	ldw	r2,-36(fp)
100031e0:	10800044 	addi	r2,r2,1
100031e4:	e13ffd17 	ldw	r4,-12(fp)
100031e8:	2085883a 	add	r2,r4,r2
100031ec:	10800003 	ldbu	r2,0(r2)
100031f0:	10803fcc 	andi	r2,r2,255
100031f4:	1004923a 	slli	r2,r2,8
100031f8:	1885883a 	add	r2,r3,r2
100031fc:	e0bffb15 	stw	r2,-20(fp)
10003200:	e0bff717 	ldw	r2,-36(fp)
10003204:	10800084 	addi	r2,r2,2
10003208:	e0bff715 	stw	r2,-36(fp)

  /*check if 16-bit NLEN is really the one's complement of LEN*/
  if(LEN + NLEN != 65535) return 21; /*error: NLEN is not one's complement of LEN*/
1000320c:	e0fffa17 	ldw	r3,-24(fp)
10003210:	e0bffb17 	ldw	r2,-20(fp)
10003214:	1887883a 	add	r3,r3,r2
10003218:	00bfffd4 	movui	r2,65535
1000321c:	18800226 	beq	r3,r2,10003228 <inflateNoCompression+0x118>
10003220:	00800544 	movi	r2,21
10003224:	00002e06 	br	100032e0 <inflateNoCompression+0x1d0>

  if(!ucvector_resize(out, (*pos) + LEN)) return 83; /*alloc fail*/
10003228:	e0bfff17 	ldw	r2,-4(fp)
1000322c:	10c00017 	ldw	r3,0(r2)
10003230:	e0bffa17 	ldw	r2,-24(fp)
10003234:	1885883a 	add	r2,r3,r2
10003238:	e13ffc17 	ldw	r4,-16(fp)
1000323c:	100b883a 	mov	r5,r2
10003240:	00006140 	call	10000614 <ucvector_resize>
10003244:	1000021e 	bne	r2,zero,10003250 <inflateNoCompression+0x140>
10003248:	008014c4 	movi	r2,83
1000324c:	00002406 	br	100032e0 <inflateNoCompression+0x1d0>

  /*read the literal data: LEN bytes are now stored in the out buffer*/
  if(p + LEN > inlength) return 23; /*error: reading outside of in buffer*/
10003250:	e0fff717 	ldw	r3,-36(fp)
10003254:	e0bffa17 	ldw	r2,-24(fp)
10003258:	1885883a 	add	r2,r3,r2
1000325c:	e0c00217 	ldw	r3,8(fp)
10003260:	1880022e 	bgeu	r3,r2,1000326c <inflateNoCompression+0x15c>
10003264:	008005c4 	movi	r2,23
10003268:	00001d06 	br	100032e0 <inflateNoCompression+0x1d0>
  for(n = 0; n < LEN; ++n) out->data[(*pos)++] = in[p++];
1000326c:	e03ff815 	stw	zero,-32(fp)
10003270:	00001306 	br	100032c0 <inflateNoCompression+0x1b0>
10003274:	e0bffc17 	ldw	r2,-16(fp)
10003278:	10c00017 	ldw	r3,0(r2)
1000327c:	e0bfff17 	ldw	r2,-4(fp)
10003280:	10800017 	ldw	r2,0(r2)
10003284:	1887883a 	add	r3,r3,r2
10003288:	e17ffd17 	ldw	r5,-12(fp)
1000328c:	e13ff717 	ldw	r4,-36(fp)
10003290:	2909883a 	add	r4,r5,r4
10003294:	21000003 	ldbu	r4,0(r4)
10003298:	19000005 	stb	r4,0(r3)
1000329c:	10c00044 	addi	r3,r2,1
100032a0:	e0bfff17 	ldw	r2,-4(fp)
100032a4:	10c00015 	stw	r3,0(r2)
100032a8:	e0bff717 	ldw	r2,-36(fp)
100032ac:	10800044 	addi	r2,r2,1
100032b0:	e0bff715 	stw	r2,-36(fp)
100032b4:	e0bff817 	ldw	r2,-32(fp)
100032b8:	10800044 	addi	r2,r2,1
100032bc:	e0bff815 	stw	r2,-32(fp)
100032c0:	e0fff817 	ldw	r3,-32(fp)
100032c4:	e0bffa17 	ldw	r2,-24(fp)
100032c8:	18bfea36 	bltu	r3,r2,10003274 <__alt_data_end+0xf8003274>

  (*bp) = p * 8;
100032cc:	e0bff717 	ldw	r2,-36(fp)
100032d0:	100690fa 	slli	r3,r2,3
100032d4:	e0bffe17 	ldw	r2,-8(fp)
100032d8:	10c00015 	stw	r3,0(r2)

  return error;
100032dc:	e0bff917 	ldw	r2,-28(fp)
}
100032e0:	e037883a 	mov	sp,fp
100032e4:	dfc00117 	ldw	ra,4(sp)
100032e8:	df000017 	ldw	fp,0(sp)
100032ec:	dec00204 	addi	sp,sp,8
100032f0:	f800283a 	ret

100032f4 <lodepng_inflatev>:

static unsigned lodepng_inflatev(ucvector* out,
                                 const unsigned char* in, size_t insize,
                                 const LodePNGDecompressSettings* settings)
{
100032f4:	defff304 	addi	sp,sp,-52
100032f8:	dfc00c15 	stw	ra,48(sp)
100032fc:	df000b15 	stw	fp,44(sp)
10003300:	df000b04 	addi	fp,sp,44
10003304:	e13ffc15 	stw	r4,-16(fp)
10003308:	e17ffd15 	stw	r5,-12(fp)
1000330c:	e1bffe15 	stw	r6,-8(fp)
10003310:	e1ffff15 	stw	r7,-4(fp)
  /*bit pointer in the "in" data, current byte is bp >> 3, current bit is bp & 0x7 (from lsb to msb of the byte)*/
  size_t bp = 0;
10003314:	e03ffa15 	stw	zero,-24(fp)
  unsigned BFINAL = 0;
10003318:	e03ff715 	stw	zero,-36(fp)
  size_t pos = 0; /*byte position in the out buffer*/
1000331c:	e03ffb15 	stw	zero,-20(fp)
  unsigned error = 0;
10003320:	e03ff815 	stw	zero,-32(fp)

  (void)settings;

  while(!BFINAL)
10003324:	00003e06 	br	10003420 <lodepng_inflatev+0x12c>
  {
    unsigned BTYPE;
    if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/
10003328:	e0bffa17 	ldw	r2,-24(fp)
1000332c:	10c00084 	addi	r3,r2,2
10003330:	e0bffe17 	ldw	r2,-8(fp)
10003334:	100490fa 	slli	r2,r2,3
10003338:	18800236 	bltu	r3,r2,10003344 <lodepng_inflatev+0x50>
1000333c:	00800d04 	movi	r2,52
10003340:	00003a06 	br	1000342c <lodepng_inflatev+0x138>
    BFINAL = readBitFromStream(&bp, in);
10003344:	e0bffa04 	addi	r2,fp,-24
10003348:	1009883a 	mov	r4,r2
1000334c:	e17ffd17 	ldw	r5,-12(fp)
10003350:	0000e880 	call	10000e88 <readBitFromStream>
10003354:	10803fcc 	andi	r2,r2,255
10003358:	e0bff715 	stw	r2,-36(fp)
    BTYPE = 1u * readBitFromStream(&bp, in);
1000335c:	e0bffa04 	addi	r2,fp,-24
10003360:	1009883a 	mov	r4,r2
10003364:	e17ffd17 	ldw	r5,-12(fp)
10003368:	0000e880 	call	10000e88 <readBitFromStream>
1000336c:	10803fcc 	andi	r2,r2,255
10003370:	e0bff915 	stw	r2,-28(fp)
    BTYPE += 2u * readBitFromStream(&bp, in);
10003374:	e0bffa04 	addi	r2,fp,-24
10003378:	1009883a 	mov	r4,r2
1000337c:	e17ffd17 	ldw	r5,-12(fp)
10003380:	0000e880 	call	10000e88 <readBitFromStream>
10003384:	10803fcc 	andi	r2,r2,255
10003388:	1085883a 	add	r2,r2,r2
1000338c:	e0fff917 	ldw	r3,-28(fp)
10003390:	1885883a 	add	r2,r3,r2
10003394:	e0bff915 	stw	r2,-28(fp)

    if(BTYPE == 3) return 20; /*error: invalid BTYPE*/
10003398:	e0bff917 	ldw	r2,-28(fp)
1000339c:	108000d8 	cmpnei	r2,r2,3
100033a0:	1000021e 	bne	r2,zero,100033ac <lodepng_inflatev+0xb8>
100033a4:	00800504 	movi	r2,20
100033a8:	00002006 	br	1000342c <lodepng_inflatev+0x138>
    else if(BTYPE == 0) error = inflateNoCompression(out, in, &bp, &pos, insize); /*no compression*/
100033ac:	e0bff917 	ldw	r2,-28(fp)
100033b0:	10000b1e 	bne	r2,zero,100033e0 <lodepng_inflatev+0xec>
100033b4:	e0fffa04 	addi	r3,fp,-24
100033b8:	e0bffb04 	addi	r2,fp,-20
100033bc:	e13ffe17 	ldw	r4,-8(fp)
100033c0:	d9000015 	stw	r4,0(sp)
100033c4:	e13ffc17 	ldw	r4,-16(fp)
100033c8:	e17ffd17 	ldw	r5,-12(fp)
100033cc:	180d883a 	mov	r6,r3
100033d0:	100f883a 	mov	r7,r2
100033d4:	00031100 	call	10003110 <inflateNoCompression>
100033d8:	e0bff815 	stw	r2,-32(fp)
100033dc:	00000c06 	br	10003410 <lodepng_inflatev+0x11c>
    else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/
100033e0:	e0fffa04 	addi	r3,fp,-24
100033e4:	e0bffb04 	addi	r2,fp,-20
100033e8:	e13ffe17 	ldw	r4,-8(fp)
100033ec:	d9000015 	stw	r4,0(sp)
100033f0:	e13ff917 	ldw	r4,-28(fp)
100033f4:	d9000115 	stw	r4,4(sp)
100033f8:	e13ffc17 	ldw	r4,-16(fp)
100033fc:	e17ffd17 	ldw	r5,-12(fp)
10003400:	180d883a 	mov	r6,r3
10003404:	100f883a 	mov	r7,r2
10003408:	0002cc40 	call	10002cc4 <inflateHuffmanBlock>
1000340c:	e0bff815 	stw	r2,-32(fp)

    if(error) return error;
10003410:	e0bff817 	ldw	r2,-32(fp)
10003414:	10000226 	beq	r2,zero,10003420 <lodepng_inflatev+0x12c>
10003418:	e0bff817 	ldw	r2,-32(fp)
1000341c:	00000306 	br	1000342c <lodepng_inflatev+0x138>
  size_t pos = 0; /*byte position in the out buffer*/
  unsigned error = 0;

  (void)settings;

  while(!BFINAL)
10003420:	e0bff717 	ldw	r2,-36(fp)
10003424:	103fc026 	beq	r2,zero,10003328 <__alt_data_end+0xf8003328>
    else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/

    if(error) return error;
  }

  return error;
10003428:	e0bff817 	ldw	r2,-32(fp)
}
1000342c:	e037883a 	mov	sp,fp
10003430:	dfc00117 	ldw	ra,4(sp)
10003434:	df000017 	ldw	fp,0(sp)
10003438:	dec00204 	addi	sp,sp,8
1000343c:	f800283a 	ret

10003440 <lodepng_inflate>:

unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
                         const unsigned char* in, size_t insize,
                         const LodePNGDecompressSettings* settings)
{
10003440:	defff604 	addi	sp,sp,-40
10003444:	dfc00915 	stw	ra,36(sp)
10003448:	df000815 	stw	fp,32(sp)
1000344c:	df000804 	addi	fp,sp,32
10003450:	e13ffc15 	stw	r4,-16(fp)
10003454:	e17ffd15 	stw	r5,-12(fp)
10003458:	e1bffe15 	stw	r6,-8(fp)
1000345c:	e1ffff15 	stw	r7,-4(fp)
  unsigned error;
  ucvector v;
  ucvector_init_buffer(&v, *out, *outsize);
10003460:	e0bffc17 	ldw	r2,-16(fp)
10003464:	10c00017 	ldw	r3,0(r2)
10003468:	e0bffd17 	ldw	r2,-12(fp)
1000346c:	10800017 	ldw	r2,0(r2)
10003470:	e13ff904 	addi	r4,fp,-28
10003474:	180b883a 	mov	r5,r3
10003478:	100d883a 	mov	r6,r2
1000347c:	00007980 	call	10000798 <ucvector_init_buffer>
  error = lodepng_inflatev(&v, in, insize, settings);
10003480:	e0bff904 	addi	r2,fp,-28
10003484:	1009883a 	mov	r4,r2
10003488:	e17ffe17 	ldw	r5,-8(fp)
1000348c:	e1bfff17 	ldw	r6,-4(fp)
10003490:	e1c00217 	ldw	r7,8(fp)
10003494:	00032f40 	call	100032f4 <lodepng_inflatev>
10003498:	e0bff815 	stw	r2,-32(fp)
  *out = v.data;
1000349c:	e0fff917 	ldw	r3,-28(fp)
100034a0:	e0bffc17 	ldw	r2,-16(fp)
100034a4:	10c00015 	stw	r3,0(r2)
  *outsize = v.size;
100034a8:	e0fffa17 	ldw	r3,-24(fp)
100034ac:	e0bffd17 	ldw	r2,-12(fp)
100034b0:	10c00015 	stw	r3,0(r2)
  return error;
100034b4:	e0bff817 	ldw	r2,-32(fp)
}
100034b8:	e037883a 	mov	sp,fp
100034bc:	dfc00117 	ldw	ra,4(sp)
100034c0:	df000017 	ldw	fp,0(sp)
100034c4:	dec00204 	addi	sp,sp,8
100034c8:	f800283a 	ret

100034cc <inflate>:

static unsigned inflate(unsigned char** out, size_t* outsize,
                        const unsigned char* in, size_t insize,
                        const LodePNGDecompressSettings* settings)
{
100034cc:	defff904 	addi	sp,sp,-28
100034d0:	dfc00615 	stw	ra,24(sp)
100034d4:	df000515 	stw	fp,20(sp)
100034d8:	df000504 	addi	fp,sp,20
100034dc:	e13ffc15 	stw	r4,-16(fp)
100034e0:	e17ffd15 	stw	r5,-12(fp)
100034e4:	e1bffe15 	stw	r6,-8(fp)
100034e8:	e1ffff15 	stw	r7,-4(fp)
  if(settings->custom_inflate)
100034ec:	e0800217 	ldw	r2,8(fp)
100034f0:	10800217 	ldw	r2,8(r2)
100034f4:	10000a26 	beq	r2,zero,10003520 <inflate+0x54>
  {
    return settings->custom_inflate(out, outsize, in, insize, settings);
100034f8:	e0800217 	ldw	r2,8(fp)
100034fc:	10800217 	ldw	r2,8(r2)
10003500:	e0c00217 	ldw	r3,8(fp)
10003504:	d8c00015 	stw	r3,0(sp)
10003508:	e13ffc17 	ldw	r4,-16(fp)
1000350c:	e17ffd17 	ldw	r5,-12(fp)
10003510:	e1bffe17 	ldw	r6,-8(fp)
10003514:	e1ffff17 	ldw	r7,-4(fp)
10003518:	103ee83a 	callr	r2
1000351c:	00000706 	br	1000353c <inflate+0x70>
  }
  else
  {
    return lodepng_inflate(out, outsize, in, insize, settings);
10003520:	e0800217 	ldw	r2,8(fp)
10003524:	d8800015 	stw	r2,0(sp)
10003528:	e13ffc17 	ldw	r4,-16(fp)
1000352c:	e17ffd17 	ldw	r5,-12(fp)
10003530:	e1bffe17 	ldw	r6,-8(fp)
10003534:	e1ffff17 	ldw	r7,-4(fp)
10003538:	00034400 	call	10003440 <lodepng_inflate>
  }
}
1000353c:	e037883a 	mov	sp,fp
10003540:	dfc00117 	ldw	ra,4(sp)
10003544:	df000017 	ldw	fp,0(sp)
10003548:	dec00204 	addi	sp,sp,8
1000354c:	f800283a 	ret

10003550 <addHuffmanSymbol>:

static const size_t MAX_SUPPORTED_DEFLATE_LENGTH = 258;

/*bitlen is the size in bits of the code*/
static void addHuffmanSymbol(size_t* bp, ucvector* compressed, unsigned code, unsigned bitlen)
{
10003550:	defffa04 	addi	sp,sp,-24
10003554:	dfc00515 	stw	ra,20(sp)
10003558:	df000415 	stw	fp,16(sp)
1000355c:	df000404 	addi	fp,sp,16
10003560:	e13ffc15 	stw	r4,-16(fp)
10003564:	e17ffd15 	stw	r5,-12(fp)
10003568:	e1bffe15 	stw	r6,-8(fp)
1000356c:	e1ffff15 	stw	r7,-4(fp)
  addBitsToStreamReversed(bp, compressed, code, bitlen);
10003570:	e13ffc17 	ldw	r4,-16(fp)
10003574:	e17ffd17 	ldw	r5,-12(fp)
10003578:	e1bffe17 	ldw	r6,-8(fp)
1000357c:	e1ffff17 	ldw	r7,-4(fp)
10003580:	0000d940 	call	10000d94 <addBitsToStreamReversed>
}
10003584:	e037883a 	mov	sp,fp
10003588:	dfc00117 	ldw	ra,4(sp)
1000358c:	df000017 	ldw	fp,0(sp)
10003590:	dec00204 	addi	sp,sp,8
10003594:	f800283a 	ret

10003598 <searchCodeIndex>:

/*search the index in the array, that has the largest value smaller than or equal to the given value,
given array must be sorted (if no value is smaller, it returns the size of the given array)*/
static size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value)
{
10003598:	defff904 	addi	sp,sp,-28
1000359c:	df000615 	stw	fp,24(sp)
100035a0:	df000604 	addi	fp,sp,24
100035a4:	e13ffd15 	stw	r4,-12(fp)
100035a8:	e17ffe15 	stw	r5,-8(fp)
100035ac:	e1bfff15 	stw	r6,-4(fp)
  /*linear search implementation*/
  /*for(size_t i = 1; i < array_size; ++i) if(array[i] > value) return i - 1;
  return array_size - 1;*/

  /*binary search implementation (not that much faster) (precondition: array_size > 0)*/
  size_t left  = 1;
100035b0:	00800044 	movi	r2,1
100035b4:	e0bffa15 	stw	r2,-24(fp)
  size_t right = array_size - 1;
100035b8:	e0bffe17 	ldw	r2,-8(fp)
100035bc:	10bfffc4 	addi	r2,r2,-1
100035c0:	e0bffb15 	stw	r2,-20(fp)
  while(left <= right)
100035c4:	00002106 	br	1000364c <searchCodeIndex+0xb4>
  {
    size_t mid = (left + right) / 2;
100035c8:	e0fffa17 	ldw	r3,-24(fp)
100035cc:	e0bffb17 	ldw	r2,-20(fp)
100035d0:	1885883a 	add	r2,r3,r2
100035d4:	1004d07a 	srli	r2,r2,1
100035d8:	e0bffc15 	stw	r2,-16(fp)
    if(array[mid] <= value) left = mid + 1; /*the value to find is more to the right*/
100035dc:	e0bffc17 	ldw	r2,-16(fp)
100035e0:	1085883a 	add	r2,r2,r2
100035e4:	1085883a 	add	r2,r2,r2
100035e8:	e0fffd17 	ldw	r3,-12(fp)
100035ec:	1885883a 	add	r2,r3,r2
100035f0:	10800017 	ldw	r2,0(r2)
100035f4:	e0ffff17 	ldw	r3,-4(fp)
100035f8:	18800436 	bltu	r3,r2,1000360c <searchCodeIndex+0x74>
100035fc:	e0bffc17 	ldw	r2,-16(fp)
10003600:	10800044 	addi	r2,r2,1
10003604:	e0bffa15 	stw	r2,-24(fp)
10003608:	00001006 	br	1000364c <searchCodeIndex+0xb4>
    else if(array[mid - 1] > value) right = mid - 1; /*the value to find is more to the left*/
1000360c:	e0bffc17 	ldw	r2,-16(fp)
10003610:	10bfffc4 	addi	r2,r2,-1
10003614:	1085883a 	add	r2,r2,r2
10003618:	1085883a 	add	r2,r2,r2
1000361c:	e0fffd17 	ldw	r3,-12(fp)
10003620:	1885883a 	add	r2,r3,r2
10003624:	10800017 	ldw	r2,0(r2)
10003628:	e0ffff17 	ldw	r3,-4(fp)
1000362c:	1880042e 	bgeu	r3,r2,10003640 <searchCodeIndex+0xa8>
10003630:	e0bffc17 	ldw	r2,-16(fp)
10003634:	10bfffc4 	addi	r2,r2,-1
10003638:	e0bffb15 	stw	r2,-20(fp)
1000363c:	00000306 	br	1000364c <searchCodeIndex+0xb4>
    else return mid - 1;
10003640:	e0bffc17 	ldw	r2,-16(fp)
10003644:	10bfffc4 	addi	r2,r2,-1
10003648:	00000506 	br	10003660 <searchCodeIndex+0xc8>
  return array_size - 1;*/

  /*binary search implementation (not that much faster) (precondition: array_size > 0)*/
  size_t left  = 1;
  size_t right = array_size - 1;
  while(left <= right)
1000364c:	e0bffa17 	ldw	r2,-24(fp)
10003650:	e0fffb17 	ldw	r3,-20(fp)
10003654:	18bfdc2e 	bgeu	r3,r2,100035c8 <__alt_data_end+0xf80035c8>
    size_t mid = (left + right) / 2;
    if(array[mid] <= value) left = mid + 1; /*the value to find is more to the right*/
    else if(array[mid - 1] > value) right = mid - 1; /*the value to find is more to the left*/
    else return mid - 1;
  }
  return array_size - 1;
10003658:	e0bffe17 	ldw	r2,-8(fp)
1000365c:	10bfffc4 	addi	r2,r2,-1
}
10003660:	e037883a 	mov	sp,fp
10003664:	df000017 	ldw	fp,0(sp)
10003668:	dec00104 	addi	sp,sp,4
1000366c:	f800283a 	ret

10003670 <addLengthDistance>:

static void addLengthDistance(uivector* values, size_t length, size_t distance)
{
10003670:	defff704 	addi	sp,sp,-36
10003674:	dfc00815 	stw	ra,32(sp)
10003678:	df000715 	stw	fp,28(sp)
1000367c:	df000704 	addi	fp,sp,28
10003680:	e13ffd15 	stw	r4,-12(fp)
10003684:	e17ffe15 	stw	r5,-8(fp)
10003688:	e1bfff15 	stw	r6,-4(fp)
  0-255: literal bytes
  256: end
  257-285: length/distance pair (length code, followed by extra length bits, distance code, extra distance bits)
  286-287: invalid*/

  unsigned length_code = (unsigned)searchCodeIndex(LENGTHBASE, 29, length);
1000368c:	010400b4 	movhi	r4,4098
10003690:	2109d704 	addi	r4,r4,10076
10003694:	01400744 	movi	r5,29
10003698:	e1bffe17 	ldw	r6,-8(fp)
1000369c:	00035980 	call	10003598 <searchCodeIndex>
100036a0:	e0bff915 	stw	r2,-28(fp)
  unsigned extra_length = (unsigned)(length - LENGTHBASE[length_code]);
100036a4:	00c400b4 	movhi	r3,4098
100036a8:	18c9d704 	addi	r3,r3,10076
100036ac:	e0bff917 	ldw	r2,-28(fp)
100036b0:	1085883a 	add	r2,r2,r2
100036b4:	1085883a 	add	r2,r2,r2
100036b8:	1885883a 	add	r2,r3,r2
100036bc:	10800017 	ldw	r2,0(r2)
100036c0:	e0fffe17 	ldw	r3,-8(fp)
100036c4:	1885c83a 	sub	r2,r3,r2
100036c8:	e0bffa15 	stw	r2,-24(fp)
  unsigned dist_code = (unsigned)searchCodeIndex(DISTANCEBASE, 30, distance);
100036cc:	010400b4 	movhi	r4,4098
100036d0:	210a1104 	addi	r4,r4,10308
100036d4:	01400784 	movi	r5,30
100036d8:	e1bfff17 	ldw	r6,-4(fp)
100036dc:	00035980 	call	10003598 <searchCodeIndex>
100036e0:	e0bffb15 	stw	r2,-20(fp)
  unsigned extra_distance = (unsigned)(distance - DISTANCEBASE[dist_code]);
100036e4:	00c400b4 	movhi	r3,4098
100036e8:	18ca1104 	addi	r3,r3,10308
100036ec:	e0bffb17 	ldw	r2,-20(fp)
100036f0:	1085883a 	add	r2,r2,r2
100036f4:	1085883a 	add	r2,r2,r2
100036f8:	1885883a 	add	r2,r3,r2
100036fc:	10800017 	ldw	r2,0(r2)
10003700:	e0ffff17 	ldw	r3,-4(fp)
10003704:	1885c83a 	sub	r2,r3,r2
10003708:	e0bffc15 	stw	r2,-16(fp)

  uivector_push_back(values, length_code + FIRST_LENGTH_CODE_INDEX);
1000370c:	e0bff917 	ldw	r2,-28(fp)
10003710:	10804044 	addi	r2,r2,257
10003714:	e13ffd17 	ldw	r4,-12(fp)
10003718:	100b883a 	mov	r5,r2
1000371c:	00004dc0 	call	100004dc <uivector_push_back>
  uivector_push_back(values, extra_length);
10003720:	e13ffd17 	ldw	r4,-12(fp)
10003724:	e17ffa17 	ldw	r5,-24(fp)
10003728:	00004dc0 	call	100004dc <uivector_push_back>
  uivector_push_back(values, dist_code);
1000372c:	e13ffd17 	ldw	r4,-12(fp)
10003730:	e17ffb17 	ldw	r5,-20(fp)
10003734:	00004dc0 	call	100004dc <uivector_push_back>
  uivector_push_back(values, extra_distance);
10003738:	e13ffd17 	ldw	r4,-12(fp)
1000373c:	e17ffc17 	ldw	r5,-16(fp)
10003740:	00004dc0 	call	100004dc <uivector_push_back>
}
10003744:	e037883a 	mov	sp,fp
10003748:	dfc00117 	ldw	ra,4(sp)
1000374c:	df000017 	ldw	fp,0(sp)
10003750:	dec00204 	addi	sp,sp,8
10003754:	f800283a 	ret

10003758 <hash_init>:
  unsigned short* chainz; /*those with same amount of zeros*/
  unsigned short* zeros; /*length of zeros streak, used as a second hash chain*/
} Hash;

static unsigned hash_init(Hash* hash, unsigned windowsize)
{
10003758:	defffb04 	addi	sp,sp,-20
1000375c:	dfc00415 	stw	ra,16(sp)
10003760:	df000315 	stw	fp,12(sp)
10003764:	df000304 	addi	fp,sp,12
10003768:	e13ffe15 	stw	r4,-8(fp)
1000376c:	e17fff15 	stw	r5,-4(fp)
  unsigned i;
  hash->head = (int*)lodepng_malloc(sizeof(int) * HASH_NUM_VALUES);
10003770:	d0a00217 	ldw	r2,-32760(gp)
10003774:	1085883a 	add	r2,r2,r2
10003778:	1085883a 	add	r2,r2,r2
1000377c:	1009883a 	mov	r4,r2
10003780:	00001f40 	call	100001f4 <lodepng_malloc>
10003784:	e0fffe17 	ldw	r3,-8(fp)
10003788:	18800015 	stw	r2,0(r3)
  hash->val = (int*)lodepng_malloc(sizeof(int) * windowsize);
1000378c:	e0bfff17 	ldw	r2,-4(fp)
10003790:	1085883a 	add	r2,r2,r2
10003794:	1085883a 	add	r2,r2,r2
10003798:	1009883a 	mov	r4,r2
1000379c:	00001f40 	call	100001f4 <lodepng_malloc>
100037a0:	e0fffe17 	ldw	r3,-8(fp)
100037a4:	18800215 	stw	r2,8(r3)
  hash->chain = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
100037a8:	e0bfff17 	ldw	r2,-4(fp)
100037ac:	1085883a 	add	r2,r2,r2
100037b0:	1009883a 	mov	r4,r2
100037b4:	00001f40 	call	100001f4 <lodepng_malloc>
100037b8:	e0fffe17 	ldw	r3,-8(fp)
100037bc:	18800115 	stw	r2,4(r3)

  hash->zeros = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
100037c0:	e0bfff17 	ldw	r2,-4(fp)
100037c4:	1085883a 	add	r2,r2,r2
100037c8:	1009883a 	mov	r4,r2
100037cc:	00001f40 	call	100001f4 <lodepng_malloc>
100037d0:	e0fffe17 	ldw	r3,-8(fp)
100037d4:	18800515 	stw	r2,20(r3)
  hash->headz = (int*)lodepng_malloc(sizeof(int) * (MAX_SUPPORTED_DEFLATE_LENGTH + 1));
100037d8:	d0a00117 	ldw	r2,-32764(gp)
100037dc:	10800044 	addi	r2,r2,1
100037e0:	1085883a 	add	r2,r2,r2
100037e4:	1085883a 	add	r2,r2,r2
100037e8:	1009883a 	mov	r4,r2
100037ec:	00001f40 	call	100001f4 <lodepng_malloc>
100037f0:	e0fffe17 	ldw	r3,-8(fp)
100037f4:	18800315 	stw	r2,12(r3)
  hash->chainz = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
100037f8:	e0bfff17 	ldw	r2,-4(fp)
100037fc:	1085883a 	add	r2,r2,r2
10003800:	1009883a 	mov	r4,r2
10003804:	00001f40 	call	100001f4 <lodepng_malloc>
10003808:	e0fffe17 	ldw	r3,-8(fp)
1000380c:	18800415 	stw	r2,16(r3)

  if(!hash->head || !hash->chain || !hash->val  || !hash->headz|| !hash->chainz || !hash->zeros)
10003810:	e0bffe17 	ldw	r2,-8(fp)
10003814:	10800017 	ldw	r2,0(r2)
10003818:	10000f26 	beq	r2,zero,10003858 <hash_init+0x100>
1000381c:	e0bffe17 	ldw	r2,-8(fp)
10003820:	10800117 	ldw	r2,4(r2)
10003824:	10000c26 	beq	r2,zero,10003858 <hash_init+0x100>
10003828:	e0bffe17 	ldw	r2,-8(fp)
1000382c:	10800217 	ldw	r2,8(r2)
10003830:	10000926 	beq	r2,zero,10003858 <hash_init+0x100>
10003834:	e0bffe17 	ldw	r2,-8(fp)
10003838:	10800317 	ldw	r2,12(r2)
1000383c:	10000626 	beq	r2,zero,10003858 <hash_init+0x100>
10003840:	e0bffe17 	ldw	r2,-8(fp)
10003844:	10800417 	ldw	r2,16(r2)
10003848:	10000326 	beq	r2,zero,10003858 <hash_init+0x100>
1000384c:	e0bffe17 	ldw	r2,-8(fp)
10003850:	10800517 	ldw	r2,20(r2)
10003854:	1000021e 	bne	r2,zero,10003860 <hash_init+0x108>
  {
    return 83; /*alloc fail*/
10003858:	008014c4 	movi	r2,83
1000385c:	00004f06 	br	1000399c <hash_init+0x244>
  }

  /*initialize hash table*/
  for(i = 0; i != HASH_NUM_VALUES; ++i) hash->head[i] = -1;
10003860:	e03ffd15 	stw	zero,-12(fp)
10003864:	00000b06 	br	10003894 <hash_init+0x13c>
10003868:	e0bffe17 	ldw	r2,-8(fp)
1000386c:	10c00017 	ldw	r3,0(r2)
10003870:	e0bffd17 	ldw	r2,-12(fp)
10003874:	1085883a 	add	r2,r2,r2
10003878:	1085883a 	add	r2,r2,r2
1000387c:	1885883a 	add	r2,r3,r2
10003880:	00ffffc4 	movi	r3,-1
10003884:	10c00015 	stw	r3,0(r2)
10003888:	e0bffd17 	ldw	r2,-12(fp)
1000388c:	10800044 	addi	r2,r2,1
10003890:	e0bffd15 	stw	r2,-12(fp)
10003894:	d0a00217 	ldw	r2,-32760(gp)
10003898:	e0fffd17 	ldw	r3,-12(fp)
1000389c:	18bff21e 	bne	r3,r2,10003868 <__alt_data_end+0xf8003868>
  for(i = 0; i != windowsize; ++i) hash->val[i] = -1;
100038a0:	e03ffd15 	stw	zero,-12(fp)
100038a4:	00000b06 	br	100038d4 <hash_init+0x17c>
100038a8:	e0bffe17 	ldw	r2,-8(fp)
100038ac:	10c00217 	ldw	r3,8(r2)
100038b0:	e0bffd17 	ldw	r2,-12(fp)
100038b4:	1085883a 	add	r2,r2,r2
100038b8:	1085883a 	add	r2,r2,r2
100038bc:	1885883a 	add	r2,r3,r2
100038c0:	00ffffc4 	movi	r3,-1
100038c4:	10c00015 	stw	r3,0(r2)
100038c8:	e0bffd17 	ldw	r2,-12(fp)
100038cc:	10800044 	addi	r2,r2,1
100038d0:	e0bffd15 	stw	r2,-12(fp)
100038d4:	e0fffd17 	ldw	r3,-12(fp)
100038d8:	e0bfff17 	ldw	r2,-4(fp)
100038dc:	18bff21e 	bne	r3,r2,100038a8 <__alt_data_end+0xf80038a8>
  for(i = 0; i != windowsize; ++i) hash->chain[i] = i; /*same value as index indicates uninitialized*/
100038e0:	e03ffd15 	stw	zero,-12(fp)
100038e4:	00000a06 	br	10003910 <hash_init+0x1b8>
100038e8:	e0bffe17 	ldw	r2,-8(fp)
100038ec:	10c00117 	ldw	r3,4(r2)
100038f0:	e0bffd17 	ldw	r2,-12(fp)
100038f4:	1085883a 	add	r2,r2,r2
100038f8:	1885883a 	add	r2,r3,r2
100038fc:	e0fffd17 	ldw	r3,-12(fp)
10003900:	10c0000d 	sth	r3,0(r2)
10003904:	e0bffd17 	ldw	r2,-12(fp)
10003908:	10800044 	addi	r2,r2,1
1000390c:	e0bffd15 	stw	r2,-12(fp)
10003910:	e0fffd17 	ldw	r3,-12(fp)
10003914:	e0bfff17 	ldw	r2,-4(fp)
10003918:	18bff31e 	bne	r3,r2,100038e8 <__alt_data_end+0xf80038e8>

  for(i = 0; i <= MAX_SUPPORTED_DEFLATE_LENGTH; ++i) hash->headz[i] = -1;
1000391c:	e03ffd15 	stw	zero,-12(fp)
10003920:	00000b06 	br	10003950 <hash_init+0x1f8>
10003924:	e0bffe17 	ldw	r2,-8(fp)
10003928:	10c00317 	ldw	r3,12(r2)
1000392c:	e0bffd17 	ldw	r2,-12(fp)
10003930:	1085883a 	add	r2,r2,r2
10003934:	1085883a 	add	r2,r2,r2
10003938:	1885883a 	add	r2,r3,r2
1000393c:	00ffffc4 	movi	r3,-1
10003940:	10c00015 	stw	r3,0(r2)
10003944:	e0bffd17 	ldw	r2,-12(fp)
10003948:	10800044 	addi	r2,r2,1
1000394c:	e0bffd15 	stw	r2,-12(fp)
10003950:	d0e00117 	ldw	r3,-32764(gp)
10003954:	e0bffd17 	ldw	r2,-12(fp)
10003958:	18bff22e 	bgeu	r3,r2,10003924 <__alt_data_end+0xf8003924>
  for(i = 0; i != windowsize; ++i) hash->chainz[i] = i; /*same value as index indicates uninitialized*/
1000395c:	e03ffd15 	stw	zero,-12(fp)
10003960:	00000a06 	br	1000398c <hash_init+0x234>
10003964:	e0bffe17 	ldw	r2,-8(fp)
10003968:	10c00417 	ldw	r3,16(r2)
1000396c:	e0bffd17 	ldw	r2,-12(fp)
10003970:	1085883a 	add	r2,r2,r2
10003974:	1885883a 	add	r2,r3,r2
10003978:	e0fffd17 	ldw	r3,-12(fp)
1000397c:	10c0000d 	sth	r3,0(r2)
10003980:	e0bffd17 	ldw	r2,-12(fp)
10003984:	10800044 	addi	r2,r2,1
10003988:	e0bffd15 	stw	r2,-12(fp)
1000398c:	e0fffd17 	ldw	r3,-12(fp)
10003990:	e0bfff17 	ldw	r2,-4(fp)
10003994:	18bff31e 	bne	r3,r2,10003964 <__alt_data_end+0xf8003964>

  return 0;
10003998:	0005883a 	mov	r2,zero
}
1000399c:	e037883a 	mov	sp,fp
100039a0:	dfc00117 	ldw	ra,4(sp)
100039a4:	df000017 	ldw	fp,0(sp)
100039a8:	dec00204 	addi	sp,sp,8
100039ac:	f800283a 	ret

100039b0 <hash_cleanup>:

static void hash_cleanup(Hash* hash)
{
100039b0:	defffd04 	addi	sp,sp,-12
100039b4:	dfc00215 	stw	ra,8(sp)
100039b8:	df000115 	stw	fp,4(sp)
100039bc:	df000104 	addi	fp,sp,4
100039c0:	e13fff15 	stw	r4,-4(fp)
  lodepng_free(hash->head);
100039c4:	e0bfff17 	ldw	r2,-4(fp)
100039c8:	10800017 	ldw	r2,0(r2)
100039cc:	1009883a 	mov	r4,r2
100039d0:	000025c0 	call	1000025c <lodepng_free>
  lodepng_free(hash->val);
100039d4:	e0bfff17 	ldw	r2,-4(fp)
100039d8:	10800217 	ldw	r2,8(r2)
100039dc:	1009883a 	mov	r4,r2
100039e0:	000025c0 	call	1000025c <lodepng_free>
  lodepng_free(hash->chain);
100039e4:	e0bfff17 	ldw	r2,-4(fp)
100039e8:	10800117 	ldw	r2,4(r2)
100039ec:	1009883a 	mov	r4,r2
100039f0:	000025c0 	call	1000025c <lodepng_free>

  lodepng_free(hash->zeros);
100039f4:	e0bfff17 	ldw	r2,-4(fp)
100039f8:	10800517 	ldw	r2,20(r2)
100039fc:	1009883a 	mov	r4,r2
10003a00:	000025c0 	call	1000025c <lodepng_free>
  lodepng_free(hash->headz);
10003a04:	e0bfff17 	ldw	r2,-4(fp)
10003a08:	10800317 	ldw	r2,12(r2)
10003a0c:	1009883a 	mov	r4,r2
10003a10:	000025c0 	call	1000025c <lodepng_free>
  lodepng_free(hash->chainz);
10003a14:	e0bfff17 	ldw	r2,-4(fp)
10003a18:	10800417 	ldw	r2,16(r2)
10003a1c:	1009883a 	mov	r4,r2
10003a20:	000025c0 	call	1000025c <lodepng_free>
}
10003a24:	e037883a 	mov	sp,fp
10003a28:	dfc00117 	ldw	ra,4(sp)
10003a2c:	df000017 	ldw	fp,0(sp)
10003a30:	dec00204 	addi	sp,sp,8
10003a34:	f800283a 	ret

10003a38 <getHash>:



static unsigned getHash(const unsigned char* data, size_t size, size_t pos)
{
10003a38:	defff904 	addi	sp,sp,-28
10003a3c:	df000615 	stw	fp,24(sp)
10003a40:	df000604 	addi	fp,sp,24
10003a44:	e13ffd15 	stw	r4,-12(fp)
10003a48:	e17ffe15 	stw	r5,-8(fp)
10003a4c:	e1bfff15 	stw	r6,-4(fp)
  unsigned result = 0;
10003a50:	e03ffa15 	stw	zero,-24(fp)
  if(pos + 2 < size)
10003a54:	e0bfff17 	ldw	r2,-4(fp)
10003a58:	10c00084 	addi	r3,r2,2
10003a5c:	e0bffe17 	ldw	r2,-8(fp)
10003a60:	18801d2e 	bgeu	r3,r2,10003ad8 <getHash+0xa0>
  {
    /*A simple shift and xor hash is used. Since the data of PNGs is dominated
    by zeroes due to the filters, a better hash does not have a significant
    effect on speed in traversing the chain, and causes more time spend on
    calculating the hash.*/
    result ^= (unsigned)(data[pos + 0] << 0u);
10003a64:	e0fffd17 	ldw	r3,-12(fp)
10003a68:	e0bfff17 	ldw	r2,-4(fp)
10003a6c:	1885883a 	add	r2,r3,r2
10003a70:	10800003 	ldbu	r2,0(r2)
10003a74:	10803fcc 	andi	r2,r2,255
10003a78:	e0fffa17 	ldw	r3,-24(fp)
10003a7c:	1884f03a 	xor	r2,r3,r2
10003a80:	e0bffa15 	stw	r2,-24(fp)
    result ^= (unsigned)(data[pos + 1] << 4u);
10003a84:	e0bfff17 	ldw	r2,-4(fp)
10003a88:	10800044 	addi	r2,r2,1
10003a8c:	e0fffd17 	ldw	r3,-12(fp)
10003a90:	1885883a 	add	r2,r3,r2
10003a94:	10800003 	ldbu	r2,0(r2)
10003a98:	10803fcc 	andi	r2,r2,255
10003a9c:	1004913a 	slli	r2,r2,4
10003aa0:	e0fffa17 	ldw	r3,-24(fp)
10003aa4:	1884f03a 	xor	r2,r3,r2
10003aa8:	e0bffa15 	stw	r2,-24(fp)
    result ^= (unsigned)(data[pos + 2] << 8u);
10003aac:	e0bfff17 	ldw	r2,-4(fp)
10003ab0:	10800084 	addi	r2,r2,2
10003ab4:	e0fffd17 	ldw	r3,-12(fp)
10003ab8:	1885883a 	add	r2,r3,r2
10003abc:	10800003 	ldbu	r2,0(r2)
10003ac0:	10803fcc 	andi	r2,r2,255
10003ac4:	1004923a 	slli	r2,r2,8
10003ac8:	e0fffa17 	ldw	r3,-24(fp)
10003acc:	1884f03a 	xor	r2,r3,r2
10003ad0:	e0bffa15 	stw	r2,-24(fp)
10003ad4:	00001e06 	br	10003b50 <getHash+0x118>
  } else {
    size_t amount, i;
    if(pos >= size) return 0;
10003ad8:	e0ffff17 	ldw	r3,-4(fp)
10003adc:	e0bffe17 	ldw	r2,-8(fp)
10003ae0:	18800236 	bltu	r3,r2,10003aec <getHash+0xb4>
10003ae4:	0005883a 	mov	r2,zero
10003ae8:	00001c06 	br	10003b5c <getHash+0x124>
    amount = size - pos;
10003aec:	e0fffe17 	ldw	r3,-8(fp)
10003af0:	e0bfff17 	ldw	r2,-4(fp)
10003af4:	1885c83a 	sub	r2,r3,r2
10003af8:	e0bffc15 	stw	r2,-16(fp)
    for(i = 0; i != amount; ++i) result ^= (unsigned)(data[pos + i] << (i * 8u));
10003afc:	e03ffb15 	stw	zero,-20(fp)
10003b00:	00001006 	br	10003b44 <getHash+0x10c>
10003b04:	e0ffff17 	ldw	r3,-4(fp)
10003b08:	e0bffb17 	ldw	r2,-20(fp)
10003b0c:	1885883a 	add	r2,r3,r2
10003b10:	e0fffd17 	ldw	r3,-12(fp)
10003b14:	1885883a 	add	r2,r3,r2
10003b18:	10800003 	ldbu	r2,0(r2)
10003b1c:	10c03fcc 	andi	r3,r2,255
10003b20:	e0bffb17 	ldw	r2,-20(fp)
10003b24:	100490fa 	slli	r2,r2,3
10003b28:	1884983a 	sll	r2,r3,r2
10003b2c:	e0fffa17 	ldw	r3,-24(fp)
10003b30:	1884f03a 	xor	r2,r3,r2
10003b34:	e0bffa15 	stw	r2,-24(fp)
10003b38:	e0bffb17 	ldw	r2,-20(fp)
10003b3c:	10800044 	addi	r2,r2,1
10003b40:	e0bffb15 	stw	r2,-20(fp)
10003b44:	e0fffb17 	ldw	r3,-20(fp)
10003b48:	e0bffc17 	ldw	r2,-16(fp)
10003b4c:	18bfed1e 	bne	r3,r2,10003b04 <__alt_data_end+0xf8003b04>
  }
  return result & HASH_BIT_MASK;
10003b50:	d0e00317 	ldw	r3,-32756(gp)
10003b54:	e0bffa17 	ldw	r2,-24(fp)
10003b58:	1884703a 	and	r2,r3,r2
}
10003b5c:	e037883a 	mov	sp,fp
10003b60:	df000017 	ldw	fp,0(sp)
10003b64:	dec00104 	addi	sp,sp,4
10003b68:	f800283a 	ret

10003b6c <countZeros>:

static unsigned countZeros(const unsigned char* data, size_t size, size_t pos)
{
10003b6c:	defffa04 	addi	sp,sp,-24
10003b70:	df000515 	stw	fp,20(sp)
10003b74:	df000504 	addi	fp,sp,20
10003b78:	e13ffd15 	stw	r4,-12(fp)
10003b7c:	e17ffe15 	stw	r5,-8(fp)
10003b80:	e1bfff15 	stw	r6,-4(fp)
  const unsigned char* start = data + pos;
10003b84:	e0fffd17 	ldw	r3,-12(fp)
10003b88:	e0bfff17 	ldw	r2,-4(fp)
10003b8c:	1885883a 	add	r2,r3,r2
10003b90:	e0bffc15 	stw	r2,-16(fp)
  const unsigned char* end = start + MAX_SUPPORTED_DEFLATE_LENGTH;
10003b94:	d0a00117 	ldw	r2,-32764(gp)
10003b98:	e0fffc17 	ldw	r3,-16(fp)
10003b9c:	1885883a 	add	r2,r3,r2
10003ba0:	e0bffb15 	stw	r2,-20(fp)
  if(end > data + size) end = data + size;
10003ba4:	e0fffd17 	ldw	r3,-12(fp)
10003ba8:	e0bffe17 	ldw	r2,-8(fp)
10003bac:	1887883a 	add	r3,r3,r2
10003bb0:	e0bffb17 	ldw	r2,-20(fp)
10003bb4:	1880042e 	bgeu	r3,r2,10003bc8 <countZeros+0x5c>
10003bb8:	e0fffd17 	ldw	r3,-12(fp)
10003bbc:	e0bffe17 	ldw	r2,-8(fp)
10003bc0:	1885883a 	add	r2,r3,r2
10003bc4:	e0bffb15 	stw	r2,-20(fp)
  data = start;
10003bc8:	e0bffc17 	ldw	r2,-16(fp)
10003bcc:	e0bffd15 	stw	r2,-12(fp)
  while(data != end && *data == 0) ++data;
10003bd0:	00000306 	br	10003be0 <countZeros+0x74>
10003bd4:	e0bffd17 	ldw	r2,-12(fp)
10003bd8:	10800044 	addi	r2,r2,1
10003bdc:	e0bffd15 	stw	r2,-12(fp)
10003be0:	e0fffd17 	ldw	r3,-12(fp)
10003be4:	e0bffb17 	ldw	r2,-20(fp)
10003be8:	18800426 	beq	r3,r2,10003bfc <countZeros+0x90>
10003bec:	e0bffd17 	ldw	r2,-12(fp)
10003bf0:	10800003 	ldbu	r2,0(r2)
10003bf4:	10803fcc 	andi	r2,r2,255
10003bf8:	103ff626 	beq	r2,zero,10003bd4 <__alt_data_end+0xf8003bd4>
  /*subtracting two addresses returned as 32-bit number (max value is MAX_SUPPORTED_DEFLATE_LENGTH)*/
  return (unsigned)(data - start);
10003bfc:	e0fffd17 	ldw	r3,-12(fp)
10003c00:	e0bffc17 	ldw	r2,-16(fp)
10003c04:	1885c83a 	sub	r2,r3,r2
}
10003c08:	e037883a 	mov	sp,fp
10003c0c:	df000017 	ldw	fp,0(sp)
10003c10:	dec00104 	addi	sp,sp,4
10003c14:	f800283a 	ret

10003c18 <updateHashChain>:

/*wpos = pos & (windowsize - 1)*/
static void updateHashChain(Hash* hash, size_t wpos, unsigned hashval, unsigned short numzeros)
{
10003c18:	defffb04 	addi	sp,sp,-20
10003c1c:	df000415 	stw	fp,16(sp)
10003c20:	df000404 	addi	fp,sp,16
10003c24:	e13ffc15 	stw	r4,-16(fp)
10003c28:	e17ffd15 	stw	r5,-12(fp)
10003c2c:	e1bffe15 	stw	r6,-8(fp)
10003c30:	3805883a 	mov	r2,r7
10003c34:	e0bfff0d 	sth	r2,-4(fp)
  hash->val[wpos] = (int)hashval;
10003c38:	e0bffc17 	ldw	r2,-16(fp)
10003c3c:	10c00217 	ldw	r3,8(r2)
10003c40:	e0bffd17 	ldw	r2,-12(fp)
10003c44:	1085883a 	add	r2,r2,r2
10003c48:	1085883a 	add	r2,r2,r2
10003c4c:	1885883a 	add	r2,r3,r2
10003c50:	e0fffe17 	ldw	r3,-8(fp)
10003c54:	10c00015 	stw	r3,0(r2)
  if(hash->head[hashval] != -1) hash->chain[wpos] = hash->head[hashval];
10003c58:	e0bffc17 	ldw	r2,-16(fp)
10003c5c:	10c00017 	ldw	r3,0(r2)
10003c60:	e0bffe17 	ldw	r2,-8(fp)
10003c64:	1085883a 	add	r2,r2,r2
10003c68:	1085883a 	add	r2,r2,r2
10003c6c:	1885883a 	add	r2,r3,r2
10003c70:	10800017 	ldw	r2,0(r2)
10003c74:	10bfffe0 	cmpeqi	r2,r2,-1
10003c78:	10000d1e 	bne	r2,zero,10003cb0 <updateHashChain+0x98>
10003c7c:	e0bffc17 	ldw	r2,-16(fp)
10003c80:	10c00117 	ldw	r3,4(r2)
10003c84:	e0bffd17 	ldw	r2,-12(fp)
10003c88:	1085883a 	add	r2,r2,r2
10003c8c:	1887883a 	add	r3,r3,r2
10003c90:	e0bffc17 	ldw	r2,-16(fp)
10003c94:	11000017 	ldw	r4,0(r2)
10003c98:	e0bffe17 	ldw	r2,-8(fp)
10003c9c:	1085883a 	add	r2,r2,r2
10003ca0:	1085883a 	add	r2,r2,r2
10003ca4:	2085883a 	add	r2,r4,r2
10003ca8:	10800017 	ldw	r2,0(r2)
10003cac:	1880000d 	sth	r2,0(r3)
  hash->head[hashval] = wpos;
10003cb0:	e0bffc17 	ldw	r2,-16(fp)
10003cb4:	10c00017 	ldw	r3,0(r2)
10003cb8:	e0bffe17 	ldw	r2,-8(fp)
10003cbc:	1085883a 	add	r2,r2,r2
10003cc0:	1085883a 	add	r2,r2,r2
10003cc4:	1885883a 	add	r2,r3,r2
10003cc8:	e0fffd17 	ldw	r3,-12(fp)
10003ccc:	10c00015 	stw	r3,0(r2)

  hash->zeros[wpos] = numzeros;
10003cd0:	e0bffc17 	ldw	r2,-16(fp)
10003cd4:	10c00517 	ldw	r3,20(r2)
10003cd8:	e0bffd17 	ldw	r2,-12(fp)
10003cdc:	1085883a 	add	r2,r2,r2
10003ce0:	1885883a 	add	r2,r3,r2
10003ce4:	e0ffff0b 	ldhu	r3,-4(fp)
10003ce8:	10c0000d 	sth	r3,0(r2)
  if(hash->headz[numzeros] != -1) hash->chainz[wpos] = hash->headz[numzeros];
10003cec:	e0bffc17 	ldw	r2,-16(fp)
10003cf0:	10c00317 	ldw	r3,12(r2)
10003cf4:	e0bfff0b 	ldhu	r2,-4(fp)
10003cf8:	1085883a 	add	r2,r2,r2
10003cfc:	1085883a 	add	r2,r2,r2
10003d00:	1885883a 	add	r2,r3,r2
10003d04:	10800017 	ldw	r2,0(r2)
10003d08:	10bfffe0 	cmpeqi	r2,r2,-1
10003d0c:	10000d1e 	bne	r2,zero,10003d44 <updateHashChain+0x12c>
10003d10:	e0bffc17 	ldw	r2,-16(fp)
10003d14:	10c00417 	ldw	r3,16(r2)
10003d18:	e0bffd17 	ldw	r2,-12(fp)
10003d1c:	1085883a 	add	r2,r2,r2
10003d20:	1887883a 	add	r3,r3,r2
10003d24:	e0bffc17 	ldw	r2,-16(fp)
10003d28:	11000317 	ldw	r4,12(r2)
10003d2c:	e0bfff0b 	ldhu	r2,-4(fp)
10003d30:	1085883a 	add	r2,r2,r2
10003d34:	1085883a 	add	r2,r2,r2
10003d38:	2085883a 	add	r2,r4,r2
10003d3c:	10800017 	ldw	r2,0(r2)
10003d40:	1880000d 	sth	r2,0(r3)
  hash->headz[numzeros] = wpos;
10003d44:	e0bffc17 	ldw	r2,-16(fp)
10003d48:	10c00317 	ldw	r3,12(r2)
10003d4c:	e0bfff0b 	ldhu	r2,-4(fp)
10003d50:	1085883a 	add	r2,r2,r2
10003d54:	1085883a 	add	r2,r2,r2
10003d58:	1885883a 	add	r2,r3,r2
10003d5c:	e0fffd17 	ldw	r3,-12(fp)
10003d60:	10c00015 	stw	r3,0(r2)
}
10003d64:	e037883a 	mov	sp,fp
10003d68:	df000017 	ldw	fp,0(sp)
10003d6c:	dec00104 	addi	sp,sp,4
10003d70:	f800283a 	ret

10003d74 <encodeLZ77>:
this hash technique is one out of several ways to speed this up.
*/
static unsigned encodeLZ77(uivector* out, Hash* hash,
                           const unsigned char* in, size_t inpos, size_t insize, unsigned windowsize,
                           unsigned minmatch, unsigned nicematch, unsigned lazymatching)
{
10003d74:	deffe304 	addi	sp,sp,-116
10003d78:	dfc01c15 	stw	ra,112(sp)
10003d7c:	df001b15 	stw	fp,108(sp)
10003d80:	df001b04 	addi	fp,sp,108
10003d84:	e13ffc15 	stw	r4,-16(fp)
10003d88:	e17ffd15 	stw	r5,-12(fp)
10003d8c:	e1bffe15 	stw	r6,-8(fp)
10003d90:	e1ffff15 	stw	r7,-4(fp)
  size_t pos;
  unsigned i, error = 0;
10003d94:	e03fe715 	stw	zero,-100(fp)
  /*for large window lengths, assume the user wants no compression loss. Otherwise, max hash chain length speedup.*/
  unsigned maxchainlength = windowsize >= 8192 ? windowsize : windowsize / 8;
10003d98:	e0800317 	ldw	r2,12(fp)
10003d9c:	10880028 	cmpgeui	r2,r2,8192
10003da0:	1000031e 	bne	r2,zero,10003db0 <encodeLZ77+0x3c>
10003da4:	e0800317 	ldw	r2,12(fp)
10003da8:	1004d0fa 	srli	r2,r2,3
10003dac:	00000106 	br	10003db4 <encodeLZ77+0x40>
10003db0:	e0800317 	ldw	r2,12(fp)
10003db4:	e0bff415 	stw	r2,-48(fp)
  unsigned maxlazymatch = windowsize >= 8192 ? MAX_SUPPORTED_DEFLATE_LENGTH : 64;
10003db8:	e0800317 	ldw	r2,12(fp)
10003dbc:	10880030 	cmpltui	r2,r2,8192
10003dc0:	1000021e 	bne	r2,zero,10003dcc <encodeLZ77+0x58>
10003dc4:	d0a00117 	ldw	r2,-32764(gp)
10003dc8:	00000106 	br	10003dd0 <encodeLZ77+0x5c>
10003dcc:	00801004 	movi	r2,64
10003dd0:	e0bff515 	stw	r2,-44(fp)

  unsigned usezeros = 1; /*not sure if setting it to false for windowsize < 8192 is better or worse*/
10003dd4:	00800044 	movi	r2,1
10003dd8:	e0bff615 	stw	r2,-40(fp)
  unsigned numzeros = 0;
10003ddc:	e03fe815 	stw	zero,-96(fp)

  unsigned offset; /*the offset represents the distance in LZ77 terminology*/
  unsigned length;
  unsigned lazy = 0;
10003de0:	e03feb15 	stw	zero,-84(fp)
  unsigned lazylength = 0, lazyoffset = 0;
10003de4:	e03fec15 	stw	zero,-80(fp)
10003de8:	e03fed15 	stw	zero,-76(fp)
  unsigned current_offset, current_length;
  unsigned prev_offset;
  const unsigned char *lastptr, *foreptr, *backptr;
  unsigned hashpos;

  if(windowsize == 0 || windowsize > 32768) return 60; /*error: windowsize smaller/larger than allowed*/
10003dec:	e0800317 	ldw	r2,12(fp)
10003df0:	10000326 	beq	r2,zero,10003e00 <encodeLZ77+0x8c>
10003df4:	e0800317 	ldw	r2,12(fp)
10003df8:	10a00070 	cmpltui	r2,r2,32769
10003dfc:	1000021e 	bne	r2,zero,10003e08 <encodeLZ77+0x94>
10003e00:	00800f04 	movi	r2,60
10003e04:	0001ac06 	br	100044b8 <encodeLZ77+0x744>
  if((windowsize & (windowsize - 1)) != 0) return 90; /*error: must be power of two*/
10003e08:	e0800317 	ldw	r2,12(fp)
10003e0c:	10ffffc4 	addi	r3,r2,-1
10003e10:	e0800317 	ldw	r2,12(fp)
10003e14:	1884703a 	and	r2,r3,r2
10003e18:	10000226 	beq	r2,zero,10003e24 <encodeLZ77+0xb0>
10003e1c:	00801684 	movi	r2,90
10003e20:	0001a506 	br	100044b8 <encodeLZ77+0x744>

  if(nicematch > MAX_SUPPORTED_DEFLATE_LENGTH) nicematch = MAX_SUPPORTED_DEFLATE_LENGTH;
10003e24:	d0e00117 	ldw	r3,-32764(gp)
10003e28:	e0800517 	ldw	r2,20(fp)
10003e2c:	1880022e 	bgeu	r3,r2,10003e38 <encodeLZ77+0xc4>
10003e30:	d0a00117 	ldw	r2,-32764(gp)
10003e34:	e0800515 	stw	r2,20(fp)

  for(pos = inpos; pos < insize; ++pos)
10003e38:	e0bfff17 	ldw	r2,-4(fp)
10003e3c:	e0bfe515 	stw	r2,-108(fp)
10003e40:	00019906 	br	100044a8 <encodeLZ77+0x734>
  {
    size_t wpos = pos & (windowsize - 1); /*position for in 'circular' hash buffers*/
10003e44:	e0800317 	ldw	r2,12(fp)
10003e48:	10ffffc4 	addi	r3,r2,-1
10003e4c:	e0bfe517 	ldw	r2,-108(fp)
10003e50:	1884703a 	and	r2,r3,r2
10003e54:	e0bff715 	stw	r2,-36(fp)
    unsigned chainlength = 0;
10003e58:	e03ff215 	stw	zero,-56(fp)

    hashval = getHash(in, insize, pos);
10003e5c:	e13ffe17 	ldw	r4,-8(fp)
10003e60:	e1400217 	ldw	r5,8(fp)
10003e64:	e1bfe517 	ldw	r6,-108(fp)
10003e68:	0003a380 	call	10003a38 <getHash>
10003e6c:	e0bff815 	stw	r2,-32(fp)

    if(usezeros && hashval == 0)
10003e70:	e0bff617 	ldw	r2,-40(fp)
10003e74:	10001c26 	beq	r2,zero,10003ee8 <encodeLZ77+0x174>
10003e78:	e0bff817 	ldw	r2,-32(fp)
10003e7c:	10001a1e 	bne	r2,zero,10003ee8 <encodeLZ77+0x174>
    {
      if(numzeros == 0) numzeros = countZeros(in, insize, pos);
10003e80:	e0bfe817 	ldw	r2,-96(fp)
10003e84:	1000061e 	bne	r2,zero,10003ea0 <encodeLZ77+0x12c>
10003e88:	e13ffe17 	ldw	r4,-8(fp)
10003e8c:	e1400217 	ldw	r5,8(fp)
10003e90:	e1bfe517 	ldw	r6,-108(fp)
10003e94:	0003b6c0 	call	10003b6c <countZeros>
10003e98:	e0bfe815 	stw	r2,-96(fp)
10003e9c:	00001406 	br	10003ef0 <encodeLZ77+0x17c>
      else if(pos + numzeros > insize || in[pos + numzeros - 1] != 0) --numzeros;
10003ea0:	e0ffe517 	ldw	r3,-108(fp)
10003ea4:	e0bfe817 	ldw	r2,-96(fp)
10003ea8:	1885883a 	add	r2,r3,r2
10003eac:	e0c00217 	ldw	r3,8(fp)
10003eb0:	18800936 	bltu	r3,r2,10003ed8 <encodeLZ77+0x164>
10003eb4:	e0ffe517 	ldw	r3,-108(fp)
10003eb8:	e0bfe817 	ldw	r2,-96(fp)
10003ebc:	1885883a 	add	r2,r3,r2
10003ec0:	10bfffc4 	addi	r2,r2,-1
10003ec4:	e0fffe17 	ldw	r3,-8(fp)
10003ec8:	1885883a 	add	r2,r3,r2
10003ecc:	10800003 	ldbu	r2,0(r2)
10003ed0:	10803fcc 	andi	r2,r2,255
10003ed4:	10000626 	beq	r2,zero,10003ef0 <encodeLZ77+0x17c>
10003ed8:	e0bfe817 	ldw	r2,-96(fp)
10003edc:	10bfffc4 	addi	r2,r2,-1
10003ee0:	e0bfe815 	stw	r2,-96(fp)

    hashval = getHash(in, insize, pos);

    if(usezeros && hashval == 0)
    {
      if(numzeros == 0) numzeros = countZeros(in, insize, pos);
10003ee4:	00000206 	br	10003ef0 <encodeLZ77+0x17c>
      else if(pos + numzeros > insize || in[pos + numzeros - 1] != 0) --numzeros;
    }
    else
    {
      numzeros = 0;
10003ee8:	e03fe815 	stw	zero,-96(fp)
10003eec:	00000106 	br	10003ef4 <encodeLZ77+0x180>

    hashval = getHash(in, insize, pos);

    if(usezeros && hashval == 0)
    {
      if(numzeros == 0) numzeros = countZeros(in, insize, pos);
10003ef0:	0001883a 	nop
    else
    {
      numzeros = 0;
    }

    updateHashChain(hash, wpos, hashval, numzeros);
10003ef4:	e0bfe817 	ldw	r2,-96(fp)
10003ef8:	10bfffcc 	andi	r2,r2,65535
10003efc:	e13ffd17 	ldw	r4,-12(fp)
10003f00:	e17ff717 	ldw	r5,-36(fp)
10003f04:	e1bff817 	ldw	r6,-32(fp)
10003f08:	100f883a 	mov	r7,r2
10003f0c:	0003c180 	call	10003c18 <updateHashChain>

    /*the length and offset found for the current position*/
    length = 0;
10003f10:	e03fea15 	stw	zero,-88(fp)
    offset = 0;
10003f14:	e03fe915 	stw	zero,-92(fp)

    hashpos = hash->chain[wpos];
10003f18:	e0bffd17 	ldw	r2,-12(fp)
10003f1c:	10c00117 	ldw	r3,4(r2)
10003f20:	e0bff717 	ldw	r2,-36(fp)
10003f24:	1085883a 	add	r2,r2,r2
10003f28:	1885883a 	add	r2,r3,r2
10003f2c:	1080000b 	ldhu	r2,0(r2)
10003f30:	10bfffcc 	andi	r2,r2,65535
10003f34:	e0bff115 	stw	r2,-60(fp)

    lastptr = &in[insize < pos + MAX_SUPPORTED_DEFLATE_LENGTH ? insize : pos + MAX_SUPPORTED_DEFLATE_LENGTH];
10003f38:	d0e00117 	ldw	r3,-32764(gp)
10003f3c:	e0bfe517 	ldw	r2,-108(fp)
10003f40:	1885883a 	add	r2,r3,r2
10003f44:	e0c00217 	ldw	r3,8(fp)
10003f48:	1880012e 	bgeu	r3,r2,10003f50 <encodeLZ77+0x1dc>
10003f4c:	1805883a 	mov	r2,r3
10003f50:	e0fffe17 	ldw	r3,-8(fp)
10003f54:	1885883a 	add	r2,r3,r2
10003f58:	e0bff915 	stw	r2,-28(fp)

    /*search for the longest string*/
    prev_offset = 0;
10003f5c:	e03fee15 	stw	zero,-72(fp)
10003f60:	00000106 	br	10003f68 <encodeLZ77+0x1f4>
      {
        hashpos = hash->chain[hashpos];
        /*outdated hash value, happens if particular value was not encountered in whole last window*/
        if(hash->val[hashpos] != (int)hashval) break;
      }
    }
10003f64:	0001883a 	nop

    /*search for the longest string*/
    prev_offset = 0;
    for(;;)
    {
      if(chainlength++ >= maxchainlength) break;
10003f68:	e0fff217 	ldw	r3,-56(fp)
10003f6c:	e0bff417 	ldw	r2,-48(fp)
10003f70:	1885403a 	cmpgeu	r2,r3,r2
10003f74:	e0fff217 	ldw	r3,-56(fp)
10003f78:	18c00044 	addi	r3,r3,1
10003f7c:	e0fff215 	stw	r3,-56(fp)
10003f80:	10803fcc 	andi	r2,r2,255
10003f84:	10008b1e 	bne	r2,zero,100041b4 <encodeLZ77+0x440>
      current_offset = hashpos <= wpos ? wpos - hashpos : wpos - hashpos + windowsize;
10003f88:	e0bff117 	ldw	r2,-60(fp)
10003f8c:	e0fff717 	ldw	r3,-36(fp)
10003f90:	18800436 	bltu	r3,r2,10003fa4 <encodeLZ77+0x230>
10003f94:	e0fff717 	ldw	r3,-36(fp)
10003f98:	e0bff117 	ldw	r2,-60(fp)
10003f9c:	1885c83a 	sub	r2,r3,r2
10003fa0:	00000506 	br	10003fb8 <encodeLZ77+0x244>
10003fa4:	e0fff717 	ldw	r3,-36(fp)
10003fa8:	e0bff117 	ldw	r2,-60(fp)
10003fac:	1887c83a 	sub	r3,r3,r2
10003fb0:	e0800317 	ldw	r2,12(fp)
10003fb4:	1885883a 	add	r2,r3,r2
10003fb8:	e0bffa15 	stw	r2,-24(fp)

      if(current_offset < prev_offset) break; /*stop when went completely around the circular buffer*/
10003fbc:	e0fffa17 	ldw	r3,-24(fp)
10003fc0:	e0bfee17 	ldw	r2,-72(fp)
10003fc4:	18807d36 	bltu	r3,r2,100041bc <encodeLZ77+0x448>
      prev_offset = current_offset;
10003fc8:	e0bffa17 	ldw	r2,-24(fp)
10003fcc:	e0bfee15 	stw	r2,-72(fp)
      if(current_offset > 0)
10003fd0:	e0bffa17 	ldw	r2,-24(fp)
10003fd4:	10004326 	beq	r2,zero,100040e4 <encodeLZ77+0x370>
      {
        /*test the next characters*/
        foreptr = &in[pos];
10003fd8:	e0fffe17 	ldw	r3,-8(fp)
10003fdc:	e0bfe517 	ldw	r2,-108(fp)
10003fe0:	1885883a 	add	r2,r3,r2
10003fe4:	e0bfef15 	stw	r2,-68(fp)
        backptr = &in[pos - current_offset];
10003fe8:	e0ffe517 	ldw	r3,-108(fp)
10003fec:	e0bffa17 	ldw	r2,-24(fp)
10003ff0:	1885c83a 	sub	r2,r3,r2
10003ff4:	e0fffe17 	ldw	r3,-8(fp)
10003ff8:	1885883a 	add	r2,r3,r2
10003ffc:	e0bff015 	stw	r2,-64(fp)

        /*common case in PNGs is lots of zeros. Quickly skip over them as a speedup*/
        if(numzeros >= 3)
10004000:	e0bfe817 	ldw	r2,-96(fp)
10004004:	108000f0 	cmpltui	r2,r2,3
10004008:	10001c1e 	bne	r2,zero,1000407c <encodeLZ77+0x308>
        {
          unsigned skip = hash->zeros[hashpos];
1000400c:	e0bffd17 	ldw	r2,-12(fp)
10004010:	10c00517 	ldw	r3,20(r2)
10004014:	e0bff117 	ldw	r2,-60(fp)
10004018:	1085883a 	add	r2,r2,r2
1000401c:	1885883a 	add	r2,r3,r2
10004020:	1080000b 	ldhu	r2,0(r2)
10004024:	10bfffcc 	andi	r2,r2,65535
10004028:	e0bff315 	stw	r2,-52(fp)
          if(skip > numzeros) skip = numzeros;
1000402c:	e0bff317 	ldw	r2,-52(fp)
10004030:	e0ffe817 	ldw	r3,-96(fp)
10004034:	1880022e 	bgeu	r3,r2,10004040 <encodeLZ77+0x2cc>
10004038:	e0bfe817 	ldw	r2,-96(fp)
1000403c:	e0bff315 	stw	r2,-52(fp)
          backptr += skip;
10004040:	e0fff017 	ldw	r3,-64(fp)
10004044:	e0bff317 	ldw	r2,-52(fp)
10004048:	1885883a 	add	r2,r3,r2
1000404c:	e0bff015 	stw	r2,-64(fp)
          foreptr += skip;
10004050:	e0ffef17 	ldw	r3,-68(fp)
10004054:	e0bff317 	ldw	r2,-52(fp)
10004058:	1885883a 	add	r2,r3,r2
1000405c:	e0bfef15 	stw	r2,-68(fp)
        }

        while(foreptr != lastptr && *backptr == *foreptr) /*maximum supported length by deflate is max length*/
10004060:	00000606 	br	1000407c <encodeLZ77+0x308>
        {
          ++backptr;
10004064:	e0bff017 	ldw	r2,-64(fp)
10004068:	10800044 	addi	r2,r2,1
1000406c:	e0bff015 	stw	r2,-64(fp)
          ++foreptr;
10004070:	e0bfef17 	ldw	r2,-68(fp)
10004074:	10800044 	addi	r2,r2,1
10004078:	e0bfef15 	stw	r2,-68(fp)
          if(skip > numzeros) skip = numzeros;
          backptr += skip;
          foreptr += skip;
        }

        while(foreptr != lastptr && *backptr == *foreptr) /*maximum supported length by deflate is max length*/
1000407c:	e0ffef17 	ldw	r3,-68(fp)
10004080:	e0bff917 	ldw	r2,-28(fp)
10004084:	18800726 	beq	r3,r2,100040a4 <encodeLZ77+0x330>
10004088:	e0bff017 	ldw	r2,-64(fp)
1000408c:	10c00003 	ldbu	r3,0(r2)
10004090:	e0bfef17 	ldw	r2,-68(fp)
10004094:	10800003 	ldbu	r2,0(r2)
10004098:	18c03fcc 	andi	r3,r3,255
1000409c:	10803fcc 	andi	r2,r2,255
100040a0:	18bff026 	beq	r3,r2,10004064 <__alt_data_end+0xf8004064>
        {
          ++backptr;
          ++foreptr;
        }
        current_length = (unsigned)(foreptr - &in[pos]);
100040a4:	e0ffef17 	ldw	r3,-68(fp)
100040a8:	e13ffe17 	ldw	r4,-8(fp)
100040ac:	e0bfe517 	ldw	r2,-108(fp)
100040b0:	2085883a 	add	r2,r4,r2
100040b4:	1885c83a 	sub	r2,r3,r2
100040b8:	e0bffb15 	stw	r2,-20(fp)

        if(current_length > length)
100040bc:	e0bffb17 	ldw	r2,-20(fp)
100040c0:	e0ffea17 	ldw	r3,-88(fp)
100040c4:	1880072e 	bgeu	r3,r2,100040e4 <encodeLZ77+0x370>
        {
          length = current_length; /*the longest length*/
100040c8:	e0bffb17 	ldw	r2,-20(fp)
100040cc:	e0bfea15 	stw	r2,-88(fp)
          offset = current_offset; /*the offset that is related to this longest length*/
100040d0:	e0bffa17 	ldw	r2,-24(fp)
100040d4:	e0bfe915 	stw	r2,-92(fp)
          /*jump out once a length of max length is found (speed gain). This also jumps
          out if length is MAX_SUPPORTED_DEFLATE_LENGTH*/
          if(current_length >= nicematch) break;
100040d8:	e0fffb17 	ldw	r3,-20(fp)
100040dc:	e0800517 	ldw	r2,20(fp)
100040e0:	1880382e 	bgeu	r3,r2,100041c4 <encodeLZ77+0x450>
        }
      }

      if(hashpos == hash->chain[hashpos]) break;
100040e4:	e0bffd17 	ldw	r2,-12(fp)
100040e8:	10c00117 	ldw	r3,4(r2)
100040ec:	e0bff117 	ldw	r2,-60(fp)
100040f0:	1085883a 	add	r2,r2,r2
100040f4:	1885883a 	add	r2,r3,r2
100040f8:	1080000b 	ldhu	r2,0(r2)
100040fc:	10ffffcc 	andi	r3,r2,65535
10004100:	e0bff117 	ldw	r2,-60(fp)
10004104:	18803126 	beq	r3,r2,100041cc <encodeLZ77+0x458>

      if(numzeros >= 3 && length > numzeros)
10004108:	e0bfe817 	ldw	r2,-96(fp)
1000410c:	108000f0 	cmpltui	r2,r2,3
10004110:	1000151e 	bne	r2,zero,10004168 <encodeLZ77+0x3f4>
10004114:	e0bfea17 	ldw	r2,-88(fp)
10004118:	e0ffe817 	ldw	r3,-96(fp)
1000411c:	1880122e 	bgeu	r3,r2,10004168 <encodeLZ77+0x3f4>
      {
        hashpos = hash->chainz[hashpos];
10004120:	e0bffd17 	ldw	r2,-12(fp)
10004124:	10c00417 	ldw	r3,16(r2)
10004128:	e0bff117 	ldw	r2,-60(fp)
1000412c:	1085883a 	add	r2,r2,r2
10004130:	1885883a 	add	r2,r3,r2
10004134:	1080000b 	ldhu	r2,0(r2)
10004138:	10bfffcc 	andi	r2,r2,65535
1000413c:	e0bff115 	stw	r2,-60(fp)
        if(hash->zeros[hashpos] != numzeros) break;
10004140:	e0bffd17 	ldw	r2,-12(fp)
10004144:	10c00517 	ldw	r3,20(r2)
10004148:	e0bff117 	ldw	r2,-60(fp)
1000414c:	1085883a 	add	r2,r2,r2
10004150:	1885883a 	add	r2,r3,r2
10004154:	1080000b 	ldhu	r2,0(r2)
10004158:	10ffffcc 	andi	r3,r2,65535
1000415c:	e0bfe817 	ldw	r2,-96(fp)
10004160:	18801326 	beq	r3,r2,100041b0 <encodeLZ77+0x43c>
10004164:	00001a06 	br	100041d0 <encodeLZ77+0x45c>
      }
      else
      {
        hashpos = hash->chain[hashpos];
10004168:	e0bffd17 	ldw	r2,-12(fp)
1000416c:	10c00117 	ldw	r3,4(r2)
10004170:	e0bff117 	ldw	r2,-60(fp)
10004174:	1085883a 	add	r2,r2,r2
10004178:	1885883a 	add	r2,r3,r2
1000417c:	1080000b 	ldhu	r2,0(r2)
10004180:	10bfffcc 	andi	r2,r2,65535
10004184:	e0bff115 	stw	r2,-60(fp)
        /*outdated hash value, happens if particular value was not encountered in whole last window*/
        if(hash->val[hashpos] != (int)hashval) break;
10004188:	e0bffd17 	ldw	r2,-12(fp)
1000418c:	10c00217 	ldw	r3,8(r2)
10004190:	e0bff117 	ldw	r2,-60(fp)
10004194:	1085883a 	add	r2,r2,r2
10004198:	1085883a 	add	r2,r2,r2
1000419c:	1885883a 	add	r2,r3,r2
100041a0:	10c00017 	ldw	r3,0(r2)
100041a4:	e0bff817 	ldw	r2,-32(fp)
100041a8:	18bf6e26 	beq	r3,r2,10003f64 <__alt_data_end+0xf8003f64>
100041ac:	00000806 	br	100041d0 <encodeLZ77+0x45c>
      }
    }
100041b0:	003f6c06 	br	10003f64 <__alt_data_end+0xf8003f64>

    /*search for the longest string*/
    prev_offset = 0;
    for(;;)
    {
      if(chainlength++ >= maxchainlength) break;
100041b4:	0001883a 	nop
100041b8:	00000506 	br	100041d0 <encodeLZ77+0x45c>
      current_offset = hashpos <= wpos ? wpos - hashpos : wpos - hashpos + windowsize;

      if(current_offset < prev_offset) break; /*stop when went completely around the circular buffer*/
100041bc:	0001883a 	nop
100041c0:	00000306 	br	100041d0 <encodeLZ77+0x45c>
        {
          length = current_length; /*the longest length*/
          offset = current_offset; /*the offset that is related to this longest length*/
          /*jump out once a length of max length is found (speed gain). This also jumps
          out if length is MAX_SUPPORTED_DEFLATE_LENGTH*/
          if(current_length >= nicematch) break;
100041c4:	0001883a 	nop
100041c8:	00000106 	br	100041d0 <encodeLZ77+0x45c>
        }
      }

      if(hashpos == hash->chain[hashpos]) break;
100041cc:	0001883a 	nop
        /*outdated hash value, happens if particular value was not encountered in whole last window*/
        if(hash->val[hashpos] != (int)hashval) break;
      }
    }

    if(lazymatching)
100041d0:	e0800617 	ldw	r2,24(fp)
100041d4:	10004226 	beq	r2,zero,100042e0 <encodeLZ77+0x56c>
    {
      if(!lazy && length >= 3 && length <= maxlazymatch && length < MAX_SUPPORTED_DEFLATE_LENGTH)
100041d8:	e0bfeb17 	ldw	r2,-84(fp)
100041dc:	1000101e 	bne	r2,zero,10004220 <encodeLZ77+0x4ac>
100041e0:	e0bfea17 	ldw	r2,-88(fp)
100041e4:	108000f0 	cmpltui	r2,r2,3
100041e8:	10000d1e 	bne	r2,zero,10004220 <encodeLZ77+0x4ac>
100041ec:	e0bfea17 	ldw	r2,-88(fp)
100041f0:	e0fff517 	ldw	r3,-44(fp)
100041f4:	18800a36 	bltu	r3,r2,10004220 <encodeLZ77+0x4ac>
100041f8:	d0a00117 	ldw	r2,-32764(gp)
100041fc:	e0ffea17 	ldw	r3,-88(fp)
10004200:	1880072e 	bgeu	r3,r2,10004220 <encodeLZ77+0x4ac>
      {
        lazy = 1;
10004204:	00800044 	movi	r2,1
10004208:	e0bfeb15 	stw	r2,-84(fp)
        lazylength = length;
1000420c:	e0bfea17 	ldw	r2,-88(fp)
10004210:	e0bfec15 	stw	r2,-80(fp)
        lazyoffset = offset;
10004214:	e0bfe917 	ldw	r2,-92(fp)
10004218:	e0bfed15 	stw	r2,-76(fp)
        continue; /*try the next byte*/
1000421c:	00009f06 	br	1000449c <encodeLZ77+0x728>
      }
      if(lazy)
10004220:	e0bfeb17 	ldw	r2,-84(fp)
10004224:	10002e26 	beq	r2,zero,100042e0 <encodeLZ77+0x56c>
      {
        lazy = 0;
10004228:	e03feb15 	stw	zero,-84(fp)
        if(pos == 0) ERROR_BREAK(81);
1000422c:	e0bfe517 	ldw	r2,-108(fp)
10004230:	1000031e 	bne	r2,zero,10004240 <encodeLZ77+0x4cc>
10004234:	00801444 	movi	r2,81
10004238:	e0bfe715 	stw	r2,-100(fp)
1000423c:	00009d06 	br	100044b4 <encodeLZ77+0x740>
        if(length > lazylength + 1)
10004240:	e0bfec17 	ldw	r2,-80(fp)
10004244:	10c00044 	addi	r3,r2,1
10004248:	e0bfea17 	ldw	r2,-88(fp)
1000424c:	18800d2e 	bgeu	r3,r2,10004284 <encodeLZ77+0x510>
        {
          /*push the previous character as literal*/
          if(!uivector_push_back(out, in[pos - 1])) ERROR_BREAK(83 /*alloc fail*/);
10004250:	e0bfe517 	ldw	r2,-108(fp)
10004254:	10bfffc4 	addi	r2,r2,-1
10004258:	e0fffe17 	ldw	r3,-8(fp)
1000425c:	1885883a 	add	r2,r3,r2
10004260:	10800003 	ldbu	r2,0(r2)
10004264:	10803fcc 	andi	r2,r2,255
10004268:	e13ffc17 	ldw	r4,-16(fp)
1000426c:	100b883a 	mov	r5,r2
10004270:	00004dc0 	call	100004dc <uivector_push_back>
10004274:	10001a1e 	bne	r2,zero,100042e0 <encodeLZ77+0x56c>
10004278:	008014c4 	movi	r2,83
1000427c:	e0bfe715 	stw	r2,-100(fp)
10004280:	00008c06 	br	100044b4 <encodeLZ77+0x740>
        }
        else
        {
          length = lazylength;
10004284:	e0bfec17 	ldw	r2,-80(fp)
10004288:	e0bfea15 	stw	r2,-88(fp)
          offset = lazyoffset;
1000428c:	e0bfed17 	ldw	r2,-76(fp)
10004290:	e0bfe915 	stw	r2,-92(fp)
          hash->head[hashval] = -1; /*the same hashchain update will be done, this ensures no wrong alteration*/
10004294:	e0bffd17 	ldw	r2,-12(fp)
10004298:	10c00017 	ldw	r3,0(r2)
1000429c:	e0bff817 	ldw	r2,-32(fp)
100042a0:	1085883a 	add	r2,r2,r2
100042a4:	1085883a 	add	r2,r2,r2
100042a8:	1885883a 	add	r2,r3,r2
100042ac:	00ffffc4 	movi	r3,-1
100042b0:	10c00015 	stw	r3,0(r2)
          hash->headz[numzeros] = -1; /*idem*/
100042b4:	e0bffd17 	ldw	r2,-12(fp)
100042b8:	10c00317 	ldw	r3,12(r2)
100042bc:	e0bfe817 	ldw	r2,-96(fp)
100042c0:	1085883a 	add	r2,r2,r2
100042c4:	1085883a 	add	r2,r2,r2
100042c8:	1885883a 	add	r2,r3,r2
100042cc:	00ffffc4 	movi	r3,-1
100042d0:	10c00015 	stw	r3,0(r2)
          --pos;
100042d4:	e0bfe517 	ldw	r2,-108(fp)
100042d8:	10bfffc4 	addi	r2,r2,-1
100042dc:	e0bfe515 	stw	r2,-108(fp)
        }
      }
    }
    if(length >= 3 && offset > windowsize) ERROR_BREAK(86 /*too big (or overflown negative) offset*/);
100042e0:	e0bfea17 	ldw	r2,-88(fp)
100042e4:	108000f0 	cmpltui	r2,r2,3
100042e8:	1000061e 	bne	r2,zero,10004304 <encodeLZ77+0x590>
100042ec:	e0bfe917 	ldw	r2,-92(fp)
100042f0:	e0c00317 	ldw	r3,12(fp)
100042f4:	1880032e 	bgeu	r3,r2,10004304 <encodeLZ77+0x590>
100042f8:	00801584 	movi	r2,86
100042fc:	e0bfe715 	stw	r2,-100(fp)
10004300:	00006c06 	br	100044b4 <encodeLZ77+0x740>

    /*encode it as length/distance pair or literal value*/
    if(length < 3) /*only lengths of 3 or higher are supported as length/distance pair*/
10004304:	e0bfea17 	ldw	r2,-88(fp)
10004308:	108000e8 	cmpgeui	r2,r2,3
1000430c:	10000c1e 	bne	r2,zero,10004340 <encodeLZ77+0x5cc>
    {
      if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
10004310:	e0fffe17 	ldw	r3,-8(fp)
10004314:	e0bfe517 	ldw	r2,-108(fp)
10004318:	1885883a 	add	r2,r3,r2
1000431c:	10800003 	ldbu	r2,0(r2)
10004320:	10803fcc 	andi	r2,r2,255
10004324:	e13ffc17 	ldw	r4,-16(fp)
10004328:	100b883a 	mov	r5,r2
1000432c:	00004dc0 	call	100004dc <uivector_push_back>
10004330:	10005a1e 	bne	r2,zero,1000449c <encodeLZ77+0x728>
10004334:	008014c4 	movi	r2,83
10004338:	e0bfe715 	stw	r2,-100(fp)
1000433c:	00005d06 	br	100044b4 <encodeLZ77+0x740>
    }
    else if(length < minmatch || (length == 3 && offset > 4096))
10004340:	e0ffea17 	ldw	r3,-88(fp)
10004344:	e0800417 	ldw	r2,16(fp)
10004348:	18800636 	bltu	r3,r2,10004364 <encodeLZ77+0x5f0>
1000434c:	e0bfea17 	ldw	r2,-88(fp)
10004350:	108000d8 	cmpnei	r2,r2,3
10004354:	10000f1e 	bne	r2,zero,10004394 <encodeLZ77+0x620>
10004358:	e0bfe917 	ldw	r2,-92(fp)
1000435c:	10840070 	cmpltui	r2,r2,4097
10004360:	10000c1e 	bne	r2,zero,10004394 <encodeLZ77+0x620>
    {
      /*compensate for the fact that longer offsets have more extra bits, a
      length of only 3 may be not worth it then*/
      if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
10004364:	e0fffe17 	ldw	r3,-8(fp)
10004368:	e0bfe517 	ldw	r2,-108(fp)
1000436c:	1885883a 	add	r2,r3,r2
10004370:	10800003 	ldbu	r2,0(r2)
10004374:	10803fcc 	andi	r2,r2,255
10004378:	e13ffc17 	ldw	r4,-16(fp)
1000437c:	100b883a 	mov	r5,r2
10004380:	00004dc0 	call	100004dc <uivector_push_back>
10004384:	1000451e 	bne	r2,zero,1000449c <encodeLZ77+0x728>
10004388:	008014c4 	movi	r2,83
1000438c:	e0bfe715 	stw	r2,-100(fp)
10004390:	00004806 	br	100044b4 <encodeLZ77+0x740>
    }
    else
    {
      addLengthDistance(out, length, offset);
10004394:	e13ffc17 	ldw	r4,-16(fp)
10004398:	e17fea17 	ldw	r5,-88(fp)
1000439c:	e1bfe917 	ldw	r6,-92(fp)
100043a0:	00036700 	call	10003670 <addLengthDistance>
      for(i = 1; i < length; ++i)
100043a4:	00800044 	movi	r2,1
100043a8:	e0bfe615 	stw	r2,-104(fp)
100043ac:	00003806 	br	10004490 <encodeLZ77+0x71c>
      {
        ++pos;
100043b0:	e0bfe517 	ldw	r2,-108(fp)
100043b4:	10800044 	addi	r2,r2,1
100043b8:	e0bfe515 	stw	r2,-108(fp)
        wpos = pos & (windowsize - 1);
100043bc:	e0800317 	ldw	r2,12(fp)
100043c0:	10ffffc4 	addi	r3,r2,-1
100043c4:	e0bfe517 	ldw	r2,-108(fp)
100043c8:	1884703a 	and	r2,r3,r2
100043cc:	e0bff715 	stw	r2,-36(fp)
        hashval = getHash(in, insize, pos);
100043d0:	e13ffe17 	ldw	r4,-8(fp)
100043d4:	e1400217 	ldw	r5,8(fp)
100043d8:	e1bfe517 	ldw	r6,-108(fp)
100043dc:	0003a380 	call	10003a38 <getHash>
100043e0:	e0bff815 	stw	r2,-32(fp)
        if(usezeros && hashval == 0)
100043e4:	e0bff617 	ldw	r2,-40(fp)
100043e8:	10001c26 	beq	r2,zero,1000445c <encodeLZ77+0x6e8>
100043ec:	e0bff817 	ldw	r2,-32(fp)
100043f0:	10001a1e 	bne	r2,zero,1000445c <encodeLZ77+0x6e8>
        {
          if(numzeros == 0) numzeros = countZeros(in, insize, pos);
100043f4:	e0bfe817 	ldw	r2,-96(fp)
100043f8:	1000061e 	bne	r2,zero,10004414 <encodeLZ77+0x6a0>
100043fc:	e13ffe17 	ldw	r4,-8(fp)
10004400:	e1400217 	ldw	r5,8(fp)
10004404:	e1bfe517 	ldw	r6,-108(fp)
10004408:	0003b6c0 	call	10003b6c <countZeros>
1000440c:	e0bfe815 	stw	r2,-96(fp)
10004410:	00001406 	br	10004464 <encodeLZ77+0x6f0>
          else if(pos + numzeros > insize || in[pos + numzeros - 1] != 0) --numzeros;
10004414:	e0ffe517 	ldw	r3,-108(fp)
10004418:	e0bfe817 	ldw	r2,-96(fp)
1000441c:	1885883a 	add	r2,r3,r2
10004420:	e0c00217 	ldw	r3,8(fp)
10004424:	18800936 	bltu	r3,r2,1000444c <encodeLZ77+0x6d8>
10004428:	e0ffe517 	ldw	r3,-108(fp)
1000442c:	e0bfe817 	ldw	r2,-96(fp)
10004430:	1885883a 	add	r2,r3,r2
10004434:	10bfffc4 	addi	r2,r2,-1
10004438:	e0fffe17 	ldw	r3,-8(fp)
1000443c:	1885883a 	add	r2,r3,r2
10004440:	10800003 	ldbu	r2,0(r2)
10004444:	10803fcc 	andi	r2,r2,255
10004448:	10000626 	beq	r2,zero,10004464 <encodeLZ77+0x6f0>
1000444c:	e0bfe817 	ldw	r2,-96(fp)
10004450:	10bfffc4 	addi	r2,r2,-1
10004454:	e0bfe815 	stw	r2,-96(fp)
        ++pos;
        wpos = pos & (windowsize - 1);
        hashval = getHash(in, insize, pos);
        if(usezeros && hashval == 0)
        {
          if(numzeros == 0) numzeros = countZeros(in, insize, pos);
10004458:	00000206 	br	10004464 <encodeLZ77+0x6f0>
          else if(pos + numzeros > insize || in[pos + numzeros - 1] != 0) --numzeros;
        }
        else
        {
          numzeros = 0;
1000445c:	e03fe815 	stw	zero,-96(fp)
10004460:	00000106 	br	10004468 <encodeLZ77+0x6f4>
        ++pos;
        wpos = pos & (windowsize - 1);
        hashval = getHash(in, insize, pos);
        if(usezeros && hashval == 0)
        {
          if(numzeros == 0) numzeros = countZeros(in, insize, pos);
10004464:	0001883a 	nop
        }
        else
        {
          numzeros = 0;
        }
        updateHashChain(hash, wpos, hashval, numzeros);
10004468:	e0bfe817 	ldw	r2,-96(fp)
1000446c:	10bfffcc 	andi	r2,r2,65535
10004470:	e13ffd17 	ldw	r4,-12(fp)
10004474:	e17ff717 	ldw	r5,-36(fp)
10004478:	e1bff817 	ldw	r6,-32(fp)
1000447c:	100f883a 	mov	r7,r2
10004480:	0003c180 	call	10003c18 <updateHashChain>
      if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
    }
    else
    {
      addLengthDistance(out, length, offset);
      for(i = 1; i < length; ++i)
10004484:	e0bfe617 	ldw	r2,-104(fp)
10004488:	10800044 	addi	r2,r2,1
1000448c:	e0bfe615 	stw	r2,-104(fp)
10004490:	e0ffe617 	ldw	r3,-104(fp)
10004494:	e0bfea17 	ldw	r2,-88(fp)
10004498:	18bfc536 	bltu	r3,r2,100043b0 <__alt_data_end+0xf80043b0>
  if(windowsize == 0 || windowsize > 32768) return 60; /*error: windowsize smaller/larger than allowed*/
  if((windowsize & (windowsize - 1)) != 0) return 90; /*error: must be power of two*/

  if(nicematch > MAX_SUPPORTED_DEFLATE_LENGTH) nicematch = MAX_SUPPORTED_DEFLATE_LENGTH;

  for(pos = inpos; pos < insize; ++pos)
1000449c:	e0bfe517 	ldw	r2,-108(fp)
100044a0:	10800044 	addi	r2,r2,1
100044a4:	e0bfe515 	stw	r2,-108(fp)
100044a8:	e0ffe517 	ldw	r3,-108(fp)
100044ac:	e0800217 	ldw	r2,8(fp)
100044b0:	18be6436 	bltu	r3,r2,10003e44 <__alt_data_end+0xf8003e44>
        updateHashChain(hash, wpos, hashval, numzeros);
      }
    }
  } /*end of the loop through each character of input*/

  return error;
100044b4:	e0bfe717 	ldw	r2,-100(fp)
}
100044b8:	e037883a 	mov	sp,fp
100044bc:	dfc00117 	ldw	ra,4(sp)
100044c0:	df000017 	ldw	fp,0(sp)
100044c4:	dec00204 	addi	sp,sp,8
100044c8:	f800283a 	ret

100044cc <deflateNoCompression>:

/* /////////////////////////////////////////////////////////////////////////// */

static unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize)
{
100044cc:	defff204 	addi	sp,sp,-56
100044d0:	dfc00d15 	stw	ra,52(sp)
100044d4:	df000c15 	stw	fp,48(sp)
100044d8:	df000c04 	addi	fp,sp,48
100044dc:	e13ffd15 	stw	r4,-12(fp)
100044e0:	e17ffe15 	stw	r5,-8(fp)
100044e4:	e1bfff15 	stw	r6,-4(fp)
  /*non compressed deflate block data: 1 bit BFINAL,2 bits BTYPE,(5 bits): it jumps to start of next byte,
  2 bytes LEN, 2 bytes NLEN, LEN bytes literal DATA*/

  size_t i, j, numdeflateblocks = (datasize + 65534) / 65535;
100044e8:	e0ffff17 	ldw	r3,-4(fp)
100044ec:	00bfff94 	movui	r2,65534
100044f0:	1885883a 	add	r2,r3,r2
100044f4:	1009883a 	mov	r4,r2
100044f8:	017fffd4 	movui	r5,65535
100044fc:	00146ec0 	call	100146ec <__udivsi3>
10004500:	e0bff815 	stw	r2,-32(fp)
  unsigned datapos = 0;
10004504:	e03ff615 	stw	zero,-40(fp)
  for(i = 0; i != numdeflateblocks; ++i)
10004508:	e03ff415 	stw	zero,-48(fp)
1000450c:	00005506 	br	10004664 <deflateNoCompression+0x198>
  {
    unsigned BFINAL, BTYPE, LEN, NLEN;
    unsigned char firstbyte;

    BFINAL = (i == numdeflateblocks - 1);
10004510:	e0bff817 	ldw	r2,-32(fp)
10004514:	10ffffc4 	addi	r3,r2,-1
10004518:	e0bff417 	ldw	r2,-48(fp)
1000451c:	1885003a 	cmpeq	r2,r3,r2
10004520:	10803fcc 	andi	r2,r2,255
10004524:	e0bff915 	stw	r2,-28(fp)
    BTYPE = 0;
10004528:	e03ffa15 	stw	zero,-24(fp)

    firstbyte = (unsigned char)(BFINAL + ((BTYPE & 1) << 1) + ((BTYPE & 2) << 1));
1000452c:	e0bff917 	ldw	r2,-28(fp)
10004530:	1007883a 	mov	r3,r2
10004534:	e0bffa17 	ldw	r2,-24(fp)
10004538:	1080004c 	andi	r2,r2,1
1000453c:	1085883a 	add	r2,r2,r2
10004540:	1885883a 	add	r2,r3,r2
10004544:	1007883a 	mov	r3,r2
10004548:	e0bffa17 	ldw	r2,-24(fp)
1000454c:	1080008c 	andi	r2,r2,2
10004550:	1085883a 	add	r2,r2,r2
10004554:	1885883a 	add	r2,r3,r2
10004558:	e0bffb05 	stb	r2,-20(fp)
    ucvector_push_back(out, firstbyte);
1000455c:	e0bffb03 	ldbu	r2,-20(fp)
10004560:	e13ffd17 	ldw	r4,-12(fp)
10004564:	100b883a 	mov	r5,r2
10004568:	00007e80 	call	100007e8 <ucvector_push_back>

    LEN = 65535;
1000456c:	00bfffd4 	movui	r2,65535
10004570:	e0bff715 	stw	r2,-36(fp)
    if(datasize - datapos < 65535) LEN = (unsigned)datasize - datapos;
10004574:	e0ffff17 	ldw	r3,-4(fp)
10004578:	e0bff617 	ldw	r2,-40(fp)
1000457c:	1885c83a 	sub	r2,r3,r2
10004580:	10bfffe8 	cmpgeui	r2,r2,65535
10004584:	1000041e 	bne	r2,zero,10004598 <deflateNoCompression+0xcc>
10004588:	e0ffff17 	ldw	r3,-4(fp)
1000458c:	e0bff617 	ldw	r2,-40(fp)
10004590:	1885c83a 	sub	r2,r3,r2
10004594:	e0bff715 	stw	r2,-36(fp)
    NLEN = 65535 - LEN;
10004598:	00ffffd4 	movui	r3,65535
1000459c:	e0bff717 	ldw	r2,-36(fp)
100045a0:	1885c83a 	sub	r2,r3,r2
100045a4:	e0bffc15 	stw	r2,-16(fp)

    ucvector_push_back(out, (unsigned char)(LEN % 256));
100045a8:	e0bff717 	ldw	r2,-36(fp)
100045ac:	10803fcc 	andi	r2,r2,255
100045b0:	e13ffd17 	ldw	r4,-12(fp)
100045b4:	100b883a 	mov	r5,r2
100045b8:	00007e80 	call	100007e8 <ucvector_push_back>
    ucvector_push_back(out, (unsigned char)(LEN / 256));
100045bc:	e0bff717 	ldw	r2,-36(fp)
100045c0:	1004d23a 	srli	r2,r2,8
100045c4:	10803fcc 	andi	r2,r2,255
100045c8:	e13ffd17 	ldw	r4,-12(fp)
100045cc:	100b883a 	mov	r5,r2
100045d0:	00007e80 	call	100007e8 <ucvector_push_back>
    ucvector_push_back(out, (unsigned char)(NLEN % 256));
100045d4:	e0bffc17 	ldw	r2,-16(fp)
100045d8:	10803fcc 	andi	r2,r2,255
100045dc:	e13ffd17 	ldw	r4,-12(fp)
100045e0:	100b883a 	mov	r5,r2
100045e4:	00007e80 	call	100007e8 <ucvector_push_back>
    ucvector_push_back(out, (unsigned char)(NLEN / 256));
100045e8:	e0bffc17 	ldw	r2,-16(fp)
100045ec:	1004d23a 	srli	r2,r2,8
100045f0:	10803fcc 	andi	r2,r2,255
100045f4:	e13ffd17 	ldw	r4,-12(fp)
100045f8:	100b883a 	mov	r5,r2
100045fc:	00007e80 	call	100007e8 <ucvector_push_back>

    /*Decompressed data*/
    for(j = 0; j < 65535 && datapos < datasize; ++j)
10004600:	e03ff515 	stw	zero,-44(fp)
10004604:	00000e06 	br	10004640 <deflateNoCompression+0x174>
    {
      ucvector_push_back(out, data[datapos++]);
10004608:	e0fffe17 	ldw	r3,-8(fp)
1000460c:	e0bff617 	ldw	r2,-40(fp)
10004610:	1885883a 	add	r2,r3,r2
10004614:	10800003 	ldbu	r2,0(r2)
10004618:	10803fcc 	andi	r2,r2,255
1000461c:	e0fff617 	ldw	r3,-40(fp)
10004620:	18c00044 	addi	r3,r3,1
10004624:	e0fff615 	stw	r3,-40(fp)
10004628:	e13ffd17 	ldw	r4,-12(fp)
1000462c:	100b883a 	mov	r5,r2
10004630:	00007e80 	call	100007e8 <ucvector_push_back>
    ucvector_push_back(out, (unsigned char)(LEN / 256));
    ucvector_push_back(out, (unsigned char)(NLEN % 256));
    ucvector_push_back(out, (unsigned char)(NLEN / 256));

    /*Decompressed data*/
    for(j = 0; j < 65535 && datapos < datasize; ++j)
10004634:	e0bff517 	ldw	r2,-44(fp)
10004638:	10800044 	addi	r2,r2,1
1000463c:	e0bff515 	stw	r2,-44(fp)
10004640:	e0bff517 	ldw	r2,-44(fp)
10004644:	10bfffe8 	cmpgeui	r2,r2,65535
10004648:	1000031e 	bne	r2,zero,10004658 <deflateNoCompression+0x18c>
1000464c:	e0fff617 	ldw	r3,-40(fp)
10004650:	e0bfff17 	ldw	r2,-4(fp)
10004654:	18bfec36 	bltu	r3,r2,10004608 <__alt_data_end+0xf8004608>
  /*non compressed deflate block data: 1 bit BFINAL,2 bits BTYPE,(5 bits): it jumps to start of next byte,
  2 bytes LEN, 2 bytes NLEN, LEN bytes literal DATA*/

  size_t i, j, numdeflateblocks = (datasize + 65534) / 65535;
  unsigned datapos = 0;
  for(i = 0; i != numdeflateblocks; ++i)
10004658:	e0bff417 	ldw	r2,-48(fp)
1000465c:	10800044 	addi	r2,r2,1
10004660:	e0bff415 	stw	r2,-48(fp)
10004664:	e0fff417 	ldw	r3,-48(fp)
10004668:	e0bff817 	ldw	r2,-32(fp)
1000466c:	18bfa81e 	bne	r3,r2,10004510 <__alt_data_end+0xf8004510>
    {
      ucvector_push_back(out, data[datapos++]);
    }
  }

  return 0;
10004670:	0005883a 	mov	r2,zero
}
10004674:	e037883a 	mov	sp,fp
10004678:	dfc00117 	ldw	ra,4(sp)
1000467c:	df000017 	ldw	fp,0(sp)
10004680:	dec00204 	addi	sp,sp,8
10004684:	f800283a 	ret

10004688 <writeLZ77data>:
tree_ll: the tree for lit and len codes.
tree_d: the tree for distance codes.
*/
static void writeLZ77data(size_t* bp, ucvector* out, const uivector* lz77_encoded,
                          const HuffmanTree* tree_ll, const HuffmanTree* tree_d)
{
10004688:	defff004 	addi	sp,sp,-64
1000468c:	dfc00f15 	stw	ra,60(sp)
10004690:	df000e15 	stw	fp,56(sp)
10004694:	dc000d15 	stw	r16,52(sp)
10004698:	df000d04 	addi	fp,sp,52
1000469c:	e13ffc15 	stw	r4,-16(fp)
100046a0:	e17ffd15 	stw	r5,-12(fp)
100046a4:	e1bffe15 	stw	r6,-8(fp)
100046a8:	e1ffff15 	stw	r7,-4(fp)
  size_t i = 0;
100046ac:	e03ff315 	stw	zero,-52(fp)
  for(i = 0; i != lz77_encoded->size; ++i)
100046b0:	e03ff315 	stw	zero,-52(fp)
100046b4:	00006606 	br	10004850 <writeLZ77data+0x1c8>
  {
    unsigned val = lz77_encoded->data[i];
100046b8:	e0bffe17 	ldw	r2,-8(fp)
100046bc:	10c00017 	ldw	r3,0(r2)
100046c0:	e0bff317 	ldw	r2,-52(fp)
100046c4:	1085883a 	add	r2,r2,r2
100046c8:	1085883a 	add	r2,r2,r2
100046cc:	1885883a 	add	r2,r3,r2
100046d0:	10800017 	ldw	r2,0(r2)
100046d4:	e0bff415 	stw	r2,-48(fp)
    addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_ll, val), HuffmanTree_getLength(tree_ll, val));
100046d8:	e13fff17 	ldw	r4,-4(fp)
100046dc:	e17ff417 	ldw	r5,-48(fp)
100046e0:	00021b40 	call	100021b4 <HuffmanTree_getCode>
100046e4:	1021883a 	mov	r16,r2
100046e8:	e13fff17 	ldw	r4,-4(fp)
100046ec:	e17ff417 	ldw	r5,-48(fp)
100046f0:	00021f40 	call	100021f4 <HuffmanTree_getLength>
100046f4:	e13ffc17 	ldw	r4,-16(fp)
100046f8:	e17ffd17 	ldw	r5,-12(fp)
100046fc:	800d883a 	mov	r6,r16
10004700:	100f883a 	mov	r7,r2
10004704:	00035500 	call	10003550 <addHuffmanSymbol>
    if(val > 256) /*for a length code, 3 more things have to be added*/
10004708:	e0bff417 	ldw	r2,-48(fp)
1000470c:	10804070 	cmpltui	r2,r2,257
10004710:	10004c1e 	bne	r2,zero,10004844 <writeLZ77data+0x1bc>
    {
      unsigned length_index = val - FIRST_LENGTH_CODE_INDEX;
10004714:	e0bff417 	ldw	r2,-48(fp)
10004718:	10bfbfc4 	addi	r2,r2,-257
1000471c:	e0bff515 	stw	r2,-44(fp)
      unsigned n_length_extra_bits = LENGTHEXTRA[length_index];
10004720:	00c400b4 	movhi	r3,4098
10004724:	18c9f404 	addi	r3,r3,10192
10004728:	e0bff517 	ldw	r2,-44(fp)
1000472c:	1085883a 	add	r2,r2,r2
10004730:	1085883a 	add	r2,r2,r2
10004734:	1885883a 	add	r2,r3,r2
10004738:	10800017 	ldw	r2,0(r2)
1000473c:	e0bff615 	stw	r2,-40(fp)
      unsigned length_extra_bits = lz77_encoded->data[++i];
10004740:	e0bffe17 	ldw	r2,-8(fp)
10004744:	10c00017 	ldw	r3,0(r2)
10004748:	e0bff317 	ldw	r2,-52(fp)
1000474c:	10800044 	addi	r2,r2,1
10004750:	e0bff315 	stw	r2,-52(fp)
10004754:	e0bff317 	ldw	r2,-52(fp)
10004758:	1085883a 	add	r2,r2,r2
1000475c:	1085883a 	add	r2,r2,r2
10004760:	1885883a 	add	r2,r3,r2
10004764:	10800017 	ldw	r2,0(r2)
10004768:	e0bff715 	stw	r2,-36(fp)

      unsigned distance_code = lz77_encoded->data[++i];
1000476c:	e0bffe17 	ldw	r2,-8(fp)
10004770:	10c00017 	ldw	r3,0(r2)
10004774:	e0bff317 	ldw	r2,-52(fp)
10004778:	10800044 	addi	r2,r2,1
1000477c:	e0bff315 	stw	r2,-52(fp)
10004780:	e0bff317 	ldw	r2,-52(fp)
10004784:	1085883a 	add	r2,r2,r2
10004788:	1085883a 	add	r2,r2,r2
1000478c:	1885883a 	add	r2,r3,r2
10004790:	10800017 	ldw	r2,0(r2)
10004794:	e0bff815 	stw	r2,-32(fp)

      unsigned distance_index = distance_code;
10004798:	e0bff817 	ldw	r2,-32(fp)
1000479c:	e0bff915 	stw	r2,-28(fp)
      unsigned n_distance_extra_bits = DISTANCEEXTRA[distance_index];
100047a0:	00c400b4 	movhi	r3,4098
100047a4:	18ca2f04 	addi	r3,r3,10428
100047a8:	e0bff917 	ldw	r2,-28(fp)
100047ac:	1085883a 	add	r2,r2,r2
100047b0:	1085883a 	add	r2,r2,r2
100047b4:	1885883a 	add	r2,r3,r2
100047b8:	10800017 	ldw	r2,0(r2)
100047bc:	e0bffa15 	stw	r2,-24(fp)
      unsigned distance_extra_bits = lz77_encoded->data[++i];
100047c0:	e0bffe17 	ldw	r2,-8(fp)
100047c4:	10c00017 	ldw	r3,0(r2)
100047c8:	e0bff317 	ldw	r2,-52(fp)
100047cc:	10800044 	addi	r2,r2,1
100047d0:	e0bff315 	stw	r2,-52(fp)
100047d4:	e0bff317 	ldw	r2,-52(fp)
100047d8:	1085883a 	add	r2,r2,r2
100047dc:	1085883a 	add	r2,r2,r2
100047e0:	1885883a 	add	r2,r3,r2
100047e4:	10800017 	ldw	r2,0(r2)
100047e8:	e0bffb15 	stw	r2,-20(fp)

      addBitsToStream(bp, out, length_extra_bits, n_length_extra_bits);
100047ec:	e13ffc17 	ldw	r4,-16(fp)
100047f0:	e17ffd17 	ldw	r5,-12(fp)
100047f4:	e1bff717 	ldw	r6,-36(fp)
100047f8:	e1fff617 	ldw	r7,-40(fp)
100047fc:	0000cac0 	call	10000cac <addBitsToStream>
      addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_d, distance_code),
10004800:	e1000317 	ldw	r4,12(fp)
10004804:	e17ff817 	ldw	r5,-32(fp)
10004808:	00021b40 	call	100021b4 <HuffmanTree_getCode>
1000480c:	1021883a 	mov	r16,r2
10004810:	e1000317 	ldw	r4,12(fp)
10004814:	e17ff817 	ldw	r5,-32(fp)
10004818:	00021f40 	call	100021f4 <HuffmanTree_getLength>
1000481c:	e13ffc17 	ldw	r4,-16(fp)
10004820:	e17ffd17 	ldw	r5,-12(fp)
10004824:	800d883a 	mov	r6,r16
10004828:	100f883a 	mov	r7,r2
1000482c:	00035500 	call	10003550 <addHuffmanSymbol>
                       HuffmanTree_getLength(tree_d, distance_code));
      addBitsToStream(bp, out, distance_extra_bits, n_distance_extra_bits);
10004830:	e13ffc17 	ldw	r4,-16(fp)
10004834:	e17ffd17 	ldw	r5,-12(fp)
10004838:	e1bffb17 	ldw	r6,-20(fp)
1000483c:	e1fffa17 	ldw	r7,-24(fp)
10004840:	0000cac0 	call	10000cac <addBitsToStream>
*/
static void writeLZ77data(size_t* bp, ucvector* out, const uivector* lz77_encoded,
                          const HuffmanTree* tree_ll, const HuffmanTree* tree_d)
{
  size_t i = 0;
  for(i = 0; i != lz77_encoded->size; ++i)
10004844:	e0bff317 	ldw	r2,-52(fp)
10004848:	10800044 	addi	r2,r2,1
1000484c:	e0bff315 	stw	r2,-52(fp)
10004850:	e0bffe17 	ldw	r2,-8(fp)
10004854:	10c00117 	ldw	r3,4(r2)
10004858:	e0bff317 	ldw	r2,-52(fp)
1000485c:	18bf961e 	bne	r3,r2,100046b8 <__alt_data_end+0xf80046b8>
      addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_d, distance_code),
                       HuffmanTree_getLength(tree_d, distance_code));
      addBitsToStream(bp, out, distance_extra_bits, n_distance_extra_bits);
    }
  }
}
10004860:	e037883a 	mov	sp,fp
10004864:	dfc00217 	ldw	ra,8(sp)
10004868:	df000117 	ldw	fp,4(sp)
1000486c:	dc000017 	ldw	r16,0(sp)
10004870:	dec00304 	addi	sp,sp,12
10004874:	f800283a 	ret

10004878 <deflateDynamic>:

/*Deflate for a block of type "dynamic", that is, with freely, optimally, created huffman trees*/
static unsigned deflateDynamic(ucvector* out, size_t* bp, Hash* hash,
                               const unsigned char* data, size_t datapos, size_t dataend,
                               const LodePNGCompressSettings* settings, unsigned final)
{
10004878:	deffc104 	addi	sp,sp,-252
1000487c:	dfc03e15 	stw	ra,248(sp)
10004880:	df003d15 	stw	fp,244(sp)
10004884:	dc003c15 	stw	r16,240(sp)
10004888:	df003c04 	addi	fp,sp,240
1000488c:	e13ffc15 	stw	r4,-16(fp)
10004890:	e17ffd15 	stw	r5,-12(fp)
10004894:	e1bffe15 	stw	r6,-8(fp)
10004898:	e1ffff15 	stw	r7,-4(fp)
  unsigned error = 0;
1000489c:	e03fc915 	stw	zero,-220(fp)
  uivector bitlen_lld_e; /*bitlen_lld encoded with repeat codes (this is a rudemtary run length compression)*/
  /*bitlen_cl is the code length code lengths ("clcl"). The bit lengths of codes to represent tree_cl
  (these are written as is in the file, it would be crazy to compress these using yet another huffman
  tree that needs to be represented by yet another set of code lengths)*/
  uivector bitlen_cl;
  size_t datasize = dataend - datapos;
100048a0:	e0c00417 	ldw	r3,16(fp)
100048a4:	e0800317 	ldw	r2,12(fp)
100048a8:	1885c83a 	sub	r2,r3,r2
100048ac:	e0bfd015 	stw	r2,-192(fp)
  bitlen_lld is to tree_cl what data is to tree_ll and tree_d.
  bitlen_lld_e is to bitlen_lld what lz77_encoded is to data.
  bitlen_cl is to bitlen_lld_e what bitlen_lld is to lz77_encoded.
  */

  unsigned BFINAL = final;
100048b0:	e0800617 	ldw	r2,24(fp)
100048b4:	e0bfd115 	stw	r2,-188(fp)
  size_t numcodes_ll, numcodes_d, i;
  unsigned HLIT, HDIST, HCLEN;

  uivector_init(&lz77_encoded);
100048b8:	e0bfd804 	addi	r2,fp,-160
100048bc:	1009883a 	mov	r4,r2
100048c0:	000049c0 	call	1000049c <uivector_init>
  HuffmanTree_init(&tree_ll);
100048c4:	e0bfdb04 	addi	r2,fp,-148
100048c8:	1009883a 	mov	r4,r2
100048cc:	0000fa00 	call	10000fa0 <HuffmanTree_init>
  HuffmanTree_init(&tree_d);
100048d0:	e0bfe004 	addi	r2,fp,-128
100048d4:	1009883a 	mov	r4,r2
100048d8:	0000fa00 	call	10000fa0 <HuffmanTree_init>
  HuffmanTree_init(&tree_cl);
100048dc:	e0bfe504 	addi	r2,fp,-108
100048e0:	1009883a 	mov	r4,r2
100048e4:	0000fa00 	call	10000fa0 <HuffmanTree_init>
  uivector_init(&frequencies_ll);
100048e8:	e0bfea04 	addi	r2,fp,-88
100048ec:	1009883a 	mov	r4,r2
100048f0:	000049c0 	call	1000049c <uivector_init>
  uivector_init(&frequencies_d);
100048f4:	e0bfed04 	addi	r2,fp,-76
100048f8:	1009883a 	mov	r4,r2
100048fc:	000049c0 	call	1000049c <uivector_init>
  uivector_init(&frequencies_cl);
10004900:	e0bff004 	addi	r2,fp,-64
10004904:	1009883a 	mov	r4,r2
10004908:	000049c0 	call	1000049c <uivector_init>
  uivector_init(&bitlen_lld);
1000490c:	e0bff304 	addi	r2,fp,-52
10004910:	1009883a 	mov	r4,r2
10004914:	000049c0 	call	1000049c <uivector_init>
  uivector_init(&bitlen_lld_e);
10004918:	e0bff604 	addi	r2,fp,-40
1000491c:	1009883a 	mov	r4,r2
10004920:	000049c0 	call	1000049c <uivector_init>
  uivector_init(&bitlen_cl);
10004924:	e0bff904 	addi	r2,fp,-28
10004928:	1009883a 	mov	r4,r2
1000492c:	000049c0 	call	1000049c <uivector_init>

  /*This while loop never loops due to a break at the end, it is here to
  allow breaking out of it to the cleanup phase on error conditions.*/
  while(!error)
10004930:	e0bfc917 	ldw	r2,-220(fp)
10004934:	1002ec1e 	bne	r2,zero,100054e8 <deflateDynamic+0xc70>
  {
    if(settings->use_lz77)
10004938:	e0800517 	ldw	r2,20(fp)
1000493c:	10800117 	ldw	r2,4(r2)
10004940:	10001826 	beq	r2,zero,100049a4 <deflateDynamic+0x12c>
    {
      error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
10004944:	e0800517 	ldw	r2,20(fp)
10004948:	11800217 	ldw	r6,8(r2)
                         settings->minmatch, settings->nicematch, settings->lazymatching);
1000494c:	e0800517 	ldw	r2,20(fp)
  allow breaking out of it to the cleanup phase on error conditions.*/
  while(!error)
  {
    if(settings->use_lz77)
    {
      error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
10004950:	11400317 	ldw	r5,12(r2)
                         settings->minmatch, settings->nicematch, settings->lazymatching);
10004954:	e0800517 	ldw	r2,20(fp)
  allow breaking out of it to the cleanup phase on error conditions.*/
  while(!error)
  {
    if(settings->use_lz77)
    {
      error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
10004958:	11000417 	ldw	r4,16(r2)
                         settings->minmatch, settings->nicematch, settings->lazymatching);
1000495c:	e0800517 	ldw	r2,20(fp)
  allow breaking out of it to the cleanup phase on error conditions.*/
  while(!error)
  {
    if(settings->use_lz77)
    {
      error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
10004960:	10c00517 	ldw	r3,20(r2)
10004964:	e0bfd804 	addi	r2,fp,-160
10004968:	e1c00417 	ldw	r7,16(fp)
1000496c:	d9c00015 	stw	r7,0(sp)
10004970:	d9800115 	stw	r6,4(sp)
10004974:	d9400215 	stw	r5,8(sp)
10004978:	d9000315 	stw	r4,12(sp)
1000497c:	d8c00415 	stw	r3,16(sp)
10004980:	1009883a 	mov	r4,r2
10004984:	e17ffe17 	ldw	r5,-8(fp)
10004988:	e1bfff17 	ldw	r6,-4(fp)
1000498c:	e1c00317 	ldw	r7,12(fp)
10004990:	0003d740 	call	10003d74 <encodeLZ77>
10004994:	e0bfc915 	stw	r2,-220(fp)
                         settings->minmatch, settings->nicematch, settings->lazymatching);
      if(error) break;
10004998:	e0bfc917 	ldw	r2,-220(fp)
1000499c:	10001d26 	beq	r2,zero,10004a14 <deflateDynamic+0x19c>
100049a0:	0002d106 	br	100054e8 <deflateDynamic+0xc70>
    }
    else
    {
      if(!uivector_resize(&lz77_encoded, datasize)) ERROR_BREAK(83 /*alloc fail*/);
100049a4:	e0bfd804 	addi	r2,fp,-160
100049a8:	1009883a 	mov	r4,r2
100049ac:	e17fd017 	ldw	r5,-192(fp)
100049b0:	00003a00 	call	100003a0 <uivector_resize>
100049b4:	1000031e 	bne	r2,zero,100049c4 <deflateDynamic+0x14c>
100049b8:	008014c4 	movi	r2,83
100049bc:	e0bfc915 	stw	r2,-220(fp)
100049c0:	0002c906 	br	100054e8 <deflateDynamic+0xc70>
      for(i = datapos; i < dataend; ++i) lz77_encoded.data[i] = data[i]; /*no LZ77, but still will be Huffman compressed*/
100049c4:	e0800317 	ldw	r2,12(fp)
100049c8:	e0bfcc15 	stw	r2,-208(fp)
100049cc:	00000e06 	br	10004a08 <deflateDynamic+0x190>
100049d0:	e0ffd817 	ldw	r3,-160(fp)
100049d4:	e0bfcc17 	ldw	r2,-208(fp)
100049d8:	1085883a 	add	r2,r2,r2
100049dc:	1085883a 	add	r2,r2,r2
100049e0:	1885883a 	add	r2,r3,r2
100049e4:	e13fff17 	ldw	r4,-4(fp)
100049e8:	e0ffcc17 	ldw	r3,-208(fp)
100049ec:	20c7883a 	add	r3,r4,r3
100049f0:	18c00003 	ldbu	r3,0(r3)
100049f4:	18c03fcc 	andi	r3,r3,255
100049f8:	10c00015 	stw	r3,0(r2)
100049fc:	e0bfcc17 	ldw	r2,-208(fp)
10004a00:	10800044 	addi	r2,r2,1
10004a04:	e0bfcc15 	stw	r2,-208(fp)
10004a08:	e0ffcc17 	ldw	r3,-208(fp)
10004a0c:	e0800417 	ldw	r2,16(fp)
10004a10:	18bfef36 	bltu	r3,r2,100049d0 <__alt_data_end+0xf80049d0>
    }

    if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83 /*alloc fail*/);
10004a14:	e0bfea04 	addi	r2,fp,-88
10004a18:	1009883a 	mov	r4,r2
10004a1c:	01404784 	movi	r5,286
10004a20:	000d883a 	mov	r6,zero
10004a24:	00004000 	call	10000400 <uivector_resizev>
10004a28:	1000031e 	bne	r2,zero,10004a38 <deflateDynamic+0x1c0>
10004a2c:	008014c4 	movi	r2,83
10004a30:	e0bfc915 	stw	r2,-220(fp)
10004a34:	0002ac06 	br	100054e8 <deflateDynamic+0xc70>
    if(!uivector_resizev(&frequencies_d, 30, 0)) ERROR_BREAK(83 /*alloc fail*/);
10004a38:	e0bfed04 	addi	r2,fp,-76
10004a3c:	1009883a 	mov	r4,r2
10004a40:	01400784 	movi	r5,30
10004a44:	000d883a 	mov	r6,zero
10004a48:	00004000 	call	10000400 <uivector_resizev>
10004a4c:	1000031e 	bne	r2,zero,10004a5c <deflateDynamic+0x1e4>
10004a50:	008014c4 	movi	r2,83
10004a54:	e0bfc915 	stw	r2,-220(fp)
10004a58:	0002a306 	br	100054e8 <deflateDynamic+0xc70>

    /*Count the frequencies of lit, len and dist codes*/
    for(i = 0; i != lz77_encoded.size; ++i)
10004a5c:	e03fcc15 	stw	zero,-208(fp)
10004a60:	00002806 	br	10004b04 <deflateDynamic+0x28c>
    {
      unsigned symbol = lz77_encoded.data[i];
10004a64:	e0ffd817 	ldw	r3,-160(fp)
10004a68:	e0bfcc17 	ldw	r2,-208(fp)
10004a6c:	1085883a 	add	r2,r2,r2
10004a70:	1085883a 	add	r2,r2,r2
10004a74:	1885883a 	add	r2,r3,r2
10004a78:	10800017 	ldw	r2,0(r2)
10004a7c:	e0bfd215 	stw	r2,-184(fp)
      ++frequencies_ll.data[symbol];
10004a80:	e0ffea17 	ldw	r3,-88(fp)
10004a84:	e0bfd217 	ldw	r2,-184(fp)
10004a88:	1085883a 	add	r2,r2,r2
10004a8c:	1085883a 	add	r2,r2,r2
10004a90:	1885883a 	add	r2,r3,r2
10004a94:	10c00017 	ldw	r3,0(r2)
10004a98:	18c00044 	addi	r3,r3,1
10004a9c:	10c00015 	stw	r3,0(r2)
      if(symbol > 256)
10004aa0:	e0bfd217 	ldw	r2,-184(fp)
10004aa4:	10804070 	cmpltui	r2,r2,257
10004aa8:	1000131e 	bne	r2,zero,10004af8 <deflateDynamic+0x280>
      {
        unsigned dist = lz77_encoded.data[i + 2];
10004aac:	e0ffd817 	ldw	r3,-160(fp)
10004ab0:	e0bfcc17 	ldw	r2,-208(fp)
10004ab4:	10800084 	addi	r2,r2,2
10004ab8:	1085883a 	add	r2,r2,r2
10004abc:	1085883a 	add	r2,r2,r2
10004ac0:	1885883a 	add	r2,r3,r2
10004ac4:	10800017 	ldw	r2,0(r2)
10004ac8:	e0bfd315 	stw	r2,-180(fp)
        ++frequencies_d.data[dist];
10004acc:	e0ffed17 	ldw	r3,-76(fp)
10004ad0:	e0bfd317 	ldw	r2,-180(fp)
10004ad4:	1085883a 	add	r2,r2,r2
10004ad8:	1085883a 	add	r2,r2,r2
10004adc:	1885883a 	add	r2,r3,r2
10004ae0:	10c00017 	ldw	r3,0(r2)
10004ae4:	18c00044 	addi	r3,r3,1
10004ae8:	10c00015 	stw	r3,0(r2)
        i += 3;
10004aec:	e0bfcc17 	ldw	r2,-208(fp)
10004af0:	108000c4 	addi	r2,r2,3
10004af4:	e0bfcc15 	stw	r2,-208(fp)

    if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83 /*alloc fail*/);
    if(!uivector_resizev(&frequencies_d, 30, 0)) ERROR_BREAK(83 /*alloc fail*/);

    /*Count the frequencies of lit, len and dist codes*/
    for(i = 0; i != lz77_encoded.size; ++i)
10004af8:	e0bfcc17 	ldw	r2,-208(fp)
10004afc:	10800044 	addi	r2,r2,1
10004b00:	e0bfcc15 	stw	r2,-208(fp)
10004b04:	e0ffd917 	ldw	r3,-156(fp)
10004b08:	e0bfcc17 	ldw	r2,-208(fp)
10004b0c:	18bfd51e 	bne	r3,r2,10004a64 <__alt_data_end+0xf8004a64>
        unsigned dist = lz77_encoded.data[i + 2];
        ++frequencies_d.data[dist];
        i += 3;
      }
    }
    frequencies_ll.data[256] = 1; /*there will be exactly 1 end code, at the end of the block*/
10004b10:	e0bfea17 	ldw	r2,-88(fp)
10004b14:	10810004 	addi	r2,r2,1024
10004b18:	00c00044 	movi	r3,1
10004b1c:	10c00015 	stw	r3,0(r2)

    /*Make both huffman trees, one for the lit and len codes, one for the dist codes*/
    error = HuffmanTree_makeFromFrequencies(&tree_ll, frequencies_ll.data, 257, frequencies_ll.size, 15);
10004b20:	e0ffea17 	ldw	r3,-88(fp)
10004b24:	e0bfeb17 	ldw	r2,-84(fp)
10004b28:	e13fdb04 	addi	r4,fp,-148
10004b2c:	014003c4 	movi	r5,15
10004b30:	d9400015 	stw	r5,0(sp)
10004b34:	180b883a 	mov	r5,r3
10004b38:	01804044 	movi	r6,257
10004b3c:	100f883a 	mov	r7,r2
10004b40:	00020900 	call	10002090 <HuffmanTree_makeFromFrequencies>
10004b44:	e0bfc915 	stw	r2,-220(fp)
    if(error) break;
10004b48:	e0bfc917 	ldw	r2,-220(fp)
10004b4c:	10025f1e 	bne	r2,zero,100054cc <deflateDynamic+0xc54>
    /*2, not 1, is chosen for mincodes: some buggy PNG decoders require at least 2 symbols in the dist tree*/
    error = HuffmanTree_makeFromFrequencies(&tree_d, frequencies_d.data, 2, frequencies_d.size, 15);
10004b50:	e0ffed17 	ldw	r3,-76(fp)
10004b54:	e0bfee17 	ldw	r2,-72(fp)
10004b58:	e13fe004 	addi	r4,fp,-128
10004b5c:	014003c4 	movi	r5,15
10004b60:	d9400015 	stw	r5,0(sp)
10004b64:	180b883a 	mov	r5,r3
10004b68:	01800084 	movi	r6,2
10004b6c:	100f883a 	mov	r7,r2
10004b70:	00020900 	call	10002090 <HuffmanTree_makeFromFrequencies>
10004b74:	e0bfc915 	stw	r2,-220(fp)
    if(error) break;
10004b78:	e0bfc917 	ldw	r2,-220(fp)
10004b7c:	1002551e 	bne	r2,zero,100054d4 <deflateDynamic+0xc5c>

    numcodes_ll = tree_ll.numcodes; if(numcodes_ll > 286) numcodes_ll = 286;
10004b80:	e0bfdf17 	ldw	r2,-132(fp)
10004b84:	e0bfca15 	stw	r2,-216(fp)
10004b88:	e0bfca17 	ldw	r2,-216(fp)
10004b8c:	108047f0 	cmpltui	r2,r2,287
10004b90:	1000021e 	bne	r2,zero,10004b9c <deflateDynamic+0x324>
10004b94:	00804784 	movi	r2,286
10004b98:	e0bfca15 	stw	r2,-216(fp)
    numcodes_d = tree_d.numcodes; if(numcodes_d > 30) numcodes_d = 30;
10004b9c:	e0bfe417 	ldw	r2,-112(fp)
10004ba0:	e0bfcb15 	stw	r2,-212(fp)
10004ba4:	e0bfcb17 	ldw	r2,-212(fp)
10004ba8:	108007f0 	cmpltui	r2,r2,31
10004bac:	1000021e 	bne	r2,zero,10004bb8 <deflateDynamic+0x340>
10004bb0:	00800784 	movi	r2,30
10004bb4:	e0bfcb15 	stw	r2,-212(fp)
    /*store the code lengths of both generated trees in bitlen_lld*/
    for(i = 0; i != numcodes_ll; ++i) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_ll, (unsigned)i));
10004bb8:	e03fcc15 	stw	zero,-208(fp)
10004bbc:	00000b06 	br	10004bec <deflateDynamic+0x374>
10004bc0:	e0bfdb04 	addi	r2,fp,-148
10004bc4:	1009883a 	mov	r4,r2
10004bc8:	e17fcc17 	ldw	r5,-208(fp)
10004bcc:	00021f40 	call	100021f4 <HuffmanTree_getLength>
10004bd0:	e0fff304 	addi	r3,fp,-52
10004bd4:	1809883a 	mov	r4,r3
10004bd8:	100b883a 	mov	r5,r2
10004bdc:	00004dc0 	call	100004dc <uivector_push_back>
10004be0:	e0bfcc17 	ldw	r2,-208(fp)
10004be4:	10800044 	addi	r2,r2,1
10004be8:	e0bfcc15 	stw	r2,-208(fp)
10004bec:	e0ffcc17 	ldw	r3,-208(fp)
10004bf0:	e0bfca17 	ldw	r2,-216(fp)
10004bf4:	18bff21e 	bne	r3,r2,10004bc0 <__alt_data_end+0xf8004bc0>
    for(i = 0; i != numcodes_d; ++i) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_d, (unsigned)i));
10004bf8:	e03fcc15 	stw	zero,-208(fp)
10004bfc:	00000b06 	br	10004c2c <deflateDynamic+0x3b4>
10004c00:	e0bfe004 	addi	r2,fp,-128
10004c04:	1009883a 	mov	r4,r2
10004c08:	e17fcc17 	ldw	r5,-208(fp)
10004c0c:	00021f40 	call	100021f4 <HuffmanTree_getLength>
10004c10:	e0fff304 	addi	r3,fp,-52
10004c14:	1809883a 	mov	r4,r3
10004c18:	100b883a 	mov	r5,r2
10004c1c:	00004dc0 	call	100004dc <uivector_push_back>
10004c20:	e0bfcc17 	ldw	r2,-208(fp)
10004c24:	10800044 	addi	r2,r2,1
10004c28:	e0bfcc15 	stw	r2,-208(fp)
10004c2c:	e0ffcc17 	ldw	r3,-208(fp)
10004c30:	e0bfcb17 	ldw	r2,-212(fp)
10004c34:	18bff21e 	bne	r3,r2,10004c00 <__alt_data_end+0xf8004c00>

    /*run-length compress bitlen_ldd into bitlen_lld_e by using repeat codes 16 (copy length 3-6 times),
    17 (3-10 zeroes), 18 (11-138 zeroes)*/
    for(i = 0; i != (unsigned)bitlen_lld.size; ++i)
10004c38:	e03fcc15 	stw	zero,-208(fp)
10004c3c:	00009606 	br	10004e98 <deflateDynamic+0x620>
    {
      unsigned j = 0; /*amount of repititions*/
10004c40:	e03fce15 	stw	zero,-200(fp)
      while(i + j + 1 < (unsigned)bitlen_lld.size && bitlen_lld.data[i + j + 1] == bitlen_lld.data[i]) ++j;
10004c44:	00000306 	br	10004c54 <deflateDynamic+0x3dc>
10004c48:	e0bfce17 	ldw	r2,-200(fp)
10004c4c:	10800044 	addi	r2,r2,1
10004c50:	e0bfce15 	stw	r2,-200(fp)
10004c54:	e0ffcc17 	ldw	r3,-208(fp)
10004c58:	e0bfce17 	ldw	r2,-200(fp)
10004c5c:	1885883a 	add	r2,r3,r2
10004c60:	10c00044 	addi	r3,r2,1
10004c64:	e0bff417 	ldw	r2,-48(fp)
10004c68:	1880102e 	bgeu	r3,r2,10004cac <deflateDynamic+0x434>
10004c6c:	e0fff317 	ldw	r3,-52(fp)
10004c70:	e13fcc17 	ldw	r4,-208(fp)
10004c74:	e0bfce17 	ldw	r2,-200(fp)
10004c78:	2085883a 	add	r2,r4,r2
10004c7c:	10800044 	addi	r2,r2,1
10004c80:	1085883a 	add	r2,r2,r2
10004c84:	1085883a 	add	r2,r2,r2
10004c88:	1885883a 	add	r2,r3,r2
10004c8c:	10c00017 	ldw	r3,0(r2)
10004c90:	e13ff317 	ldw	r4,-52(fp)
10004c94:	e0bfcc17 	ldw	r2,-208(fp)
10004c98:	1085883a 	add	r2,r2,r2
10004c9c:	1085883a 	add	r2,r2,r2
10004ca0:	2085883a 	add	r2,r4,r2
10004ca4:	10800017 	ldw	r2,0(r2)
10004ca8:	18bfe726 	beq	r3,r2,10004c48 <__alt_data_end+0xf8004c48>

      if(bitlen_lld.data[i] == 0 && j >= 2) /*repeat code for zeroes*/
10004cac:	e0fff317 	ldw	r3,-52(fp)
10004cb0:	e0bfcc17 	ldw	r2,-208(fp)
10004cb4:	1085883a 	add	r2,r2,r2
10004cb8:	1085883a 	add	r2,r2,r2
10004cbc:	1885883a 	add	r2,r3,r2
10004cc0:	10800017 	ldw	r2,0(r2)
10004cc4:	1000291e 	bne	r2,zero,10004d6c <deflateDynamic+0x4f4>
10004cc8:	e0bfce17 	ldw	r2,-200(fp)
10004ccc:	108000b0 	cmpltui	r2,r2,2
10004cd0:	1000261e 	bne	r2,zero,10004d6c <deflateDynamic+0x4f4>
      {
        ++j; /*include the first zero*/
10004cd4:	e0bfce17 	ldw	r2,-200(fp)
10004cd8:	10800044 	addi	r2,r2,1
10004cdc:	e0bfce15 	stw	r2,-200(fp)
        if(j <= 10) /*repeat code 17 supports max 10 zeroes*/
10004ce0:	e0bfce17 	ldw	r2,-200(fp)
10004ce4:	108002e8 	cmpgeui	r2,r2,11
10004ce8:	10000b1e 	bne	r2,zero,10004d18 <deflateDynamic+0x4a0>
        {
          uivector_push_back(&bitlen_lld_e, 17);
10004cec:	e0bff604 	addi	r2,fp,-40
10004cf0:	1009883a 	mov	r4,r2
10004cf4:	01400444 	movi	r5,17
10004cf8:	00004dc0 	call	100004dc <uivector_push_back>
          uivector_push_back(&bitlen_lld_e, j - 3);
10004cfc:	e0bfce17 	ldw	r2,-200(fp)
10004d00:	10bfff44 	addi	r2,r2,-3
10004d04:	e0fff604 	addi	r3,fp,-40
10004d08:	1809883a 	mov	r4,r3
10004d0c:	100b883a 	mov	r5,r2
10004d10:	00004dc0 	call	100004dc <uivector_push_back>
10004d14:	00000f06 	br	10004d54 <deflateDynamic+0x4dc>
        }
        else /*repeat code 18 supports max 138 zeroes*/
        {
          if(j > 138) j = 138;
10004d18:	e0bfce17 	ldw	r2,-200(fp)
10004d1c:	108022f0 	cmpltui	r2,r2,139
10004d20:	1000021e 	bne	r2,zero,10004d2c <deflateDynamic+0x4b4>
10004d24:	00802284 	movi	r2,138
10004d28:	e0bfce15 	stw	r2,-200(fp)
          uivector_push_back(&bitlen_lld_e, 18);
10004d2c:	e0bff604 	addi	r2,fp,-40
10004d30:	1009883a 	mov	r4,r2
10004d34:	01400484 	movi	r5,18
10004d38:	00004dc0 	call	100004dc <uivector_push_back>
          uivector_push_back(&bitlen_lld_e, j - 11);
10004d3c:	e0bfce17 	ldw	r2,-200(fp)
10004d40:	10bffd44 	addi	r2,r2,-11
10004d44:	e0fff604 	addi	r3,fp,-40
10004d48:	1809883a 	mov	r4,r3
10004d4c:	100b883a 	mov	r5,r2
10004d50:	00004dc0 	call	100004dc <uivector_push_back>
        }
        i += (j - 1);
10004d54:	e0ffce17 	ldw	r3,-200(fp)
10004d58:	e0bfcc17 	ldw	r2,-208(fp)
10004d5c:	1885883a 	add	r2,r3,r2
10004d60:	10bfffc4 	addi	r2,r2,-1
10004d64:	e0bfcc15 	stw	r2,-208(fp)
10004d68:	00004806 	br	10004e8c <deflateDynamic+0x614>
      }
      else if(j >= 3) /*repeat code for value other than zero*/
10004d6c:	e0bfce17 	ldw	r2,-200(fp)
10004d70:	108000f0 	cmpltui	r2,r2,3
10004d74:	10003b1e 	bne	r2,zero,10004e64 <deflateDynamic+0x5ec>
      {
        size_t k;
        unsigned num = j / 6, rest = j % 6;
10004d78:	e0bfce17 	ldw	r2,-200(fp)
10004d7c:	1009883a 	mov	r4,r2
10004d80:	01400184 	movi	r5,6
10004d84:	00146ec0 	call	100146ec <__udivsi3>
10004d88:	e0bfd415 	stw	r2,-176(fp)
10004d8c:	e0bfce17 	ldw	r2,-200(fp)
10004d90:	1009883a 	mov	r4,r2
10004d94:	01400184 	movi	r5,6
10004d98:	00146f40 	call	100146f4 <__umodsi3>
10004d9c:	e0bfd515 	stw	r2,-172(fp)
        uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
10004da0:	e0fff317 	ldw	r3,-52(fp)
10004da4:	e0bfcc17 	ldw	r2,-208(fp)
10004da8:	1085883a 	add	r2,r2,r2
10004dac:	1085883a 	add	r2,r2,r2
10004db0:	1885883a 	add	r2,r3,r2
10004db4:	10800017 	ldw	r2,0(r2)
10004db8:	e0fff604 	addi	r3,fp,-40
10004dbc:	1809883a 	mov	r4,r3
10004dc0:	100b883a 	mov	r5,r2
10004dc4:	00004dc0 	call	100004dc <uivector_push_back>
        for(k = 0; k < num; ++k)
10004dc8:	e03fcf15 	stw	zero,-196(fp)
10004dcc:	00000b06 	br	10004dfc <deflateDynamic+0x584>
        {
          uivector_push_back(&bitlen_lld_e, 16);
10004dd0:	e0bff604 	addi	r2,fp,-40
10004dd4:	1009883a 	mov	r4,r2
10004dd8:	01400404 	movi	r5,16
10004ddc:	00004dc0 	call	100004dc <uivector_push_back>
          uivector_push_back(&bitlen_lld_e, 6 - 3);
10004de0:	e0bff604 	addi	r2,fp,-40
10004de4:	1009883a 	mov	r4,r2
10004de8:	014000c4 	movi	r5,3
10004dec:	00004dc0 	call	100004dc <uivector_push_back>
      else if(j >= 3) /*repeat code for value other than zero*/
      {
        size_t k;
        unsigned num = j / 6, rest = j % 6;
        uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
        for(k = 0; k < num; ++k)
10004df0:	e0bfcf17 	ldw	r2,-196(fp)
10004df4:	10800044 	addi	r2,r2,1
10004df8:	e0bfcf15 	stw	r2,-196(fp)
10004dfc:	e0ffcf17 	ldw	r3,-196(fp)
10004e00:	e0bfd417 	ldw	r2,-176(fp)
10004e04:	18bff236 	bltu	r3,r2,10004dd0 <__alt_data_end+0xf8004dd0>
        {
          uivector_push_back(&bitlen_lld_e, 16);
          uivector_push_back(&bitlen_lld_e, 6 - 3);
        }
        if(rest >= 3)
10004e08:	e0bfd517 	ldw	r2,-172(fp)
10004e0c:	108000f0 	cmpltui	r2,r2,3
10004e10:	10000b1e 	bne	r2,zero,10004e40 <deflateDynamic+0x5c8>
        {
          uivector_push_back(&bitlen_lld_e, 16);
10004e14:	e0bff604 	addi	r2,fp,-40
10004e18:	1009883a 	mov	r4,r2
10004e1c:	01400404 	movi	r5,16
10004e20:	00004dc0 	call	100004dc <uivector_push_back>
          uivector_push_back(&bitlen_lld_e, rest - 3);
10004e24:	e0bfd517 	ldw	r2,-172(fp)
10004e28:	10bfff44 	addi	r2,r2,-3
10004e2c:	e0fff604 	addi	r3,fp,-40
10004e30:	1809883a 	mov	r4,r3
10004e34:	100b883a 	mov	r5,r2
10004e38:	00004dc0 	call	100004dc <uivector_push_back>
10004e3c:	00000406 	br	10004e50 <deflateDynamic+0x5d8>
        }
        else j -= rest;
10004e40:	e0ffce17 	ldw	r3,-200(fp)
10004e44:	e0bfd517 	ldw	r2,-172(fp)
10004e48:	1885c83a 	sub	r2,r3,r2
10004e4c:	e0bfce15 	stw	r2,-200(fp)
        i += j;
10004e50:	e0ffcc17 	ldw	r3,-208(fp)
10004e54:	e0bfce17 	ldw	r2,-200(fp)
10004e58:	1885883a 	add	r2,r3,r2
10004e5c:	e0bfcc15 	stw	r2,-208(fp)
10004e60:	00000a06 	br	10004e8c <deflateDynamic+0x614>
      }
      else /*too short to benefit from repeat code*/
      {
        uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
10004e64:	e0fff317 	ldw	r3,-52(fp)
10004e68:	e0bfcc17 	ldw	r2,-208(fp)
10004e6c:	1085883a 	add	r2,r2,r2
10004e70:	1085883a 	add	r2,r2,r2
10004e74:	1885883a 	add	r2,r3,r2
10004e78:	10800017 	ldw	r2,0(r2)
10004e7c:	e0fff604 	addi	r3,fp,-40
10004e80:	1809883a 	mov	r4,r3
10004e84:	100b883a 	mov	r5,r2
10004e88:	00004dc0 	call	100004dc <uivector_push_back>
    for(i = 0; i != numcodes_ll; ++i) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_ll, (unsigned)i));
    for(i = 0; i != numcodes_d; ++i) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_d, (unsigned)i));

    /*run-length compress bitlen_ldd into bitlen_lld_e by using repeat codes 16 (copy length 3-6 times),
    17 (3-10 zeroes), 18 (11-138 zeroes)*/
    for(i = 0; i != (unsigned)bitlen_lld.size; ++i)
10004e8c:	e0bfcc17 	ldw	r2,-208(fp)
10004e90:	10800044 	addi	r2,r2,1
10004e94:	e0bfcc15 	stw	r2,-208(fp)
10004e98:	e0fff417 	ldw	r3,-48(fp)
10004e9c:	e0bfcc17 	ldw	r2,-208(fp)
10004ea0:	18bf671e 	bne	r3,r2,10004c40 <__alt_data_end+0xf8004c40>
      }
    }

    /*generate tree_cl, the huffmantree of huffmantrees*/

    if(!uivector_resizev(&frequencies_cl, NUM_CODE_LENGTH_CODES, 0)) ERROR_BREAK(83 /*alloc fail*/);
10004ea4:	e0bff004 	addi	r2,fp,-64
10004ea8:	1009883a 	mov	r4,r2
10004eac:	014004c4 	movi	r5,19
10004eb0:	000d883a 	mov	r6,zero
10004eb4:	00004000 	call	10000400 <uivector_resizev>
10004eb8:	1000031e 	bne	r2,zero,10004ec8 <deflateDynamic+0x650>
10004ebc:	008014c4 	movi	r2,83
10004ec0:	e0bfc915 	stw	r2,-220(fp)
10004ec4:	00018806 	br	100054e8 <deflateDynamic+0xc70>
    for(i = 0; i != bitlen_lld_e.size; ++i)
10004ec8:	e03fcc15 	stw	zero,-208(fp)
10004ecc:	00001b06 	br	10004f3c <deflateDynamic+0x6c4>
    {
      ++frequencies_cl.data[bitlen_lld_e.data[i]];
10004ed0:	e0fff017 	ldw	r3,-64(fp)
10004ed4:	e13ff617 	ldw	r4,-40(fp)
10004ed8:	e0bfcc17 	ldw	r2,-208(fp)
10004edc:	1085883a 	add	r2,r2,r2
10004ee0:	1085883a 	add	r2,r2,r2
10004ee4:	2085883a 	add	r2,r4,r2
10004ee8:	10800017 	ldw	r2,0(r2)
10004eec:	1085883a 	add	r2,r2,r2
10004ef0:	1085883a 	add	r2,r2,r2
10004ef4:	1885883a 	add	r2,r3,r2
10004ef8:	10c00017 	ldw	r3,0(r2)
10004efc:	18c00044 	addi	r3,r3,1
10004f00:	10c00015 	stw	r3,0(r2)
      /*after a repeat code come the bits that specify the number of repetitions,
      those don't need to be in the frequencies_cl calculation*/
      if(bitlen_lld_e.data[i] >= 16) ++i;
10004f04:	e0fff617 	ldw	r3,-40(fp)
10004f08:	e0bfcc17 	ldw	r2,-208(fp)
10004f0c:	1085883a 	add	r2,r2,r2
10004f10:	1085883a 	add	r2,r2,r2
10004f14:	1885883a 	add	r2,r3,r2
10004f18:	10800017 	ldw	r2,0(r2)
10004f1c:	10800430 	cmpltui	r2,r2,16
10004f20:	1000031e 	bne	r2,zero,10004f30 <deflateDynamic+0x6b8>
10004f24:	e0bfcc17 	ldw	r2,-208(fp)
10004f28:	10800044 	addi	r2,r2,1
10004f2c:	e0bfcc15 	stw	r2,-208(fp)
    }

    /*generate tree_cl, the huffmantree of huffmantrees*/

    if(!uivector_resizev(&frequencies_cl, NUM_CODE_LENGTH_CODES, 0)) ERROR_BREAK(83 /*alloc fail*/);
    for(i = 0; i != bitlen_lld_e.size; ++i)
10004f30:	e0bfcc17 	ldw	r2,-208(fp)
10004f34:	10800044 	addi	r2,r2,1
10004f38:	e0bfcc15 	stw	r2,-208(fp)
10004f3c:	e0fff717 	ldw	r3,-36(fp)
10004f40:	e0bfcc17 	ldw	r2,-208(fp)
10004f44:	18bfe21e 	bne	r3,r2,10004ed0 <__alt_data_end+0xf8004ed0>
      /*after a repeat code come the bits that specify the number of repetitions,
      those don't need to be in the frequencies_cl calculation*/
      if(bitlen_lld_e.data[i] >= 16) ++i;
    }

    error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl.data,
10004f48:	e17ff017 	ldw	r5,-64(fp)
10004f4c:	e0fff117 	ldw	r3,-60(fp)
10004f50:	e0bff117 	ldw	r2,-60(fp)
10004f54:	e13fe504 	addi	r4,fp,-108
10004f58:	018001c4 	movi	r6,7
10004f5c:	d9800015 	stw	r6,0(sp)
10004f60:	180d883a 	mov	r6,r3
10004f64:	100f883a 	mov	r7,r2
10004f68:	00020900 	call	10002090 <HuffmanTree_makeFromFrequencies>
10004f6c:	e0bfc915 	stw	r2,-220(fp)
                                            frequencies_cl.size, frequencies_cl.size, 7);
    if(error) break;
10004f70:	e0bfc917 	ldw	r2,-220(fp)
10004f74:	1001591e 	bne	r2,zero,100054dc <deflateDynamic+0xc64>

    if(!uivector_resize(&bitlen_cl, tree_cl.numcodes)) ERROR_BREAK(83 /*alloc fail*/);
10004f78:	e0bfe917 	ldw	r2,-92(fp)
10004f7c:	e0fff904 	addi	r3,fp,-28
10004f80:	1809883a 	mov	r4,r3
10004f84:	100b883a 	mov	r5,r2
10004f88:	00003a00 	call	100003a0 <uivector_resize>
10004f8c:	1000031e 	bne	r2,zero,10004f9c <deflateDynamic+0x724>
10004f90:	008014c4 	movi	r2,83
10004f94:	e0bfc915 	stw	r2,-220(fp)
10004f98:	00015306 	br	100054e8 <deflateDynamic+0xc70>
    for(i = 0; i != tree_cl.numcodes; ++i)
10004f9c:	e03fcc15 	stw	zero,-208(fp)
10004fa0:	00001406 	br	10004ff4 <deflateDynamic+0x77c>
    {
      /*lenghts of code length tree is in the order as specified by deflate*/
      bitlen_cl.data[i] = HuffmanTree_getLength(&tree_cl, CLCL_ORDER[i]);
10004fa4:	e0fff917 	ldw	r3,-28(fp)
10004fa8:	e0bfcc17 	ldw	r2,-208(fp)
10004fac:	1085883a 	add	r2,r2,r2
10004fb0:	1085883a 	add	r2,r2,r2
10004fb4:	18a1883a 	add	r16,r3,r2
10004fb8:	00c400b4 	movhi	r3,4098
10004fbc:	18ca4d04 	addi	r3,r3,10548
10004fc0:	e0bfcc17 	ldw	r2,-208(fp)
10004fc4:	1085883a 	add	r2,r2,r2
10004fc8:	1085883a 	add	r2,r2,r2
10004fcc:	1885883a 	add	r2,r3,r2
10004fd0:	10800017 	ldw	r2,0(r2)
10004fd4:	e0ffe504 	addi	r3,fp,-108
10004fd8:	1809883a 	mov	r4,r3
10004fdc:	100b883a 	mov	r5,r2
10004fe0:	00021f40 	call	100021f4 <HuffmanTree_getLength>
10004fe4:	80800015 	stw	r2,0(r16)
    error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl.data,
                                            frequencies_cl.size, frequencies_cl.size, 7);
    if(error) break;

    if(!uivector_resize(&bitlen_cl, tree_cl.numcodes)) ERROR_BREAK(83 /*alloc fail*/);
    for(i = 0; i != tree_cl.numcodes; ++i)
10004fe8:	e0bfcc17 	ldw	r2,-208(fp)
10004fec:	10800044 	addi	r2,r2,1
10004ff0:	e0bfcc15 	stw	r2,-208(fp)
10004ff4:	e0ffe917 	ldw	r3,-92(fp)
10004ff8:	e0bfcc17 	ldw	r2,-208(fp)
10004ffc:	18bfe91e 	bne	r3,r2,10004fa4 <__alt_data_end+0xf8004fa4>
    {
      /*lenghts of code length tree is in the order as specified by deflate*/
      bitlen_cl.data[i] = HuffmanTree_getLength(&tree_cl, CLCL_ORDER[i]);
    }
    while(bitlen_cl.data[bitlen_cl.size - 1] == 0 && bitlen_cl.size > 4)
10005000:	00000a06 	br	1000502c <deflateDynamic+0x7b4>
    {
      /*remove zeros at the end, but minimum size must be 4*/
      if(!uivector_resize(&bitlen_cl, bitlen_cl.size - 1)) ERROR_BREAK(83 /*alloc fail*/);
10005004:	e0bffa17 	ldw	r2,-24(fp)
10005008:	10bfffc4 	addi	r2,r2,-1
1000500c:	e0fff904 	addi	r3,fp,-28
10005010:	1809883a 	mov	r4,r3
10005014:	100b883a 	mov	r5,r2
10005018:	00003a00 	call	100003a0 <uivector_resize>
1000501c:	1000031e 	bne	r2,zero,1000502c <deflateDynamic+0x7b4>
10005020:	008014c4 	movi	r2,83
10005024:	e0bfc915 	stw	r2,-220(fp)
10005028:	00000b06 	br	10005058 <deflateDynamic+0x7e0>
    for(i = 0; i != tree_cl.numcodes; ++i)
    {
      /*lenghts of code length tree is in the order as specified by deflate*/
      bitlen_cl.data[i] = HuffmanTree_getLength(&tree_cl, CLCL_ORDER[i]);
    }
    while(bitlen_cl.data[bitlen_cl.size - 1] == 0 && bitlen_cl.size > 4)
1000502c:	e0fff917 	ldw	r3,-28(fp)
10005030:	e0bffa17 	ldw	r2,-24(fp)
10005034:	10bfffc4 	addi	r2,r2,-1
10005038:	1085883a 	add	r2,r2,r2
1000503c:	1085883a 	add	r2,r2,r2
10005040:	1885883a 	add	r2,r3,r2
10005044:	10800017 	ldw	r2,0(r2)
10005048:	1000031e 	bne	r2,zero,10005058 <deflateDynamic+0x7e0>
1000504c:	e0bffa17 	ldw	r2,-24(fp)
10005050:	10800168 	cmpgeui	r2,r2,5
10005054:	103feb1e 	bne	r2,zero,10005004 <__alt_data_end+0xf8005004>
    {
      /*remove zeros at the end, but minimum size must be 4*/
      if(!uivector_resize(&bitlen_cl, bitlen_cl.size - 1)) ERROR_BREAK(83 /*alloc fail*/);
    }
    if(error) break;
10005058:	e0bfc917 	ldw	r2,-220(fp)
1000505c:	1001211e 	bne	r2,zero,100054e4 <deflateDynamic+0xc6c>
    - compressed data
    - 256 (end code)
    */

    /*Write block type*/
    addBitToStream(bp, out, BFINAL);
10005060:	e0bffd17 	ldw	r2,-12(fp)
10005064:	10800017 	ldw	r2,0(r2)
10005068:	108001cc 	andi	r2,r2,7
1000506c:	1000031e 	bne	r2,zero,1000507c <deflateDynamic+0x804>
10005070:	e13ffc17 	ldw	r4,-16(fp)
10005074:	000b883a 	mov	r5,zero
10005078:	00007e80 	call	100007e8 <ucvector_push_back>
1000507c:	e0bffc17 	ldw	r2,-16(fp)
10005080:	10c00017 	ldw	r3,0(r2)
10005084:	e0bffc17 	ldw	r2,-16(fp)
10005088:	10800117 	ldw	r2,4(r2)
1000508c:	10bfffc4 	addi	r2,r2,-1
10005090:	1885883a 	add	r2,r3,r2
10005094:	e0fffc17 	ldw	r3,-16(fp)
10005098:	19000017 	ldw	r4,0(r3)
1000509c:	e0fffc17 	ldw	r3,-16(fp)
100050a0:	18c00117 	ldw	r3,4(r3)
100050a4:	18ffffc4 	addi	r3,r3,-1
100050a8:	20c7883a 	add	r3,r4,r3
100050ac:	19000003 	ldbu	r4,0(r3)
100050b0:	e0fffd17 	ldw	r3,-12(fp)
100050b4:	18c00017 	ldw	r3,0(r3)
100050b8:	18c001cc 	andi	r3,r3,7
100050bc:	e17fd117 	ldw	r5,-188(fp)
100050c0:	28c6983a 	sll	r3,r5,r3
100050c4:	20c6b03a 	or	r3,r4,r3
100050c8:	10c00005 	stb	r3,0(r2)
100050cc:	e0bffd17 	ldw	r2,-12(fp)
100050d0:	10800017 	ldw	r2,0(r2)
100050d4:	10c00044 	addi	r3,r2,1
100050d8:	e0bffd17 	ldw	r2,-12(fp)
100050dc:	10c00015 	stw	r3,0(r2)
    addBitToStream(bp, out, 0); /*first bit of BTYPE "dynamic"*/
100050e0:	e0bffd17 	ldw	r2,-12(fp)
100050e4:	10800017 	ldw	r2,0(r2)
100050e8:	108001cc 	andi	r2,r2,7
100050ec:	1000031e 	bne	r2,zero,100050fc <deflateDynamic+0x884>
100050f0:	e13ffc17 	ldw	r4,-16(fp)
100050f4:	000b883a 	mov	r5,zero
100050f8:	00007e80 	call	100007e8 <ucvector_push_back>
100050fc:	e0bffc17 	ldw	r2,-16(fp)
10005100:	10c00017 	ldw	r3,0(r2)
10005104:	e0bffc17 	ldw	r2,-16(fp)
10005108:	10800117 	ldw	r2,4(r2)
1000510c:	10bfffc4 	addi	r2,r2,-1
10005110:	1885883a 	add	r2,r3,r2
10005114:	e0fffc17 	ldw	r3,-16(fp)
10005118:	19000017 	ldw	r4,0(r3)
1000511c:	e0fffc17 	ldw	r3,-16(fp)
10005120:	18c00117 	ldw	r3,4(r3)
10005124:	18ffffc4 	addi	r3,r3,-1
10005128:	20c7883a 	add	r3,r4,r3
1000512c:	18c00003 	ldbu	r3,0(r3)
10005130:	10c00005 	stb	r3,0(r2)
10005134:	e0bffd17 	ldw	r2,-12(fp)
10005138:	10800017 	ldw	r2,0(r2)
1000513c:	10c00044 	addi	r3,r2,1
10005140:	e0bffd17 	ldw	r2,-12(fp)
10005144:	10c00015 	stw	r3,0(r2)
    addBitToStream(bp, out, 1); /*second bit of BTYPE "dynamic"*/
10005148:	e0bffd17 	ldw	r2,-12(fp)
1000514c:	10800017 	ldw	r2,0(r2)
10005150:	108001cc 	andi	r2,r2,7
10005154:	1000031e 	bne	r2,zero,10005164 <deflateDynamic+0x8ec>
10005158:	e13ffc17 	ldw	r4,-16(fp)
1000515c:	000b883a 	mov	r5,zero
10005160:	00007e80 	call	100007e8 <ucvector_push_back>
10005164:	e0bffc17 	ldw	r2,-16(fp)
10005168:	10c00017 	ldw	r3,0(r2)
1000516c:	e0bffc17 	ldw	r2,-16(fp)
10005170:	10800117 	ldw	r2,4(r2)
10005174:	10bfffc4 	addi	r2,r2,-1
10005178:	1885883a 	add	r2,r3,r2
1000517c:	e0fffc17 	ldw	r3,-16(fp)
10005180:	19000017 	ldw	r4,0(r3)
10005184:	e0fffc17 	ldw	r3,-16(fp)
10005188:	18c00117 	ldw	r3,4(r3)
1000518c:	18ffffc4 	addi	r3,r3,-1
10005190:	20c7883a 	add	r3,r4,r3
10005194:	18c00003 	ldbu	r3,0(r3)
10005198:	1809883a 	mov	r4,r3
1000519c:	e0fffd17 	ldw	r3,-12(fp)
100051a0:	18c00017 	ldw	r3,0(r3)
100051a4:	18c001cc 	andi	r3,r3,7
100051a8:	01400044 	movi	r5,1
100051ac:	28c6983a 	sll	r3,r5,r3
100051b0:	20c6b03a 	or	r3,r4,r3
100051b4:	10c00005 	stb	r3,0(r2)
100051b8:	e0bffd17 	ldw	r2,-12(fp)
100051bc:	10800017 	ldw	r2,0(r2)
100051c0:	10c00044 	addi	r3,r2,1
100051c4:	e0bffd17 	ldw	r2,-12(fp)
100051c8:	10c00015 	stw	r3,0(r2)

    /*write the HLIT, HDIST and HCLEN values*/
    HLIT = (unsigned)(numcodes_ll - 257);
100051cc:	e0bfca17 	ldw	r2,-216(fp)
100051d0:	10bfbfc4 	addi	r2,r2,-257
100051d4:	e0bfd615 	stw	r2,-168(fp)
    HDIST = (unsigned)(numcodes_d - 1);
100051d8:	e0bfcb17 	ldw	r2,-212(fp)
100051dc:	10bfffc4 	addi	r2,r2,-1
100051e0:	e0bfd715 	stw	r2,-164(fp)
    HCLEN = (unsigned)bitlen_cl.size - 4;
100051e4:	e0bffa17 	ldw	r2,-24(fp)
100051e8:	10bfff04 	addi	r2,r2,-4
100051ec:	e0bfcd15 	stw	r2,-204(fp)
    /*trim zeroes for HCLEN. HLIT and HDIST were already trimmed at tree creation*/
    while(!bitlen_cl.data[HCLEN + 4 - 1] && HCLEN > 0) --HCLEN;
100051f0:	00000306 	br	10005200 <deflateDynamic+0x988>
100051f4:	e0bfcd17 	ldw	r2,-204(fp)
100051f8:	10bfffc4 	addi	r2,r2,-1
100051fc:	e0bfcd15 	stw	r2,-204(fp)
10005200:	e0fff917 	ldw	r3,-28(fp)
10005204:	e0bfcd17 	ldw	r2,-204(fp)
10005208:	108000c4 	addi	r2,r2,3
1000520c:	1085883a 	add	r2,r2,r2
10005210:	1085883a 	add	r2,r2,r2
10005214:	1885883a 	add	r2,r3,r2
10005218:	10800017 	ldw	r2,0(r2)
1000521c:	1000021e 	bne	r2,zero,10005228 <deflateDynamic+0x9b0>
10005220:	e0bfcd17 	ldw	r2,-204(fp)
10005224:	103ff31e 	bne	r2,zero,100051f4 <__alt_data_end+0xf80051f4>
    addBitsToStream(bp, out, HLIT, 5);
10005228:	e13ffd17 	ldw	r4,-12(fp)
1000522c:	e17ffc17 	ldw	r5,-16(fp)
10005230:	e1bfd617 	ldw	r6,-168(fp)
10005234:	01c00144 	movi	r7,5
10005238:	0000cac0 	call	10000cac <addBitsToStream>
    addBitsToStream(bp, out, HDIST, 5);
1000523c:	e13ffd17 	ldw	r4,-12(fp)
10005240:	e17ffc17 	ldw	r5,-16(fp)
10005244:	e1bfd717 	ldw	r6,-164(fp)
10005248:	01c00144 	movi	r7,5
1000524c:	0000cac0 	call	10000cac <addBitsToStream>
    addBitsToStream(bp, out, HCLEN, 4);
10005250:	e13ffd17 	ldw	r4,-12(fp)
10005254:	e17ffc17 	ldw	r5,-16(fp)
10005258:	e1bfcd17 	ldw	r6,-204(fp)
1000525c:	01c00104 	movi	r7,4
10005260:	0000cac0 	call	10000cac <addBitsToStream>

    /*write the code lenghts of the code length alphabet*/
    for(i = 0; i != HCLEN + 4; ++i) addBitsToStream(bp, out, bitlen_cl.data[i], 3);
10005264:	e03fcc15 	stw	zero,-208(fp)
10005268:	00000e06 	br	100052a4 <deflateDynamic+0xa2c>
1000526c:	e0fff917 	ldw	r3,-28(fp)
10005270:	e0bfcc17 	ldw	r2,-208(fp)
10005274:	1085883a 	add	r2,r2,r2
10005278:	1085883a 	add	r2,r2,r2
1000527c:	1885883a 	add	r2,r3,r2
10005280:	10800017 	ldw	r2,0(r2)
10005284:	e13ffd17 	ldw	r4,-12(fp)
10005288:	e17ffc17 	ldw	r5,-16(fp)
1000528c:	100d883a 	mov	r6,r2
10005290:	01c000c4 	movi	r7,3
10005294:	0000cac0 	call	10000cac <addBitsToStream>
10005298:	e0bfcc17 	ldw	r2,-208(fp)
1000529c:	10800044 	addi	r2,r2,1
100052a0:	e0bfcc15 	stw	r2,-208(fp)
100052a4:	e0bfcd17 	ldw	r2,-204(fp)
100052a8:	10c00104 	addi	r3,r2,4
100052ac:	e0bfcc17 	ldw	r2,-208(fp)
100052b0:	18bfee1e 	bne	r3,r2,1000526c <__alt_data_end+0xf800526c>

    /*write the lenghts of the lit/len AND the dist alphabet*/
    for(i = 0; i != bitlen_lld_e.size; ++i)
100052b4:	e03fcc15 	stw	zero,-208(fp)
100052b8:	00006106 	br	10005440 <deflateDynamic+0xbc8>
    {
      addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_cl, bitlen_lld_e.data[i]),
100052bc:	e0fff617 	ldw	r3,-40(fp)
100052c0:	e0bfcc17 	ldw	r2,-208(fp)
100052c4:	1085883a 	add	r2,r2,r2
100052c8:	1085883a 	add	r2,r2,r2
100052cc:	1885883a 	add	r2,r3,r2
100052d0:	10800017 	ldw	r2,0(r2)
100052d4:	e0ffe504 	addi	r3,fp,-108
100052d8:	1809883a 	mov	r4,r3
100052dc:	100b883a 	mov	r5,r2
100052e0:	00021b40 	call	100021b4 <HuffmanTree_getCode>
100052e4:	1021883a 	mov	r16,r2
                       HuffmanTree_getLength(&tree_cl, bitlen_lld_e.data[i]));
100052e8:	e0fff617 	ldw	r3,-40(fp)
100052ec:	e0bfcc17 	ldw	r2,-208(fp)
100052f0:	1085883a 	add	r2,r2,r2
100052f4:	1085883a 	add	r2,r2,r2
100052f8:	1885883a 	add	r2,r3,r2
    for(i = 0; i != HCLEN + 4; ++i) addBitsToStream(bp, out, bitlen_cl.data[i], 3);

    /*write the lenghts of the lit/len AND the dist alphabet*/
    for(i = 0; i != bitlen_lld_e.size; ++i)
    {
      addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_cl, bitlen_lld_e.data[i]),
100052fc:	10800017 	ldw	r2,0(r2)
10005300:	e0ffe504 	addi	r3,fp,-108
10005304:	1809883a 	mov	r4,r3
10005308:	100b883a 	mov	r5,r2
1000530c:	00021f40 	call	100021f4 <HuffmanTree_getLength>
10005310:	e13ffd17 	ldw	r4,-12(fp)
10005314:	e17ffc17 	ldw	r5,-16(fp)
10005318:	800d883a 	mov	r6,r16
1000531c:	100f883a 	mov	r7,r2
10005320:	00035500 	call	10003550 <addHuffmanSymbol>
                       HuffmanTree_getLength(&tree_cl, bitlen_lld_e.data[i]));
      /*extra bits of repeat codes*/
      if(bitlen_lld_e.data[i] == 16) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 2);
10005324:	e0fff617 	ldw	r3,-40(fp)
10005328:	e0bfcc17 	ldw	r2,-208(fp)
1000532c:	1085883a 	add	r2,r2,r2
10005330:	1085883a 	add	r2,r2,r2
10005334:	1885883a 	add	r2,r3,r2
10005338:	10800017 	ldw	r2,0(r2)
1000533c:	10800418 	cmpnei	r2,r2,16
10005340:	10000f1e 	bne	r2,zero,10005380 <deflateDynamic+0xb08>
10005344:	e0fff617 	ldw	r3,-40(fp)
10005348:	e0bfcc17 	ldw	r2,-208(fp)
1000534c:	10800044 	addi	r2,r2,1
10005350:	e0bfcc15 	stw	r2,-208(fp)
10005354:	e0bfcc17 	ldw	r2,-208(fp)
10005358:	1085883a 	add	r2,r2,r2
1000535c:	1085883a 	add	r2,r2,r2
10005360:	1885883a 	add	r2,r3,r2
10005364:	10800017 	ldw	r2,0(r2)
10005368:	e13ffd17 	ldw	r4,-12(fp)
1000536c:	e17ffc17 	ldw	r5,-16(fp)
10005370:	100d883a 	mov	r6,r2
10005374:	01c00084 	movi	r7,2
10005378:	0000cac0 	call	10000cac <addBitsToStream>
1000537c:	00002d06 	br	10005434 <deflateDynamic+0xbbc>
      else if(bitlen_lld_e.data[i] == 17) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 3);
10005380:	e0fff617 	ldw	r3,-40(fp)
10005384:	e0bfcc17 	ldw	r2,-208(fp)
10005388:	1085883a 	add	r2,r2,r2
1000538c:	1085883a 	add	r2,r2,r2
10005390:	1885883a 	add	r2,r3,r2
10005394:	10800017 	ldw	r2,0(r2)
10005398:	10800458 	cmpnei	r2,r2,17
1000539c:	10000f1e 	bne	r2,zero,100053dc <deflateDynamic+0xb64>
100053a0:	e0fff617 	ldw	r3,-40(fp)
100053a4:	e0bfcc17 	ldw	r2,-208(fp)
100053a8:	10800044 	addi	r2,r2,1
100053ac:	e0bfcc15 	stw	r2,-208(fp)
100053b0:	e0bfcc17 	ldw	r2,-208(fp)
100053b4:	1085883a 	add	r2,r2,r2
100053b8:	1085883a 	add	r2,r2,r2
100053bc:	1885883a 	add	r2,r3,r2
100053c0:	10800017 	ldw	r2,0(r2)
100053c4:	e13ffd17 	ldw	r4,-12(fp)
100053c8:	e17ffc17 	ldw	r5,-16(fp)
100053cc:	100d883a 	mov	r6,r2
100053d0:	01c000c4 	movi	r7,3
100053d4:	0000cac0 	call	10000cac <addBitsToStream>
100053d8:	00001606 	br	10005434 <deflateDynamic+0xbbc>
      else if(bitlen_lld_e.data[i] == 18) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 7);
100053dc:	e0fff617 	ldw	r3,-40(fp)
100053e0:	e0bfcc17 	ldw	r2,-208(fp)
100053e4:	1085883a 	add	r2,r2,r2
100053e8:	1085883a 	add	r2,r2,r2
100053ec:	1885883a 	add	r2,r3,r2
100053f0:	10800017 	ldw	r2,0(r2)
100053f4:	10800498 	cmpnei	r2,r2,18
100053f8:	10000e1e 	bne	r2,zero,10005434 <deflateDynamic+0xbbc>
100053fc:	e0fff617 	ldw	r3,-40(fp)
10005400:	e0bfcc17 	ldw	r2,-208(fp)
10005404:	10800044 	addi	r2,r2,1
10005408:	e0bfcc15 	stw	r2,-208(fp)
1000540c:	e0bfcc17 	ldw	r2,-208(fp)
10005410:	1085883a 	add	r2,r2,r2
10005414:	1085883a 	add	r2,r2,r2
10005418:	1885883a 	add	r2,r3,r2
1000541c:	10800017 	ldw	r2,0(r2)
10005420:	e13ffd17 	ldw	r4,-12(fp)
10005424:	e17ffc17 	ldw	r5,-16(fp)
10005428:	100d883a 	mov	r6,r2
1000542c:	01c001c4 	movi	r7,7
10005430:	0000cac0 	call	10000cac <addBitsToStream>

    /*write the code lenghts of the code length alphabet*/
    for(i = 0; i != HCLEN + 4; ++i) addBitsToStream(bp, out, bitlen_cl.data[i], 3);

    /*write the lenghts of the lit/len AND the dist alphabet*/
    for(i = 0; i != bitlen_lld_e.size; ++i)
10005434:	e0bfcc17 	ldw	r2,-208(fp)
10005438:	10800044 	addi	r2,r2,1
1000543c:	e0bfcc15 	stw	r2,-208(fp)
10005440:	e0fff717 	ldw	r3,-36(fp)
10005444:	e0bfcc17 	ldw	r2,-208(fp)
10005448:	18bf9c1e 	bne	r3,r2,100052bc <__alt_data_end+0xf80052bc>
      else if(bitlen_lld_e.data[i] == 17) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 3);
      else if(bitlen_lld_e.data[i] == 18) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 7);
    }

    /*write the compressed data symbols*/
    writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
1000544c:	e0ffd804 	addi	r3,fp,-160
10005450:	e0bfdb04 	addi	r2,fp,-148
10005454:	e13fe004 	addi	r4,fp,-128
10005458:	d9000015 	stw	r4,0(sp)
1000545c:	e13ffd17 	ldw	r4,-12(fp)
10005460:	e17ffc17 	ldw	r5,-16(fp)
10005464:	180d883a 	mov	r6,r3
10005468:	100f883a 	mov	r7,r2
1000546c:	00046880 	call	10004688 <writeLZ77data>
    /*error: the length of the end code 256 must be larger than 0*/
    if(HuffmanTree_getLength(&tree_ll, 256) == 0) ERROR_BREAK(64);
10005470:	e0bfdb04 	addi	r2,fp,-148
10005474:	1009883a 	mov	r4,r2
10005478:	01404004 	movi	r5,256
1000547c:	00021f40 	call	100021f4 <HuffmanTree_getLength>
10005480:	1000031e 	bne	r2,zero,10005490 <deflateDynamic+0xc18>
10005484:	00801004 	movi	r2,64
10005488:	e0bfc915 	stw	r2,-220(fp)
1000548c:	00001606 	br	100054e8 <deflateDynamic+0xc70>

    /*write the end code*/
    addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
10005490:	e0bfdb04 	addi	r2,fp,-148
10005494:	1009883a 	mov	r4,r2
10005498:	01404004 	movi	r5,256
1000549c:	00021b40 	call	100021b4 <HuffmanTree_getCode>
100054a0:	1021883a 	mov	r16,r2
100054a4:	e0bfdb04 	addi	r2,fp,-148
100054a8:	1009883a 	mov	r4,r2
100054ac:	01404004 	movi	r5,256
100054b0:	00021f40 	call	100021f4 <HuffmanTree_getLength>
100054b4:	e13ffd17 	ldw	r4,-12(fp)
100054b8:	e17ffc17 	ldw	r5,-16(fp)
100054bc:	800d883a 	mov	r6,r16
100054c0:	100f883a 	mov	r7,r2
100054c4:	00035500 	call	10003550 <addHuffmanSymbol>

    break; /*end of error-while*/
100054c8:	00000706 	br	100054e8 <deflateDynamic+0xc70>
    }
    frequencies_ll.data[256] = 1; /*there will be exactly 1 end code, at the end of the block*/

    /*Make both huffman trees, one for the lit and len codes, one for the dist codes*/
    error = HuffmanTree_makeFromFrequencies(&tree_ll, frequencies_ll.data, 257, frequencies_ll.size, 15);
    if(error) break;
100054cc:	0001883a 	nop
100054d0:	00000506 	br	100054e8 <deflateDynamic+0xc70>
    /*2, not 1, is chosen for mincodes: some buggy PNG decoders require at least 2 symbols in the dist tree*/
    error = HuffmanTree_makeFromFrequencies(&tree_d, frequencies_d.data, 2, frequencies_d.size, 15);
    if(error) break;
100054d4:	0001883a 	nop
100054d8:	00000306 	br	100054e8 <deflateDynamic+0xc70>
      if(bitlen_lld_e.data[i] >= 16) ++i;
    }

    error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl.data,
                                            frequencies_cl.size, frequencies_cl.size, 7);
    if(error) break;
100054dc:	0001883a 	nop
100054e0:	00000106 	br	100054e8 <deflateDynamic+0xc70>
    while(bitlen_cl.data[bitlen_cl.size - 1] == 0 && bitlen_cl.size > 4)
    {
      /*remove zeros at the end, but minimum size must be 4*/
      if(!uivector_resize(&bitlen_cl, bitlen_cl.size - 1)) ERROR_BREAK(83 /*alloc fail*/);
    }
    if(error) break;
100054e4:	0001883a 	nop

    break; /*end of error-while*/
  }

  /*cleanup*/
  uivector_cleanup(&lz77_encoded);
100054e8:	e0bfd804 	addi	r2,fp,-160
100054ec:	1009883a 	mov	r4,r2
100054f0:	000028c0 	call	1000028c <uivector_cleanup>
  HuffmanTree_cleanup(&tree_ll);
100054f4:	e0bfdb04 	addi	r2,fp,-148
100054f8:	1009883a 	mov	r4,r2
100054fc:	0000fd80 	call	10000fd8 <HuffmanTree_cleanup>
  HuffmanTree_cleanup(&tree_d);
10005500:	e0bfe004 	addi	r2,fp,-128
10005504:	1009883a 	mov	r4,r2
10005508:	0000fd80 	call	10000fd8 <HuffmanTree_cleanup>
  HuffmanTree_cleanup(&tree_cl);
1000550c:	e0bfe504 	addi	r2,fp,-108
10005510:	1009883a 	mov	r4,r2
10005514:	0000fd80 	call	10000fd8 <HuffmanTree_cleanup>
  uivector_cleanup(&frequencies_ll);
10005518:	e0bfea04 	addi	r2,fp,-88
1000551c:	1009883a 	mov	r4,r2
10005520:	000028c0 	call	1000028c <uivector_cleanup>
  uivector_cleanup(&frequencies_d);
10005524:	e0bfed04 	addi	r2,fp,-76
10005528:	1009883a 	mov	r4,r2
1000552c:	000028c0 	call	1000028c <uivector_cleanup>
  uivector_cleanup(&frequencies_cl);
10005530:	e0bff004 	addi	r2,fp,-64
10005534:	1009883a 	mov	r4,r2
10005538:	000028c0 	call	1000028c <uivector_cleanup>
  uivector_cleanup(&bitlen_lld_e);
1000553c:	e0bff604 	addi	r2,fp,-40
10005540:	1009883a 	mov	r4,r2
10005544:	000028c0 	call	1000028c <uivector_cleanup>
  uivector_cleanup(&bitlen_lld);
10005548:	e0bff304 	addi	r2,fp,-52
1000554c:	1009883a 	mov	r4,r2
10005550:	000028c0 	call	1000028c <uivector_cleanup>
  uivector_cleanup(&bitlen_cl);
10005554:	e0bff904 	addi	r2,fp,-28
10005558:	1009883a 	mov	r4,r2
1000555c:	000028c0 	call	1000028c <uivector_cleanup>

  return error;
10005560:	e0bfc917 	ldw	r2,-220(fp)
}
10005564:	e037883a 	mov	sp,fp
10005568:	dfc00217 	ldw	ra,8(sp)
1000556c:	df000117 	ldw	fp,4(sp)
10005570:	dc000017 	ldw	r16,0(sp)
10005574:	dec00304 	addi	sp,sp,12
10005578:	f800283a 	ret

1000557c <deflateFixed>:

static unsigned deflateFixed(ucvector* out, size_t* bp, Hash* hash,
                             const unsigned char* data,
                             size_t datapos, size_t dataend,
                             const LodePNGCompressSettings* settings, unsigned final)
{
1000557c:	deffe404 	addi	sp,sp,-112
10005580:	dfc01b15 	stw	ra,108(sp)
10005584:	df001a15 	stw	fp,104(sp)
10005588:	dc001915 	stw	r16,100(sp)
1000558c:	df001904 	addi	fp,sp,100
10005590:	e13ffc15 	stw	r4,-16(fp)
10005594:	e17ffd15 	stw	r5,-12(fp)
10005598:	e1bffe15 	stw	r6,-8(fp)
1000559c:	e1ffff15 	stw	r7,-4(fp)
  HuffmanTree tree_ll; /*tree for literal values and length codes*/
  HuffmanTree tree_d; /*tree for distance codes*/

  unsigned BFINAL = final;
100055a0:	e0800617 	ldw	r2,24(fp)
100055a4:	e0bfee15 	stw	r2,-72(fp)
  unsigned error = 0;
100055a8:	e03fec15 	stw	zero,-80(fp)
  size_t i;

  HuffmanTree_init(&tree_ll);
100055ac:	e0bfef04 	addi	r2,fp,-68
100055b0:	1009883a 	mov	r4,r2
100055b4:	0000fa00 	call	10000fa0 <HuffmanTree_init>
  HuffmanTree_init(&tree_d);
100055b8:	e0bff404 	addi	r2,fp,-48
100055bc:	1009883a 	mov	r4,r2
100055c0:	0000fa00 	call	10000fa0 <HuffmanTree_init>

  generateFixedLitLenTree(&tree_ll);
100055c4:	e0bfef04 	addi	r2,fp,-68
100055c8:	1009883a 	mov	r4,r2
100055cc:	00022340 	call	10002234 <generateFixedLitLenTree>
  generateFixedDistanceTree(&tree_d);
100055d0:	e0bff404 	addi	r2,fp,-48
100055d4:	1009883a 	mov	r4,r2
100055d8:	000239c0 	call	1000239c <generateFixedDistanceTree>

  addBitToStream(bp, out, BFINAL);
100055dc:	e0bffd17 	ldw	r2,-12(fp)
100055e0:	10800017 	ldw	r2,0(r2)
100055e4:	108001cc 	andi	r2,r2,7
100055e8:	1000031e 	bne	r2,zero,100055f8 <deflateFixed+0x7c>
100055ec:	e13ffc17 	ldw	r4,-16(fp)
100055f0:	000b883a 	mov	r5,zero
100055f4:	00007e80 	call	100007e8 <ucvector_push_back>
100055f8:	e0bffc17 	ldw	r2,-16(fp)
100055fc:	10c00017 	ldw	r3,0(r2)
10005600:	e0bffc17 	ldw	r2,-16(fp)
10005604:	10800117 	ldw	r2,4(r2)
10005608:	10bfffc4 	addi	r2,r2,-1
1000560c:	1885883a 	add	r2,r3,r2
10005610:	e0fffc17 	ldw	r3,-16(fp)
10005614:	19000017 	ldw	r4,0(r3)
10005618:	e0fffc17 	ldw	r3,-16(fp)
1000561c:	18c00117 	ldw	r3,4(r3)
10005620:	18ffffc4 	addi	r3,r3,-1
10005624:	20c7883a 	add	r3,r4,r3
10005628:	19000003 	ldbu	r4,0(r3)
1000562c:	e0fffd17 	ldw	r3,-12(fp)
10005630:	18c00017 	ldw	r3,0(r3)
10005634:	18c001cc 	andi	r3,r3,7
10005638:	e17fee17 	ldw	r5,-72(fp)
1000563c:	28c6983a 	sll	r3,r5,r3
10005640:	20c6b03a 	or	r3,r4,r3
10005644:	10c00005 	stb	r3,0(r2)
10005648:	e0bffd17 	ldw	r2,-12(fp)
1000564c:	10800017 	ldw	r2,0(r2)
10005650:	10c00044 	addi	r3,r2,1
10005654:	e0bffd17 	ldw	r2,-12(fp)
10005658:	10c00015 	stw	r3,0(r2)
  addBitToStream(bp, out, 1); /*first bit of BTYPE*/
1000565c:	e0bffd17 	ldw	r2,-12(fp)
10005660:	10800017 	ldw	r2,0(r2)
10005664:	108001cc 	andi	r2,r2,7
10005668:	1000031e 	bne	r2,zero,10005678 <deflateFixed+0xfc>
1000566c:	e13ffc17 	ldw	r4,-16(fp)
10005670:	000b883a 	mov	r5,zero
10005674:	00007e80 	call	100007e8 <ucvector_push_back>
10005678:	e0bffc17 	ldw	r2,-16(fp)
1000567c:	10c00017 	ldw	r3,0(r2)
10005680:	e0bffc17 	ldw	r2,-16(fp)
10005684:	10800117 	ldw	r2,4(r2)
10005688:	10bfffc4 	addi	r2,r2,-1
1000568c:	1885883a 	add	r2,r3,r2
10005690:	e0fffc17 	ldw	r3,-16(fp)
10005694:	19000017 	ldw	r4,0(r3)
10005698:	e0fffc17 	ldw	r3,-16(fp)
1000569c:	18c00117 	ldw	r3,4(r3)
100056a0:	18ffffc4 	addi	r3,r3,-1
100056a4:	20c7883a 	add	r3,r4,r3
100056a8:	18c00003 	ldbu	r3,0(r3)
100056ac:	1809883a 	mov	r4,r3
100056b0:	e0fffd17 	ldw	r3,-12(fp)
100056b4:	18c00017 	ldw	r3,0(r3)
100056b8:	18c001cc 	andi	r3,r3,7
100056bc:	01400044 	movi	r5,1
100056c0:	28c6983a 	sll	r3,r5,r3
100056c4:	20c6b03a 	or	r3,r4,r3
100056c8:	10c00005 	stb	r3,0(r2)
100056cc:	e0bffd17 	ldw	r2,-12(fp)
100056d0:	10800017 	ldw	r2,0(r2)
100056d4:	10c00044 	addi	r3,r2,1
100056d8:	e0bffd17 	ldw	r2,-12(fp)
100056dc:	10c00015 	stw	r3,0(r2)
  addBitToStream(bp, out, 0); /*second bit of BTYPE*/
100056e0:	e0bffd17 	ldw	r2,-12(fp)
100056e4:	10800017 	ldw	r2,0(r2)
100056e8:	108001cc 	andi	r2,r2,7
100056ec:	1000031e 	bne	r2,zero,100056fc <deflateFixed+0x180>
100056f0:	e13ffc17 	ldw	r4,-16(fp)
100056f4:	000b883a 	mov	r5,zero
100056f8:	00007e80 	call	100007e8 <ucvector_push_back>
100056fc:	e0bffc17 	ldw	r2,-16(fp)
10005700:	10c00017 	ldw	r3,0(r2)
10005704:	e0bffc17 	ldw	r2,-16(fp)
10005708:	10800117 	ldw	r2,4(r2)
1000570c:	10bfffc4 	addi	r2,r2,-1
10005710:	1885883a 	add	r2,r3,r2
10005714:	e0fffc17 	ldw	r3,-16(fp)
10005718:	19000017 	ldw	r4,0(r3)
1000571c:	e0fffc17 	ldw	r3,-16(fp)
10005720:	18c00117 	ldw	r3,4(r3)
10005724:	18ffffc4 	addi	r3,r3,-1
10005728:	20c7883a 	add	r3,r4,r3
1000572c:	18c00003 	ldbu	r3,0(r3)
10005730:	10c00005 	stb	r3,0(r2)
10005734:	e0bffd17 	ldw	r2,-12(fp)
10005738:	10800017 	ldw	r2,0(r2)
1000573c:	10c00044 	addi	r3,r2,1
10005740:	e0bffd17 	ldw	r2,-12(fp)
10005744:	10c00015 	stw	r3,0(r2)

  if(settings->use_lz77) /*LZ77 encoded*/
10005748:	e0800517 	ldw	r2,20(fp)
1000574c:	10800117 	ldw	r2,4(r2)
10005750:	10002726 	beq	r2,zero,100057f0 <deflateFixed+0x274>
  {
    uivector lz77_encoded;
    uivector_init(&lz77_encoded);
10005754:	e0bff904 	addi	r2,fp,-28
10005758:	1009883a 	mov	r4,r2
1000575c:	000049c0 	call	1000049c <uivector_init>
    error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
10005760:	e0800517 	ldw	r2,20(fp)
10005764:	11800217 	ldw	r6,8(r2)
                       settings->minmatch, settings->nicematch, settings->lazymatching);
10005768:	e0800517 	ldw	r2,20(fp)

  if(settings->use_lz77) /*LZ77 encoded*/
  {
    uivector lz77_encoded;
    uivector_init(&lz77_encoded);
    error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
1000576c:	11400317 	ldw	r5,12(r2)
                       settings->minmatch, settings->nicematch, settings->lazymatching);
10005770:	e0800517 	ldw	r2,20(fp)

  if(settings->use_lz77) /*LZ77 encoded*/
  {
    uivector lz77_encoded;
    uivector_init(&lz77_encoded);
    error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
10005774:	11000417 	ldw	r4,16(r2)
                       settings->minmatch, settings->nicematch, settings->lazymatching);
10005778:	e0800517 	ldw	r2,20(fp)

  if(settings->use_lz77) /*LZ77 encoded*/
  {
    uivector lz77_encoded;
    uivector_init(&lz77_encoded);
    error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
1000577c:	10c00517 	ldw	r3,20(r2)
10005780:	e0bff904 	addi	r2,fp,-28
10005784:	e1c00417 	ldw	r7,16(fp)
10005788:	d9c00015 	stw	r7,0(sp)
1000578c:	d9800115 	stw	r6,4(sp)
10005790:	d9400215 	stw	r5,8(sp)
10005794:	d9000315 	stw	r4,12(sp)
10005798:	d8c00415 	stw	r3,16(sp)
1000579c:	1009883a 	mov	r4,r2
100057a0:	e17ffe17 	ldw	r5,-8(fp)
100057a4:	e1bfff17 	ldw	r6,-4(fp)
100057a8:	e1c00317 	ldw	r7,12(fp)
100057ac:	0003d740 	call	10003d74 <encodeLZ77>
100057b0:	e0bfec15 	stw	r2,-80(fp)
                       settings->minmatch, settings->nicematch, settings->lazymatching);
    if(!error) writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
100057b4:	e0bfec17 	ldw	r2,-80(fp)
100057b8:	1000091e 	bne	r2,zero,100057e0 <deflateFixed+0x264>
100057bc:	e0fff904 	addi	r3,fp,-28
100057c0:	e0bfef04 	addi	r2,fp,-68
100057c4:	e13ff404 	addi	r4,fp,-48
100057c8:	d9000015 	stw	r4,0(sp)
100057cc:	e13ffd17 	ldw	r4,-12(fp)
100057d0:	e17ffc17 	ldw	r5,-16(fp)
100057d4:	180d883a 	mov	r6,r3
100057d8:	100f883a 	mov	r7,r2
100057dc:	00046880 	call	10004688 <writeLZ77data>
    uivector_cleanup(&lz77_encoded);
100057e0:	e0bff904 	addi	r2,fp,-28
100057e4:	1009883a 	mov	r4,r2
100057e8:	000028c0 	call	1000028c <uivector_cleanup>
100057ec:	00002106 	br	10005874 <deflateFixed+0x2f8>
  }
  else /*no LZ77, but still will be Huffman compressed*/
  {
    for(i = datapos; i < dataend; ++i)
100057f0:	e0800317 	ldw	r2,12(fp)
100057f4:	e0bfed15 	stw	r2,-76(fp)
100057f8:	00001b06 	br	10005868 <deflateFixed+0x2ec>
    {
      addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, data[i]), HuffmanTree_getLength(&tree_ll, data[i]));
100057fc:	e0ffff17 	ldw	r3,-4(fp)
10005800:	e0bfed17 	ldw	r2,-76(fp)
10005804:	1885883a 	add	r2,r3,r2
10005808:	10800003 	ldbu	r2,0(r2)
1000580c:	10803fcc 	andi	r2,r2,255
10005810:	e0ffef04 	addi	r3,fp,-68
10005814:	1809883a 	mov	r4,r3
10005818:	100b883a 	mov	r5,r2
1000581c:	00021b40 	call	100021b4 <HuffmanTree_getCode>
10005820:	1021883a 	mov	r16,r2
10005824:	e0ffff17 	ldw	r3,-4(fp)
10005828:	e0bfed17 	ldw	r2,-76(fp)
1000582c:	1885883a 	add	r2,r3,r2
10005830:	10800003 	ldbu	r2,0(r2)
10005834:	10803fcc 	andi	r2,r2,255
10005838:	e0ffef04 	addi	r3,fp,-68
1000583c:	1809883a 	mov	r4,r3
10005840:	100b883a 	mov	r5,r2
10005844:	00021f40 	call	100021f4 <HuffmanTree_getLength>
10005848:	e13ffd17 	ldw	r4,-12(fp)
1000584c:	e17ffc17 	ldw	r5,-16(fp)
10005850:	800d883a 	mov	r6,r16
10005854:	100f883a 	mov	r7,r2
10005858:	00035500 	call	10003550 <addHuffmanSymbol>
    if(!error) writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
    uivector_cleanup(&lz77_encoded);
  }
  else /*no LZ77, but still will be Huffman compressed*/
  {
    for(i = datapos; i < dataend; ++i)
1000585c:	e0bfed17 	ldw	r2,-76(fp)
10005860:	10800044 	addi	r2,r2,1
10005864:	e0bfed15 	stw	r2,-76(fp)
10005868:	e0ffed17 	ldw	r3,-76(fp)
1000586c:	e0800417 	ldw	r2,16(fp)
10005870:	18bfe236 	bltu	r3,r2,100057fc <__alt_data_end+0xf80057fc>
    {
      addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, data[i]), HuffmanTree_getLength(&tree_ll, data[i]));
    }
  }
  /*add END code*/
  if(!error) addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
10005874:	e0bfec17 	ldw	r2,-80(fp)
10005878:	10000e1e 	bne	r2,zero,100058b4 <deflateFixed+0x338>
1000587c:	e0bfef04 	addi	r2,fp,-68
10005880:	1009883a 	mov	r4,r2
10005884:	01404004 	movi	r5,256
10005888:	00021b40 	call	100021b4 <HuffmanTree_getCode>
1000588c:	1021883a 	mov	r16,r2
10005890:	e0bfef04 	addi	r2,fp,-68
10005894:	1009883a 	mov	r4,r2
10005898:	01404004 	movi	r5,256
1000589c:	00021f40 	call	100021f4 <HuffmanTree_getLength>
100058a0:	e13ffd17 	ldw	r4,-12(fp)
100058a4:	e17ffc17 	ldw	r5,-16(fp)
100058a8:	800d883a 	mov	r6,r16
100058ac:	100f883a 	mov	r7,r2
100058b0:	00035500 	call	10003550 <addHuffmanSymbol>

  /*cleanup*/
  HuffmanTree_cleanup(&tree_ll);
100058b4:	e0bfef04 	addi	r2,fp,-68
100058b8:	1009883a 	mov	r4,r2
100058bc:	0000fd80 	call	10000fd8 <HuffmanTree_cleanup>
  HuffmanTree_cleanup(&tree_d);
100058c0:	e0bff404 	addi	r2,fp,-48
100058c4:	1009883a 	mov	r4,r2
100058c8:	0000fd80 	call	10000fd8 <HuffmanTree_cleanup>

  return error;
100058cc:	e0bfec17 	ldw	r2,-80(fp)
}
100058d0:	e037883a 	mov	sp,fp
100058d4:	dfc00217 	ldw	ra,8(sp)
100058d8:	df000117 	ldw	fp,4(sp)
100058dc:	dc000017 	ldw	r16,0(sp)
100058e0:	dec00304 	addi	sp,sp,12
100058e4:	f800283a 	ret

100058e8 <lodepng_deflatev>:

static unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,
                                 const LodePNGCompressSettings* settings)
{
100058e8:	deffe804 	addi	sp,sp,-96
100058ec:	dfc01715 	stw	ra,92(sp)
100058f0:	df001615 	stw	fp,88(sp)
100058f4:	df001604 	addi	fp,sp,88
100058f8:	e13ffc15 	stw	r4,-16(fp)
100058fc:	e17ffd15 	stw	r5,-12(fp)
10005900:	e1bffe15 	stw	r6,-8(fp)
10005904:	e1ffff15 	stw	r7,-4(fp)
  unsigned error = 0;
10005908:	e03fee15 	stw	zero,-72(fp)
  size_t i, blocksize, numdeflateblocks;
  size_t bp = 0; /*the bit pointer*/
1000590c:	e03ff515 	stw	zero,-44(fp)
  Hash hash;

  if(settings->btype > 2) return 61;
10005910:	e0bfff17 	ldw	r2,-4(fp)
10005914:	10800017 	ldw	r2,0(r2)
10005918:	108000f0 	cmpltui	r2,r2,3
1000591c:	1000021e 	bne	r2,zero,10005928 <lodepng_deflatev+0x40>
10005920:	00800f44 	movi	r2,61
10005924:	00007e06 	br	10005b20 <lodepng_deflatev+0x238>
  else if(settings->btype == 0) return deflateNoCompression(out, in, insize);
10005928:	e0bfff17 	ldw	r2,-4(fp)
1000592c:	10800017 	ldw	r2,0(r2)
10005930:	1000051e 	bne	r2,zero,10005948 <lodepng_deflatev+0x60>
10005934:	e13ffc17 	ldw	r4,-16(fp)
10005938:	e17ffd17 	ldw	r5,-12(fp)
1000593c:	e1bffe17 	ldw	r6,-8(fp)
10005940:	00044cc0 	call	100044cc <deflateNoCompression>
10005944:	00007606 	br	10005b20 <lodepng_deflatev+0x238>
  else if(settings->btype == 1) blocksize = insize;
10005948:	e0bfff17 	ldw	r2,-4(fp)
1000594c:	10800017 	ldw	r2,0(r2)
10005950:	10800058 	cmpnei	r2,r2,1
10005954:	1000031e 	bne	r2,zero,10005964 <lodepng_deflatev+0x7c>
10005958:	e0bffe17 	ldw	r2,-8(fp)
1000595c:	e0bff015 	stw	r2,-64(fp)
10005960:	00000e06 	br	1000599c <lodepng_deflatev+0xb4>
  else /*if(settings->btype == 2)*/
  {
    /*on PNGs, deflate blocks of 65-262k seem to give most dense encoding*/
    blocksize = insize / 8 + 8;
10005964:	e0bffe17 	ldw	r2,-8(fp)
10005968:	1004d0fa 	srli	r2,r2,3
1000596c:	10800204 	addi	r2,r2,8
10005970:	e0bff015 	stw	r2,-64(fp)
    if(blocksize < 65536) blocksize = 65536;
10005974:	e0bff017 	ldw	r2,-64(fp)
10005978:	00ffffd4 	movui	r3,65535
1000597c:	18800236 	bltu	r3,r2,10005988 <lodepng_deflatev+0xa0>
10005980:	00800074 	movhi	r2,1
10005984:	e0bff015 	stw	r2,-64(fp)
    if(blocksize > 262144) blocksize = 262144;
10005988:	e0bff017 	ldw	r2,-64(fp)
1000598c:	00c00134 	movhi	r3,4
10005990:	1880022e 	bgeu	r3,r2,1000599c <lodepng_deflatev+0xb4>
10005994:	00800134 	movhi	r2,4
10005998:	e0bff015 	stw	r2,-64(fp)
  }

  numdeflateblocks = (insize + blocksize - 1) / blocksize;
1000599c:	e0fffe17 	ldw	r3,-8(fp)
100059a0:	e0bff017 	ldw	r2,-64(fp)
100059a4:	1885883a 	add	r2,r3,r2
100059a8:	10bfffc4 	addi	r2,r2,-1
100059ac:	1009883a 	mov	r4,r2
100059b0:	e17ff017 	ldw	r5,-64(fp)
100059b4:	00146ec0 	call	100146ec <__udivsi3>
100059b8:	e0bff115 	stw	r2,-60(fp)
  if(numdeflateblocks == 0) numdeflateblocks = 1;
100059bc:	e0bff117 	ldw	r2,-60(fp)
100059c0:	1000021e 	bne	r2,zero,100059cc <lodepng_deflatev+0xe4>
100059c4:	00800044 	movi	r2,1
100059c8:	e0bff115 	stw	r2,-60(fp)

  error = hash_init(&hash, settings->windowsize);
100059cc:	e0bfff17 	ldw	r2,-4(fp)
100059d0:	10800217 	ldw	r2,8(r2)
100059d4:	e0fff604 	addi	r3,fp,-40
100059d8:	1809883a 	mov	r4,r3
100059dc:	100b883a 	mov	r5,r2
100059e0:	00037580 	call	10003758 <hash_init>
100059e4:	e0bfee15 	stw	r2,-72(fp)
  if(error) return error;
100059e8:	e0bfee17 	ldw	r2,-72(fp)
100059ec:	10000226 	beq	r2,zero,100059f8 <lodepng_deflatev+0x110>
100059f0:	e0bfee17 	ldw	r2,-72(fp)
100059f4:	00004a06 	br	10005b20 <lodepng_deflatev+0x238>

  for(i = 0; i != numdeflateblocks && !error; ++i)
100059f8:	e03fef15 	stw	zero,-68(fp)
100059fc:	00003f06 	br	10005afc <lodepng_deflatev+0x214>
  {
    unsigned final = (i == numdeflateblocks - 1);
10005a00:	e0bff117 	ldw	r2,-60(fp)
10005a04:	10ffffc4 	addi	r3,r2,-1
10005a08:	e0bfef17 	ldw	r2,-68(fp)
10005a0c:	1885003a 	cmpeq	r2,r3,r2
10005a10:	10803fcc 	andi	r2,r2,255
10005a14:	e0bff315 	stw	r2,-52(fp)
    size_t start = i * blocksize;
10005a18:	e13fef17 	ldw	r4,-68(fp)
10005a1c:	e17ff017 	ldw	r5,-64(fp)
10005a20:	00146fc0 	call	100146fc <__mulsi3>
10005a24:	e0bff415 	stw	r2,-48(fp)
    size_t end = start + blocksize;
10005a28:	e0fff417 	ldw	r3,-48(fp)
10005a2c:	e0bff017 	ldw	r2,-64(fp)
10005a30:	1885883a 	add	r2,r3,r2
10005a34:	e0bff215 	stw	r2,-56(fp)
    if(end > insize) end = insize;
10005a38:	e0bff217 	ldw	r2,-56(fp)
10005a3c:	e0fffe17 	ldw	r3,-8(fp)
10005a40:	1880022e 	bgeu	r3,r2,10005a4c <lodepng_deflatev+0x164>
10005a44:	e0bffe17 	ldw	r2,-8(fp)
10005a48:	e0bff215 	stw	r2,-56(fp)

    if(settings->btype == 1) error = deflateFixed(out, &bp, &hash, in, start, end, settings, final);
10005a4c:	e0bfff17 	ldw	r2,-4(fp)
10005a50:	10800017 	ldw	r2,0(r2)
10005a54:	10800058 	cmpnei	r2,r2,1
10005a58:	1000111e 	bne	r2,zero,10005aa0 <lodepng_deflatev+0x1b8>
10005a5c:	e0fff504 	addi	r3,fp,-44
10005a60:	e0bff604 	addi	r2,fp,-40
10005a64:	e13ff417 	ldw	r4,-48(fp)
10005a68:	d9000015 	stw	r4,0(sp)
10005a6c:	e13ff217 	ldw	r4,-56(fp)
10005a70:	d9000115 	stw	r4,4(sp)
10005a74:	e13fff17 	ldw	r4,-4(fp)
10005a78:	d9000215 	stw	r4,8(sp)
10005a7c:	e13ff317 	ldw	r4,-52(fp)
10005a80:	d9000315 	stw	r4,12(sp)
10005a84:	e13ffc17 	ldw	r4,-16(fp)
10005a88:	180b883a 	mov	r5,r3
10005a8c:	100d883a 	mov	r6,r2
10005a90:	e1fffd17 	ldw	r7,-12(fp)
10005a94:	000557c0 	call	1000557c <deflateFixed>
10005a98:	e0bfee15 	stw	r2,-72(fp)
10005a9c:	00001406 	br	10005af0 <lodepng_deflatev+0x208>
    else if(settings->btype == 2) error = deflateDynamic(out, &bp, &hash, in, start, end, settings, final);
10005aa0:	e0bfff17 	ldw	r2,-4(fp)
10005aa4:	10800017 	ldw	r2,0(r2)
10005aa8:	10800098 	cmpnei	r2,r2,2
10005aac:	1000101e 	bne	r2,zero,10005af0 <lodepng_deflatev+0x208>
10005ab0:	e0fff504 	addi	r3,fp,-44
10005ab4:	e0bff604 	addi	r2,fp,-40
10005ab8:	e13ff417 	ldw	r4,-48(fp)
10005abc:	d9000015 	stw	r4,0(sp)
10005ac0:	e13ff217 	ldw	r4,-56(fp)
10005ac4:	d9000115 	stw	r4,4(sp)
10005ac8:	e13fff17 	ldw	r4,-4(fp)
10005acc:	d9000215 	stw	r4,8(sp)
10005ad0:	e13ff317 	ldw	r4,-52(fp)
10005ad4:	d9000315 	stw	r4,12(sp)
10005ad8:	e13ffc17 	ldw	r4,-16(fp)
10005adc:	180b883a 	mov	r5,r3
10005ae0:	100d883a 	mov	r6,r2
10005ae4:	e1fffd17 	ldw	r7,-12(fp)
10005ae8:	00048780 	call	10004878 <deflateDynamic>
10005aec:	e0bfee15 	stw	r2,-72(fp)
  if(numdeflateblocks == 0) numdeflateblocks = 1;

  error = hash_init(&hash, settings->windowsize);
  if(error) return error;

  for(i = 0; i != numdeflateblocks && !error; ++i)
10005af0:	e0bfef17 	ldw	r2,-68(fp)
10005af4:	10800044 	addi	r2,r2,1
10005af8:	e0bfef15 	stw	r2,-68(fp)
10005afc:	e0ffef17 	ldw	r3,-68(fp)
10005b00:	e0bff117 	ldw	r2,-60(fp)
10005b04:	18800226 	beq	r3,r2,10005b10 <lodepng_deflatev+0x228>
10005b08:	e0bfee17 	ldw	r2,-72(fp)
10005b0c:	103fbc26 	beq	r2,zero,10005a00 <__alt_data_end+0xf8005a00>

    if(settings->btype == 1) error = deflateFixed(out, &bp, &hash, in, start, end, settings, final);
    else if(settings->btype == 2) error = deflateDynamic(out, &bp, &hash, in, start, end, settings, final);
  }

  hash_cleanup(&hash);
10005b10:	e0bff604 	addi	r2,fp,-40
10005b14:	1009883a 	mov	r4,r2
10005b18:	00039b00 	call	100039b0 <hash_cleanup>

  return error;
10005b1c:	e0bfee17 	ldw	r2,-72(fp)
}
10005b20:	e037883a 	mov	sp,fp
10005b24:	dfc00117 	ldw	ra,4(sp)
10005b28:	df000017 	ldw	fp,0(sp)
10005b2c:	dec00204 	addi	sp,sp,8
10005b30:	f800283a 	ret

10005b34 <lodepng_deflate>:

unsigned lodepng_deflate(unsigned char** out, size_t* outsize,
                         const unsigned char* in, size_t insize,
                         const LodePNGCompressSettings* settings)
{
10005b34:	defff604 	addi	sp,sp,-40
10005b38:	dfc00915 	stw	ra,36(sp)
10005b3c:	df000815 	stw	fp,32(sp)
10005b40:	df000804 	addi	fp,sp,32
10005b44:	e13ffc15 	stw	r4,-16(fp)
10005b48:	e17ffd15 	stw	r5,-12(fp)
10005b4c:	e1bffe15 	stw	r6,-8(fp)
10005b50:	e1ffff15 	stw	r7,-4(fp)
  unsigned error;
  ucvector v;
  ucvector_init_buffer(&v, *out, *outsize);
10005b54:	e0bffc17 	ldw	r2,-16(fp)
10005b58:	10c00017 	ldw	r3,0(r2)
10005b5c:	e0bffd17 	ldw	r2,-12(fp)
10005b60:	10800017 	ldw	r2,0(r2)
10005b64:	e13ff904 	addi	r4,fp,-28
10005b68:	180b883a 	mov	r5,r3
10005b6c:	100d883a 	mov	r6,r2
10005b70:	00007980 	call	10000798 <ucvector_init_buffer>
  error = lodepng_deflatev(&v, in, insize, settings);
10005b74:	e0bff904 	addi	r2,fp,-28
10005b78:	1009883a 	mov	r4,r2
10005b7c:	e17ffe17 	ldw	r5,-8(fp)
10005b80:	e1bfff17 	ldw	r6,-4(fp)
10005b84:	e1c00217 	ldw	r7,8(fp)
10005b88:	00058e80 	call	100058e8 <lodepng_deflatev>
10005b8c:	e0bff815 	stw	r2,-32(fp)
  *out = v.data;
10005b90:	e0fff917 	ldw	r3,-28(fp)
10005b94:	e0bffc17 	ldw	r2,-16(fp)
10005b98:	10c00015 	stw	r3,0(r2)
  *outsize = v.size;
10005b9c:	e0fffa17 	ldw	r3,-24(fp)
10005ba0:	e0bffd17 	ldw	r2,-12(fp)
10005ba4:	10c00015 	stw	r3,0(r2)
  return error;
10005ba8:	e0bff817 	ldw	r2,-32(fp)
}
10005bac:	e037883a 	mov	sp,fp
10005bb0:	dfc00117 	ldw	ra,4(sp)
10005bb4:	df000017 	ldw	fp,0(sp)
10005bb8:	dec00204 	addi	sp,sp,8
10005bbc:	f800283a 	ret

10005bc0 <deflate>:

static unsigned deflate(unsigned char** out, size_t* outsize,
                        const unsigned char* in, size_t insize,
                        const LodePNGCompressSettings* settings)
{
10005bc0:	defff904 	addi	sp,sp,-28
10005bc4:	dfc00615 	stw	ra,24(sp)
10005bc8:	df000515 	stw	fp,20(sp)
10005bcc:	df000504 	addi	fp,sp,20
10005bd0:	e13ffc15 	stw	r4,-16(fp)
10005bd4:	e17ffd15 	stw	r5,-12(fp)
10005bd8:	e1bffe15 	stw	r6,-8(fp)
10005bdc:	e1ffff15 	stw	r7,-4(fp)
  if(settings->custom_deflate)
10005be0:	e0800217 	ldw	r2,8(fp)
10005be4:	10800717 	ldw	r2,28(r2)
10005be8:	10000a26 	beq	r2,zero,10005c14 <deflate+0x54>
  {
    return settings->custom_deflate(out, outsize, in, insize, settings);
10005bec:	e0800217 	ldw	r2,8(fp)
10005bf0:	10800717 	ldw	r2,28(r2)
10005bf4:	e0c00217 	ldw	r3,8(fp)
10005bf8:	d8c00015 	stw	r3,0(sp)
10005bfc:	e13ffc17 	ldw	r4,-16(fp)
10005c00:	e17ffd17 	ldw	r5,-12(fp)
10005c04:	e1bffe17 	ldw	r6,-8(fp)
10005c08:	e1ffff17 	ldw	r7,-4(fp)
10005c0c:	103ee83a 	callr	r2
10005c10:	00000706 	br	10005c30 <deflate+0x70>
  }
  else
  {
    return lodepng_deflate(out, outsize, in, insize, settings);
10005c14:	e0800217 	ldw	r2,8(fp)
10005c18:	d8800015 	stw	r2,0(sp)
10005c1c:	e13ffc17 	ldw	r4,-16(fp)
10005c20:	e17ffd17 	ldw	r5,-12(fp)
10005c24:	e1bffe17 	ldw	r6,-8(fp)
10005c28:	e1ffff17 	ldw	r7,-4(fp)
10005c2c:	0005b340 	call	10005b34 <lodepng_deflate>
  }
}
10005c30:	e037883a 	mov	sp,fp
10005c34:	dfc00117 	ldw	ra,4(sp)
10005c38:	df000017 	ldw	fp,0(sp)
10005c3c:	dec00204 	addi	sp,sp,8
10005c40:	f800283a 	ret

10005c44 <update_adler32>:
/* ////////////////////////////////////////////////////////////////////////// */
/* / Adler32                                                                  */
/* ////////////////////////////////////////////////////////////////////////// */

static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
{
10005c44:	defff804 	addi	sp,sp,-32
10005c48:	dfc00715 	stw	ra,28(sp)
10005c4c:	df000615 	stw	fp,24(sp)
10005c50:	df000604 	addi	fp,sp,24
10005c54:	e13ffd15 	stw	r4,-12(fp)
10005c58:	e17ffe15 	stw	r5,-8(fp)
10005c5c:	e1bfff15 	stw	r6,-4(fp)
   unsigned s1 = adler & 0xffff;
10005c60:	e0bffd17 	ldw	r2,-12(fp)
10005c64:	10bfffcc 	andi	r2,r2,65535
10005c68:	e0bffa15 	stw	r2,-24(fp)
   unsigned s2 = (adler >> 16) & 0xffff;
10005c6c:	e0bffd17 	ldw	r2,-12(fp)
10005c70:	1004d43a 	srli	r2,r2,16
10005c74:	e0bffb15 	stw	r2,-20(fp)

  while(len > 0)
10005c78:	00002606 	br	10005d14 <update_adler32+0xd0>
  {
    /*at least 5550 sums can be done before the sums overflow, saving a lot of module divisions*/
    unsigned amount = len > 5550 ? 5550 : len;
10005c7c:	e0bfff17 	ldw	r2,-4(fp)
10005c80:	10c56bf0 	cmpltui	r3,r2,5551
10005c84:	1800011e 	bne	r3,zero,10005c8c <update_adler32+0x48>
10005c88:	00856b84 	movi	r2,5550
10005c8c:	e0bffc15 	stw	r2,-16(fp)
    len -= amount;
10005c90:	e0ffff17 	ldw	r3,-4(fp)
10005c94:	e0bffc17 	ldw	r2,-16(fp)
10005c98:	1885c83a 	sub	r2,r3,r2
10005c9c:	e0bfff15 	stw	r2,-4(fp)
    while(amount > 0)
10005ca0:	00001006 	br	10005ce4 <update_adler32+0xa0>
    {
      s1 += (*data++);
10005ca4:	e0bffe17 	ldw	r2,-8(fp)
10005ca8:	10800003 	ldbu	r2,0(r2)
10005cac:	10803fcc 	andi	r2,r2,255
10005cb0:	e0fffa17 	ldw	r3,-24(fp)
10005cb4:	1885883a 	add	r2,r3,r2
10005cb8:	e0bffa15 	stw	r2,-24(fp)
10005cbc:	e0bffe17 	ldw	r2,-8(fp)
10005cc0:	10800044 	addi	r2,r2,1
10005cc4:	e0bffe15 	stw	r2,-8(fp)
      s2 += s1;
10005cc8:	e0fffb17 	ldw	r3,-20(fp)
10005ccc:	e0bffa17 	ldw	r2,-24(fp)
10005cd0:	1885883a 	add	r2,r3,r2
10005cd4:	e0bffb15 	stw	r2,-20(fp)
      --amount;
10005cd8:	e0bffc17 	ldw	r2,-16(fp)
10005cdc:	10bfffc4 	addi	r2,r2,-1
10005ce0:	e0bffc15 	stw	r2,-16(fp)
  while(len > 0)
  {
    /*at least 5550 sums can be done before the sums overflow, saving a lot of module divisions*/
    unsigned amount = len > 5550 ? 5550 : len;
    len -= amount;
    while(amount > 0)
10005ce4:	e0bffc17 	ldw	r2,-16(fp)
10005ce8:	103fee1e 	bne	r2,zero,10005ca4 <__alt_data_end+0xf8005ca4>
    {
      s1 += (*data++);
      s2 += s1;
      --amount;
    }
    s1 %= 65521;
10005cec:	e0bffa17 	ldw	r2,-24(fp)
10005cf0:	1009883a 	mov	r4,r2
10005cf4:	017ffc54 	movui	r5,65521
10005cf8:	00146f40 	call	100146f4 <__umodsi3>
10005cfc:	e0bffa15 	stw	r2,-24(fp)
    s2 %= 65521;
10005d00:	e0bffb17 	ldw	r2,-20(fp)
10005d04:	1009883a 	mov	r4,r2
10005d08:	017ffc54 	movui	r5,65521
10005d0c:	00146f40 	call	100146f4 <__umodsi3>
10005d10:	e0bffb15 	stw	r2,-20(fp)
static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
{
   unsigned s1 = adler & 0xffff;
   unsigned s2 = (adler >> 16) & 0xffff;

  while(len > 0)
10005d14:	e0bfff17 	ldw	r2,-4(fp)
10005d18:	103fd81e 	bne	r2,zero,10005c7c <__alt_data_end+0xf8005c7c>
    }
    s1 %= 65521;
    s2 %= 65521;
  }

  return (s2 << 16) | s1;
10005d1c:	e0bffb17 	ldw	r2,-20(fp)
10005d20:	1006943a 	slli	r3,r2,16
10005d24:	e0bffa17 	ldw	r2,-24(fp)
10005d28:	1884b03a 	or	r2,r3,r2
}
10005d2c:	e037883a 	mov	sp,fp
10005d30:	dfc00117 	ldw	ra,4(sp)
10005d34:	df000017 	ldw	fp,0(sp)
10005d38:	dec00204 	addi	sp,sp,8
10005d3c:	f800283a 	ret

10005d40 <adler32>:

/*Return the adler32 of the bytes data[0..len-1]*/
static unsigned adler32(const unsigned char* data, unsigned len)
{
10005d40:	defffc04 	addi	sp,sp,-16
10005d44:	dfc00315 	stw	ra,12(sp)
10005d48:	df000215 	stw	fp,8(sp)
10005d4c:	df000204 	addi	fp,sp,8
10005d50:	e13ffe15 	stw	r4,-8(fp)
10005d54:	e17fff15 	stw	r5,-4(fp)
  return update_adler32(1L, data, len);
10005d58:	01000044 	movi	r4,1
10005d5c:	e17ffe17 	ldw	r5,-8(fp)
10005d60:	e1bfff17 	ldw	r6,-4(fp)
10005d64:	0005c440 	call	10005c44 <update_adler32>
}
10005d68:	e037883a 	mov	sp,fp
10005d6c:	dfc00117 	ldw	ra,4(sp)
10005d70:	df000017 	ldw	fp,0(sp)
10005d74:	dec00204 	addi	sp,sp,8
10005d78:	f800283a 	ret

10005d7c <lodepng_zlib_decompress>:

#ifdef LODEPNG_COMPILE_DECODER

unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
                                 size_t insize, const LodePNGDecompressSettings* settings)
{
10005d7c:	defff304 	addi	sp,sp,-52
10005d80:	dfc00c15 	stw	ra,48(sp)
10005d84:	df000b15 	stw	fp,44(sp)
10005d88:	df000b04 	addi	fp,sp,44
10005d8c:	e13ffc15 	stw	r4,-16(fp)
10005d90:	e17ffd15 	stw	r5,-12(fp)
10005d94:	e1bffe15 	stw	r6,-8(fp)
10005d98:	e1ffff15 	stw	r7,-4(fp)
  unsigned error = 0;
10005d9c:	e03ff615 	stw	zero,-40(fp)
  unsigned CM, CINFO, FDICT;

  if(insize < 2) return 53; /*error, size of zlib data too small*/
10005da0:	e0bfff17 	ldw	r2,-4(fp)
10005da4:	108000a8 	cmpgeui	r2,r2,2
10005da8:	1000021e 	bne	r2,zero,10005db4 <lodepng_zlib_decompress+0x38>
10005dac:	00800d44 	movi	r2,53
10005db0:	00005706 	br	10005f10 <lodepng_zlib_decompress+0x194>
  /*read information from zlib header*/
  if((in[0] * 256 + in[1]) % 31 != 0)
10005db4:	e0bffe17 	ldw	r2,-8(fp)
10005db8:	10800003 	ldbu	r2,0(r2)
10005dbc:	10803fcc 	andi	r2,r2,255
10005dc0:	1006923a 	slli	r3,r2,8
10005dc4:	e0bffe17 	ldw	r2,-8(fp)
10005dc8:	10800044 	addi	r2,r2,1
10005dcc:	10800003 	ldbu	r2,0(r2)
10005dd0:	10803fcc 	andi	r2,r2,255
10005dd4:	1885883a 	add	r2,r3,r2
10005dd8:	1009883a 	mov	r4,r2
10005ddc:	014007c4 	movi	r5,31
10005de0:	00146900 	call	10014690 <__modsi3>
10005de4:	10000226 	beq	r2,zero,10005df0 <lodepng_zlib_decompress+0x74>
  {
    /*error: 256 * in[0] + in[1] must be a multiple of 31, the FCHECK value is supposed to be made that way*/
    return 24;
10005de8:	00800604 	movi	r2,24
10005dec:	00004806 	br	10005f10 <lodepng_zlib_decompress+0x194>
  }

  CM = in[0] & 15;
10005df0:	e0bffe17 	ldw	r2,-8(fp)
10005df4:	10800003 	ldbu	r2,0(r2)
10005df8:	10803fcc 	andi	r2,r2,255
10005dfc:	108003cc 	andi	r2,r2,15
10005e00:	e0bff715 	stw	r2,-36(fp)
  CINFO = (in[0] >> 4) & 15;
10005e04:	e0bffe17 	ldw	r2,-8(fp)
10005e08:	10800003 	ldbu	r2,0(r2)
10005e0c:	10803fcc 	andi	r2,r2,255
10005e10:	1004d13a 	srli	r2,r2,4
10005e14:	10803fcc 	andi	r2,r2,255
10005e18:	108003cc 	andi	r2,r2,15
10005e1c:	e0bff815 	stw	r2,-32(fp)
  /*FCHECK = in[1] & 31;*/ /*FCHECK is already tested above*/
  FDICT = (in[1] >> 5) & 1;
10005e20:	e0bffe17 	ldw	r2,-8(fp)
10005e24:	10800044 	addi	r2,r2,1
10005e28:	10800003 	ldbu	r2,0(r2)
10005e2c:	10803fcc 	andi	r2,r2,255
10005e30:	1004d17a 	srli	r2,r2,5
10005e34:	10803fcc 	andi	r2,r2,255
10005e38:	1080004c 	andi	r2,r2,1
10005e3c:	e0bff915 	stw	r2,-28(fp)
  /*FLEVEL = (in[1] >> 6) & 3;*/ /*FLEVEL is not used here*/

  if(CM != 8 || CINFO > 7)
10005e40:	e0bff717 	ldw	r2,-36(fp)
10005e44:	10800218 	cmpnei	r2,r2,8
10005e48:	1000031e 	bne	r2,zero,10005e58 <lodepng_zlib_decompress+0xdc>
10005e4c:	e0bff817 	ldw	r2,-32(fp)
10005e50:	10800230 	cmpltui	r2,r2,8
10005e54:	1000021e 	bne	r2,zero,10005e60 <lodepng_zlib_decompress+0xe4>
  {
    /*error: only compression method 8: inflate with sliding window of 32k is supported by the PNG spec*/
    return 25;
10005e58:	00800644 	movi	r2,25
10005e5c:	00002c06 	br	10005f10 <lodepng_zlib_decompress+0x194>
  }
  if(FDICT != 0)
10005e60:	e0bff917 	ldw	r2,-28(fp)
10005e64:	10000226 	beq	r2,zero,10005e70 <lodepng_zlib_decompress+0xf4>
  {
    /*error: the specification of PNG says about the zlib stream:
      "The additional flags shall not specify a preset dictionary."*/
    return 26;
10005e68:	00800684 	movi	r2,26
10005e6c:	00002806 	br	10005f10 <lodepng_zlib_decompress+0x194>
  }

  error = inflate(out, outsize, in + 2, insize - 2, settings);
10005e70:	e0bffe17 	ldw	r2,-8(fp)
10005e74:	10c00084 	addi	r3,r2,2
10005e78:	e0bfff17 	ldw	r2,-4(fp)
10005e7c:	10bfff84 	addi	r2,r2,-2
10005e80:	e1000217 	ldw	r4,8(fp)
10005e84:	d9000015 	stw	r4,0(sp)
10005e88:	e13ffc17 	ldw	r4,-16(fp)
10005e8c:	e17ffd17 	ldw	r5,-12(fp)
10005e90:	180d883a 	mov	r6,r3
10005e94:	100f883a 	mov	r7,r2
10005e98:	00034cc0 	call	100034cc <inflate>
10005e9c:	e0bff615 	stw	r2,-40(fp)
  if(error) return error;
10005ea0:	e0bff617 	ldw	r2,-40(fp)
10005ea4:	10000226 	beq	r2,zero,10005eb0 <lodepng_zlib_decompress+0x134>
10005ea8:	e0bff617 	ldw	r2,-40(fp)
10005eac:	00001806 	br	10005f10 <lodepng_zlib_decompress+0x194>

  if(!settings->ignore_adler32)
10005eb0:	e0800217 	ldw	r2,8(fp)
10005eb4:	10800017 	ldw	r2,0(r2)
10005eb8:	1000141e 	bne	r2,zero,10005f0c <lodepng_zlib_decompress+0x190>
  {
    unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
10005ebc:	e0bfff17 	ldw	r2,-4(fp)
10005ec0:	10bfff04 	addi	r2,r2,-4
10005ec4:	e0fffe17 	ldw	r3,-8(fp)
10005ec8:	1885883a 	add	r2,r3,r2
10005ecc:	1009883a 	mov	r4,r2
10005ed0:	00009e40 	call	100009e4 <lodepng_read32bitInt>
10005ed4:	e0bffa15 	stw	r2,-24(fp)
    unsigned checksum = adler32(*out, (unsigned)(*outsize));
10005ed8:	e0bffc17 	ldw	r2,-16(fp)
10005edc:	10c00017 	ldw	r3,0(r2)
10005ee0:	e0bffd17 	ldw	r2,-12(fp)
10005ee4:	10800017 	ldw	r2,0(r2)
10005ee8:	1809883a 	mov	r4,r3
10005eec:	100b883a 	mov	r5,r2
10005ef0:	0005d400 	call	10005d40 <adler32>
10005ef4:	e0bffb15 	stw	r2,-20(fp)
    if(checksum != ADLER32) return 58; /*error, adler checksum not correct, data must be corrupted*/
10005ef8:	e0fffb17 	ldw	r3,-20(fp)
10005efc:	e0bffa17 	ldw	r2,-24(fp)
10005f00:	18800226 	beq	r3,r2,10005f0c <lodepng_zlib_decompress+0x190>
10005f04:	00800e84 	movi	r2,58
10005f08:	00000106 	br	10005f10 <lodepng_zlib_decompress+0x194>
  }

  return 0; /*no error*/
10005f0c:	0005883a 	mov	r2,zero
}
10005f10:	e037883a 	mov	sp,fp
10005f14:	dfc00117 	ldw	ra,4(sp)
10005f18:	df000017 	ldw	fp,0(sp)
10005f1c:	dec00204 	addi	sp,sp,8
10005f20:	f800283a 	ret

10005f24 <zlib_decompress>:

static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
                                size_t insize, const LodePNGDecompressSettings* settings)
{
10005f24:	defff904 	addi	sp,sp,-28
10005f28:	dfc00615 	stw	ra,24(sp)
10005f2c:	df000515 	stw	fp,20(sp)
10005f30:	df000504 	addi	fp,sp,20
10005f34:	e13ffc15 	stw	r4,-16(fp)
10005f38:	e17ffd15 	stw	r5,-12(fp)
10005f3c:	e1bffe15 	stw	r6,-8(fp)
10005f40:	e1ffff15 	stw	r7,-4(fp)
  if(settings->custom_zlib)
10005f44:	e0800217 	ldw	r2,8(fp)
10005f48:	10800117 	ldw	r2,4(r2)
10005f4c:	10000a26 	beq	r2,zero,10005f78 <zlib_decompress+0x54>
  {
    return settings->custom_zlib(out, outsize, in, insize, settings);
10005f50:	e0800217 	ldw	r2,8(fp)
10005f54:	10800117 	ldw	r2,4(r2)
10005f58:	e0c00217 	ldw	r3,8(fp)
10005f5c:	d8c00015 	stw	r3,0(sp)
10005f60:	e13ffc17 	ldw	r4,-16(fp)
10005f64:	e17ffd17 	ldw	r5,-12(fp)
10005f68:	e1bffe17 	ldw	r6,-8(fp)
10005f6c:	e1ffff17 	ldw	r7,-4(fp)
10005f70:	103ee83a 	callr	r2
10005f74:	00000706 	br	10005f94 <zlib_decompress+0x70>
  }
  else
  {
    return lodepng_zlib_decompress(out, outsize, in, insize, settings);
10005f78:	e0800217 	ldw	r2,8(fp)
10005f7c:	d8800015 	stw	r2,0(sp)
10005f80:	e13ffc17 	ldw	r4,-16(fp)
10005f84:	e17ffd17 	ldw	r5,-12(fp)
10005f88:	e1bffe17 	ldw	r6,-8(fp)
10005f8c:	e1ffff17 	ldw	r7,-4(fp)
10005f90:	0005d7c0 	call	10005d7c <lodepng_zlib_decompress>
  }
}
10005f94:	e037883a 	mov	sp,fp
10005f98:	dfc00117 	ldw	ra,4(sp)
10005f9c:	df000017 	ldw	fp,0(sp)
10005fa0:	dec00204 	addi	sp,sp,8
10005fa4:	f800283a 	ret

10005fa8 <lodepng_zlib_compress>:

#ifdef LODEPNG_COMPILE_ENCODER

unsigned lodepng_zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
                               size_t insize, const LodePNGCompressSettings* settings)
{
10005fa8:	deffec04 	addi	sp,sp,-80
10005fac:	dfc01315 	stw	ra,76(sp)
10005fb0:	df001215 	stw	fp,72(sp)
10005fb4:	df001204 	addi	fp,sp,72
10005fb8:	e13ffc15 	stw	r4,-16(fp)
10005fbc:	e17ffd15 	stw	r5,-12(fp)
10005fc0:	e1bffe15 	stw	r6,-8(fp)
10005fc4:	e1ffff15 	stw	r7,-4(fp)
  /*initially, *out must be NULL and outsize 0, if you just give some random *out
  that's pointing to a non allocated buffer, this'll crash*/
  ucvector outv;
  size_t i;
  unsigned error;
  unsigned char* deflatedata = 0;
10005fc8:	e03ffa15 	stw	zero,-24(fp)
  size_t deflatesize = 0;
10005fcc:	e03ffb15 	stw	zero,-20(fp)

  /*zlib data: 1 byte CMF (CM+CINFO), 1 byte FLG, deflate data, 4 byte ADLER32 checksum of the Decompressed data*/
  unsigned CMF = 120; /*0b01111000: CM 8, CINFO 7. With CINFO 7, any window size up to 32768 can be used.*/
10005fd0:	00801e04 	movi	r2,120
10005fd4:	e0bff015 	stw	r2,-64(fp)
  unsigned FLEVEL = 0;
10005fd8:	e03ff115 	stw	zero,-60(fp)
  unsigned FDICT = 0;
10005fdc:	e03ff215 	stw	zero,-56(fp)
  unsigned CMFFLG = 256 * CMF + FDICT * 32 + FLEVEL * 64;
10005fe0:	e0bff017 	ldw	r2,-64(fp)
10005fe4:	1085883a 	add	r2,r2,r2
10005fe8:	1085883a 	add	r2,r2,r2
10005fec:	1007883a 	mov	r3,r2
10005ff0:	e0bff117 	ldw	r2,-60(fp)
10005ff4:	1885883a 	add	r2,r3,r2
10005ff8:	1085883a 	add	r2,r2,r2
10005ffc:	1007883a 	mov	r3,r2
10006000:	e0bff217 	ldw	r2,-56(fp)
10006004:	1885883a 	add	r2,r3,r2
10006008:	1004917a 	slli	r2,r2,5
1000600c:	e0bff315 	stw	r2,-52(fp)
  unsigned FCHECK = 31 - CMFFLG % 31;
10006010:	e0bff317 	ldw	r2,-52(fp)
10006014:	1009883a 	mov	r4,r2
10006018:	014007c4 	movi	r5,31
1000601c:	00146f40 	call	100146f4 <__umodsi3>
10006020:	00c007c4 	movi	r3,31
10006024:	1885c83a 	sub	r2,r3,r2
10006028:	e0bff415 	stw	r2,-48(fp)
  CMFFLG += FCHECK;
1000602c:	e0fff317 	ldw	r3,-52(fp)
10006030:	e0bff417 	ldw	r2,-48(fp)
10006034:	1885883a 	add	r2,r3,r2
10006038:	e0bff315 	stw	r2,-52(fp)

  /*ucvector-controlled version of the output buffer, for dynamic array*/
  ucvector_init_buffer(&outv, *out, *outsize);
1000603c:	e0bffc17 	ldw	r2,-16(fp)
10006040:	10c00017 	ldw	r3,0(r2)
10006044:	e0bffd17 	ldw	r2,-12(fp)
10006048:	10800017 	ldw	r2,0(r2)
1000604c:	e13ff704 	addi	r4,fp,-36
10006050:	180b883a 	mov	r5,r3
10006054:	100d883a 	mov	r6,r2
10006058:	00007980 	call	10000798 <ucvector_init_buffer>

  ucvector_push_back(&outv, (unsigned char)(CMFFLG / 256));
1000605c:	e0bff317 	ldw	r2,-52(fp)
10006060:	1004d23a 	srli	r2,r2,8
10006064:	10803fcc 	andi	r2,r2,255
10006068:	e0fff704 	addi	r3,fp,-36
1000606c:	1809883a 	mov	r4,r3
10006070:	100b883a 	mov	r5,r2
10006074:	00007e80 	call	100007e8 <ucvector_push_back>
  ucvector_push_back(&outv, (unsigned char)(CMFFLG % 256));
10006078:	e0bff317 	ldw	r2,-52(fp)
1000607c:	10803fcc 	andi	r2,r2,255
10006080:	e0fff704 	addi	r3,fp,-36
10006084:	1809883a 	mov	r4,r3
10006088:	100b883a 	mov	r5,r2
1000608c:	00007e80 	call	100007e8 <ucvector_push_back>

  error = deflate(&deflatedata, &deflatesize, in, insize, settings);
10006090:	e0fffa04 	addi	r3,fp,-24
10006094:	e0bffb04 	addi	r2,fp,-20
10006098:	e1000217 	ldw	r4,8(fp)
1000609c:	d9000015 	stw	r4,0(sp)
100060a0:	1809883a 	mov	r4,r3
100060a4:	100b883a 	mov	r5,r2
100060a8:	e1bffe17 	ldw	r6,-8(fp)
100060ac:	e1ffff17 	ldw	r7,-4(fp)
100060b0:	0005bc00 	call	10005bc0 <deflate>
100060b4:	e0bff515 	stw	r2,-44(fp)

  if(!error)
100060b8:	e0bff517 	ldw	r2,-44(fp)
100060bc:	10001c1e 	bne	r2,zero,10006130 <lodepng_zlib_compress+0x188>
  {
    unsigned ADLER32 = adler32(in, (unsigned)insize);
100060c0:	e13ffe17 	ldw	r4,-8(fp)
100060c4:	e17fff17 	ldw	r5,-4(fp)
100060c8:	0005d400 	call	10005d40 <adler32>
100060cc:	e0bff615 	stw	r2,-40(fp)
    for(i = 0; i != deflatesize; ++i) ucvector_push_back(&outv, deflatedata[i]);
100060d0:	e03fef15 	stw	zero,-68(fp)
100060d4:	00000c06 	br	10006108 <lodepng_zlib_compress+0x160>
100060d8:	e0fffa17 	ldw	r3,-24(fp)
100060dc:	e0bfef17 	ldw	r2,-68(fp)
100060e0:	1885883a 	add	r2,r3,r2
100060e4:	10800003 	ldbu	r2,0(r2)
100060e8:	10803fcc 	andi	r2,r2,255
100060ec:	e0fff704 	addi	r3,fp,-36
100060f0:	1809883a 	mov	r4,r3
100060f4:	100b883a 	mov	r5,r2
100060f8:	00007e80 	call	100007e8 <ucvector_push_back>
100060fc:	e0bfef17 	ldw	r2,-68(fp)
10006100:	10800044 	addi	r2,r2,1
10006104:	e0bfef15 	stw	r2,-68(fp)
10006108:	e0bffb17 	ldw	r2,-20(fp)
1000610c:	e0ffef17 	ldw	r3,-68(fp)
10006110:	18bff11e 	bne	r3,r2,100060d8 <__alt_data_end+0xf80060d8>
    lodepng_free(deflatedata);
10006114:	e0bffa17 	ldw	r2,-24(fp)
10006118:	1009883a 	mov	r4,r2
1000611c:	000025c0 	call	1000025c <lodepng_free>
    lodepng_add32bitInt(&outv, ADLER32);
10006120:	e0bff704 	addi	r2,fp,-36
10006124:	1009883a 	mov	r4,r2
10006128:	e17ff617 	ldw	r5,-40(fp)
1000612c:	0000ac80 	call	10000ac8 <lodepng_add32bitInt>
  }

  *out = outv.data;
10006130:	e0fff717 	ldw	r3,-36(fp)
10006134:	e0bffc17 	ldw	r2,-16(fp)
10006138:	10c00015 	stw	r3,0(r2)
  *outsize = outv.size;
1000613c:	e0fff817 	ldw	r3,-32(fp)
10006140:	e0bffd17 	ldw	r2,-12(fp)
10006144:	10c00015 	stw	r3,0(r2)

  return error;
10006148:	e0bff517 	ldw	r2,-44(fp)
}
1000614c:	e037883a 	mov	sp,fp
10006150:	dfc00117 	ldw	ra,4(sp)
10006154:	df000017 	ldw	fp,0(sp)
10006158:	dec00204 	addi	sp,sp,8
1000615c:	f800283a 	ret

10006160 <zlib_compress>:

/* compress using the default or custom zlib function */
static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
                              size_t insize, const LodePNGCompressSettings* settings)
{
10006160:	defff904 	addi	sp,sp,-28
10006164:	dfc00615 	stw	ra,24(sp)
10006168:	df000515 	stw	fp,20(sp)
1000616c:	df000504 	addi	fp,sp,20
10006170:	e13ffc15 	stw	r4,-16(fp)
10006174:	e17ffd15 	stw	r5,-12(fp)
10006178:	e1bffe15 	stw	r6,-8(fp)
1000617c:	e1ffff15 	stw	r7,-4(fp)
  if(settings->custom_zlib)
10006180:	e0800217 	ldw	r2,8(fp)
10006184:	10800617 	ldw	r2,24(r2)
10006188:	10000a26 	beq	r2,zero,100061b4 <zlib_compress+0x54>
  {
    return settings->custom_zlib(out, outsize, in, insize, settings);
1000618c:	e0800217 	ldw	r2,8(fp)
10006190:	10800617 	ldw	r2,24(r2)
10006194:	e0c00217 	ldw	r3,8(fp)
10006198:	d8c00015 	stw	r3,0(sp)
1000619c:	e13ffc17 	ldw	r4,-16(fp)
100061a0:	e17ffd17 	ldw	r5,-12(fp)
100061a4:	e1bffe17 	ldw	r6,-8(fp)
100061a8:	e1ffff17 	ldw	r7,-4(fp)
100061ac:	103ee83a 	callr	r2
100061b0:	00000706 	br	100061d0 <zlib_compress+0x70>
  }
  else
  {
    return lodepng_zlib_compress(out, outsize, in, insize, settings);
100061b4:	e0800217 	ldw	r2,8(fp)
100061b8:	d8800015 	stw	r2,0(sp)
100061bc:	e13ffc17 	ldw	r4,-16(fp)
100061c0:	e17ffd17 	ldw	r5,-12(fp)
100061c4:	e1bffe17 	ldw	r6,-8(fp)
100061c8:	e1ffff17 	ldw	r7,-4(fp)
100061cc:	0005fa80 	call	10005fa8 <lodepng_zlib_compress>
  }
}
100061d0:	e037883a 	mov	sp,fp
100061d4:	dfc00117 	ldw	ra,4(sp)
100061d8:	df000017 	ldw	fp,0(sp)
100061dc:	dec00204 	addi	sp,sp,8
100061e0:	f800283a 	ret

100061e4 <lodepng_compress_settings_init>:

/*this is a good tradeoff between speed and compression ratio*/
#define DEFAULT_WINDOWSIZE 2048

void lodepng_compress_settings_init(LodePNGCompressSettings* settings)
{
100061e4:	defffe04 	addi	sp,sp,-8
100061e8:	df000115 	stw	fp,4(sp)
100061ec:	df000104 	addi	fp,sp,4
100061f0:	e13fff15 	stw	r4,-4(fp)
  /*compress with dynamic huffman tree (not in the mathematical sense, just not the predefined one)*/
  settings->btype = 2;
100061f4:	e0bfff17 	ldw	r2,-4(fp)
100061f8:	00c00084 	movi	r3,2
100061fc:	10c00015 	stw	r3,0(r2)
  settings->use_lz77 = 1;
10006200:	e0bfff17 	ldw	r2,-4(fp)
10006204:	00c00044 	movi	r3,1
10006208:	10c00115 	stw	r3,4(r2)
  settings->windowsize = DEFAULT_WINDOWSIZE;
1000620c:	e0bfff17 	ldw	r2,-4(fp)
10006210:	00c20004 	movi	r3,2048
10006214:	10c00215 	stw	r3,8(r2)
  settings->minmatch = 3;
10006218:	e0bfff17 	ldw	r2,-4(fp)
1000621c:	00c000c4 	movi	r3,3
10006220:	10c00315 	stw	r3,12(r2)
  settings->nicematch = 128;
10006224:	e0bfff17 	ldw	r2,-4(fp)
10006228:	00c02004 	movi	r3,128
1000622c:	10c00415 	stw	r3,16(r2)
  settings->lazymatching = 1;
10006230:	e0bfff17 	ldw	r2,-4(fp)
10006234:	00c00044 	movi	r3,1
10006238:	10c00515 	stw	r3,20(r2)

  settings->custom_zlib = 0;
1000623c:	e0bfff17 	ldw	r2,-4(fp)
10006240:	10000615 	stw	zero,24(r2)
  settings->custom_deflate = 0;
10006244:	e0bfff17 	ldw	r2,-4(fp)
10006248:	10000715 	stw	zero,28(r2)
  settings->custom_context = 0;
1000624c:	e0bfff17 	ldw	r2,-4(fp)
10006250:	10000815 	stw	zero,32(r2)
}
10006254:	e037883a 	mov	sp,fp
10006258:	df000017 	ldw	fp,0(sp)
1000625c:	dec00104 	addi	sp,sp,4
10006260:	f800283a 	ret

10006264 <lodepng_decompress_settings_init>:
#endif /*LODEPNG_COMPILE_ENCODER*/

#ifdef LODEPNG_COMPILE_DECODER

void lodepng_decompress_settings_init(LodePNGDecompressSettings* settings)
{
10006264:	defffe04 	addi	sp,sp,-8
10006268:	df000115 	stw	fp,4(sp)
1000626c:	df000104 	addi	fp,sp,4
10006270:	e13fff15 	stw	r4,-4(fp)
  settings->ignore_adler32 = 0;
10006274:	e0bfff17 	ldw	r2,-4(fp)
10006278:	10000015 	stw	zero,0(r2)

  settings->custom_zlib = 0;
1000627c:	e0bfff17 	ldw	r2,-4(fp)
10006280:	10000115 	stw	zero,4(r2)
  settings->custom_inflate = 0;
10006284:	e0bfff17 	ldw	r2,-4(fp)
10006288:	10000215 	stw	zero,8(r2)
  settings->custom_context = 0;
1000628c:	e0bfff17 	ldw	r2,-4(fp)
10006290:	10000315 	stw	zero,12(r2)
}
10006294:	e037883a 	mov	sp,fp
10006298:	df000017 	ldw	fp,0(sp)
1000629c:	dec00104 	addi	sp,sp,4
100062a0:	f800283a 	ret

100062a4 <lodepng_crc32>:
  3009837614u, 3294710456u, 1567103746u,  711928724u, 3020668471u, 3272380065u, 1510334235u,  755167117u
};

/*Return the CRC of the bytes buf[0..len-1].*/
unsigned lodepng_crc32(const unsigned char* buf, size_t len)
{
100062a4:	defffb04 	addi	sp,sp,-20
100062a8:	df000415 	stw	fp,16(sp)
100062ac:	df000404 	addi	fp,sp,16
100062b0:	e13ffe15 	stw	r4,-8(fp)
100062b4:	e17fff15 	stw	r5,-4(fp)
  unsigned c = 0xffffffffL;
100062b8:	00bfffc4 	movi	r2,-1
100062bc:	e0bffc15 	stw	r2,-16(fp)
  size_t n;

  for(n = 0; n < len; ++n)
100062c0:	e03ffd15 	stw	zero,-12(fp)
100062c4:	00001506 	br	1000631c <lodepng_crc32+0x78>
  {
    c = lodepng_crc32_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);
100062c8:	e0fffe17 	ldw	r3,-8(fp)
100062cc:	e0bffd17 	ldw	r2,-12(fp)
100062d0:	1885883a 	add	r2,r3,r2
100062d4:	10800003 	ldbu	r2,0(r2)
100062d8:	10c03fcc 	andi	r3,r2,255
100062dc:	e0bffc17 	ldw	r2,-16(fp)
100062e0:	1884f03a 	xor	r2,r3,r2
100062e4:	10803fcc 	andi	r2,r2,255
100062e8:	00c400b4 	movhi	r3,4098
100062ec:	18cf5a04 	addi	r3,r3,15720
100062f0:	1085883a 	add	r2,r2,r2
100062f4:	1085883a 	add	r2,r2,r2
100062f8:	1885883a 	add	r2,r3,r2
100062fc:	10c00017 	ldw	r3,0(r2)
10006300:	e0bffc17 	ldw	r2,-16(fp)
10006304:	1004d23a 	srli	r2,r2,8
10006308:	1884f03a 	xor	r2,r3,r2
1000630c:	e0bffc15 	stw	r2,-16(fp)
unsigned lodepng_crc32(const unsigned char* buf, size_t len)
{
  unsigned c = 0xffffffffL;
  size_t n;

  for(n = 0; n < len; ++n)
10006310:	e0bffd17 	ldw	r2,-12(fp)
10006314:	10800044 	addi	r2,r2,1
10006318:	e0bffd15 	stw	r2,-12(fp)
1000631c:	e0fffd17 	ldw	r3,-12(fp)
10006320:	e0bfff17 	ldw	r2,-4(fp)
10006324:	18bfe836 	bltu	r3,r2,100062c8 <__alt_data_end+0xf80062c8>
  {
    c = lodepng_crc32_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);
  }
  return c ^ 0xffffffffL;
10006328:	e0bffc17 	ldw	r2,-16(fp)
1000632c:	0084303a 	nor	r2,zero,r2
}
10006330:	e037883a 	mov	sp,fp
10006334:	df000017 	ldw	fp,0(sp)
10006338:	dec00104 	addi	sp,sp,4
1000633c:	f800283a 	ret

10006340 <readBitFromReversedStream>:
/* ////////////////////////////////////////////////////////////////////////// */
/* / Reading and writing single bits and bytes from/to stream for LodePNG   / */
/* ////////////////////////////////////////////////////////////////////////// */

static unsigned char readBitFromReversedStream(size_t* bitpointer, const unsigned char* bitstream)
{
10006340:	defffc04 	addi	sp,sp,-16
10006344:	df000315 	stw	fp,12(sp)
10006348:	df000304 	addi	fp,sp,12
1000634c:	e13ffe15 	stw	r4,-8(fp)
10006350:	e17fff15 	stw	r5,-4(fp)
  unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);
10006354:	e0bffe17 	ldw	r2,-8(fp)
10006358:	10800017 	ldw	r2,0(r2)
1000635c:	1004d0fa 	srli	r2,r2,3
10006360:	e0ffff17 	ldw	r3,-4(fp)
10006364:	1885883a 	add	r2,r3,r2
10006368:	10800003 	ldbu	r2,0(r2)
1000636c:	10c03fcc 	andi	r3,r2,255
10006370:	e0bffe17 	ldw	r2,-8(fp)
10006374:	10800017 	ldw	r2,0(r2)
10006378:	0084303a 	nor	r2,zero,r2
1000637c:	108001cc 	andi	r2,r2,7
10006380:	1885d83a 	sra	r2,r3,r2
10006384:	1080004c 	andi	r2,r2,1
10006388:	e0bffd05 	stb	r2,-12(fp)
  ++(*bitpointer);
1000638c:	e0bffe17 	ldw	r2,-8(fp)
10006390:	10800017 	ldw	r2,0(r2)
10006394:	10c00044 	addi	r3,r2,1
10006398:	e0bffe17 	ldw	r2,-8(fp)
1000639c:	10c00015 	stw	r3,0(r2)
  return result;
100063a0:	e0bffd03 	ldbu	r2,-12(fp)
}
100063a4:	e037883a 	mov	sp,fp
100063a8:	df000017 	ldw	fp,0(sp)
100063ac:	dec00104 	addi	sp,sp,4
100063b0:	f800283a 	ret

100063b4 <readBitsFromReversedStream>:

static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
{
100063b4:	defff904 	addi	sp,sp,-28
100063b8:	dfc00615 	stw	ra,24(sp)
100063bc:	df000515 	stw	fp,20(sp)
100063c0:	df000504 	addi	fp,sp,20
100063c4:	e13ffd15 	stw	r4,-12(fp)
100063c8:	e17ffe15 	stw	r5,-8(fp)
100063cc:	e1bfff15 	stw	r6,-4(fp)
  unsigned result = 0;
100063d0:	e03ffb15 	stw	zero,-20(fp)
  size_t i;
  for(i = nbits - 1; i < nbits; --i)
100063d4:	e0bfff17 	ldw	r2,-4(fp)
100063d8:	10bfffc4 	addi	r2,r2,-1
100063dc:	e0bffc15 	stw	r2,-16(fp)
100063e0:	00000c06 	br	10006414 <readBitsFromReversedStream+0x60>
  {
    result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
100063e4:	e13ffd17 	ldw	r4,-12(fp)
100063e8:	e17ffe17 	ldw	r5,-8(fp)
100063ec:	00063400 	call	10006340 <readBitFromReversedStream>
100063f0:	10c03fcc 	andi	r3,r2,255
100063f4:	e0bffc17 	ldw	r2,-16(fp)
100063f8:	1884983a 	sll	r2,r3,r2
100063fc:	e0fffb17 	ldw	r3,-20(fp)
10006400:	1885883a 	add	r2,r3,r2
10006404:	e0bffb15 	stw	r2,-20(fp)

static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
{
  unsigned result = 0;
  size_t i;
  for(i = nbits - 1; i < nbits; --i)
10006408:	e0bffc17 	ldw	r2,-16(fp)
1000640c:	10bfffc4 	addi	r2,r2,-1
10006410:	e0bffc15 	stw	r2,-16(fp)
10006414:	e0fffc17 	ldw	r3,-16(fp)
10006418:	e0bfff17 	ldw	r2,-4(fp)
1000641c:	18bff136 	bltu	r3,r2,100063e4 <__alt_data_end+0xf80063e4>
  {
    result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
  }
  return result;
10006420:	e0bffb17 	ldw	r2,-20(fp)
}
10006424:	e037883a 	mov	sp,fp
10006428:	dfc00117 	ldw	ra,4(sp)
1000642c:	df000017 	ldw	fp,0(sp)
10006430:	dec00204 	addi	sp,sp,8
10006434:	f800283a 	ret

10006438 <setBitOfReversedStream0>:

#ifdef LODEPNG_COMPILE_DECODER
static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
{
10006438:	defffc04 	addi	sp,sp,-16
1000643c:	df000315 	stw	fp,12(sp)
10006440:	df000304 	addi	fp,sp,12
10006444:	e13ffd15 	stw	r4,-12(fp)
10006448:	e17ffe15 	stw	r5,-8(fp)
1000644c:	3005883a 	mov	r2,r6
10006450:	e0bfff05 	stb	r2,-4(fp)
  /*the current bit in bitstream must be 0 for this to work*/
  if(bit)
10006454:	e0bfff03 	ldbu	r2,-4(fp)
10006458:	10001426 	beq	r2,zero,100064ac <setBitOfReversedStream0+0x74>
  {
    /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
    bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));
1000645c:	e0bffd17 	ldw	r2,-12(fp)
10006460:	10800017 	ldw	r2,0(r2)
10006464:	1004d0fa 	srli	r2,r2,3
10006468:	e0fffe17 	ldw	r3,-8(fp)
1000646c:	1885883a 	add	r2,r3,r2
10006470:	e0fffd17 	ldw	r3,-12(fp)
10006474:	18c00017 	ldw	r3,0(r3)
10006478:	1806d0fa 	srli	r3,r3,3
1000647c:	e13ffe17 	ldw	r4,-8(fp)
10006480:	20c7883a 	add	r3,r4,r3
10006484:	18c00003 	ldbu	r3,0(r3)
10006488:	1809883a 	mov	r4,r3
1000648c:	e17fff03 	ldbu	r5,-4(fp)
10006490:	e0fffd17 	ldw	r3,-12(fp)
10006494:	18c00017 	ldw	r3,0(r3)
10006498:	00c6303a 	nor	r3,zero,r3
1000649c:	18c001cc 	andi	r3,r3,7
100064a0:	28c6983a 	sll	r3,r5,r3
100064a4:	20c6b03a 	or	r3,r4,r3
100064a8:	10c00005 	stb	r3,0(r2)
  }
  ++(*bitpointer);
100064ac:	e0bffd17 	ldw	r2,-12(fp)
100064b0:	10800017 	ldw	r2,0(r2)
100064b4:	10c00044 	addi	r3,r2,1
100064b8:	e0bffd17 	ldw	r2,-12(fp)
100064bc:	10c00015 	stw	r3,0(r2)
}
100064c0:	e037883a 	mov	sp,fp
100064c4:	df000017 	ldw	fp,0(sp)
100064c8:	dec00104 	addi	sp,sp,4
100064cc:	f800283a 	ret

100064d0 <setBitOfReversedStream>:
#endif /*LODEPNG_COMPILE_DECODER*/

static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
{
100064d0:	defffc04 	addi	sp,sp,-16
100064d4:	df000315 	stw	fp,12(sp)
100064d8:	df000304 	addi	fp,sp,12
100064dc:	e13ffd15 	stw	r4,-12(fp)
100064e0:	e17ffe15 	stw	r5,-8(fp)
100064e4:	3005883a 	mov	r2,r6
100064e8:	e0bfff05 	stb	r2,-4(fp)
  /*the current bit in bitstream may be 0 or 1 for this to work*/
  if(bit == 0) bitstream[(*bitpointer) >> 3] &=  (unsigned char)(~(1 << (7 - ((*bitpointer) & 0x7))));
100064ec:	e0bfff03 	ldbu	r2,-4(fp)
100064f0:	1000151e 	bne	r2,zero,10006548 <setBitOfReversedStream+0x78>
100064f4:	e0bffd17 	ldw	r2,-12(fp)
100064f8:	10800017 	ldw	r2,0(r2)
100064fc:	1004d0fa 	srli	r2,r2,3
10006500:	e0fffe17 	ldw	r3,-8(fp)
10006504:	1885883a 	add	r2,r3,r2
10006508:	e0fffd17 	ldw	r3,-12(fp)
1000650c:	18c00017 	ldw	r3,0(r3)
10006510:	1806d0fa 	srli	r3,r3,3
10006514:	e13ffe17 	ldw	r4,-8(fp)
10006518:	20c7883a 	add	r3,r4,r3
1000651c:	19000003 	ldbu	r4,0(r3)
10006520:	e0fffd17 	ldw	r3,-12(fp)
10006524:	18c00017 	ldw	r3,0(r3)
10006528:	00c6303a 	nor	r3,zero,r3
1000652c:	18c001cc 	andi	r3,r3,7
10006530:	01400044 	movi	r5,1
10006534:	28c6983a 	sll	r3,r5,r3
10006538:	00c6303a 	nor	r3,zero,r3
1000653c:	20c6703a 	and	r3,r4,r3
10006540:	10c00005 	stb	r3,0(r2)
10006544:	00001406 	br	10006598 <setBitOfReversedStream+0xc8>
  else         bitstream[(*bitpointer) >> 3] |=  (1 << (7 - ((*bitpointer) & 0x7)));
10006548:	e0bffd17 	ldw	r2,-12(fp)
1000654c:	10800017 	ldw	r2,0(r2)
10006550:	1004d0fa 	srli	r2,r2,3
10006554:	e0fffe17 	ldw	r3,-8(fp)
10006558:	1885883a 	add	r2,r3,r2
1000655c:	e0fffd17 	ldw	r3,-12(fp)
10006560:	18c00017 	ldw	r3,0(r3)
10006564:	1806d0fa 	srli	r3,r3,3
10006568:	e13ffe17 	ldw	r4,-8(fp)
1000656c:	20c7883a 	add	r3,r4,r3
10006570:	18c00003 	ldbu	r3,0(r3)
10006574:	1809883a 	mov	r4,r3
10006578:	e0fffd17 	ldw	r3,-12(fp)
1000657c:	18c00017 	ldw	r3,0(r3)
10006580:	00c6303a 	nor	r3,zero,r3
10006584:	18c001cc 	andi	r3,r3,7
10006588:	01400044 	movi	r5,1
1000658c:	28c6983a 	sll	r3,r5,r3
10006590:	20c6b03a 	or	r3,r4,r3
10006594:	10c00005 	stb	r3,0(r2)
  ++(*bitpointer);
10006598:	e0bffd17 	ldw	r2,-12(fp)
1000659c:	10800017 	ldw	r2,0(r2)
100065a0:	10c00044 	addi	r3,r2,1
100065a4:	e0bffd17 	ldw	r2,-12(fp)
100065a8:	10c00015 	stw	r3,0(r2)
}
100065ac:	e037883a 	mov	sp,fp
100065b0:	df000017 	ldw	fp,0(sp)
100065b4:	dec00104 	addi	sp,sp,4
100065b8:	f800283a 	ret

100065bc <lodepng_chunk_length>:
/* ////////////////////////////////////////////////////////////////////////// */
/* / PNG chunks                                                             / */
/* ////////////////////////////////////////////////////////////////////////// */

unsigned lodepng_chunk_length(const unsigned char* chunk)
{
100065bc:	defffd04 	addi	sp,sp,-12
100065c0:	dfc00215 	stw	ra,8(sp)
100065c4:	df000115 	stw	fp,4(sp)
100065c8:	df000104 	addi	fp,sp,4
100065cc:	e13fff15 	stw	r4,-4(fp)
  return lodepng_read32bitInt(&chunk[0]);
100065d0:	e13fff17 	ldw	r4,-4(fp)
100065d4:	00009e40 	call	100009e4 <lodepng_read32bitInt>
}
100065d8:	e037883a 	mov	sp,fp
100065dc:	dfc00117 	ldw	ra,4(sp)
100065e0:	df000017 	ldw	fp,0(sp)
100065e4:	dec00204 	addi	sp,sp,8
100065e8:	f800283a 	ret

100065ec <lodepng_chunk_type>:

void lodepng_chunk_type(char type[5], const unsigned char* chunk)
{
100065ec:	defffc04 	addi	sp,sp,-16
100065f0:	df000315 	stw	fp,12(sp)
100065f4:	df000304 	addi	fp,sp,12
100065f8:	e13ffe15 	stw	r4,-8(fp)
100065fc:	e17fff15 	stw	r5,-4(fp)
  unsigned i;
  for(i = 0; i != 4; ++i) type[i] = (char)chunk[4 + i];
10006600:	e03ffd15 	stw	zero,-12(fp)
10006604:	00000c06 	br	10006638 <lodepng_chunk_type+0x4c>
10006608:	e0fffe17 	ldw	r3,-8(fp)
1000660c:	e0bffd17 	ldw	r2,-12(fp)
10006610:	1885883a 	add	r2,r3,r2
10006614:	e0fffd17 	ldw	r3,-12(fp)
10006618:	18c00104 	addi	r3,r3,4
1000661c:	e13fff17 	ldw	r4,-4(fp)
10006620:	20c7883a 	add	r3,r4,r3
10006624:	18c00003 	ldbu	r3,0(r3)
10006628:	10c00005 	stb	r3,0(r2)
1000662c:	e0bffd17 	ldw	r2,-12(fp)
10006630:	10800044 	addi	r2,r2,1
10006634:	e0bffd15 	stw	r2,-12(fp)
10006638:	e0bffd17 	ldw	r2,-12(fp)
1000663c:	10800118 	cmpnei	r2,r2,4
10006640:	103ff11e 	bne	r2,zero,10006608 <__alt_data_end+0xf8006608>
  type[4] = 0; /*null termination char*/
10006644:	e0bffe17 	ldw	r2,-8(fp)
10006648:	10800104 	addi	r2,r2,4
1000664c:	10000005 	stb	zero,0(r2)
}
10006650:	e037883a 	mov	sp,fp
10006654:	df000017 	ldw	fp,0(sp)
10006658:	dec00104 	addi	sp,sp,4
1000665c:	f800283a 	ret

10006660 <lodepng_chunk_type_equals>:

unsigned char lodepng_chunk_type_equals(const unsigned char* chunk, const char* type)
{
10006660:	defffc04 	addi	sp,sp,-16
10006664:	dfc00315 	stw	ra,12(sp)
10006668:	df000215 	stw	fp,8(sp)
1000666c:	df000204 	addi	fp,sp,8
10006670:	e13ffe15 	stw	r4,-8(fp)
10006674:	e17fff15 	stw	r5,-4(fp)
  if(strlen(type) != 4) return 0;
10006678:	e13fff17 	ldw	r4,-4(fp)
1000667c:	001841c0 	call	1001841c <strlen>
10006680:	10800120 	cmpeqi	r2,r2,4
10006684:	1000021e 	bne	r2,zero,10006690 <lodepng_chunk_type_equals+0x30>
10006688:	0005883a 	mov	r2,zero
1000668c:	00002e06 	br	10006748 <lodepng_chunk_type_equals+0xe8>
  return (chunk[4] == type[0] && chunk[5] == type[1] && chunk[6] == type[2] && chunk[7] == type[3]);
10006690:	e0bffe17 	ldw	r2,-8(fp)
10006694:	10800104 	addi	r2,r2,4
10006698:	10800003 	ldbu	r2,0(r2)
1000669c:	10c03fcc 	andi	r3,r2,255
100066a0:	e0bfff17 	ldw	r2,-4(fp)
100066a4:	10800003 	ldbu	r2,0(r2)
100066a8:	10803fcc 	andi	r2,r2,255
100066ac:	1080201c 	xori	r2,r2,128
100066b0:	10bfe004 	addi	r2,r2,-128
100066b4:	1880231e 	bne	r3,r2,10006744 <lodepng_chunk_type_equals+0xe4>
100066b8:	e0bffe17 	ldw	r2,-8(fp)
100066bc:	10800144 	addi	r2,r2,5
100066c0:	10800003 	ldbu	r2,0(r2)
100066c4:	10c03fcc 	andi	r3,r2,255
100066c8:	e0bfff17 	ldw	r2,-4(fp)
100066cc:	10800044 	addi	r2,r2,1
100066d0:	10800003 	ldbu	r2,0(r2)
100066d4:	10803fcc 	andi	r2,r2,255
100066d8:	1080201c 	xori	r2,r2,128
100066dc:	10bfe004 	addi	r2,r2,-128
100066e0:	1880181e 	bne	r3,r2,10006744 <lodepng_chunk_type_equals+0xe4>
100066e4:	e0bffe17 	ldw	r2,-8(fp)
100066e8:	10800184 	addi	r2,r2,6
100066ec:	10800003 	ldbu	r2,0(r2)
100066f0:	10c03fcc 	andi	r3,r2,255
100066f4:	e0bfff17 	ldw	r2,-4(fp)
100066f8:	10800084 	addi	r2,r2,2
100066fc:	10800003 	ldbu	r2,0(r2)
10006700:	10803fcc 	andi	r2,r2,255
10006704:	1080201c 	xori	r2,r2,128
10006708:	10bfe004 	addi	r2,r2,-128
1000670c:	18800d1e 	bne	r3,r2,10006744 <lodepng_chunk_type_equals+0xe4>
10006710:	e0bffe17 	ldw	r2,-8(fp)
10006714:	108001c4 	addi	r2,r2,7
10006718:	10800003 	ldbu	r2,0(r2)
1000671c:	10c03fcc 	andi	r3,r2,255
10006720:	e0bfff17 	ldw	r2,-4(fp)
10006724:	108000c4 	addi	r2,r2,3
10006728:	10800003 	ldbu	r2,0(r2)
1000672c:	10803fcc 	andi	r2,r2,255
10006730:	1080201c 	xori	r2,r2,128
10006734:	10bfe004 	addi	r2,r2,-128
10006738:	1880021e 	bne	r3,r2,10006744 <lodepng_chunk_type_equals+0xe4>
1000673c:	00800044 	movi	r2,1
10006740:	00000106 	br	10006748 <lodepng_chunk_type_equals+0xe8>
10006744:	0005883a 	mov	r2,zero
}
10006748:	e037883a 	mov	sp,fp
1000674c:	dfc00117 	ldw	ra,4(sp)
10006750:	df000017 	ldw	fp,0(sp)
10006754:	dec00204 	addi	sp,sp,8
10006758:	f800283a 	ret

1000675c <lodepng_chunk_ancillary>:

unsigned char lodepng_chunk_ancillary(const unsigned char* chunk)
{
1000675c:	defffe04 	addi	sp,sp,-8
10006760:	df000115 	stw	fp,4(sp)
10006764:	df000104 	addi	fp,sp,4
10006768:	e13fff15 	stw	r4,-4(fp)
  return((chunk[4] & 32) != 0);
1000676c:	e0bfff17 	ldw	r2,-4(fp)
10006770:	10800104 	addi	r2,r2,4
10006774:	10800003 	ldbu	r2,0(r2)
10006778:	10803fcc 	andi	r2,r2,255
1000677c:	1080080c 	andi	r2,r2,32
10006780:	1004c03a 	cmpne	r2,r2,zero
}
10006784:	e037883a 	mov	sp,fp
10006788:	df000017 	ldw	fp,0(sp)
1000678c:	dec00104 	addi	sp,sp,4
10006790:	f800283a 	ret

10006794 <lodepng_chunk_private>:

unsigned char lodepng_chunk_private(const unsigned char* chunk)
{
10006794:	defffe04 	addi	sp,sp,-8
10006798:	df000115 	stw	fp,4(sp)
1000679c:	df000104 	addi	fp,sp,4
100067a0:	e13fff15 	stw	r4,-4(fp)
  return((chunk[6] & 32) != 0);
100067a4:	e0bfff17 	ldw	r2,-4(fp)
100067a8:	10800184 	addi	r2,r2,6
100067ac:	10800003 	ldbu	r2,0(r2)
100067b0:	10803fcc 	andi	r2,r2,255
100067b4:	1080080c 	andi	r2,r2,32
100067b8:	1004c03a 	cmpne	r2,r2,zero
}
100067bc:	e037883a 	mov	sp,fp
100067c0:	df000017 	ldw	fp,0(sp)
100067c4:	dec00104 	addi	sp,sp,4
100067c8:	f800283a 	ret

100067cc <lodepng_chunk_safetocopy>:

unsigned char lodepng_chunk_safetocopy(const unsigned char* chunk)
{
100067cc:	defffe04 	addi	sp,sp,-8
100067d0:	df000115 	stw	fp,4(sp)
100067d4:	df000104 	addi	fp,sp,4
100067d8:	e13fff15 	stw	r4,-4(fp)
  return((chunk[7] & 32) != 0);
100067dc:	e0bfff17 	ldw	r2,-4(fp)
100067e0:	108001c4 	addi	r2,r2,7
100067e4:	10800003 	ldbu	r2,0(r2)
100067e8:	10803fcc 	andi	r2,r2,255
100067ec:	1080080c 	andi	r2,r2,32
100067f0:	1004c03a 	cmpne	r2,r2,zero
}
100067f4:	e037883a 	mov	sp,fp
100067f8:	df000017 	ldw	fp,0(sp)
100067fc:	dec00104 	addi	sp,sp,4
10006800:	f800283a 	ret

10006804 <lodepng_chunk_data>:

unsigned char* lodepng_chunk_data(unsigned char* chunk)
{
10006804:	defffe04 	addi	sp,sp,-8
10006808:	df000115 	stw	fp,4(sp)
1000680c:	df000104 	addi	fp,sp,4
10006810:	e13fff15 	stw	r4,-4(fp)
  return &chunk[8];
10006814:	e0bfff17 	ldw	r2,-4(fp)
10006818:	10800204 	addi	r2,r2,8
}
1000681c:	e037883a 	mov	sp,fp
10006820:	df000017 	ldw	fp,0(sp)
10006824:	dec00104 	addi	sp,sp,4
10006828:	f800283a 	ret

1000682c <lodepng_chunk_data_const>:

const unsigned char* lodepng_chunk_data_const(const unsigned char* chunk)
{
1000682c:	defffe04 	addi	sp,sp,-8
10006830:	df000115 	stw	fp,4(sp)
10006834:	df000104 	addi	fp,sp,4
10006838:	e13fff15 	stw	r4,-4(fp)
  return &chunk[8];
1000683c:	e0bfff17 	ldw	r2,-4(fp)
10006840:	10800204 	addi	r2,r2,8
}
10006844:	e037883a 	mov	sp,fp
10006848:	df000017 	ldw	fp,0(sp)
1000684c:	dec00104 	addi	sp,sp,4
10006850:	f800283a 	ret

10006854 <lodepng_chunk_check_crc>:

unsigned lodepng_chunk_check_crc(const unsigned char* chunk)
{
10006854:	defffa04 	addi	sp,sp,-24
10006858:	dfc00515 	stw	ra,20(sp)
1000685c:	df000415 	stw	fp,16(sp)
10006860:	df000404 	addi	fp,sp,16
10006864:	e13fff15 	stw	r4,-4(fp)
  unsigned length = lodepng_chunk_length(chunk);
10006868:	e13fff17 	ldw	r4,-4(fp)
1000686c:	00065bc0 	call	100065bc <lodepng_chunk_length>
10006870:	e0bffc15 	stw	r2,-16(fp)
  unsigned CRC = lodepng_read32bitInt(&chunk[length + 8]);
10006874:	e0bffc17 	ldw	r2,-16(fp)
10006878:	10800204 	addi	r2,r2,8
1000687c:	e0ffff17 	ldw	r3,-4(fp)
10006880:	1885883a 	add	r2,r3,r2
10006884:	1009883a 	mov	r4,r2
10006888:	00009e40 	call	100009e4 <lodepng_read32bitInt>
1000688c:	e0bffd15 	stw	r2,-12(fp)
  /*the CRC is taken of the data and the 4 chunk type letters, not the length*/
  unsigned checksum = lodepng_crc32(&chunk[4], length + 4);
10006890:	e0bfff17 	ldw	r2,-4(fp)
10006894:	10c00104 	addi	r3,r2,4
10006898:	e0bffc17 	ldw	r2,-16(fp)
1000689c:	10800104 	addi	r2,r2,4
100068a0:	1809883a 	mov	r4,r3
100068a4:	100b883a 	mov	r5,r2
100068a8:	00062a40 	call	100062a4 <lodepng_crc32>
100068ac:	e0bffe15 	stw	r2,-8(fp)
  if(CRC != checksum) return 1;
100068b0:	e0fffd17 	ldw	r3,-12(fp)
100068b4:	e0bffe17 	ldw	r2,-8(fp)
100068b8:	18800226 	beq	r3,r2,100068c4 <lodepng_chunk_check_crc+0x70>
100068bc:	00800044 	movi	r2,1
100068c0:	00000106 	br	100068c8 <lodepng_chunk_check_crc+0x74>
  else return 0;
100068c4:	0005883a 	mov	r2,zero
}
100068c8:	e037883a 	mov	sp,fp
100068cc:	dfc00117 	ldw	ra,4(sp)
100068d0:	df000017 	ldw	fp,0(sp)
100068d4:	dec00204 	addi	sp,sp,8
100068d8:	f800283a 	ret

100068dc <lodepng_chunk_generate_crc>:

void lodepng_chunk_generate_crc(unsigned char* chunk)
{
100068dc:	defffb04 	addi	sp,sp,-20
100068e0:	dfc00415 	stw	ra,16(sp)
100068e4:	df000315 	stw	fp,12(sp)
100068e8:	df000304 	addi	fp,sp,12
100068ec:	e13fff15 	stw	r4,-4(fp)
  unsigned length = lodepng_chunk_length(chunk);
100068f0:	e13fff17 	ldw	r4,-4(fp)
100068f4:	00065bc0 	call	100065bc <lodepng_chunk_length>
100068f8:	e0bffd15 	stw	r2,-12(fp)
  unsigned CRC = lodepng_crc32(&chunk[4], length + 4);
100068fc:	e0bfff17 	ldw	r2,-4(fp)
10006900:	10c00104 	addi	r3,r2,4
10006904:	e0bffd17 	ldw	r2,-12(fp)
10006908:	10800104 	addi	r2,r2,4
1000690c:	1809883a 	mov	r4,r3
10006910:	100b883a 	mov	r5,r2
10006914:	00062a40 	call	100062a4 <lodepng_crc32>
10006918:	e0bffe15 	stw	r2,-8(fp)
  lodepng_set32bitInt(chunk + 8 + length, CRC);
1000691c:	e0bffd17 	ldw	r2,-12(fp)
10006920:	10800204 	addi	r2,r2,8
10006924:	e0ffff17 	ldw	r3,-4(fp)
10006928:	1885883a 	add	r2,r3,r2
1000692c:	1009883a 	mov	r4,r2
10006930:	e17ffe17 	ldw	r5,-8(fp)
10006934:	0000a580 	call	10000a58 <lodepng_set32bitInt>
}
10006938:	e037883a 	mov	sp,fp
1000693c:	dfc00117 	ldw	ra,4(sp)
10006940:	df000017 	ldw	fp,0(sp)
10006944:	dec00204 	addi	sp,sp,8
10006948:	f800283a 	ret

1000694c <lodepng_chunk_next>:

unsigned char* lodepng_chunk_next(unsigned char* chunk)
{
1000694c:	defffc04 	addi	sp,sp,-16
10006950:	dfc00315 	stw	ra,12(sp)
10006954:	df000215 	stw	fp,8(sp)
10006958:	df000204 	addi	fp,sp,8
1000695c:	e13fff15 	stw	r4,-4(fp)
  unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
10006960:	e13fff17 	ldw	r4,-4(fp)
10006964:	00065bc0 	call	100065bc <lodepng_chunk_length>
10006968:	10800304 	addi	r2,r2,12
1000696c:	e0bffe15 	stw	r2,-8(fp)
  return &chunk[total_chunk_length];
10006970:	e0ffff17 	ldw	r3,-4(fp)
10006974:	e0bffe17 	ldw	r2,-8(fp)
10006978:	1885883a 	add	r2,r3,r2
}
1000697c:	e037883a 	mov	sp,fp
10006980:	dfc00117 	ldw	ra,4(sp)
10006984:	df000017 	ldw	fp,0(sp)
10006988:	dec00204 	addi	sp,sp,8
1000698c:	f800283a 	ret

10006990 <lodepng_chunk_next_const>:

const unsigned char* lodepng_chunk_next_const(const unsigned char* chunk)
{
10006990:	defffc04 	addi	sp,sp,-16
10006994:	dfc00315 	stw	ra,12(sp)
10006998:	df000215 	stw	fp,8(sp)
1000699c:	df000204 	addi	fp,sp,8
100069a0:	e13fff15 	stw	r4,-4(fp)
  unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
100069a4:	e13fff17 	ldw	r4,-4(fp)
100069a8:	00065bc0 	call	100065bc <lodepng_chunk_length>
100069ac:	10800304 	addi	r2,r2,12
100069b0:	e0bffe15 	stw	r2,-8(fp)
  return &chunk[total_chunk_length];
100069b4:	e0ffff17 	ldw	r3,-4(fp)
100069b8:	e0bffe17 	ldw	r2,-8(fp)
100069bc:	1885883a 	add	r2,r3,r2
}
100069c0:	e037883a 	mov	sp,fp
100069c4:	dfc00117 	ldw	ra,4(sp)
100069c8:	df000017 	ldw	fp,0(sp)
100069cc:	dec00204 	addi	sp,sp,8
100069d0:	f800283a 	ret

100069d4 <lodepng_chunk_append>:

unsigned lodepng_chunk_append(unsigned char** out, size_t* outlength, const unsigned char* chunk)
{
100069d4:	defff604 	addi	sp,sp,-40
100069d8:	dfc00915 	stw	ra,36(sp)
100069dc:	df000815 	stw	fp,32(sp)
100069e0:	df000804 	addi	fp,sp,32
100069e4:	e13ffd15 	stw	r4,-12(fp)
100069e8:	e17ffe15 	stw	r5,-8(fp)
100069ec:	e1bfff15 	stw	r6,-4(fp)
  unsigned i;
  unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
100069f0:	e13fff17 	ldw	r4,-4(fp)
100069f4:	00065bc0 	call	100065bc <lodepng_chunk_length>
100069f8:	10800304 	addi	r2,r2,12
100069fc:	e0bff915 	stw	r2,-28(fp)
  unsigned char *chunk_start, *new_buffer;
  size_t new_length = (*outlength) + total_chunk_length;
10006a00:	e0bffe17 	ldw	r2,-8(fp)
10006a04:	10c00017 	ldw	r3,0(r2)
10006a08:	e0bff917 	ldw	r2,-28(fp)
10006a0c:	1885883a 	add	r2,r3,r2
10006a10:	e0bffa15 	stw	r2,-24(fp)
  if(new_length < total_chunk_length || new_length < (*outlength)) return 77; /*integer overflow happened*/
10006a14:	e0fffa17 	ldw	r3,-24(fp)
10006a18:	e0bff917 	ldw	r2,-28(fp)
10006a1c:	18800436 	bltu	r3,r2,10006a30 <lodepng_chunk_append+0x5c>
10006a20:	e0bffe17 	ldw	r2,-8(fp)
10006a24:	10800017 	ldw	r2,0(r2)
10006a28:	e0fffa17 	ldw	r3,-24(fp)
10006a2c:	1880022e 	bgeu	r3,r2,10006a38 <lodepng_chunk_append+0x64>
10006a30:	00801344 	movi	r2,77
10006a34:	00002806 	br	10006ad8 <lodepng_chunk_append+0x104>

  new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
10006a38:	e0bffd17 	ldw	r2,-12(fp)
10006a3c:	10800017 	ldw	r2,0(r2)
10006a40:	1009883a 	mov	r4,r2
10006a44:	e17ffa17 	ldw	r5,-24(fp)
10006a48:	00002240 	call	10000224 <lodepng_realloc>
10006a4c:	e0bffb15 	stw	r2,-20(fp)
  if(!new_buffer) return 83; /*alloc fail*/
10006a50:	e0bffb17 	ldw	r2,-20(fp)
10006a54:	1000021e 	bne	r2,zero,10006a60 <lodepng_chunk_append+0x8c>
10006a58:	008014c4 	movi	r2,83
10006a5c:	00001e06 	br	10006ad8 <lodepng_chunk_append+0x104>
  (*out) = new_buffer;
10006a60:	e0bffd17 	ldw	r2,-12(fp)
10006a64:	e0fffb17 	ldw	r3,-20(fp)
10006a68:	10c00015 	stw	r3,0(r2)
  (*outlength) = new_length;
10006a6c:	e0bffe17 	ldw	r2,-8(fp)
10006a70:	e0fffa17 	ldw	r3,-24(fp)
10006a74:	10c00015 	stw	r3,0(r2)
  chunk_start = &(*out)[new_length - total_chunk_length];
10006a78:	e0bffd17 	ldw	r2,-12(fp)
10006a7c:	10c00017 	ldw	r3,0(r2)
10006a80:	e13ffa17 	ldw	r4,-24(fp)
10006a84:	e0bff917 	ldw	r2,-28(fp)
10006a88:	2085c83a 	sub	r2,r4,r2
10006a8c:	1885883a 	add	r2,r3,r2
10006a90:	e0bffc15 	stw	r2,-16(fp)

  for(i = 0; i != total_chunk_length; ++i) chunk_start[i] = chunk[i];
10006a94:	e03ff815 	stw	zero,-32(fp)
10006a98:	00000b06 	br	10006ac8 <lodepng_chunk_append+0xf4>
10006a9c:	e0fffc17 	ldw	r3,-16(fp)
10006aa0:	e0bff817 	ldw	r2,-32(fp)
10006aa4:	1885883a 	add	r2,r3,r2
10006aa8:	e13fff17 	ldw	r4,-4(fp)
10006aac:	e0fff817 	ldw	r3,-32(fp)
10006ab0:	20c7883a 	add	r3,r4,r3
10006ab4:	18c00003 	ldbu	r3,0(r3)
10006ab8:	10c00005 	stb	r3,0(r2)
10006abc:	e0bff817 	ldw	r2,-32(fp)
10006ac0:	10800044 	addi	r2,r2,1
10006ac4:	e0bff815 	stw	r2,-32(fp)
10006ac8:	e0fff817 	ldw	r3,-32(fp)
10006acc:	e0bff917 	ldw	r2,-28(fp)
10006ad0:	18bff21e 	bne	r3,r2,10006a9c <__alt_data_end+0xf8006a9c>

  return 0;
10006ad4:	0005883a 	mov	r2,zero
}
10006ad8:	e037883a 	mov	sp,fp
10006adc:	dfc00117 	ldw	ra,4(sp)
10006ae0:	df000017 	ldw	fp,0(sp)
10006ae4:	dec00204 	addi	sp,sp,8
10006ae8:	f800283a 	ret

10006aec <lodepng_chunk_create>:

unsigned lodepng_chunk_create(unsigned char** out, size_t* outlength, unsigned length,
                              const char* type, const unsigned char* data)
{
10006aec:	defff604 	addi	sp,sp,-40
10006af0:	dfc00915 	stw	ra,36(sp)
10006af4:	df000815 	stw	fp,32(sp)
10006af8:	df000804 	addi	fp,sp,32
10006afc:	e13ffc15 	stw	r4,-16(fp)
10006b00:	e17ffd15 	stw	r5,-12(fp)
10006b04:	e1bffe15 	stw	r6,-8(fp)
10006b08:	e1ffff15 	stw	r7,-4(fp)
  unsigned i;
  unsigned char *chunk, *new_buffer;
  size_t new_length = (*outlength) + length + 12;
10006b0c:	e0bffd17 	ldw	r2,-12(fp)
10006b10:	10c00017 	ldw	r3,0(r2)
10006b14:	e0bffe17 	ldw	r2,-8(fp)
10006b18:	1885883a 	add	r2,r3,r2
10006b1c:	10800304 	addi	r2,r2,12
10006b20:	e0bff915 	stw	r2,-28(fp)
  if(new_length < length + 12 || new_length < (*outlength)) return 77; /*integer overflow happened*/
10006b24:	e0bffe17 	ldw	r2,-8(fp)
10006b28:	10800304 	addi	r2,r2,12
10006b2c:	e0fff917 	ldw	r3,-28(fp)
10006b30:	18800436 	bltu	r3,r2,10006b44 <lodepng_chunk_create+0x58>
10006b34:	e0bffd17 	ldw	r2,-12(fp)
10006b38:	10800017 	ldw	r2,0(r2)
10006b3c:	e0fff917 	ldw	r3,-28(fp)
10006b40:	1880022e 	bgeu	r3,r2,10006b4c <lodepng_chunk_create+0x60>
10006b44:	00801344 	movi	r2,77
10006b48:	00004706 	br	10006c68 <lodepng_chunk_create+0x17c>
  new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
10006b4c:	e0bffc17 	ldw	r2,-16(fp)
10006b50:	10800017 	ldw	r2,0(r2)
10006b54:	1009883a 	mov	r4,r2
10006b58:	e17ff917 	ldw	r5,-28(fp)
10006b5c:	00002240 	call	10000224 <lodepng_realloc>
10006b60:	e0bffa15 	stw	r2,-24(fp)
  if(!new_buffer) return 83; /*alloc fail*/
10006b64:	e0bffa17 	ldw	r2,-24(fp)
10006b68:	1000021e 	bne	r2,zero,10006b74 <lodepng_chunk_create+0x88>
10006b6c:	008014c4 	movi	r2,83
10006b70:	00003d06 	br	10006c68 <lodepng_chunk_create+0x17c>
  (*out) = new_buffer;
10006b74:	e0bffc17 	ldw	r2,-16(fp)
10006b78:	e0fffa17 	ldw	r3,-24(fp)
10006b7c:	10c00015 	stw	r3,0(r2)
  (*outlength) = new_length;
10006b80:	e0bffd17 	ldw	r2,-12(fp)
10006b84:	e0fff917 	ldw	r3,-28(fp)
10006b88:	10c00015 	stw	r3,0(r2)
  chunk = &(*out)[(*outlength) - length - 12];
10006b8c:	e0bffc17 	ldw	r2,-16(fp)
10006b90:	10c00017 	ldw	r3,0(r2)
10006b94:	e0bffd17 	ldw	r2,-12(fp)
10006b98:	11000017 	ldw	r4,0(r2)
10006b9c:	e0bffe17 	ldw	r2,-8(fp)
10006ba0:	2085c83a 	sub	r2,r4,r2
10006ba4:	10bffd04 	addi	r2,r2,-12
10006ba8:	1885883a 	add	r2,r3,r2
10006bac:	e0bffb15 	stw	r2,-20(fp)

  /*1: length*/
  lodepng_set32bitInt(chunk, (unsigned)length);
10006bb0:	e13ffb17 	ldw	r4,-20(fp)
10006bb4:	e17ffe17 	ldw	r5,-8(fp)
10006bb8:	0000a580 	call	10000a58 <lodepng_set32bitInt>

  /*2: chunk name (4 letters)*/
  chunk[4] = (unsigned char)type[0];
10006bbc:	e0bffb17 	ldw	r2,-20(fp)
10006bc0:	10800104 	addi	r2,r2,4
10006bc4:	e0ffff17 	ldw	r3,-4(fp)
10006bc8:	18c00003 	ldbu	r3,0(r3)
10006bcc:	10c00005 	stb	r3,0(r2)
  chunk[5] = (unsigned char)type[1];
10006bd0:	e0bffb17 	ldw	r2,-20(fp)
10006bd4:	10800144 	addi	r2,r2,5
10006bd8:	e0ffff17 	ldw	r3,-4(fp)
10006bdc:	18c00044 	addi	r3,r3,1
10006be0:	18c00003 	ldbu	r3,0(r3)
10006be4:	10c00005 	stb	r3,0(r2)
  chunk[6] = (unsigned char)type[2];
10006be8:	e0bffb17 	ldw	r2,-20(fp)
10006bec:	10800184 	addi	r2,r2,6
10006bf0:	e0ffff17 	ldw	r3,-4(fp)
10006bf4:	18c00084 	addi	r3,r3,2
10006bf8:	18c00003 	ldbu	r3,0(r3)
10006bfc:	10c00005 	stb	r3,0(r2)
  chunk[7] = (unsigned char)type[3];
10006c00:	e0bffb17 	ldw	r2,-20(fp)
10006c04:	108001c4 	addi	r2,r2,7
10006c08:	e0ffff17 	ldw	r3,-4(fp)
10006c0c:	18c000c4 	addi	r3,r3,3
10006c10:	18c00003 	ldbu	r3,0(r3)
10006c14:	10c00005 	stb	r3,0(r2)

  /*3: the data*/
  for(i = 0; i != length; ++i) chunk[8 + i] = data[i];
10006c18:	e03ff815 	stw	zero,-32(fp)
10006c1c:	00000c06 	br	10006c50 <lodepng_chunk_create+0x164>
10006c20:	e0bff817 	ldw	r2,-32(fp)
10006c24:	10800204 	addi	r2,r2,8
10006c28:	e0fffb17 	ldw	r3,-20(fp)
10006c2c:	1885883a 	add	r2,r3,r2
10006c30:	e1000217 	ldw	r4,8(fp)
10006c34:	e0fff817 	ldw	r3,-32(fp)
10006c38:	20c7883a 	add	r3,r4,r3
10006c3c:	18c00003 	ldbu	r3,0(r3)
10006c40:	10c00005 	stb	r3,0(r2)
10006c44:	e0bff817 	ldw	r2,-32(fp)
10006c48:	10800044 	addi	r2,r2,1
10006c4c:	e0bff815 	stw	r2,-32(fp)
10006c50:	e0fff817 	ldw	r3,-32(fp)
10006c54:	e0bffe17 	ldw	r2,-8(fp)
10006c58:	18bff11e 	bne	r3,r2,10006c20 <__alt_data_end+0xf8006c20>

  /*4: CRC (of the chunkname characters and the data)*/
  lodepng_chunk_generate_crc(chunk);
10006c5c:	e13ffb17 	ldw	r4,-20(fp)
10006c60:	00068dc0 	call	100068dc <lodepng_chunk_generate_crc>

  return 0;
10006c64:	0005883a 	mov	r2,zero
}
10006c68:	e037883a 	mov	sp,fp
10006c6c:	dfc00117 	ldw	ra,4(sp)
10006c70:	df000017 	ldw	fp,0(sp)
10006c74:	dec00204 	addi	sp,sp,8
10006c78:	f800283a 	ret

10006c7c <checkColorValidity>:
/* / Color types and such                                                   / */
/* ////////////////////////////////////////////////////////////////////////// */

/*return type is a LodePNG error code*/
static unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) /*bd = bitdepth*/
{
10006c7c:	defffd04 	addi	sp,sp,-12
10006c80:	df000215 	stw	fp,8(sp)
10006c84:	df000204 	addi	fp,sp,8
10006c88:	e13ffe15 	stw	r4,-8(fp)
10006c8c:	e17fff15 	stw	r5,-4(fp)
  switch(colortype)
10006c90:	e0bffe17 	ldw	r2,-8(fp)
10006c94:	108001e8 	cmpgeui	r2,r2,7
10006c98:	1000461e 	bne	r2,zero,10006db4 <checkColorValidity+0x138>
10006c9c:	e0bffe17 	ldw	r2,-8(fp)
10006ca0:	1085883a 	add	r2,r2,r2
10006ca4:	1087883a 	add	r3,r2,r2
10006ca8:	00840034 	movhi	r2,4096
10006cac:	109b2f04 	addi	r2,r2,27836
10006cb0:	1885883a 	add	r2,r3,r2
10006cb4:	10800017 	ldw	r2,0(r2)
10006cb8:	1000683a 	jmp	r2
10006cbc:	10006cd8 	cmpnei	zero,r2,435
10006cc0:	10006db4 	orhi	zero,r2,438
10006cc4:	10006d1c 	xori	zero,r2,436
10006cc8:	10006d3c 	xorhi	zero,r2,436
10006ccc:	10006d74 	orhi	zero,r2,437
10006cd0:	10006db4 	orhi	zero,r2,438
10006cd4:	10006d94 	ori	zero,r2,438
  {
    case 0: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8 || bd == 16)) return 37; break; /*grey*/
10006cd8:	e0bfff17 	ldw	r2,-4(fp)
10006cdc:	10800060 	cmpeqi	r2,r2,1
10006ce0:	1000361e 	bne	r2,zero,10006dbc <checkColorValidity+0x140>
10006ce4:	e0bfff17 	ldw	r2,-4(fp)
10006ce8:	108000a0 	cmpeqi	r2,r2,2
10006cec:	1000331e 	bne	r2,zero,10006dbc <checkColorValidity+0x140>
10006cf0:	e0bfff17 	ldw	r2,-4(fp)
10006cf4:	10800120 	cmpeqi	r2,r2,4
10006cf8:	1000301e 	bne	r2,zero,10006dbc <checkColorValidity+0x140>
10006cfc:	e0bfff17 	ldw	r2,-4(fp)
10006d00:	10800220 	cmpeqi	r2,r2,8
10006d04:	10002d1e 	bne	r2,zero,10006dbc <checkColorValidity+0x140>
10006d08:	e0bfff17 	ldw	r2,-4(fp)
10006d0c:	10800420 	cmpeqi	r2,r2,16
10006d10:	10002a1e 	bne	r2,zero,10006dbc <checkColorValidity+0x140>
10006d14:	00800944 	movi	r2,37
10006d18:	00003206 	br	10006de4 <checkColorValidity+0x168>
    case 2: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGB*/
10006d1c:	e0bfff17 	ldw	r2,-4(fp)
10006d20:	10800220 	cmpeqi	r2,r2,8
10006d24:	1000271e 	bne	r2,zero,10006dc4 <checkColorValidity+0x148>
10006d28:	e0bfff17 	ldw	r2,-4(fp)
10006d2c:	10800420 	cmpeqi	r2,r2,16
10006d30:	1000241e 	bne	r2,zero,10006dc4 <checkColorValidity+0x148>
10006d34:	00800944 	movi	r2,37
10006d38:	00002a06 	br	10006de4 <checkColorValidity+0x168>
    case 3: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8            )) return 37; break; /*palette*/
10006d3c:	e0bfff17 	ldw	r2,-4(fp)
10006d40:	10800060 	cmpeqi	r2,r2,1
10006d44:	1000211e 	bne	r2,zero,10006dcc <checkColorValidity+0x150>
10006d48:	e0bfff17 	ldw	r2,-4(fp)
10006d4c:	108000a0 	cmpeqi	r2,r2,2
10006d50:	10001e1e 	bne	r2,zero,10006dcc <checkColorValidity+0x150>
10006d54:	e0bfff17 	ldw	r2,-4(fp)
10006d58:	10800120 	cmpeqi	r2,r2,4
10006d5c:	10001b1e 	bne	r2,zero,10006dcc <checkColorValidity+0x150>
10006d60:	e0bfff17 	ldw	r2,-4(fp)
10006d64:	10800220 	cmpeqi	r2,r2,8
10006d68:	1000181e 	bne	r2,zero,10006dcc <checkColorValidity+0x150>
10006d6c:	00800944 	movi	r2,37
10006d70:	00001c06 	br	10006de4 <checkColorValidity+0x168>
    case 4: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*grey + alpha*/
10006d74:	e0bfff17 	ldw	r2,-4(fp)
10006d78:	10800220 	cmpeqi	r2,r2,8
10006d7c:	1000151e 	bne	r2,zero,10006dd4 <checkColorValidity+0x158>
10006d80:	e0bfff17 	ldw	r2,-4(fp)
10006d84:	10800420 	cmpeqi	r2,r2,16
10006d88:	1000121e 	bne	r2,zero,10006dd4 <checkColorValidity+0x158>
10006d8c:	00800944 	movi	r2,37
10006d90:	00001406 	br	10006de4 <checkColorValidity+0x168>
    case 6: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGBA*/
10006d94:	e0bfff17 	ldw	r2,-4(fp)
10006d98:	10800220 	cmpeqi	r2,r2,8
10006d9c:	10000f1e 	bne	r2,zero,10006ddc <checkColorValidity+0x160>
10006da0:	e0bfff17 	ldw	r2,-4(fp)
10006da4:	10800420 	cmpeqi	r2,r2,16
10006da8:	10000c1e 	bne	r2,zero,10006ddc <checkColorValidity+0x160>
10006dac:	00800944 	movi	r2,37
10006db0:	00000c06 	br	10006de4 <checkColorValidity+0x168>
    default: return 31;
10006db4:	008007c4 	movi	r2,31
10006db8:	00000a06 	br	10006de4 <checkColorValidity+0x168>
/*return type is a LodePNG error code*/
static unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) /*bd = bitdepth*/
{
  switch(colortype)
  {
    case 0: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8 || bd == 16)) return 37; break; /*grey*/
10006dbc:	0001883a 	nop
10006dc0:	00000706 	br	10006de0 <checkColorValidity+0x164>
    case 2: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGB*/
10006dc4:	0001883a 	nop
10006dc8:	00000506 	br	10006de0 <checkColorValidity+0x164>
    case 3: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8            )) return 37; break; /*palette*/
10006dcc:	0001883a 	nop
10006dd0:	00000306 	br	10006de0 <checkColorValidity+0x164>
    case 4: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*grey + alpha*/
10006dd4:	0001883a 	nop
10006dd8:	00000106 	br	10006de0 <checkColorValidity+0x164>
    case 6: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGBA*/
10006ddc:	0001883a 	nop
    default: return 31;
  }
  return 0; /*allowed color type / bits combination*/
10006de0:	0005883a 	mov	r2,zero
}
10006de4:	e037883a 	mov	sp,fp
10006de8:	df000017 	ldw	fp,0(sp)
10006dec:	dec00104 	addi	sp,sp,4
10006df0:	f800283a 	ret

10006df4 <getNumColorChannels>:

static unsigned getNumColorChannels(LodePNGColorType colortype)
{
10006df4:	defffe04 	addi	sp,sp,-8
10006df8:	df000115 	stw	fp,4(sp)
10006dfc:	df000104 	addi	fp,sp,4
10006e00:	e13fff15 	stw	r4,-4(fp)
  switch(colortype)
10006e04:	e0bfff17 	ldw	r2,-4(fp)
10006e08:	108001e8 	cmpgeui	r2,r2,7
10006e0c:	1000191e 	bne	r2,zero,10006e74 <getNumColorChannels+0x80>
10006e10:	e0bfff17 	ldw	r2,-4(fp)
10006e14:	1085883a 	add	r2,r2,r2
10006e18:	1087883a 	add	r3,r2,r2
10006e1c:	00840034 	movhi	r2,4096
10006e20:	109b8c04 	addi	r2,r2,28208
10006e24:	1885883a 	add	r2,r3,r2
10006e28:	10800017 	ldw	r2,0(r2)
10006e2c:	1000683a 	jmp	r2
10006e30:	10006e4c 	andi	zero,r2,441
10006e34:	10006e74 	orhi	zero,r2,441
10006e38:	10006e54 	ori	zero,r2,441
10006e3c:	10006e5c 	xori	zero,r2,441
10006e40:	10006e64 	muli	zero,r2,441
10006e44:	10006e74 	orhi	zero,r2,441
10006e48:	10006e6c 	andhi	zero,r2,441
  {
    case 0: return 1; /*grey*/
10006e4c:	00800044 	movi	r2,1
10006e50:	00000906 	br	10006e78 <getNumColorChannels+0x84>
    case 2: return 3; /*RGB*/
10006e54:	008000c4 	movi	r2,3
10006e58:	00000706 	br	10006e78 <getNumColorChannels+0x84>
    case 3: return 1; /*palette*/
10006e5c:	00800044 	movi	r2,1
10006e60:	00000506 	br	10006e78 <getNumColorChannels+0x84>
    case 4: return 2; /*grey + alpha*/
10006e64:	00800084 	movi	r2,2
10006e68:	00000306 	br	10006e78 <getNumColorChannels+0x84>
    case 6: return 4; /*RGBA*/
10006e6c:	00800104 	movi	r2,4
10006e70:	00000106 	br	10006e78 <getNumColorChannels+0x84>
  }
  return 0; /*unexisting color type*/
10006e74:	0005883a 	mov	r2,zero
}
10006e78:	e037883a 	mov	sp,fp
10006e7c:	df000017 	ldw	fp,0(sp)
10006e80:	dec00104 	addi	sp,sp,4
10006e84:	f800283a 	ret

10006e88 <lodepng_get_bpp_lct>:

static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
{
10006e88:	defffc04 	addi	sp,sp,-16
10006e8c:	dfc00315 	stw	ra,12(sp)
10006e90:	df000215 	stw	fp,8(sp)
10006e94:	df000204 	addi	fp,sp,8
10006e98:	e13ffe15 	stw	r4,-8(fp)
10006e9c:	e17fff15 	stw	r5,-4(fp)
  /*bits per pixel is amount of channels * bits per channel*/
  return getNumColorChannels(colortype) * bitdepth;
10006ea0:	e13ffe17 	ldw	r4,-8(fp)
10006ea4:	0006df40 	call	10006df4 <getNumColorChannels>
10006ea8:	1009883a 	mov	r4,r2
10006eac:	e17fff17 	ldw	r5,-4(fp)
10006eb0:	00146fc0 	call	100146fc <__mulsi3>
}
10006eb4:	e037883a 	mov	sp,fp
10006eb8:	dfc00117 	ldw	ra,4(sp)
10006ebc:	df000017 	ldw	fp,0(sp)
10006ec0:	dec00204 	addi	sp,sp,8
10006ec4:	f800283a 	ret

10006ec8 <lodepng_color_mode_init>:

/* ////////////////////////////////////////////////////////////////////////// */

void lodepng_color_mode_init(LodePNGColorMode* info)
{
10006ec8:	defffe04 	addi	sp,sp,-8
10006ecc:	df000115 	stw	fp,4(sp)
10006ed0:	df000104 	addi	fp,sp,4
10006ed4:	e13fff15 	stw	r4,-4(fp)
  info->key_defined = 0;
10006ed8:	e0bfff17 	ldw	r2,-4(fp)
10006edc:	10000415 	stw	zero,16(r2)
  info->key_r = info->key_g = info->key_b = 0;
10006ee0:	e0bfff17 	ldw	r2,-4(fp)
10006ee4:	10000715 	stw	zero,28(r2)
10006ee8:	e0bfff17 	ldw	r2,-4(fp)
10006eec:	10c00717 	ldw	r3,28(r2)
10006ef0:	e0bfff17 	ldw	r2,-4(fp)
10006ef4:	10c00615 	stw	r3,24(r2)
10006ef8:	e0bfff17 	ldw	r2,-4(fp)
10006efc:	10c00617 	ldw	r3,24(r2)
10006f00:	e0bfff17 	ldw	r2,-4(fp)
10006f04:	10c00515 	stw	r3,20(r2)
  info->colortype = LCT_RGBA;
10006f08:	e0bfff17 	ldw	r2,-4(fp)
10006f0c:	00c00184 	movi	r3,6
10006f10:	10c00015 	stw	r3,0(r2)
  info->bitdepth = 8;
10006f14:	e0bfff17 	ldw	r2,-4(fp)
10006f18:	00c00204 	movi	r3,8
10006f1c:	10c00115 	stw	r3,4(r2)
  info->palette = 0;
10006f20:	e0bfff17 	ldw	r2,-4(fp)
10006f24:	10000215 	stw	zero,8(r2)
  info->palettesize = 0;
10006f28:	e0bfff17 	ldw	r2,-4(fp)
10006f2c:	10000315 	stw	zero,12(r2)
}
10006f30:	e037883a 	mov	sp,fp
10006f34:	df000017 	ldw	fp,0(sp)
10006f38:	dec00104 	addi	sp,sp,4
10006f3c:	f800283a 	ret

10006f40 <lodepng_color_mode_cleanup>:

void lodepng_color_mode_cleanup(LodePNGColorMode* info)
{
10006f40:	defffd04 	addi	sp,sp,-12
10006f44:	dfc00215 	stw	ra,8(sp)
10006f48:	df000115 	stw	fp,4(sp)
10006f4c:	df000104 	addi	fp,sp,4
10006f50:	e13fff15 	stw	r4,-4(fp)
  lodepng_palette_clear(info);
10006f54:	e13fff17 	ldw	r4,-4(fp)
10006f58:	00071e80 	call	100071e8 <lodepng_palette_clear>
}
10006f5c:	e037883a 	mov	sp,fp
10006f60:	dfc00117 	ldw	ra,4(sp)
10006f64:	df000017 	ldw	fp,0(sp)
10006f68:	dec00204 	addi	sp,sp,8
10006f6c:	f800283a 	ret

10006f70 <lodepng_color_mode_copy>:

unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source)
{
10006f70:	defffb04 	addi	sp,sp,-20
10006f74:	dfc00415 	stw	ra,16(sp)
10006f78:	df000315 	stw	fp,12(sp)
10006f7c:	df000304 	addi	fp,sp,12
10006f80:	e13ffe15 	stw	r4,-8(fp)
10006f84:	e17fff15 	stw	r5,-4(fp)
  size_t i;
  lodepng_color_mode_cleanup(dest);
10006f88:	e13ffe17 	ldw	r4,-8(fp)
10006f8c:	0006f400 	call	10006f40 <lodepng_color_mode_cleanup>
  *dest = *source;
10006f90:	e0bffe17 	ldw	r2,-8(fp)
10006f94:	e0ffff17 	ldw	r3,-4(fp)
10006f98:	19000017 	ldw	r4,0(r3)
10006f9c:	11000015 	stw	r4,0(r2)
10006fa0:	19000117 	ldw	r4,4(r3)
10006fa4:	11000115 	stw	r4,4(r2)
10006fa8:	19000217 	ldw	r4,8(r3)
10006fac:	11000215 	stw	r4,8(r2)
10006fb0:	19000317 	ldw	r4,12(r3)
10006fb4:	11000315 	stw	r4,12(r2)
10006fb8:	19000417 	ldw	r4,16(r3)
10006fbc:	11000415 	stw	r4,16(r2)
10006fc0:	19000517 	ldw	r4,20(r3)
10006fc4:	11000515 	stw	r4,20(r2)
10006fc8:	19000617 	ldw	r4,24(r3)
10006fcc:	11000615 	stw	r4,24(r2)
10006fd0:	18c00717 	ldw	r3,28(r3)
10006fd4:	10c00715 	stw	r3,28(r2)
  if(source->palette)
10006fd8:	e0bfff17 	ldw	r2,-4(fp)
10006fdc:	10800217 	ldw	r2,8(r2)
10006fe0:	10002226 	beq	r2,zero,1000706c <lodepng_color_mode_copy+0xfc>
  {
    dest->palette = (unsigned char*)lodepng_malloc(1024);
10006fe4:	01010004 	movi	r4,1024
10006fe8:	00001f40 	call	100001f4 <lodepng_malloc>
10006fec:	e0fffe17 	ldw	r3,-8(fp)
10006ff0:	18800215 	stw	r2,8(r3)
    if(!dest->palette && source->palettesize) return 83; /*alloc fail*/
10006ff4:	e0bffe17 	ldw	r2,-8(fp)
10006ff8:	10800217 	ldw	r2,8(r2)
10006ffc:	1000051e 	bne	r2,zero,10007014 <lodepng_color_mode_copy+0xa4>
10007000:	e0bfff17 	ldw	r2,-4(fp)
10007004:	10800317 	ldw	r2,12(r2)
10007008:	10000226 	beq	r2,zero,10007014 <lodepng_color_mode_copy+0xa4>
1000700c:	008014c4 	movi	r2,83
10007010:	00001706 	br	10007070 <lodepng_color_mode_copy+0x100>
    for(i = 0; i != source->palettesize * 4; ++i) dest->palette[i] = source->palette[i];
10007014:	e03ffd15 	stw	zero,-12(fp)
10007018:	00000d06 	br	10007050 <lodepng_color_mode_copy+0xe0>
1000701c:	e0bffe17 	ldw	r2,-8(fp)
10007020:	10c00217 	ldw	r3,8(r2)
10007024:	e0bffd17 	ldw	r2,-12(fp)
10007028:	1885883a 	add	r2,r3,r2
1000702c:	e0ffff17 	ldw	r3,-4(fp)
10007030:	19000217 	ldw	r4,8(r3)
10007034:	e0fffd17 	ldw	r3,-12(fp)
10007038:	20c7883a 	add	r3,r4,r3
1000703c:	18c00003 	ldbu	r3,0(r3)
10007040:	10c00005 	stb	r3,0(r2)
10007044:	e0bffd17 	ldw	r2,-12(fp)
10007048:	10800044 	addi	r2,r2,1
1000704c:	e0bffd15 	stw	r2,-12(fp)
10007050:	e0bfff17 	ldw	r2,-4(fp)
10007054:	10800317 	ldw	r2,12(r2)
10007058:	1085883a 	add	r2,r2,r2
1000705c:	1085883a 	add	r2,r2,r2
10007060:	1007883a 	mov	r3,r2
10007064:	e0bffd17 	ldw	r2,-12(fp)
10007068:	18bfec1e 	bne	r3,r2,1000701c <__alt_data_end+0xf800701c>
  }
  return 0;
1000706c:	0005883a 	mov	r2,zero
}
10007070:	e037883a 	mov	sp,fp
10007074:	dfc00117 	ldw	ra,4(sp)
10007078:	df000017 	ldw	fp,0(sp)
1000707c:	dec00204 	addi	sp,sp,8
10007080:	f800283a 	ret

10007084 <lodepng_color_mode_equal>:

static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)
{
10007084:	defffc04 	addi	sp,sp,-16
10007088:	df000315 	stw	fp,12(sp)
1000708c:	df000304 	addi	fp,sp,12
10007090:	e13ffe15 	stw	r4,-8(fp)
10007094:	e17fff15 	stw	r5,-4(fp)
  size_t i;
  if(a->colortype != b->colortype) return 0;
10007098:	e0bffe17 	ldw	r2,-8(fp)
1000709c:	10c00017 	ldw	r3,0(r2)
100070a0:	e0bfff17 	ldw	r2,-4(fp)
100070a4:	10800017 	ldw	r2,0(r2)
100070a8:	18800226 	beq	r3,r2,100070b4 <lodepng_color_mode_equal+0x30>
100070ac:	0005883a 	mov	r2,zero
100070b0:	00004906 	br	100071d8 <lodepng_color_mode_equal+0x154>
  if(a->bitdepth != b->bitdepth) return 0;
100070b4:	e0bffe17 	ldw	r2,-8(fp)
100070b8:	10c00117 	ldw	r3,4(r2)
100070bc:	e0bfff17 	ldw	r2,-4(fp)
100070c0:	10800117 	ldw	r2,4(r2)
100070c4:	18800226 	beq	r3,r2,100070d0 <lodepng_color_mode_equal+0x4c>
100070c8:	0005883a 	mov	r2,zero
100070cc:	00004206 	br	100071d8 <lodepng_color_mode_equal+0x154>
  if(a->key_defined != b->key_defined) return 0;
100070d0:	e0bffe17 	ldw	r2,-8(fp)
100070d4:	10c00417 	ldw	r3,16(r2)
100070d8:	e0bfff17 	ldw	r2,-4(fp)
100070dc:	10800417 	ldw	r2,16(r2)
100070e0:	18800226 	beq	r3,r2,100070ec <lodepng_color_mode_equal+0x68>
100070e4:	0005883a 	mov	r2,zero
100070e8:	00003b06 	br	100071d8 <lodepng_color_mode_equal+0x154>
  if(a->key_defined)
100070ec:	e0bffe17 	ldw	r2,-8(fp)
100070f0:	10800417 	ldw	r2,16(r2)
100070f4:	10001526 	beq	r2,zero,1000714c <lodepng_color_mode_equal+0xc8>
  {
    if(a->key_r != b->key_r) return 0;
100070f8:	e0bffe17 	ldw	r2,-8(fp)
100070fc:	10c00517 	ldw	r3,20(r2)
10007100:	e0bfff17 	ldw	r2,-4(fp)
10007104:	10800517 	ldw	r2,20(r2)
10007108:	18800226 	beq	r3,r2,10007114 <lodepng_color_mode_equal+0x90>
1000710c:	0005883a 	mov	r2,zero
10007110:	00003106 	br	100071d8 <lodepng_color_mode_equal+0x154>
    if(a->key_g != b->key_g) return 0;
10007114:	e0bffe17 	ldw	r2,-8(fp)
10007118:	10c00617 	ldw	r3,24(r2)
1000711c:	e0bfff17 	ldw	r2,-4(fp)
10007120:	10800617 	ldw	r2,24(r2)
10007124:	18800226 	beq	r3,r2,10007130 <lodepng_color_mode_equal+0xac>
10007128:	0005883a 	mov	r2,zero
1000712c:	00002a06 	br	100071d8 <lodepng_color_mode_equal+0x154>
    if(a->key_b != b->key_b) return 0;
10007130:	e0bffe17 	ldw	r2,-8(fp)
10007134:	10c00717 	ldw	r3,28(r2)
10007138:	e0bfff17 	ldw	r2,-4(fp)
1000713c:	10800717 	ldw	r2,28(r2)
10007140:	18800226 	beq	r3,r2,1000714c <lodepng_color_mode_equal+0xc8>
10007144:	0005883a 	mov	r2,zero
10007148:	00002306 	br	100071d8 <lodepng_color_mode_equal+0x154>
  }
  /*if one of the palette sizes is 0, then we consider it to be the same as the
  other: it means that e.g. the palette was not given by the user and should be
  considered the same as the palette inside the PNG.*/
  if(1/*a->palettesize != 0 && b->palettesize != 0*/) {
    if(a->palettesize != b->palettesize) return 0;
1000714c:	e0bffe17 	ldw	r2,-8(fp)
10007150:	10c00317 	ldw	r3,12(r2)
10007154:	e0bfff17 	ldw	r2,-4(fp)
10007158:	10800317 	ldw	r2,12(r2)
1000715c:	18800226 	beq	r3,r2,10007168 <lodepng_color_mode_equal+0xe4>
10007160:	0005883a 	mov	r2,zero
10007164:	00001c06 	br	100071d8 <lodepng_color_mode_equal+0x154>
    for(i = 0; i != a->palettesize * 4; ++i)
10007168:	e03ffd15 	stw	zero,-12(fp)
1000716c:	00001206 	br	100071b8 <lodepng_color_mode_equal+0x134>
    {
      if(a->palette[i] != b->palette[i]) return 0;
10007170:	e0bffe17 	ldw	r2,-8(fp)
10007174:	10c00217 	ldw	r3,8(r2)
10007178:	e0bffd17 	ldw	r2,-12(fp)
1000717c:	1885883a 	add	r2,r3,r2
10007180:	10c00003 	ldbu	r3,0(r2)
10007184:	e0bfff17 	ldw	r2,-4(fp)
10007188:	11000217 	ldw	r4,8(r2)
1000718c:	e0bffd17 	ldw	r2,-12(fp)
10007190:	2085883a 	add	r2,r4,r2
10007194:	10800003 	ldbu	r2,0(r2)
10007198:	18c03fcc 	andi	r3,r3,255
1000719c:	10803fcc 	andi	r2,r2,255
100071a0:	18800226 	beq	r3,r2,100071ac <lodepng_color_mode_equal+0x128>
100071a4:	0005883a 	mov	r2,zero
100071a8:	00000b06 	br	100071d8 <lodepng_color_mode_equal+0x154>
  /*if one of the palette sizes is 0, then we consider it to be the same as the
  other: it means that e.g. the palette was not given by the user and should be
  considered the same as the palette inside the PNG.*/
  if(1/*a->palettesize != 0 && b->palettesize != 0*/) {
    if(a->palettesize != b->palettesize) return 0;
    for(i = 0; i != a->palettesize * 4; ++i)
100071ac:	e0bffd17 	ldw	r2,-12(fp)
100071b0:	10800044 	addi	r2,r2,1
100071b4:	e0bffd15 	stw	r2,-12(fp)
100071b8:	e0bffe17 	ldw	r2,-8(fp)
100071bc:	10800317 	ldw	r2,12(r2)
100071c0:	1085883a 	add	r2,r2,r2
100071c4:	1085883a 	add	r2,r2,r2
100071c8:	1007883a 	mov	r3,r2
100071cc:	e0bffd17 	ldw	r2,-12(fp)
100071d0:	18bfe71e 	bne	r3,r2,10007170 <__alt_data_end+0xf8007170>
    {
      if(a->palette[i] != b->palette[i]) return 0;
    }
  }
  return 1;
100071d4:	00800044 	movi	r2,1
}
100071d8:	e037883a 	mov	sp,fp
100071dc:	df000017 	ldw	fp,0(sp)
100071e0:	dec00104 	addi	sp,sp,4
100071e4:	f800283a 	ret

100071e8 <lodepng_palette_clear>:

void lodepng_palette_clear(LodePNGColorMode* info)
{
100071e8:	defffd04 	addi	sp,sp,-12
100071ec:	dfc00215 	stw	ra,8(sp)
100071f0:	df000115 	stw	fp,4(sp)
100071f4:	df000104 	addi	fp,sp,4
100071f8:	e13fff15 	stw	r4,-4(fp)
  if(info->palette) lodepng_free(info->palette);
100071fc:	e0bfff17 	ldw	r2,-4(fp)
10007200:	10800217 	ldw	r2,8(r2)
10007204:	10000426 	beq	r2,zero,10007218 <lodepng_palette_clear+0x30>
10007208:	e0bfff17 	ldw	r2,-4(fp)
1000720c:	10800217 	ldw	r2,8(r2)
10007210:	1009883a 	mov	r4,r2
10007214:	000025c0 	call	1000025c <lodepng_free>
  info->palette = 0;
10007218:	e0bfff17 	ldw	r2,-4(fp)
1000721c:	10000215 	stw	zero,8(r2)
  info->palettesize = 0;
10007220:	e0bfff17 	ldw	r2,-4(fp)
10007224:	10000315 	stw	zero,12(r2)
}
10007228:	e037883a 	mov	sp,fp
1000722c:	dfc00117 	ldw	ra,4(sp)
10007230:	df000017 	ldw	fp,0(sp)
10007234:	dec00204 	addi	sp,sp,8
10007238:	f800283a 	ret

1000723c <lodepng_palette_add>:

unsigned lodepng_palette_add(LodePNGColorMode* info,
                             unsigned char r, unsigned char g, unsigned char b, unsigned char a)
{
1000723c:	defff804 	addi	sp,sp,-32
10007240:	dfc00715 	stw	ra,28(sp)
10007244:	df000615 	stw	fp,24(sp)
10007248:	df000604 	addi	fp,sp,24
1000724c:	e13ffb15 	stw	r4,-20(fp)
10007250:	2809883a 	mov	r4,r5
10007254:	3007883a 	mov	r3,r6
10007258:	3805883a 	mov	r2,r7
1000725c:	e1400217 	ldw	r5,8(fp)
10007260:	e13ffc05 	stb	r4,-16(fp)
10007264:	e0fffd05 	stb	r3,-12(fp)
10007268:	e0bffe05 	stb	r2,-8(fp)
1000726c:	e17fff05 	stb	r5,-4(fp)
  unsigned char* data;
  /*the same resize technique as C++ std::vectors is used, and here it's made so that for a palette with
  the max of 256 colors, it'll have the exact alloc size*/
  if(!info->palette) /*allocate palette if empty*/
10007270:	e0bffb17 	ldw	r2,-20(fp)
10007274:	10800217 	ldw	r2,8(r2)
10007278:	10000d1e 	bne	r2,zero,100072b0 <lodepng_palette_add+0x74>
  {
    /*room for 256 colors with 4 bytes each*/
    data = (unsigned char*)lodepng_realloc(info->palette, 1024);
1000727c:	e0bffb17 	ldw	r2,-20(fp)
10007280:	10800217 	ldw	r2,8(r2)
10007284:	1009883a 	mov	r4,r2
10007288:	01410004 	movi	r5,1024
1000728c:	00002240 	call	10000224 <lodepng_realloc>
10007290:	e0bffa15 	stw	r2,-24(fp)
    if(!data) return 83; /*alloc fail*/
10007294:	e0bffa17 	ldw	r2,-24(fp)
10007298:	1000021e 	bne	r2,zero,100072a4 <lodepng_palette_add+0x68>
1000729c:	008014c4 	movi	r2,83
100072a0:	00003006 	br	10007364 <lodepng_palette_add+0x128>
    else info->palette = data;
100072a4:	e0bffb17 	ldw	r2,-20(fp)
100072a8:	e0fffa17 	ldw	r3,-24(fp)
100072ac:	10c00215 	stw	r3,8(r2)
  }
  info->palette[4 * info->palettesize + 0] = r;
100072b0:	e0bffb17 	ldw	r2,-20(fp)
100072b4:	10c00217 	ldw	r3,8(r2)
100072b8:	e0bffb17 	ldw	r2,-20(fp)
100072bc:	10800317 	ldw	r2,12(r2)
100072c0:	1085883a 	add	r2,r2,r2
100072c4:	1085883a 	add	r2,r2,r2
100072c8:	1885883a 	add	r2,r3,r2
100072cc:	e0fffc03 	ldbu	r3,-16(fp)
100072d0:	10c00005 	stb	r3,0(r2)
  info->palette[4 * info->palettesize + 1] = g;
100072d4:	e0bffb17 	ldw	r2,-20(fp)
100072d8:	10c00217 	ldw	r3,8(r2)
100072dc:	e0bffb17 	ldw	r2,-20(fp)
100072e0:	10800317 	ldw	r2,12(r2)
100072e4:	1085883a 	add	r2,r2,r2
100072e8:	1085883a 	add	r2,r2,r2
100072ec:	10800044 	addi	r2,r2,1
100072f0:	1885883a 	add	r2,r3,r2
100072f4:	e0fffd03 	ldbu	r3,-12(fp)
100072f8:	10c00005 	stb	r3,0(r2)
  info->palette[4 * info->palettesize + 2] = b;
100072fc:	e0bffb17 	ldw	r2,-20(fp)
10007300:	10c00217 	ldw	r3,8(r2)
10007304:	e0bffb17 	ldw	r2,-20(fp)
10007308:	10800317 	ldw	r2,12(r2)
1000730c:	1085883a 	add	r2,r2,r2
10007310:	1085883a 	add	r2,r2,r2
10007314:	10800084 	addi	r2,r2,2
10007318:	1885883a 	add	r2,r3,r2
1000731c:	e0fffe03 	ldbu	r3,-8(fp)
10007320:	10c00005 	stb	r3,0(r2)
  info->palette[4 * info->palettesize + 3] = a;
10007324:	e0bffb17 	ldw	r2,-20(fp)
10007328:	10c00217 	ldw	r3,8(r2)
1000732c:	e0bffb17 	ldw	r2,-20(fp)
10007330:	10800317 	ldw	r2,12(r2)
10007334:	1085883a 	add	r2,r2,r2
10007338:	1085883a 	add	r2,r2,r2
1000733c:	108000c4 	addi	r2,r2,3
10007340:	1885883a 	add	r2,r3,r2
10007344:	e0ffff03 	ldbu	r3,-4(fp)
10007348:	10c00005 	stb	r3,0(r2)
  ++info->palettesize;
1000734c:	e0bffb17 	ldw	r2,-20(fp)
10007350:	10800317 	ldw	r2,12(r2)
10007354:	10c00044 	addi	r3,r2,1
10007358:	e0bffb17 	ldw	r2,-20(fp)
1000735c:	10c00315 	stw	r3,12(r2)
  return 0;
10007360:	0005883a 	mov	r2,zero
}
10007364:	e037883a 	mov	sp,fp
10007368:	dfc00117 	ldw	ra,4(sp)
1000736c:	df000017 	ldw	fp,0(sp)
10007370:	dec00204 	addi	sp,sp,8
10007374:	f800283a 	ret

10007378 <lodepng_get_bpp>:

unsigned lodepng_get_bpp(const LodePNGColorMode* info)
{
10007378:	defffd04 	addi	sp,sp,-12
1000737c:	dfc00215 	stw	ra,8(sp)
10007380:	df000115 	stw	fp,4(sp)
10007384:	df000104 	addi	fp,sp,4
10007388:	e13fff15 	stw	r4,-4(fp)
  /*calculate bits per pixel out of colortype and bitdepth*/
  return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
1000738c:	e0bfff17 	ldw	r2,-4(fp)
10007390:	10c00017 	ldw	r3,0(r2)
10007394:	e0bfff17 	ldw	r2,-4(fp)
10007398:	10800117 	ldw	r2,4(r2)
1000739c:	1809883a 	mov	r4,r3
100073a0:	100b883a 	mov	r5,r2
100073a4:	0006e880 	call	10006e88 <lodepng_get_bpp_lct>
}
100073a8:	e037883a 	mov	sp,fp
100073ac:	dfc00117 	ldw	ra,4(sp)
100073b0:	df000017 	ldw	fp,0(sp)
100073b4:	dec00204 	addi	sp,sp,8
100073b8:	f800283a 	ret

100073bc <lodepng_get_channels>:

unsigned lodepng_get_channels(const LodePNGColorMode* info)
{
100073bc:	defffd04 	addi	sp,sp,-12
100073c0:	dfc00215 	stw	ra,8(sp)
100073c4:	df000115 	stw	fp,4(sp)
100073c8:	df000104 	addi	fp,sp,4
100073cc:	e13fff15 	stw	r4,-4(fp)
  return getNumColorChannels(info->colortype);
100073d0:	e0bfff17 	ldw	r2,-4(fp)
100073d4:	10800017 	ldw	r2,0(r2)
100073d8:	1009883a 	mov	r4,r2
100073dc:	0006df40 	call	10006df4 <getNumColorChannels>
}
100073e0:	e037883a 	mov	sp,fp
100073e4:	dfc00117 	ldw	ra,4(sp)
100073e8:	df000017 	ldw	fp,0(sp)
100073ec:	dec00204 	addi	sp,sp,8
100073f0:	f800283a 	ret

100073f4 <lodepng_is_greyscale_type>:

unsigned lodepng_is_greyscale_type(const LodePNGColorMode* info)
{
100073f4:	defffe04 	addi	sp,sp,-8
100073f8:	df000115 	stw	fp,4(sp)
100073fc:	df000104 	addi	fp,sp,4
10007400:	e13fff15 	stw	r4,-4(fp)
  return info->colortype == LCT_GREY || info->colortype == LCT_GREY_ALPHA;
10007404:	e0bfff17 	ldw	r2,-4(fp)
10007408:	10800017 	ldw	r2,0(r2)
1000740c:	10000426 	beq	r2,zero,10007420 <lodepng_is_greyscale_type+0x2c>
10007410:	e0bfff17 	ldw	r2,-4(fp)
10007414:	10800017 	ldw	r2,0(r2)
10007418:	10800118 	cmpnei	r2,r2,4
1000741c:	1000021e 	bne	r2,zero,10007428 <lodepng_is_greyscale_type+0x34>
10007420:	00800044 	movi	r2,1
10007424:	00000106 	br	1000742c <lodepng_is_greyscale_type+0x38>
10007428:	0005883a 	mov	r2,zero
}
1000742c:	e037883a 	mov	sp,fp
10007430:	df000017 	ldw	fp,0(sp)
10007434:	dec00104 	addi	sp,sp,4
10007438:	f800283a 	ret

1000743c <lodepng_is_alpha_type>:

unsigned lodepng_is_alpha_type(const LodePNGColorMode* info)
{
1000743c:	defffe04 	addi	sp,sp,-8
10007440:	df000115 	stw	fp,4(sp)
10007444:	df000104 	addi	fp,sp,4
10007448:	e13fff15 	stw	r4,-4(fp)
  return (info->colortype & 4) != 0; /*4 or 6*/
1000744c:	e0bfff17 	ldw	r2,-4(fp)
10007450:	10800017 	ldw	r2,0(r2)
10007454:	1080010c 	andi	r2,r2,4
10007458:	1004c03a 	cmpne	r2,r2,zero
1000745c:	10803fcc 	andi	r2,r2,255
}
10007460:	e037883a 	mov	sp,fp
10007464:	df000017 	ldw	fp,0(sp)
10007468:	dec00104 	addi	sp,sp,4
1000746c:	f800283a 	ret

10007470 <lodepng_is_palette_type>:

unsigned lodepng_is_palette_type(const LodePNGColorMode* info)
{
10007470:	defffe04 	addi	sp,sp,-8
10007474:	df000115 	stw	fp,4(sp)
10007478:	df000104 	addi	fp,sp,4
1000747c:	e13fff15 	stw	r4,-4(fp)
  return info->colortype == LCT_PALETTE;
10007480:	e0bfff17 	ldw	r2,-4(fp)
10007484:	10800017 	ldw	r2,0(r2)
10007488:	108000e0 	cmpeqi	r2,r2,3
1000748c:	10803fcc 	andi	r2,r2,255
}
10007490:	e037883a 	mov	sp,fp
10007494:	df000017 	ldw	fp,0(sp)
10007498:	dec00104 	addi	sp,sp,4
1000749c:	f800283a 	ret

100074a0 <lodepng_has_palette_alpha>:

unsigned lodepng_has_palette_alpha(const LodePNGColorMode* info)
{
100074a0:	defffd04 	addi	sp,sp,-12
100074a4:	df000215 	stw	fp,8(sp)
100074a8:	df000204 	addi	fp,sp,8
100074ac:	e13fff15 	stw	r4,-4(fp)
  size_t i;
  for(i = 0; i != info->palettesize; ++i)
100074b0:	e03ffe15 	stw	zero,-8(fp)
100074b4:	00001006 	br	100074f8 <lodepng_has_palette_alpha+0x58>
  {
    if(info->palette[i * 4 + 3] < 255) return 1;
100074b8:	e0bfff17 	ldw	r2,-4(fp)
100074bc:	10c00217 	ldw	r3,8(r2)
100074c0:	e0bffe17 	ldw	r2,-8(fp)
100074c4:	1085883a 	add	r2,r2,r2
100074c8:	1085883a 	add	r2,r2,r2
100074cc:	108000c4 	addi	r2,r2,3
100074d0:	1885883a 	add	r2,r3,r2
100074d4:	10800003 	ldbu	r2,0(r2)
100074d8:	10803fcc 	andi	r2,r2,255
100074dc:	10803fe0 	cmpeqi	r2,r2,255
100074e0:	1000021e 	bne	r2,zero,100074ec <lodepng_has_palette_alpha+0x4c>
100074e4:	00800044 	movi	r2,1
100074e8:	00000806 	br	1000750c <lodepng_has_palette_alpha+0x6c>
}

unsigned lodepng_has_palette_alpha(const LodePNGColorMode* info)
{
  size_t i;
  for(i = 0; i != info->palettesize; ++i)
100074ec:	e0bffe17 	ldw	r2,-8(fp)
100074f0:	10800044 	addi	r2,r2,1
100074f4:	e0bffe15 	stw	r2,-8(fp)
100074f8:	e0bfff17 	ldw	r2,-4(fp)
100074fc:	10c00317 	ldw	r3,12(r2)
10007500:	e0bffe17 	ldw	r2,-8(fp)
10007504:	18bfec1e 	bne	r3,r2,100074b8 <__alt_data_end+0xf80074b8>
  {
    if(info->palette[i * 4 + 3] < 255) return 1;
  }
  return 0;
10007508:	0005883a 	mov	r2,zero
}
1000750c:	e037883a 	mov	sp,fp
10007510:	df000017 	ldw	fp,0(sp)
10007514:	dec00104 	addi	sp,sp,4
10007518:	f800283a 	ret

1000751c <lodepng_can_have_alpha>:

unsigned lodepng_can_have_alpha(const LodePNGColorMode* info)
{
1000751c:	defffd04 	addi	sp,sp,-12
10007520:	dfc00215 	stw	ra,8(sp)
10007524:	df000115 	stw	fp,4(sp)
10007528:	df000104 	addi	fp,sp,4
1000752c:	e13fff15 	stw	r4,-4(fp)
  return info->key_defined
10007530:	e0bfff17 	ldw	r2,-4(fp)
10007534:	10800417 	ldw	r2,16(r2)
      || lodepng_is_alpha_type(info)
      || lodepng_has_palette_alpha(info);
10007538:	1000061e 	bne	r2,zero,10007554 <lodepng_can_have_alpha+0x38>
}

unsigned lodepng_can_have_alpha(const LodePNGColorMode* info)
{
  return info->key_defined
      || lodepng_is_alpha_type(info)
1000753c:	e13fff17 	ldw	r4,-4(fp)
10007540:	000743c0 	call	1000743c <lodepng_is_alpha_type>
10007544:	1000031e 	bne	r2,zero,10007554 <lodepng_can_have_alpha+0x38>
      || lodepng_has_palette_alpha(info);
10007548:	e13fff17 	ldw	r4,-4(fp)
1000754c:	00074a00 	call	100074a0 <lodepng_has_palette_alpha>
10007550:	10000226 	beq	r2,zero,1000755c <lodepng_can_have_alpha+0x40>
10007554:	00800044 	movi	r2,1
10007558:	00000106 	br	10007560 <lodepng_can_have_alpha+0x44>
1000755c:	0005883a 	mov	r2,zero
}
10007560:	e037883a 	mov	sp,fp
10007564:	dfc00117 	ldw	ra,4(sp)
10007568:	df000017 	ldw	fp,0(sp)
1000756c:	dec00204 	addi	sp,sp,8
10007570:	f800283a 	ret

10007574 <lodepng_get_raw_size>:

size_t lodepng_get_raw_size(unsigned w, unsigned h, const LodePNGColorMode* color)
{
10007574:	defffa04 	addi	sp,sp,-24
10007578:	dfc00515 	stw	ra,20(sp)
1000757c:	df000415 	stw	fp,16(sp)
10007580:	dc000315 	stw	r16,12(sp)
10007584:	df000304 	addi	fp,sp,12
10007588:	e13ffd15 	stw	r4,-12(fp)
1000758c:	e17ffe15 	stw	r5,-8(fp)
10007590:	e1bfff15 	stw	r6,-4(fp)
  return (w * h * lodepng_get_bpp(color) + 7) / 8;
10007594:	e13ffd17 	ldw	r4,-12(fp)
10007598:	e17ffe17 	ldw	r5,-8(fp)
1000759c:	00146fc0 	call	100146fc <__mulsi3>
100075a0:	1021883a 	mov	r16,r2
100075a4:	e13fff17 	ldw	r4,-4(fp)
100075a8:	00073780 	call	10007378 <lodepng_get_bpp>
100075ac:	8009883a 	mov	r4,r16
100075b0:	100b883a 	mov	r5,r2
100075b4:	00146fc0 	call	100146fc <__mulsi3>
100075b8:	108001c4 	addi	r2,r2,7
100075bc:	1004d0fa 	srli	r2,r2,3
}
100075c0:	e037883a 	mov	sp,fp
100075c4:	dfc00217 	ldw	ra,8(sp)
100075c8:	df000117 	ldw	fp,4(sp)
100075cc:	dc000017 	ldw	r16,0(sp)
100075d0:	dec00304 	addi	sp,sp,12
100075d4:	f800283a 	ret

100075d8 <lodepng_get_raw_size_lct>:

size_t lodepng_get_raw_size_lct(unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth)
{
100075d8:	defff904 	addi	sp,sp,-28
100075dc:	dfc00615 	stw	ra,24(sp)
100075e0:	df000515 	stw	fp,20(sp)
100075e4:	dc000415 	stw	r16,16(sp)
100075e8:	df000404 	addi	fp,sp,16
100075ec:	e13ffc15 	stw	r4,-16(fp)
100075f0:	e17ffd15 	stw	r5,-12(fp)
100075f4:	e1bffe15 	stw	r6,-8(fp)
100075f8:	e1ffff15 	stw	r7,-4(fp)
  return (w * h * lodepng_get_bpp_lct(colortype, bitdepth) + 7) / 8;
100075fc:	e13ffc17 	ldw	r4,-16(fp)
10007600:	e17ffd17 	ldw	r5,-12(fp)
10007604:	00146fc0 	call	100146fc <__mulsi3>
10007608:	1021883a 	mov	r16,r2
1000760c:	e13ffe17 	ldw	r4,-8(fp)
10007610:	e17fff17 	ldw	r5,-4(fp)
10007614:	0006e880 	call	10006e88 <lodepng_get_bpp_lct>
10007618:	8009883a 	mov	r4,r16
1000761c:	100b883a 	mov	r5,r2
10007620:	00146fc0 	call	100146fc <__mulsi3>
10007624:	108001c4 	addi	r2,r2,7
10007628:	1004d0fa 	srli	r2,r2,3
}
1000762c:	e037883a 	mov	sp,fp
10007630:	dfc00217 	ldw	ra,8(sp)
10007634:	df000117 	ldw	fp,4(sp)
10007638:	dc000017 	ldw	r16,0(sp)
1000763c:	dec00304 	addi	sp,sp,12
10007640:	f800283a 	ret

10007644 <lodepng_get_raw_size_idat>:

#ifdef LODEPNG_COMPILE_PNG
#ifdef LODEPNG_COMPILE_DECODER
/*in an idat chunk, each scanline is a multiple of 8 bits, unlike the lodepng output buffer*/
static size_t lodepng_get_raw_size_idat(unsigned w, unsigned h, const LodePNGColorMode* color)
{
10007644:	defffb04 	addi	sp,sp,-20
10007648:	dfc00415 	stw	ra,16(sp)
1000764c:	df000315 	stw	fp,12(sp)
10007650:	df000304 	addi	fp,sp,12
10007654:	e13ffd15 	stw	r4,-12(fp)
10007658:	e17ffe15 	stw	r5,-8(fp)
1000765c:	e1bfff15 	stw	r6,-4(fp)
  return h * ((w * lodepng_get_bpp(color) + 7) / 8);
10007660:	e13fff17 	ldw	r4,-4(fp)
10007664:	00073780 	call	10007378 <lodepng_get_bpp>
10007668:	1009883a 	mov	r4,r2
1000766c:	e17ffd17 	ldw	r5,-12(fp)
10007670:	00146fc0 	call	100146fc <__mulsi3>
10007674:	108001c4 	addi	r2,r2,7
10007678:	1004d0fa 	srli	r2,r2,3
1000767c:	1009883a 	mov	r4,r2
10007680:	e17ffe17 	ldw	r5,-8(fp)
10007684:	00146fc0 	call	100146fc <__mulsi3>
}
10007688:	e037883a 	mov	sp,fp
1000768c:	dfc00117 	ldw	ra,4(sp)
10007690:	df000017 	ldw	fp,0(sp)
10007694:	dec00204 	addi	sp,sp,8
10007698:	f800283a 	ret

1000769c <LodePNGUnknownChunks_init>:
#endif /*LODEPNG_COMPILE_PNG*/

#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS

static void LodePNGUnknownChunks_init(LodePNGInfo* info)
{
1000769c:	defffd04 	addi	sp,sp,-12
100076a0:	df000215 	stw	fp,8(sp)
100076a4:	df000204 	addi	fp,sp,8
100076a8:	e13fff15 	stw	r4,-4(fp)
  unsigned i;
  for(i = 0; i != 3; ++i) info->unknown_chunks_data[i] = 0;
100076ac:	e03ffe15 	stw	zero,-8(fp)
100076b0:	00000a06 	br	100076dc <LodePNGUnknownChunks_init+0x40>
100076b4:	e0ffff17 	ldw	r3,-4(fp)
100076b8:	e0bffe17 	ldw	r2,-8(fp)
100076bc:	10800884 	addi	r2,r2,34
100076c0:	1085883a 	add	r2,r2,r2
100076c4:	1085883a 	add	r2,r2,r2
100076c8:	1885883a 	add	r2,r3,r2
100076cc:	10000015 	stw	zero,0(r2)
100076d0:	e0bffe17 	ldw	r2,-8(fp)
100076d4:	10800044 	addi	r2,r2,1
100076d8:	e0bffe15 	stw	r2,-8(fp)
100076dc:	e0bffe17 	ldw	r2,-8(fp)
100076e0:	108000d8 	cmpnei	r2,r2,3
100076e4:	103ff31e 	bne	r2,zero,100076b4 <__alt_data_end+0xf80076b4>
  for(i = 0; i != 3; ++i) info->unknown_chunks_size[i] = 0;
100076e8:	e03ffe15 	stw	zero,-8(fp)
100076ec:	00000a06 	br	10007718 <LodePNGUnknownChunks_init+0x7c>
100076f0:	e0ffff17 	ldw	r3,-4(fp)
100076f4:	e0bffe17 	ldw	r2,-8(fp)
100076f8:	10800944 	addi	r2,r2,37
100076fc:	1085883a 	add	r2,r2,r2
10007700:	1085883a 	add	r2,r2,r2
10007704:	1885883a 	add	r2,r3,r2
10007708:	10000015 	stw	zero,0(r2)
1000770c:	e0bffe17 	ldw	r2,-8(fp)
10007710:	10800044 	addi	r2,r2,1
10007714:	e0bffe15 	stw	r2,-8(fp)
10007718:	e0bffe17 	ldw	r2,-8(fp)
1000771c:	108000d8 	cmpnei	r2,r2,3
10007720:	103ff31e 	bne	r2,zero,100076f0 <__alt_data_end+0xf80076f0>
}
10007724:	e037883a 	mov	sp,fp
10007728:	df000017 	ldw	fp,0(sp)
1000772c:	dec00104 	addi	sp,sp,4
10007730:	f800283a 	ret

10007734 <LodePNGUnknownChunks_cleanup>:

static void LodePNGUnknownChunks_cleanup(LodePNGInfo* info)
{
10007734:	defffc04 	addi	sp,sp,-16
10007738:	dfc00315 	stw	ra,12(sp)
1000773c:	df000215 	stw	fp,8(sp)
10007740:	df000204 	addi	fp,sp,8
10007744:	e13fff15 	stw	r4,-4(fp)
  unsigned i;
  for(i = 0; i != 3; ++i) lodepng_free(info->unknown_chunks_data[i]);
10007748:	e03ffe15 	stw	zero,-8(fp)
1000774c:	00000c06 	br	10007780 <LodePNGUnknownChunks_cleanup+0x4c>
10007750:	e0ffff17 	ldw	r3,-4(fp)
10007754:	e0bffe17 	ldw	r2,-8(fp)
10007758:	10800884 	addi	r2,r2,34
1000775c:	1085883a 	add	r2,r2,r2
10007760:	1085883a 	add	r2,r2,r2
10007764:	1885883a 	add	r2,r3,r2
10007768:	10800017 	ldw	r2,0(r2)
1000776c:	1009883a 	mov	r4,r2
10007770:	000025c0 	call	1000025c <lodepng_free>
10007774:	e0bffe17 	ldw	r2,-8(fp)
10007778:	10800044 	addi	r2,r2,1
1000777c:	e0bffe15 	stw	r2,-8(fp)
10007780:	e0bffe17 	ldw	r2,-8(fp)
10007784:	108000d8 	cmpnei	r2,r2,3
10007788:	103ff11e 	bne	r2,zero,10007750 <__alt_data_end+0xf8007750>
}
1000778c:	e037883a 	mov	sp,fp
10007790:	dfc00117 	ldw	ra,4(sp)
10007794:	df000017 	ldw	fp,0(sp)
10007798:	dec00204 	addi	sp,sp,8
1000779c:	f800283a 	ret

100077a0 <LodePNGUnknownChunks_copy>:

static unsigned LodePNGUnknownChunks_copy(LodePNGInfo* dest, const LodePNGInfo* src)
{
100077a0:	defffa04 	addi	sp,sp,-24
100077a4:	dfc00515 	stw	ra,20(sp)
100077a8:	df000415 	stw	fp,16(sp)
100077ac:	df000404 	addi	fp,sp,16
100077b0:	e13ffe15 	stw	r4,-8(fp)
100077b4:	e17fff15 	stw	r5,-4(fp)
  unsigned i;

  LodePNGUnknownChunks_cleanup(dest);
100077b8:	e13ffe17 	ldw	r4,-8(fp)
100077bc:	00077340 	call	10007734 <LodePNGUnknownChunks_cleanup>

  for(i = 0; i != 3; ++i)
100077c0:	e03ffc15 	stw	zero,-16(fp)
100077c4:	00005606 	br	10007920 <LodePNGUnknownChunks_copy+0x180>
  {
    size_t j;
    dest->unknown_chunks_size[i] = src->unknown_chunks_size[i];
100077c8:	e0ffff17 	ldw	r3,-4(fp)
100077cc:	e0bffc17 	ldw	r2,-16(fp)
100077d0:	10800944 	addi	r2,r2,37
100077d4:	1085883a 	add	r2,r2,r2
100077d8:	1085883a 	add	r2,r2,r2
100077dc:	1885883a 	add	r2,r3,r2
100077e0:	10c00017 	ldw	r3,0(r2)
100077e4:	e13ffe17 	ldw	r4,-8(fp)
100077e8:	e0bffc17 	ldw	r2,-16(fp)
100077ec:	10800944 	addi	r2,r2,37
100077f0:	1085883a 	add	r2,r2,r2
100077f4:	1085883a 	add	r2,r2,r2
100077f8:	2085883a 	add	r2,r4,r2
100077fc:	10c00015 	stw	r3,0(r2)
    dest->unknown_chunks_data[i] = (unsigned char*)lodepng_malloc(src->unknown_chunks_size[i]);
10007800:	e0ffff17 	ldw	r3,-4(fp)
10007804:	e0bffc17 	ldw	r2,-16(fp)
10007808:	10800944 	addi	r2,r2,37
1000780c:	1085883a 	add	r2,r2,r2
10007810:	1085883a 	add	r2,r2,r2
10007814:	1885883a 	add	r2,r3,r2
10007818:	10800017 	ldw	r2,0(r2)
1000781c:	1009883a 	mov	r4,r2
10007820:	00001f40 	call	100001f4 <lodepng_malloc>
10007824:	1007883a 	mov	r3,r2
10007828:	e13ffe17 	ldw	r4,-8(fp)
1000782c:	e0bffc17 	ldw	r2,-16(fp)
10007830:	10800884 	addi	r2,r2,34
10007834:	1085883a 	add	r2,r2,r2
10007838:	1085883a 	add	r2,r2,r2
1000783c:	2085883a 	add	r2,r4,r2
10007840:	10c00015 	stw	r3,0(r2)
    if(!dest->unknown_chunks_data[i] && dest->unknown_chunks_size[i]) return 83; /*alloc fail*/
10007844:	e0fffe17 	ldw	r3,-8(fp)
10007848:	e0bffc17 	ldw	r2,-16(fp)
1000784c:	10800884 	addi	r2,r2,34
10007850:	1085883a 	add	r2,r2,r2
10007854:	1085883a 	add	r2,r2,r2
10007858:	1885883a 	add	r2,r3,r2
1000785c:	10800017 	ldw	r2,0(r2)
10007860:	10000a1e 	bne	r2,zero,1000788c <LodePNGUnknownChunks_copy+0xec>
10007864:	e0fffe17 	ldw	r3,-8(fp)
10007868:	e0bffc17 	ldw	r2,-16(fp)
1000786c:	10800944 	addi	r2,r2,37
10007870:	1085883a 	add	r2,r2,r2
10007874:	1085883a 	add	r2,r2,r2
10007878:	1885883a 	add	r2,r3,r2
1000787c:	10800017 	ldw	r2,0(r2)
10007880:	10000226 	beq	r2,zero,1000788c <LodePNGUnknownChunks_copy+0xec>
10007884:	008014c4 	movi	r2,83
10007888:	00002906 	br	10007930 <LodePNGUnknownChunks_copy+0x190>
    for(j = 0; j < src->unknown_chunks_size[i]; ++j)
1000788c:	e03ffd15 	stw	zero,-12(fp)
10007890:	00001706 	br	100078f0 <LodePNGUnknownChunks_copy+0x150>
    {
      dest->unknown_chunks_data[i][j] = src->unknown_chunks_data[i][j];
10007894:	e0fffe17 	ldw	r3,-8(fp)
10007898:	e0bffc17 	ldw	r2,-16(fp)
1000789c:	10800884 	addi	r2,r2,34
100078a0:	1085883a 	add	r2,r2,r2
100078a4:	1085883a 	add	r2,r2,r2
100078a8:	1885883a 	add	r2,r3,r2
100078ac:	10c00017 	ldw	r3,0(r2)
100078b0:	e0bffd17 	ldw	r2,-12(fp)
100078b4:	1887883a 	add	r3,r3,r2
100078b8:	e13fff17 	ldw	r4,-4(fp)
100078bc:	e0bffc17 	ldw	r2,-16(fp)
100078c0:	10800884 	addi	r2,r2,34
100078c4:	1085883a 	add	r2,r2,r2
100078c8:	1085883a 	add	r2,r2,r2
100078cc:	2085883a 	add	r2,r4,r2
100078d0:	11000017 	ldw	r4,0(r2)
100078d4:	e0bffd17 	ldw	r2,-12(fp)
100078d8:	2085883a 	add	r2,r4,r2
100078dc:	10800003 	ldbu	r2,0(r2)
100078e0:	18800005 	stb	r2,0(r3)
  {
    size_t j;
    dest->unknown_chunks_size[i] = src->unknown_chunks_size[i];
    dest->unknown_chunks_data[i] = (unsigned char*)lodepng_malloc(src->unknown_chunks_size[i]);
    if(!dest->unknown_chunks_data[i] && dest->unknown_chunks_size[i]) return 83; /*alloc fail*/
    for(j = 0; j < src->unknown_chunks_size[i]; ++j)
100078e4:	e0bffd17 	ldw	r2,-12(fp)
100078e8:	10800044 	addi	r2,r2,1
100078ec:	e0bffd15 	stw	r2,-12(fp)
100078f0:	e0ffff17 	ldw	r3,-4(fp)
100078f4:	e0bffc17 	ldw	r2,-16(fp)
100078f8:	10800944 	addi	r2,r2,37
100078fc:	1085883a 	add	r2,r2,r2
10007900:	1085883a 	add	r2,r2,r2
10007904:	1885883a 	add	r2,r3,r2
10007908:	10800017 	ldw	r2,0(r2)
1000790c:	e0fffd17 	ldw	r3,-12(fp)
10007910:	18bfe036 	bltu	r3,r2,10007894 <__alt_data_end+0xf8007894>
{
  unsigned i;

  LodePNGUnknownChunks_cleanup(dest);

  for(i = 0; i != 3; ++i)
10007914:	e0bffc17 	ldw	r2,-16(fp)
10007918:	10800044 	addi	r2,r2,1
1000791c:	e0bffc15 	stw	r2,-16(fp)
10007920:	e0bffc17 	ldw	r2,-16(fp)
10007924:	108000d8 	cmpnei	r2,r2,3
10007928:	103fa71e 	bne	r2,zero,100077c8 <__alt_data_end+0xf80077c8>
    {
      dest->unknown_chunks_data[i][j] = src->unknown_chunks_data[i][j];
    }
  }

  return 0;
1000792c:	0005883a 	mov	r2,zero
}
10007930:	e037883a 	mov	sp,fp
10007934:	dfc00117 	ldw	ra,4(sp)
10007938:	df000017 	ldw	fp,0(sp)
1000793c:	dec00204 	addi	sp,sp,8
10007940:	f800283a 	ret

10007944 <LodePNGText_init>:

/******************************************************************************/

static void LodePNGText_init(LodePNGInfo* info)
{
10007944:	defffe04 	addi	sp,sp,-8
10007948:	df000115 	stw	fp,4(sp)
1000794c:	df000104 	addi	fp,sp,4
10007950:	e13fff15 	stw	r4,-4(fp)
  info->text_num = 0;
10007954:	e0bfff17 	ldw	r2,-4(fp)
10007958:	10000f15 	stw	zero,60(r2)
  info->text_keys = NULL;
1000795c:	e0bfff17 	ldw	r2,-4(fp)
10007960:	10001015 	stw	zero,64(r2)
  info->text_strings = NULL;
10007964:	e0bfff17 	ldw	r2,-4(fp)
10007968:	10001115 	stw	zero,68(r2)
}
1000796c:	e037883a 	mov	sp,fp
10007970:	df000017 	ldw	fp,0(sp)
10007974:	dec00104 	addi	sp,sp,4
10007978:	f800283a 	ret

1000797c <LodePNGText_cleanup>:

static void LodePNGText_cleanup(LodePNGInfo* info)
{
1000797c:	defffc04 	addi	sp,sp,-16
10007980:	dfc00315 	stw	ra,12(sp)
10007984:	df000215 	stw	fp,8(sp)
10007988:	df000204 	addi	fp,sp,8
1000798c:	e13fff15 	stw	r4,-4(fp)
  size_t i;
  for(i = 0; i != info->text_num; ++i)
10007990:	e03ffe15 	stw	zero,-8(fp)
10007994:	00001306 	br	100079e4 <LodePNGText_cleanup+0x68>
  {
    string_cleanup(&info->text_keys[i]);
10007998:	e0bfff17 	ldw	r2,-4(fp)
1000799c:	10c01017 	ldw	r3,64(r2)
100079a0:	e0bffe17 	ldw	r2,-8(fp)
100079a4:	1085883a 	add	r2,r2,r2
100079a8:	1085883a 	add	r2,r2,r2
100079ac:	1885883a 	add	r2,r3,r2
100079b0:	1009883a 	mov	r4,r2
100079b4:	00009180 	call	10000918 <string_cleanup>
    string_cleanup(&info->text_strings[i]);
100079b8:	e0bfff17 	ldw	r2,-4(fp)
100079bc:	10c01117 	ldw	r3,68(r2)
100079c0:	e0bffe17 	ldw	r2,-8(fp)
100079c4:	1085883a 	add	r2,r2,r2
100079c8:	1085883a 	add	r2,r2,r2
100079cc:	1885883a 	add	r2,r3,r2
100079d0:	1009883a 	mov	r4,r2
100079d4:	00009180 	call	10000918 <string_cleanup>
}

static void LodePNGText_cleanup(LodePNGInfo* info)
{
  size_t i;
  for(i = 0; i != info->text_num; ++i)
100079d8:	e0bffe17 	ldw	r2,-8(fp)
100079dc:	10800044 	addi	r2,r2,1
100079e0:	e0bffe15 	stw	r2,-8(fp)
100079e4:	e0bfff17 	ldw	r2,-4(fp)
100079e8:	10c00f17 	ldw	r3,60(r2)
100079ec:	e0bffe17 	ldw	r2,-8(fp)
100079f0:	18bfe91e 	bne	r3,r2,10007998 <__alt_data_end+0xf8007998>
  {
    string_cleanup(&info->text_keys[i]);
    string_cleanup(&info->text_strings[i]);
  }
  lodepng_free(info->text_keys);
100079f4:	e0bfff17 	ldw	r2,-4(fp)
100079f8:	10801017 	ldw	r2,64(r2)
100079fc:	1009883a 	mov	r4,r2
10007a00:	000025c0 	call	1000025c <lodepng_free>
  lodepng_free(info->text_strings);
10007a04:	e0bfff17 	ldw	r2,-4(fp)
10007a08:	10801117 	ldw	r2,68(r2)
10007a0c:	1009883a 	mov	r4,r2
10007a10:	000025c0 	call	1000025c <lodepng_free>
}
10007a14:	e037883a 	mov	sp,fp
10007a18:	dfc00117 	ldw	ra,4(sp)
10007a1c:	df000017 	ldw	fp,0(sp)
10007a20:	dec00204 	addi	sp,sp,8
10007a24:	f800283a 	ret

10007a28 <LodePNGText_copy>:

static unsigned LodePNGText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
{
10007a28:	defffa04 	addi	sp,sp,-24
10007a2c:	dfc00515 	stw	ra,20(sp)
10007a30:	df000415 	stw	fp,16(sp)
10007a34:	df000404 	addi	fp,sp,16
10007a38:	e13ffe15 	stw	r4,-8(fp)
10007a3c:	e17fff15 	stw	r5,-4(fp)
  size_t i = 0;
10007a40:	e03ffc15 	stw	zero,-16(fp)
  dest->text_keys = 0;
10007a44:	e0bffe17 	ldw	r2,-8(fp)
10007a48:	10001015 	stw	zero,64(r2)
  dest->text_strings = 0;
10007a4c:	e0bffe17 	ldw	r2,-8(fp)
10007a50:	10001115 	stw	zero,68(r2)
  dest->text_num = 0;
10007a54:	e0bffe17 	ldw	r2,-8(fp)
10007a58:	10000f15 	stw	zero,60(r2)
  for(i = 0; i != source->text_num; ++i)
10007a5c:	e03ffc15 	stw	zero,-16(fp)
10007a60:	00001a06 	br	10007acc <LodePNGText_copy+0xa4>
  {
    CERROR_TRY_RETURN(lodepng_add_text(dest, source->text_keys[i], source->text_strings[i]));
10007a64:	e0bfff17 	ldw	r2,-4(fp)
10007a68:	10c01017 	ldw	r3,64(r2)
10007a6c:	e0bffc17 	ldw	r2,-16(fp)
10007a70:	1085883a 	add	r2,r2,r2
10007a74:	1085883a 	add	r2,r2,r2
10007a78:	1885883a 	add	r2,r3,r2
10007a7c:	10c00017 	ldw	r3,0(r2)
10007a80:	e0bfff17 	ldw	r2,-4(fp)
10007a84:	11001117 	ldw	r4,68(r2)
10007a88:	e0bffc17 	ldw	r2,-16(fp)
10007a8c:	1085883a 	add	r2,r2,r2
10007a90:	1085883a 	add	r2,r2,r2
10007a94:	2085883a 	add	r2,r4,r2
10007a98:	10800017 	ldw	r2,0(r2)
10007a9c:	e13ffe17 	ldw	r4,-8(fp)
10007aa0:	180b883a 	mov	r5,r3
10007aa4:	100d883a 	mov	r6,r2
10007aa8:	0007b240 	call	10007b24 <lodepng_add_text>
10007aac:	e0bffd15 	stw	r2,-12(fp)
10007ab0:	e0bffd17 	ldw	r2,-12(fp)
10007ab4:	10000226 	beq	r2,zero,10007ac0 <LodePNGText_copy+0x98>
10007ab8:	e0bffd17 	ldw	r2,-12(fp)
10007abc:	00000806 	br	10007ae0 <LodePNGText_copy+0xb8>
{
  size_t i = 0;
  dest->text_keys = 0;
  dest->text_strings = 0;
  dest->text_num = 0;
  for(i = 0; i != source->text_num; ++i)
10007ac0:	e0bffc17 	ldw	r2,-16(fp)
10007ac4:	10800044 	addi	r2,r2,1
10007ac8:	e0bffc15 	stw	r2,-16(fp)
10007acc:	e0bfff17 	ldw	r2,-4(fp)
10007ad0:	10c00f17 	ldw	r3,60(r2)
10007ad4:	e0bffc17 	ldw	r2,-16(fp)
10007ad8:	18bfe21e 	bne	r3,r2,10007a64 <__alt_data_end+0xf8007a64>
  {
    CERROR_TRY_RETURN(lodepng_add_text(dest, source->text_keys[i], source->text_strings[i]));
  }
  return 0;
10007adc:	0005883a 	mov	r2,zero
}
10007ae0:	e037883a 	mov	sp,fp
10007ae4:	dfc00117 	ldw	ra,4(sp)
10007ae8:	df000017 	ldw	fp,0(sp)
10007aec:	dec00204 	addi	sp,sp,8
10007af0:	f800283a 	ret

10007af4 <lodepng_clear_text>:

void lodepng_clear_text(LodePNGInfo* info)
{
10007af4:	defffd04 	addi	sp,sp,-12
10007af8:	dfc00215 	stw	ra,8(sp)
10007afc:	df000115 	stw	fp,4(sp)
10007b00:	df000104 	addi	fp,sp,4
10007b04:	e13fff15 	stw	r4,-4(fp)
  LodePNGText_cleanup(info);
10007b08:	e13fff17 	ldw	r4,-4(fp)
10007b0c:	000797c0 	call	1000797c <LodePNGText_cleanup>
}
10007b10:	e037883a 	mov	sp,fp
10007b14:	dfc00117 	ldw	ra,4(sp)
10007b18:	df000017 	ldw	fp,0(sp)
10007b1c:	dec00204 	addi	sp,sp,8
10007b20:	f800283a 	ret

10007b24 <lodepng_add_text>:

unsigned lodepng_add_text(LodePNGInfo* info, const char* key, const char* str)
{
10007b24:	defff904 	addi	sp,sp,-28
10007b28:	dfc00615 	stw	ra,24(sp)
10007b2c:	df000515 	stw	fp,20(sp)
10007b30:	df000504 	addi	fp,sp,20
10007b34:	e13ffd15 	stw	r4,-12(fp)
10007b38:	e17ffe15 	stw	r5,-8(fp)
10007b3c:	e1bfff15 	stw	r6,-4(fp)
  char** new_keys = (char**)(lodepng_realloc(info->text_keys, sizeof(char*) * (info->text_num + 1)));
10007b40:	e0bffd17 	ldw	r2,-12(fp)
10007b44:	10c01017 	ldw	r3,64(r2)
10007b48:	e0bffd17 	ldw	r2,-12(fp)
10007b4c:	10800f17 	ldw	r2,60(r2)
10007b50:	10800044 	addi	r2,r2,1
10007b54:	1085883a 	add	r2,r2,r2
10007b58:	1085883a 	add	r2,r2,r2
10007b5c:	1809883a 	mov	r4,r3
10007b60:	100b883a 	mov	r5,r2
10007b64:	00002240 	call	10000224 <lodepng_realloc>
10007b68:	e0bffb15 	stw	r2,-20(fp)
  char** new_strings = (char**)(lodepng_realloc(info->text_strings, sizeof(char*) * (info->text_num + 1)));
10007b6c:	e0bffd17 	ldw	r2,-12(fp)
10007b70:	10c01117 	ldw	r3,68(r2)
10007b74:	e0bffd17 	ldw	r2,-12(fp)
10007b78:	10800f17 	ldw	r2,60(r2)
10007b7c:	10800044 	addi	r2,r2,1
10007b80:	1085883a 	add	r2,r2,r2
10007b84:	1085883a 	add	r2,r2,r2
10007b88:	1809883a 	mov	r4,r3
10007b8c:	100b883a 	mov	r5,r2
10007b90:	00002240 	call	10000224 <lodepng_realloc>
10007b94:	e0bffc15 	stw	r2,-16(fp)
  if(!new_keys || !new_strings)
10007b98:	e0bffb17 	ldw	r2,-20(fp)
10007b9c:	10000226 	beq	r2,zero,10007ba8 <lodepng_add_text+0x84>
10007ba0:	e0bffc17 	ldw	r2,-16(fp)
10007ba4:	1000061e 	bne	r2,zero,10007bc0 <lodepng_add_text+0x9c>
  {
    lodepng_free(new_keys);
10007ba8:	e13ffb17 	ldw	r4,-20(fp)
10007bac:	000025c0 	call	1000025c <lodepng_free>
    lodepng_free(new_strings);
10007bb0:	e13ffc17 	ldw	r4,-16(fp)
10007bb4:	000025c0 	call	1000025c <lodepng_free>
    return 83; /*alloc fail*/
10007bb8:	008014c4 	movi	r2,83
10007bbc:	00003606 	br	10007c98 <lodepng_add_text+0x174>
  }

  ++info->text_num;
10007bc0:	e0bffd17 	ldw	r2,-12(fp)
10007bc4:	10800f17 	ldw	r2,60(r2)
10007bc8:	10c00044 	addi	r3,r2,1
10007bcc:	e0bffd17 	ldw	r2,-12(fp)
10007bd0:	10c00f15 	stw	r3,60(r2)
  info->text_keys = new_keys;
10007bd4:	e0bffd17 	ldw	r2,-12(fp)
10007bd8:	e0fffb17 	ldw	r3,-20(fp)
10007bdc:	10c01015 	stw	r3,64(r2)
  info->text_strings = new_strings;
10007be0:	e0bffd17 	ldw	r2,-12(fp)
10007be4:	e0fffc17 	ldw	r3,-16(fp)
10007be8:	10c01115 	stw	r3,68(r2)

  string_init(&info->text_keys[info->text_num - 1]);
10007bec:	e0bffd17 	ldw	r2,-12(fp)
10007bf0:	10c01017 	ldw	r3,64(r2)
10007bf4:	e0bffd17 	ldw	r2,-12(fp)
10007bf8:	10800f17 	ldw	r2,60(r2)
10007bfc:	10bfffc4 	addi	r2,r2,-1
10007c00:	1085883a 	add	r2,r2,r2
10007c04:	1085883a 	add	r2,r2,r2
10007c08:	1885883a 	add	r2,r3,r2
10007c0c:	1009883a 	mov	r4,r2
10007c10:	00008dc0 	call	100008dc <string_init>
  string_set(&info->text_keys[info->text_num - 1], key);
10007c14:	e0bffd17 	ldw	r2,-12(fp)
10007c18:	10c01017 	ldw	r3,64(r2)
10007c1c:	e0bffd17 	ldw	r2,-12(fp)
10007c20:	10800f17 	ldw	r2,60(r2)
10007c24:	10bfffc4 	addi	r2,r2,-1
10007c28:	1085883a 	add	r2,r2,r2
10007c2c:	1085883a 	add	r2,r2,r2
10007c30:	1885883a 	add	r2,r3,r2
10007c34:	1009883a 	mov	r4,r2
10007c38:	e17ffe17 	ldw	r5,-8(fp)
10007c3c:	00009580 	call	10000958 <string_set>

  string_init(&info->text_strings[info->text_num - 1]);
10007c40:	e0bffd17 	ldw	r2,-12(fp)
10007c44:	10c01117 	ldw	r3,68(r2)
10007c48:	e0bffd17 	ldw	r2,-12(fp)
10007c4c:	10800f17 	ldw	r2,60(r2)
10007c50:	10bfffc4 	addi	r2,r2,-1
10007c54:	1085883a 	add	r2,r2,r2
10007c58:	1085883a 	add	r2,r2,r2
10007c5c:	1885883a 	add	r2,r3,r2
10007c60:	1009883a 	mov	r4,r2
10007c64:	00008dc0 	call	100008dc <string_init>
  string_set(&info->text_strings[info->text_num - 1], str);
10007c68:	e0bffd17 	ldw	r2,-12(fp)
10007c6c:	10c01117 	ldw	r3,68(r2)
10007c70:	e0bffd17 	ldw	r2,-12(fp)
10007c74:	10800f17 	ldw	r2,60(r2)
10007c78:	10bfffc4 	addi	r2,r2,-1
10007c7c:	1085883a 	add	r2,r2,r2
10007c80:	1085883a 	add	r2,r2,r2
10007c84:	1885883a 	add	r2,r3,r2
10007c88:	1009883a 	mov	r4,r2
10007c8c:	e17fff17 	ldw	r5,-4(fp)
10007c90:	00009580 	call	10000958 <string_set>

  return 0;
10007c94:	0005883a 	mov	r2,zero
}
10007c98:	e037883a 	mov	sp,fp
10007c9c:	dfc00117 	ldw	ra,4(sp)
10007ca0:	df000017 	ldw	fp,0(sp)
10007ca4:	dec00204 	addi	sp,sp,8
10007ca8:	f800283a 	ret

10007cac <LodePNGIText_init>:

/******************************************************************************/

static void LodePNGIText_init(LodePNGInfo* info)
{
10007cac:	defffe04 	addi	sp,sp,-8
10007cb0:	df000115 	stw	fp,4(sp)
10007cb4:	df000104 	addi	fp,sp,4
10007cb8:	e13fff15 	stw	r4,-4(fp)
  info->itext_num = 0;
10007cbc:	e0bfff17 	ldw	r2,-4(fp)
10007cc0:	10001215 	stw	zero,72(r2)
  info->itext_keys = NULL;
10007cc4:	e0bfff17 	ldw	r2,-4(fp)
10007cc8:	10001315 	stw	zero,76(r2)
  info->itext_langtags = NULL;
10007ccc:	e0bfff17 	ldw	r2,-4(fp)
10007cd0:	10001415 	stw	zero,80(r2)
  info->itext_transkeys = NULL;
10007cd4:	e0bfff17 	ldw	r2,-4(fp)
10007cd8:	10001515 	stw	zero,84(r2)
  info->itext_strings = NULL;
10007cdc:	e0bfff17 	ldw	r2,-4(fp)
10007ce0:	10001615 	stw	zero,88(r2)
}
10007ce4:	e037883a 	mov	sp,fp
10007ce8:	df000017 	ldw	fp,0(sp)
10007cec:	dec00104 	addi	sp,sp,4
10007cf0:	f800283a 	ret

10007cf4 <LodePNGIText_cleanup>:

static void LodePNGIText_cleanup(LodePNGInfo* info)
{
10007cf4:	defffc04 	addi	sp,sp,-16
10007cf8:	dfc00315 	stw	ra,12(sp)
10007cfc:	df000215 	stw	fp,8(sp)
10007d00:	df000204 	addi	fp,sp,8
10007d04:	e13fff15 	stw	r4,-4(fp)
  size_t i;
  for(i = 0; i != info->itext_num; ++i)
10007d08:	e03ffe15 	stw	zero,-8(fp)
10007d0c:	00002306 	br	10007d9c <LodePNGIText_cleanup+0xa8>
  {
    string_cleanup(&info->itext_keys[i]);
10007d10:	e0bfff17 	ldw	r2,-4(fp)
10007d14:	10c01317 	ldw	r3,76(r2)
10007d18:	e0bffe17 	ldw	r2,-8(fp)
10007d1c:	1085883a 	add	r2,r2,r2
10007d20:	1085883a 	add	r2,r2,r2
10007d24:	1885883a 	add	r2,r3,r2
10007d28:	1009883a 	mov	r4,r2
10007d2c:	00009180 	call	10000918 <string_cleanup>
    string_cleanup(&info->itext_langtags[i]);
10007d30:	e0bfff17 	ldw	r2,-4(fp)
10007d34:	10c01417 	ldw	r3,80(r2)
10007d38:	e0bffe17 	ldw	r2,-8(fp)
10007d3c:	1085883a 	add	r2,r2,r2
10007d40:	1085883a 	add	r2,r2,r2
10007d44:	1885883a 	add	r2,r3,r2
10007d48:	1009883a 	mov	r4,r2
10007d4c:	00009180 	call	10000918 <string_cleanup>
    string_cleanup(&info->itext_transkeys[i]);
10007d50:	e0bfff17 	ldw	r2,-4(fp)
10007d54:	10c01517 	ldw	r3,84(r2)
10007d58:	e0bffe17 	ldw	r2,-8(fp)
10007d5c:	1085883a 	add	r2,r2,r2
10007d60:	1085883a 	add	r2,r2,r2
10007d64:	1885883a 	add	r2,r3,r2
10007d68:	1009883a 	mov	r4,r2
10007d6c:	00009180 	call	10000918 <string_cleanup>
    string_cleanup(&info->itext_strings[i]);
10007d70:	e0bfff17 	ldw	r2,-4(fp)
10007d74:	10c01617 	ldw	r3,88(r2)
10007d78:	e0bffe17 	ldw	r2,-8(fp)
10007d7c:	1085883a 	add	r2,r2,r2
10007d80:	1085883a 	add	r2,r2,r2
10007d84:	1885883a 	add	r2,r3,r2
10007d88:	1009883a 	mov	r4,r2
10007d8c:	00009180 	call	10000918 <string_cleanup>
}

static void LodePNGIText_cleanup(LodePNGInfo* info)
{
  size_t i;
  for(i = 0; i != info->itext_num; ++i)
10007d90:	e0bffe17 	ldw	r2,-8(fp)
10007d94:	10800044 	addi	r2,r2,1
10007d98:	e0bffe15 	stw	r2,-8(fp)
10007d9c:	e0bfff17 	ldw	r2,-4(fp)
10007da0:	10c01217 	ldw	r3,72(r2)
10007da4:	e0bffe17 	ldw	r2,-8(fp)
10007da8:	18bfd91e 	bne	r3,r2,10007d10 <__alt_data_end+0xf8007d10>
    string_cleanup(&info->itext_keys[i]);
    string_cleanup(&info->itext_langtags[i]);
    string_cleanup(&info->itext_transkeys[i]);
    string_cleanup(&info->itext_strings[i]);
  }
  lodepng_free(info->itext_keys);
10007dac:	e0bfff17 	ldw	r2,-4(fp)
10007db0:	10801317 	ldw	r2,76(r2)
10007db4:	1009883a 	mov	r4,r2
10007db8:	000025c0 	call	1000025c <lodepng_free>
  lodepng_free(info->itext_langtags);
10007dbc:	e0bfff17 	ldw	r2,-4(fp)
10007dc0:	10801417 	ldw	r2,80(r2)
10007dc4:	1009883a 	mov	r4,r2
10007dc8:	000025c0 	call	1000025c <lodepng_free>
  lodepng_free(info->itext_transkeys);
10007dcc:	e0bfff17 	ldw	r2,-4(fp)
10007dd0:	10801517 	ldw	r2,84(r2)
10007dd4:	1009883a 	mov	r4,r2
10007dd8:	000025c0 	call	1000025c <lodepng_free>
  lodepng_free(info->itext_strings);
10007ddc:	e0bfff17 	ldw	r2,-4(fp)
10007de0:	10801617 	ldw	r2,88(r2)
10007de4:	1009883a 	mov	r4,r2
10007de8:	000025c0 	call	1000025c <lodepng_free>
}
10007dec:	e037883a 	mov	sp,fp
10007df0:	dfc00117 	ldw	ra,4(sp)
10007df4:	df000017 	ldw	fp,0(sp)
10007df8:	dec00204 	addi	sp,sp,8
10007dfc:	f800283a 	ret

10007e00 <LodePNGIText_copy>:

static unsigned LodePNGIText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
{
10007e00:	defff904 	addi	sp,sp,-28
10007e04:	dfc00615 	stw	ra,24(sp)
10007e08:	df000515 	stw	fp,20(sp)
10007e0c:	df000504 	addi	fp,sp,20
10007e10:	e13ffe15 	stw	r4,-8(fp)
10007e14:	e17fff15 	stw	r5,-4(fp)
  size_t i = 0;
10007e18:	e03ffc15 	stw	zero,-16(fp)
  dest->itext_keys = 0;
10007e1c:	e0bffe17 	ldw	r2,-8(fp)
10007e20:	10001315 	stw	zero,76(r2)
  dest->itext_langtags = 0;
10007e24:	e0bffe17 	ldw	r2,-8(fp)
10007e28:	10001415 	stw	zero,80(r2)
  dest->itext_transkeys = 0;
10007e2c:	e0bffe17 	ldw	r2,-8(fp)
10007e30:	10001515 	stw	zero,84(r2)
  dest->itext_strings = 0;
10007e34:	e0bffe17 	ldw	r2,-8(fp)
10007e38:	10001615 	stw	zero,88(r2)
  dest->itext_num = 0;
10007e3c:	e0bffe17 	ldw	r2,-8(fp)
10007e40:	10001215 	stw	zero,72(r2)
  for(i = 0; i != source->itext_num; ++i)
10007e44:	e03ffc15 	stw	zero,-16(fp)
10007e48:	00002806 	br	10007eec <LodePNGIText_copy+0xec>
  {
    CERROR_TRY_RETURN(lodepng_add_itext(dest, source->itext_keys[i], source->itext_langtags[i],
10007e4c:	e0bfff17 	ldw	r2,-4(fp)
10007e50:	10c01317 	ldw	r3,76(r2)
10007e54:	e0bffc17 	ldw	r2,-16(fp)
10007e58:	1085883a 	add	r2,r2,r2
10007e5c:	1085883a 	add	r2,r2,r2
10007e60:	1885883a 	add	r2,r3,r2
10007e64:	11400017 	ldw	r5,0(r2)
10007e68:	e0bfff17 	ldw	r2,-4(fp)
10007e6c:	10c01417 	ldw	r3,80(r2)
10007e70:	e0bffc17 	ldw	r2,-16(fp)
10007e74:	1085883a 	add	r2,r2,r2
10007e78:	1085883a 	add	r2,r2,r2
10007e7c:	1885883a 	add	r2,r3,r2
10007e80:	11800017 	ldw	r6,0(r2)
10007e84:	e0bfff17 	ldw	r2,-4(fp)
10007e88:	10c01517 	ldw	r3,84(r2)
10007e8c:	e0bffc17 	ldw	r2,-16(fp)
10007e90:	1085883a 	add	r2,r2,r2
10007e94:	1085883a 	add	r2,r2,r2
10007e98:	1885883a 	add	r2,r3,r2
10007e9c:	10c00017 	ldw	r3,0(r2)
10007ea0:	e0bfff17 	ldw	r2,-4(fp)
10007ea4:	11001617 	ldw	r4,88(r2)
10007ea8:	e0bffc17 	ldw	r2,-16(fp)
10007eac:	1085883a 	add	r2,r2,r2
10007eb0:	1085883a 	add	r2,r2,r2
10007eb4:	2085883a 	add	r2,r4,r2
10007eb8:	10800017 	ldw	r2,0(r2)
10007ebc:	d8800015 	stw	r2,0(sp)
10007ec0:	e13ffe17 	ldw	r4,-8(fp)
10007ec4:	180f883a 	mov	r7,r3
10007ec8:	0007f440 	call	10007f44 <lodepng_add_itext>
10007ecc:	e0bffd15 	stw	r2,-12(fp)
10007ed0:	e0bffd17 	ldw	r2,-12(fp)
10007ed4:	10000226 	beq	r2,zero,10007ee0 <LodePNGIText_copy+0xe0>
10007ed8:	e0bffd17 	ldw	r2,-12(fp)
10007edc:	00000806 	br	10007f00 <LodePNGIText_copy+0x100>
  dest->itext_keys = 0;
  dest->itext_langtags = 0;
  dest->itext_transkeys = 0;
  dest->itext_strings = 0;
  dest->itext_num = 0;
  for(i = 0; i != source->itext_num; ++i)
10007ee0:	e0bffc17 	ldw	r2,-16(fp)
10007ee4:	10800044 	addi	r2,r2,1
10007ee8:	e0bffc15 	stw	r2,-16(fp)
10007eec:	e0bfff17 	ldw	r2,-4(fp)
10007ef0:	10c01217 	ldw	r3,72(r2)
10007ef4:	e0bffc17 	ldw	r2,-16(fp)
10007ef8:	18bfd41e 	bne	r3,r2,10007e4c <__alt_data_end+0xf8007e4c>
  {
    CERROR_TRY_RETURN(lodepng_add_itext(dest, source->itext_keys[i], source->itext_langtags[i],
                                        source->itext_transkeys[i], source->itext_strings[i]));
  }
  return 0;
10007efc:	0005883a 	mov	r2,zero
}
10007f00:	e037883a 	mov	sp,fp
10007f04:	dfc00117 	ldw	ra,4(sp)
10007f08:	df000017 	ldw	fp,0(sp)
10007f0c:	dec00204 	addi	sp,sp,8
10007f10:	f800283a 	ret

10007f14 <lodepng_clear_itext>:

void lodepng_clear_itext(LodePNGInfo* info)
{
10007f14:	defffd04 	addi	sp,sp,-12
10007f18:	dfc00215 	stw	ra,8(sp)
10007f1c:	df000115 	stw	fp,4(sp)
10007f20:	df000104 	addi	fp,sp,4
10007f24:	e13fff15 	stw	r4,-4(fp)
  LodePNGIText_cleanup(info);
10007f28:	e13fff17 	ldw	r4,-4(fp)
10007f2c:	0007cf40 	call	10007cf4 <LodePNGIText_cleanup>
}
10007f30:	e037883a 	mov	sp,fp
10007f34:	dfc00117 	ldw	ra,4(sp)
10007f38:	df000017 	ldw	fp,0(sp)
10007f3c:	dec00204 	addi	sp,sp,8
10007f40:	f800283a 	ret

10007f44 <lodepng_add_itext>:

unsigned lodepng_add_itext(LodePNGInfo* info, const char* key, const char* langtag,
                           const char* transkey, const char* str)
{
10007f44:	defff604 	addi	sp,sp,-40
10007f48:	dfc00915 	stw	ra,36(sp)
10007f4c:	df000815 	stw	fp,32(sp)
10007f50:	df000804 	addi	fp,sp,32
10007f54:	e13ffc15 	stw	r4,-16(fp)
10007f58:	e17ffd15 	stw	r5,-12(fp)
10007f5c:	e1bffe15 	stw	r6,-8(fp)
10007f60:	e1ffff15 	stw	r7,-4(fp)
  char** new_keys = (char**)(lodepng_realloc(info->itext_keys, sizeof(char*) * (info->itext_num + 1)));
10007f64:	e0bffc17 	ldw	r2,-16(fp)
10007f68:	10c01317 	ldw	r3,76(r2)
10007f6c:	e0bffc17 	ldw	r2,-16(fp)
10007f70:	10801217 	ldw	r2,72(r2)
10007f74:	10800044 	addi	r2,r2,1
10007f78:	1085883a 	add	r2,r2,r2
10007f7c:	1085883a 	add	r2,r2,r2
10007f80:	1809883a 	mov	r4,r3
10007f84:	100b883a 	mov	r5,r2
10007f88:	00002240 	call	10000224 <lodepng_realloc>
10007f8c:	e0bff815 	stw	r2,-32(fp)
  char** new_langtags = (char**)(lodepng_realloc(info->itext_langtags, sizeof(char*) * (info->itext_num + 1)));
10007f90:	e0bffc17 	ldw	r2,-16(fp)
10007f94:	10c01417 	ldw	r3,80(r2)
10007f98:	e0bffc17 	ldw	r2,-16(fp)
10007f9c:	10801217 	ldw	r2,72(r2)
10007fa0:	10800044 	addi	r2,r2,1
10007fa4:	1085883a 	add	r2,r2,r2
10007fa8:	1085883a 	add	r2,r2,r2
10007fac:	1809883a 	mov	r4,r3
10007fb0:	100b883a 	mov	r5,r2
10007fb4:	00002240 	call	10000224 <lodepng_realloc>
10007fb8:	e0bff915 	stw	r2,-28(fp)
  char** new_transkeys = (char**)(lodepng_realloc(info->itext_transkeys, sizeof(char*) * (info->itext_num + 1)));
10007fbc:	e0bffc17 	ldw	r2,-16(fp)
10007fc0:	10c01517 	ldw	r3,84(r2)
10007fc4:	e0bffc17 	ldw	r2,-16(fp)
10007fc8:	10801217 	ldw	r2,72(r2)
10007fcc:	10800044 	addi	r2,r2,1
10007fd0:	1085883a 	add	r2,r2,r2
10007fd4:	1085883a 	add	r2,r2,r2
10007fd8:	1809883a 	mov	r4,r3
10007fdc:	100b883a 	mov	r5,r2
10007fe0:	00002240 	call	10000224 <lodepng_realloc>
10007fe4:	e0bffa15 	stw	r2,-24(fp)
  char** new_strings = (char**)(lodepng_realloc(info->itext_strings, sizeof(char*) * (info->itext_num + 1)));
10007fe8:	e0bffc17 	ldw	r2,-16(fp)
10007fec:	10c01617 	ldw	r3,88(r2)
10007ff0:	e0bffc17 	ldw	r2,-16(fp)
10007ff4:	10801217 	ldw	r2,72(r2)
10007ff8:	10800044 	addi	r2,r2,1
10007ffc:	1085883a 	add	r2,r2,r2
10008000:	1085883a 	add	r2,r2,r2
10008004:	1809883a 	mov	r4,r3
10008008:	100b883a 	mov	r5,r2
1000800c:	00002240 	call	10000224 <lodepng_realloc>
10008010:	e0bffb15 	stw	r2,-20(fp)
  if(!new_keys || !new_langtags || !new_transkeys || !new_strings)
10008014:	e0bff817 	ldw	r2,-32(fp)
10008018:	10000626 	beq	r2,zero,10008034 <lodepng_add_itext+0xf0>
1000801c:	e0bff917 	ldw	r2,-28(fp)
10008020:	10000426 	beq	r2,zero,10008034 <lodepng_add_itext+0xf0>
10008024:	e0bffa17 	ldw	r2,-24(fp)
10008028:	10000226 	beq	r2,zero,10008034 <lodepng_add_itext+0xf0>
1000802c:	e0bffb17 	ldw	r2,-20(fp)
10008030:	10000a1e 	bne	r2,zero,1000805c <lodepng_add_itext+0x118>
  {
    lodepng_free(new_keys);
10008034:	e13ff817 	ldw	r4,-32(fp)
10008038:	000025c0 	call	1000025c <lodepng_free>
    lodepng_free(new_langtags);
1000803c:	e13ff917 	ldw	r4,-28(fp)
10008040:	000025c0 	call	1000025c <lodepng_free>
    lodepng_free(new_transkeys);
10008044:	e13ffa17 	ldw	r4,-24(fp)
10008048:	000025c0 	call	1000025c <lodepng_free>
    lodepng_free(new_strings);
1000804c:	e13ffb17 	ldw	r4,-20(fp)
10008050:	000025c0 	call	1000025c <lodepng_free>
    return 83; /*alloc fail*/
10008054:	008014c4 	movi	r2,83
10008058:	00006606 	br	100081f4 <lodepng_add_itext+0x2b0>
  }

  ++info->itext_num;
1000805c:	e0bffc17 	ldw	r2,-16(fp)
10008060:	10801217 	ldw	r2,72(r2)
10008064:	10c00044 	addi	r3,r2,1
10008068:	e0bffc17 	ldw	r2,-16(fp)
1000806c:	10c01215 	stw	r3,72(r2)
  info->itext_keys = new_keys;
10008070:	e0bffc17 	ldw	r2,-16(fp)
10008074:	e0fff817 	ldw	r3,-32(fp)
10008078:	10c01315 	stw	r3,76(r2)
  info->itext_langtags = new_langtags;
1000807c:	e0bffc17 	ldw	r2,-16(fp)
10008080:	e0fff917 	ldw	r3,-28(fp)
10008084:	10c01415 	stw	r3,80(r2)
  info->itext_transkeys = new_transkeys;
10008088:	e0bffc17 	ldw	r2,-16(fp)
1000808c:	e0fffa17 	ldw	r3,-24(fp)
10008090:	10c01515 	stw	r3,84(r2)
  info->itext_strings = new_strings;
10008094:	e0bffc17 	ldw	r2,-16(fp)
10008098:	e0fffb17 	ldw	r3,-20(fp)
1000809c:	10c01615 	stw	r3,88(r2)

  string_init(&info->itext_keys[info->itext_num - 1]);
100080a0:	e0bffc17 	ldw	r2,-16(fp)
100080a4:	10c01317 	ldw	r3,76(r2)
100080a8:	e0bffc17 	ldw	r2,-16(fp)
100080ac:	10801217 	ldw	r2,72(r2)
100080b0:	10bfffc4 	addi	r2,r2,-1
100080b4:	1085883a 	add	r2,r2,r2
100080b8:	1085883a 	add	r2,r2,r2
100080bc:	1885883a 	add	r2,r3,r2
100080c0:	1009883a 	mov	r4,r2
100080c4:	00008dc0 	call	100008dc <string_init>
  string_set(&info->itext_keys[info->itext_num - 1], key);
100080c8:	e0bffc17 	ldw	r2,-16(fp)
100080cc:	10c01317 	ldw	r3,76(r2)
100080d0:	e0bffc17 	ldw	r2,-16(fp)
100080d4:	10801217 	ldw	r2,72(r2)
100080d8:	10bfffc4 	addi	r2,r2,-1
100080dc:	1085883a 	add	r2,r2,r2
100080e0:	1085883a 	add	r2,r2,r2
100080e4:	1885883a 	add	r2,r3,r2
100080e8:	1009883a 	mov	r4,r2
100080ec:	e17ffd17 	ldw	r5,-12(fp)
100080f0:	00009580 	call	10000958 <string_set>

  string_init(&info->itext_langtags[info->itext_num - 1]);
100080f4:	e0bffc17 	ldw	r2,-16(fp)
100080f8:	10c01417 	ldw	r3,80(r2)
100080fc:	e0bffc17 	ldw	r2,-16(fp)
10008100:	10801217 	ldw	r2,72(r2)
10008104:	10bfffc4 	addi	r2,r2,-1
10008108:	1085883a 	add	r2,r2,r2
1000810c:	1085883a 	add	r2,r2,r2
10008110:	1885883a 	add	r2,r3,r2
10008114:	1009883a 	mov	r4,r2
10008118:	00008dc0 	call	100008dc <string_init>
  string_set(&info->itext_langtags[info->itext_num - 1], langtag);
1000811c:	e0bffc17 	ldw	r2,-16(fp)
10008120:	10c01417 	ldw	r3,80(r2)
10008124:	e0bffc17 	ldw	r2,-16(fp)
10008128:	10801217 	ldw	r2,72(r2)
1000812c:	10bfffc4 	addi	r2,r2,-1
10008130:	1085883a 	add	r2,r2,r2
10008134:	1085883a 	add	r2,r2,r2
10008138:	1885883a 	add	r2,r3,r2
1000813c:	1009883a 	mov	r4,r2
10008140:	e17ffe17 	ldw	r5,-8(fp)
10008144:	00009580 	call	10000958 <string_set>

  string_init(&info->itext_transkeys[info->itext_num - 1]);
10008148:	e0bffc17 	ldw	r2,-16(fp)
1000814c:	10c01517 	ldw	r3,84(r2)
10008150:	e0bffc17 	ldw	r2,-16(fp)
10008154:	10801217 	ldw	r2,72(r2)
10008158:	10bfffc4 	addi	r2,r2,-1
1000815c:	1085883a 	add	r2,r2,r2
10008160:	1085883a 	add	r2,r2,r2
10008164:	1885883a 	add	r2,r3,r2
10008168:	1009883a 	mov	r4,r2
1000816c:	00008dc0 	call	100008dc <string_init>
  string_set(&info->itext_transkeys[info->itext_num - 1], transkey);
10008170:	e0bffc17 	ldw	r2,-16(fp)
10008174:	10c01517 	ldw	r3,84(r2)
10008178:	e0bffc17 	ldw	r2,-16(fp)
1000817c:	10801217 	ldw	r2,72(r2)
10008180:	10bfffc4 	addi	r2,r2,-1
10008184:	1085883a 	add	r2,r2,r2
10008188:	1085883a 	add	r2,r2,r2
1000818c:	1885883a 	add	r2,r3,r2
10008190:	1009883a 	mov	r4,r2
10008194:	e17fff17 	ldw	r5,-4(fp)
10008198:	00009580 	call	10000958 <string_set>

  string_init(&info->itext_strings[info->itext_num - 1]);
1000819c:	e0bffc17 	ldw	r2,-16(fp)
100081a0:	10c01617 	ldw	r3,88(r2)
100081a4:	e0bffc17 	ldw	r2,-16(fp)
100081a8:	10801217 	ldw	r2,72(r2)
100081ac:	10bfffc4 	addi	r2,r2,-1
100081b0:	1085883a 	add	r2,r2,r2
100081b4:	1085883a 	add	r2,r2,r2
100081b8:	1885883a 	add	r2,r3,r2
100081bc:	1009883a 	mov	r4,r2
100081c0:	00008dc0 	call	100008dc <string_init>
  string_set(&info->itext_strings[info->itext_num - 1], str);
100081c4:	e0bffc17 	ldw	r2,-16(fp)
100081c8:	10c01617 	ldw	r3,88(r2)
100081cc:	e0bffc17 	ldw	r2,-16(fp)
100081d0:	10801217 	ldw	r2,72(r2)
100081d4:	10bfffc4 	addi	r2,r2,-1
100081d8:	1085883a 	add	r2,r2,r2
100081dc:	1085883a 	add	r2,r2,r2
100081e0:	1885883a 	add	r2,r3,r2
100081e4:	1009883a 	mov	r4,r2
100081e8:	e1400217 	ldw	r5,8(fp)
100081ec:	00009580 	call	10000958 <string_set>

  return 0;
100081f0:	0005883a 	mov	r2,zero
}
100081f4:	e037883a 	mov	sp,fp
100081f8:	dfc00117 	ldw	ra,4(sp)
100081fc:	df000017 	ldw	fp,0(sp)
10008200:	dec00204 	addi	sp,sp,8
10008204:	f800283a 	ret

10008208 <lodepng_info_init>:
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/

void lodepng_info_init(LodePNGInfo* info)
{
10008208:	defffd04 	addi	sp,sp,-12
1000820c:	dfc00215 	stw	ra,8(sp)
10008210:	df000115 	stw	fp,4(sp)
10008214:	df000104 	addi	fp,sp,4
10008218:	e13fff15 	stw	r4,-4(fp)
  lodepng_color_mode_init(&info->color);
1000821c:	e0bfff17 	ldw	r2,-4(fp)
10008220:	10800304 	addi	r2,r2,12
10008224:	1009883a 	mov	r4,r2
10008228:	0006ec80 	call	10006ec8 <lodepng_color_mode_init>
  info->interlace_method = 0;
1000822c:	e0bfff17 	ldw	r2,-4(fp)
10008230:	10000215 	stw	zero,8(r2)
  info->compression_method = 0;
10008234:	e0bfff17 	ldw	r2,-4(fp)
10008238:	10000015 	stw	zero,0(r2)
  info->filter_method = 0;
1000823c:	e0bfff17 	ldw	r2,-4(fp)
10008240:	10000115 	stw	zero,4(r2)
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
  info->background_defined = 0;
10008244:	e0bfff17 	ldw	r2,-4(fp)
10008248:	10000b15 	stw	zero,44(r2)
  info->background_r = info->background_g = info->background_b = 0;
1000824c:	e0bfff17 	ldw	r2,-4(fp)
10008250:	10000e15 	stw	zero,56(r2)
10008254:	e0bfff17 	ldw	r2,-4(fp)
10008258:	10c00e17 	ldw	r3,56(r2)
1000825c:	e0bfff17 	ldw	r2,-4(fp)
10008260:	10c00d15 	stw	r3,52(r2)
10008264:	e0bfff17 	ldw	r2,-4(fp)
10008268:	10c00d17 	ldw	r3,52(r2)
1000826c:	e0bfff17 	ldw	r2,-4(fp)
10008270:	10c00c15 	stw	r3,48(r2)

  LodePNGText_init(info);
10008274:	e13fff17 	ldw	r4,-4(fp)
10008278:	00079440 	call	10007944 <LodePNGText_init>
  LodePNGIText_init(info);
1000827c:	e13fff17 	ldw	r4,-4(fp)
10008280:	0007cac0 	call	10007cac <LodePNGIText_init>

  info->time_defined = 0;
10008284:	e0bfff17 	ldw	r2,-4(fp)
10008288:	10001715 	stw	zero,92(r2)
  info->phys_defined = 0;
1000828c:	e0bfff17 	ldw	r2,-4(fp)
10008290:	10001e15 	stw	zero,120(r2)

  LodePNGUnknownChunks_init(info);
10008294:	e13fff17 	ldw	r4,-4(fp)
10008298:	000769c0 	call	1000769c <LodePNGUnknownChunks_init>
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
}
1000829c:	e037883a 	mov	sp,fp
100082a0:	dfc00117 	ldw	ra,4(sp)
100082a4:	df000017 	ldw	fp,0(sp)
100082a8:	dec00204 	addi	sp,sp,8
100082ac:	f800283a 	ret

100082b0 <lodepng_info_cleanup>:

void lodepng_info_cleanup(LodePNGInfo* info)
{
100082b0:	defffd04 	addi	sp,sp,-12
100082b4:	dfc00215 	stw	ra,8(sp)
100082b8:	df000115 	stw	fp,4(sp)
100082bc:	df000104 	addi	fp,sp,4
100082c0:	e13fff15 	stw	r4,-4(fp)
  lodepng_color_mode_cleanup(&info->color);
100082c4:	e0bfff17 	ldw	r2,-4(fp)
100082c8:	10800304 	addi	r2,r2,12
100082cc:	1009883a 	mov	r4,r2
100082d0:	0006f400 	call	10006f40 <lodepng_color_mode_cleanup>
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
  LodePNGText_cleanup(info);
100082d4:	e13fff17 	ldw	r4,-4(fp)
100082d8:	000797c0 	call	1000797c <LodePNGText_cleanup>
  LodePNGIText_cleanup(info);
100082dc:	e13fff17 	ldw	r4,-4(fp)
100082e0:	0007cf40 	call	10007cf4 <LodePNGIText_cleanup>

  LodePNGUnknownChunks_cleanup(info);
100082e4:	e13fff17 	ldw	r4,-4(fp)
100082e8:	00077340 	call	10007734 <LodePNGUnknownChunks_cleanup>
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
}
100082ec:	e037883a 	mov	sp,fp
100082f0:	dfc00117 	ldw	ra,4(sp)
100082f4:	df000017 	ldw	fp,0(sp)
100082f8:	dec00204 	addi	sp,sp,8
100082fc:	f800283a 	ret

10008300 <lodepng_info_copy>:

unsigned lodepng_info_copy(LodePNGInfo* dest, const LodePNGInfo* source)
{
10008300:	defff804 	addi	sp,sp,-32
10008304:	dfc00715 	stw	ra,28(sp)
10008308:	df000615 	stw	fp,24(sp)
1000830c:	df000604 	addi	fp,sp,24
10008310:	e13ffe15 	stw	r4,-8(fp)
10008314:	e17fff15 	stw	r5,-4(fp)
  lodepng_info_cleanup(dest);
10008318:	e13ffe17 	ldw	r4,-8(fp)
1000831c:	00082b00 	call	100082b0 <lodepng_info_cleanup>
  *dest = *source;
10008320:	e0fffe17 	ldw	r3,-8(fp)
10008324:	e0bfff17 	ldw	r2,-4(fp)
10008328:	1809883a 	mov	r4,r3
1000832c:	1007883a 	mov	r3,r2
10008330:	00802804 	movi	r2,160
10008334:	180b883a 	mov	r5,r3
10008338:	100d883a 	mov	r6,r2
1000833c:	0016dd80 	call	10016dd8 <memcpy>
  lodepng_color_mode_init(&dest->color);
10008340:	e0bffe17 	ldw	r2,-8(fp)
10008344:	10800304 	addi	r2,r2,12
10008348:	1009883a 	mov	r4,r2
1000834c:	0006ec80 	call	10006ec8 <lodepng_color_mode_init>
  CERROR_TRY_RETURN(lodepng_color_mode_copy(&dest->color, &source->color));
10008350:	e0bffe17 	ldw	r2,-8(fp)
10008354:	10c00304 	addi	r3,r2,12
10008358:	e0bfff17 	ldw	r2,-4(fp)
1000835c:	10800304 	addi	r2,r2,12
10008360:	1809883a 	mov	r4,r3
10008364:	100b883a 	mov	r5,r2
10008368:	0006f700 	call	10006f70 <lodepng_color_mode_copy>
1000836c:	e0bffa15 	stw	r2,-24(fp)
10008370:	e0bffa17 	ldw	r2,-24(fp)
10008374:	10000226 	beq	r2,zero,10008380 <lodepng_info_copy+0x80>
10008378:	e0bffa17 	ldw	r2,-24(fp)
1000837c:	00001b06 	br	100083ec <lodepng_info_copy+0xec>

#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
  CERROR_TRY_RETURN(LodePNGText_copy(dest, source));
10008380:	e13ffe17 	ldw	r4,-8(fp)
10008384:	e17fff17 	ldw	r5,-4(fp)
10008388:	0007a280 	call	10007a28 <LodePNGText_copy>
1000838c:	e0bffb15 	stw	r2,-20(fp)
10008390:	e0bffb17 	ldw	r2,-20(fp)
10008394:	10000226 	beq	r2,zero,100083a0 <lodepng_info_copy+0xa0>
10008398:	e0bffb17 	ldw	r2,-20(fp)
1000839c:	00001306 	br	100083ec <lodepng_info_copy+0xec>
  CERROR_TRY_RETURN(LodePNGIText_copy(dest, source));
100083a0:	e13ffe17 	ldw	r4,-8(fp)
100083a4:	e17fff17 	ldw	r5,-4(fp)
100083a8:	0007e000 	call	10007e00 <LodePNGIText_copy>
100083ac:	e0bffc15 	stw	r2,-16(fp)
100083b0:	e0bffc17 	ldw	r2,-16(fp)
100083b4:	10000226 	beq	r2,zero,100083c0 <lodepng_info_copy+0xc0>
100083b8:	e0bffc17 	ldw	r2,-16(fp)
100083bc:	00000b06 	br	100083ec <lodepng_info_copy+0xec>

  LodePNGUnknownChunks_init(dest);
100083c0:	e13ffe17 	ldw	r4,-8(fp)
100083c4:	000769c0 	call	1000769c <LodePNGUnknownChunks_init>
  CERROR_TRY_RETURN(LodePNGUnknownChunks_copy(dest, source));
100083c8:	e13ffe17 	ldw	r4,-8(fp)
100083cc:	e17fff17 	ldw	r5,-4(fp)
100083d0:	00077a00 	call	100077a0 <LodePNGUnknownChunks_copy>
100083d4:	e0bffd15 	stw	r2,-12(fp)
100083d8:	e0bffd17 	ldw	r2,-12(fp)
100083dc:	10000226 	beq	r2,zero,100083e8 <lodepng_info_copy+0xe8>
100083e0:	e0bffd17 	ldw	r2,-12(fp)
100083e4:	00000106 	br	100083ec <lodepng_info_copy+0xec>
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
  return 0;
100083e8:	0005883a 	mov	r2,zero
}
100083ec:	e037883a 	mov	sp,fp
100083f0:	dfc00117 	ldw	ra,4(sp)
100083f4:	df000017 	ldw	fp,0(sp)
100083f8:	dec00204 	addi	sp,sp,8
100083fc:	f800283a 	ret

10008400 <lodepng_info_swap>:

void lodepng_info_swap(LodePNGInfo* a, LodePNGInfo* b)
{
10008400:	deffd404 	addi	sp,sp,-176
10008404:	dfc02b15 	stw	ra,172(sp)
10008408:	df002a15 	stw	fp,168(sp)
1000840c:	df002a04 	addi	fp,sp,168
10008410:	e13ffe15 	stw	r4,-8(fp)
10008414:	e17fff15 	stw	r5,-4(fp)
  LodePNGInfo temp = *a;
10008418:	e0bffe17 	ldw	r2,-8(fp)
1000841c:	e13fd604 	addi	r4,fp,-168
10008420:	1007883a 	mov	r3,r2
10008424:	00802804 	movi	r2,160
10008428:	180b883a 	mov	r5,r3
1000842c:	100d883a 	mov	r6,r2
10008430:	0016dd80 	call	10016dd8 <memcpy>
  *a = *b;
10008434:	e0fffe17 	ldw	r3,-8(fp)
10008438:	e0bfff17 	ldw	r2,-4(fp)
1000843c:	1809883a 	mov	r4,r3
10008440:	1007883a 	mov	r3,r2
10008444:	00802804 	movi	r2,160
10008448:	180b883a 	mov	r5,r3
1000844c:	100d883a 	mov	r6,r2
10008450:	0016dd80 	call	10016dd8 <memcpy>
  *b = temp;
10008454:	e0bfff17 	ldw	r2,-4(fp)
10008458:	1009883a 	mov	r4,r2
1000845c:	e0ffd604 	addi	r3,fp,-168
10008460:	00802804 	movi	r2,160
10008464:	180b883a 	mov	r5,r3
10008468:	100d883a 	mov	r6,r2
1000846c:	0016dd80 	call	10016dd8 <memcpy>
}
10008470:	e037883a 	mov	sp,fp
10008474:	dfc00117 	ldw	ra,4(sp)
10008478:	df000017 	ldw	fp,0(sp)
1000847c:	dec00204 	addi	sp,sp,8
10008480:	f800283a 	ret

10008484 <addColorBits>:

/* ////////////////////////////////////////////////////////////////////////// */

/*index: bitgroup index, bits: bitgroup size(1, 2 or 4), in: bitgroup value, out: octet array to add bits to*/
static void addColorBits(unsigned char* out, size_t index, unsigned bits, unsigned in)
{
10008484:	defff804 	addi	sp,sp,-32
10008488:	dfc00715 	stw	ra,28(sp)
1000848c:	df000615 	stw	fp,24(sp)
10008490:	df000604 	addi	fp,sp,24
10008494:	e13ffc15 	stw	r4,-16(fp)
10008498:	e17ffd15 	stw	r5,-12(fp)
1000849c:	e1bffe15 	stw	r6,-8(fp)
100084a0:	e1ffff15 	stw	r7,-4(fp)
  unsigned m = bits == 1 ? 7 : bits == 2 ? 3 : 1; /*8 / bits - 1*/
100084a4:	e0bffe17 	ldw	r2,-8(fp)
100084a8:	10800060 	cmpeqi	r2,r2,1
100084ac:	1000071e 	bne	r2,zero,100084cc <addColorBits+0x48>
100084b0:	e0bffe17 	ldw	r2,-8(fp)
100084b4:	10800098 	cmpnei	r2,r2,2
100084b8:	1000021e 	bne	r2,zero,100084c4 <addColorBits+0x40>
100084bc:	008000c4 	movi	r2,3
100084c0:	00000106 	br	100084c8 <addColorBits+0x44>
100084c4:	00800044 	movi	r2,1
100084c8:	00000106 	br	100084d0 <addColorBits+0x4c>
100084cc:	008001c4 	movi	r2,7
100084d0:	e0bffa15 	stw	r2,-24(fp)
  /*p = the partial index in the byte, e.g. with 4 palettebits it is 0 for first half or 1 for second half*/
  unsigned p = index & m;
100084d4:	e0fffd17 	ldw	r3,-12(fp)
100084d8:	e0bffa17 	ldw	r2,-24(fp)
100084dc:	1884703a 	and	r2,r3,r2
100084e0:	e0bffb15 	stw	r2,-20(fp)
  in &= (1u << bits) - 1u; /*filter out any other bits of the input value*/
100084e4:	e0bffe17 	ldw	r2,-8(fp)
100084e8:	00c00044 	movi	r3,1
100084ec:	1884983a 	sll	r2,r3,r2
100084f0:	10bfffc4 	addi	r2,r2,-1
100084f4:	e0ffff17 	ldw	r3,-4(fp)
100084f8:	1884703a 	and	r2,r3,r2
100084fc:	e0bfff15 	stw	r2,-4(fp)
  in = in << (bits * (m - p));
10008500:	e0fffa17 	ldw	r3,-24(fp)
10008504:	e0bffb17 	ldw	r2,-20(fp)
10008508:	1885c83a 	sub	r2,r3,r2
1000850c:	1009883a 	mov	r4,r2
10008510:	e17ffe17 	ldw	r5,-8(fp)
10008514:	00146fc0 	call	100146fc <__mulsi3>
10008518:	e0ffff17 	ldw	r3,-4(fp)
1000851c:	1884983a 	sll	r2,r3,r2
10008520:	e0bfff15 	stw	r2,-4(fp)
  if(p == 0) out[index * bits / 8] = in;
10008524:	e0bffb17 	ldw	r2,-20(fp)
10008528:	1000091e 	bne	r2,zero,10008550 <addColorBits+0xcc>
1000852c:	e13ffd17 	ldw	r4,-12(fp)
10008530:	e17ffe17 	ldw	r5,-8(fp)
10008534:	00146fc0 	call	100146fc <__mulsi3>
10008538:	1004d0fa 	srli	r2,r2,3
1000853c:	e0fffc17 	ldw	r3,-16(fp)
10008540:	1885883a 	add	r2,r3,r2
10008544:	e0ffff17 	ldw	r3,-4(fp)
10008548:	10c00005 	stb	r3,0(r2)
1000854c:	00000c06 	br	10008580 <addColorBits+0xfc>
  else out[index * bits / 8] |= in;
10008550:	e13ffd17 	ldw	r4,-12(fp)
10008554:	e17ffe17 	ldw	r5,-8(fp)
10008558:	00146fc0 	call	100146fc <__mulsi3>
1000855c:	1004d0fa 	srli	r2,r2,3
10008560:	e0fffc17 	ldw	r3,-16(fp)
10008564:	1887883a 	add	r3,r3,r2
10008568:	e13ffc17 	ldw	r4,-16(fp)
1000856c:	2085883a 	add	r2,r4,r2
10008570:	11000003 	ldbu	r4,0(r2)
10008574:	e0bfff17 	ldw	r2,-4(fp)
10008578:	2084b03a 	or	r2,r4,r2
1000857c:	18800005 	stb	r2,0(r3)
}
10008580:	e037883a 	mov	sp,fp
10008584:	dfc00117 	ldw	ra,4(sp)
10008588:	df000017 	ldw	fp,0(sp)
1000858c:	dec00204 	addi	sp,sp,8
10008590:	f800283a 	ret

10008594 <color_tree_init>:
  ColorTree* children[16]; /*up to 16 pointers to ColorTree of next level*/
  int index; /*the payload. Only has a meaningful value if this is in the last level*/
};

static void color_tree_init(ColorTree* tree)
{
10008594:	defffd04 	addi	sp,sp,-12
10008598:	df000215 	stw	fp,8(sp)
1000859c:	df000204 	addi	fp,sp,8
100085a0:	e13fff15 	stw	r4,-4(fp)
  int i;
  for(i = 0; i != 16; ++i) tree->children[i] = 0;
100085a4:	e03ffe15 	stw	zero,-8(fp)
100085a8:	00000906 	br	100085d0 <color_tree_init+0x3c>
100085ac:	e0ffff17 	ldw	r3,-4(fp)
100085b0:	e0bffe17 	ldw	r2,-8(fp)
100085b4:	1085883a 	add	r2,r2,r2
100085b8:	1085883a 	add	r2,r2,r2
100085bc:	1885883a 	add	r2,r3,r2
100085c0:	10000015 	stw	zero,0(r2)
100085c4:	e0bffe17 	ldw	r2,-8(fp)
100085c8:	10800044 	addi	r2,r2,1
100085cc:	e0bffe15 	stw	r2,-8(fp)
100085d0:	e0bffe17 	ldw	r2,-8(fp)
100085d4:	10800418 	cmpnei	r2,r2,16
100085d8:	103ff41e 	bne	r2,zero,100085ac <__alt_data_end+0xf80085ac>
  tree->index = -1;
100085dc:	e0bfff17 	ldw	r2,-4(fp)
100085e0:	00ffffc4 	movi	r3,-1
100085e4:	10c01015 	stw	r3,64(r2)
}
100085e8:	e037883a 	mov	sp,fp
100085ec:	df000017 	ldw	fp,0(sp)
100085f0:	dec00104 	addi	sp,sp,4
100085f4:	f800283a 	ret

100085f8 <color_tree_cleanup>:

static void color_tree_cleanup(ColorTree* tree)
{
100085f8:	defffc04 	addi	sp,sp,-16
100085fc:	dfc00315 	stw	ra,12(sp)
10008600:	df000215 	stw	fp,8(sp)
10008604:	df000204 	addi	fp,sp,8
10008608:	e13fff15 	stw	r4,-4(fp)
  int i;
  for(i = 0; i != 16; ++i)
1000860c:	e03ffe15 	stw	zero,-8(fp)
10008610:	00001a06 	br	1000867c <color_tree_cleanup+0x84>
  {
    if(tree->children[i])
10008614:	e0ffff17 	ldw	r3,-4(fp)
10008618:	e0bffe17 	ldw	r2,-8(fp)
1000861c:	1085883a 	add	r2,r2,r2
10008620:	1085883a 	add	r2,r2,r2
10008624:	1885883a 	add	r2,r3,r2
10008628:	10800017 	ldw	r2,0(r2)
1000862c:	10001026 	beq	r2,zero,10008670 <color_tree_cleanup+0x78>
    {
      color_tree_cleanup(tree->children[i]);
10008630:	e0ffff17 	ldw	r3,-4(fp)
10008634:	e0bffe17 	ldw	r2,-8(fp)
10008638:	1085883a 	add	r2,r2,r2
1000863c:	1085883a 	add	r2,r2,r2
10008640:	1885883a 	add	r2,r3,r2
10008644:	10800017 	ldw	r2,0(r2)
10008648:	1009883a 	mov	r4,r2
1000864c:	00085f80 	call	100085f8 <color_tree_cleanup>
      lodepng_free(tree->children[i]);
10008650:	e0ffff17 	ldw	r3,-4(fp)
10008654:	e0bffe17 	ldw	r2,-8(fp)
10008658:	1085883a 	add	r2,r2,r2
1000865c:	1085883a 	add	r2,r2,r2
10008660:	1885883a 	add	r2,r3,r2
10008664:	10800017 	ldw	r2,0(r2)
10008668:	1009883a 	mov	r4,r2
1000866c:	000025c0 	call	1000025c <lodepng_free>
}

static void color_tree_cleanup(ColorTree* tree)
{
  int i;
  for(i = 0; i != 16; ++i)
10008670:	e0bffe17 	ldw	r2,-8(fp)
10008674:	10800044 	addi	r2,r2,1
10008678:	e0bffe15 	stw	r2,-8(fp)
1000867c:	e0bffe17 	ldw	r2,-8(fp)
10008680:	10800418 	cmpnei	r2,r2,16
10008684:	103fe31e 	bne	r2,zero,10008614 <__alt_data_end+0xf8008614>
    {
      color_tree_cleanup(tree->children[i]);
      lodepng_free(tree->children[i]);
    }
  }
}
10008688:	e037883a 	mov	sp,fp
1000868c:	dfc00117 	ldw	ra,4(sp)
10008690:	df000017 	ldw	fp,0(sp)
10008694:	dec00204 	addi	sp,sp,8
10008698:	f800283a 	ret

1000869c <color_tree_get>:

/*returns -1 if color not present, its index otherwise*/
static int color_tree_get(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
{
1000869c:	defff804 	addi	sp,sp,-32
100086a0:	df000715 	stw	fp,28(sp)
100086a4:	df000704 	addi	fp,sp,28
100086a8:	e13ffb15 	stw	r4,-20(fp)
100086ac:	2809883a 	mov	r4,r5
100086b0:	3007883a 	mov	r3,r6
100086b4:	3805883a 	mov	r2,r7
100086b8:	e1400117 	ldw	r5,4(fp)
100086bc:	e13ffc05 	stb	r4,-16(fp)
100086c0:	e0fffd05 	stb	r3,-12(fp)
100086c4:	e0bffe05 	stb	r2,-8(fp)
100086c8:	e17fff05 	stb	r5,-4(fp)
  int bit = 0;
100086cc:	e03ff915 	stw	zero,-28(fp)
  for(bit = 0; bit < 8; ++bit)
100086d0:	e03ff915 	stw	zero,-28(fp)
100086d4:	00002d06 	br	1000878c <color_tree_get+0xf0>
  {
    int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
100086d8:	e0fffc03 	ldbu	r3,-16(fp)
100086dc:	e0bff917 	ldw	r2,-28(fp)
100086e0:	1885d83a 	sra	r2,r3,r2
100086e4:	1080004c 	andi	r2,r2,1
100086e8:	1085883a 	add	r2,r2,r2
100086ec:	1007883a 	mov	r3,r2
100086f0:	e13ffd03 	ldbu	r4,-12(fp)
100086f4:	e0bff917 	ldw	r2,-28(fp)
100086f8:	2085d83a 	sra	r2,r4,r2
100086fc:	1080004c 	andi	r2,r2,1
10008700:	1885883a 	add	r2,r3,r2
10008704:	1085883a 	add	r2,r2,r2
10008708:	1007883a 	mov	r3,r2
1000870c:	e13ffe03 	ldbu	r4,-8(fp)
10008710:	e0bff917 	ldw	r2,-28(fp)
10008714:	2085d83a 	sra	r2,r4,r2
10008718:	1080004c 	andi	r2,r2,1
1000871c:	1885883a 	add	r2,r3,r2
10008720:	1085883a 	add	r2,r2,r2
10008724:	1007883a 	mov	r3,r2
10008728:	e13fff03 	ldbu	r4,-4(fp)
1000872c:	e0bff917 	ldw	r2,-28(fp)
10008730:	2085d83a 	sra	r2,r4,r2
10008734:	1080004c 	andi	r2,r2,1
10008738:	1885883a 	add	r2,r3,r2
1000873c:	e0bffa15 	stw	r2,-24(fp)
    if(!tree->children[i]) return -1;
10008740:	e0fffb17 	ldw	r3,-20(fp)
10008744:	e0bffa17 	ldw	r2,-24(fp)
10008748:	1085883a 	add	r2,r2,r2
1000874c:	1085883a 	add	r2,r2,r2
10008750:	1885883a 	add	r2,r3,r2
10008754:	10800017 	ldw	r2,0(r2)
10008758:	1000021e 	bne	r2,zero,10008764 <color_tree_get+0xc8>
1000875c:	00bfffc4 	movi	r2,-1
10008760:	00001306 	br	100087b0 <color_tree_get+0x114>
    else tree = tree->children[i];
10008764:	e0fffb17 	ldw	r3,-20(fp)
10008768:	e0bffa17 	ldw	r2,-24(fp)
1000876c:	1085883a 	add	r2,r2,r2
10008770:	1085883a 	add	r2,r2,r2
10008774:	1885883a 	add	r2,r3,r2
10008778:	10800017 	ldw	r2,0(r2)
1000877c:	e0bffb15 	stw	r2,-20(fp)

/*returns -1 if color not present, its index otherwise*/
static int color_tree_get(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
{
  int bit = 0;
  for(bit = 0; bit < 8; ++bit)
10008780:	e0bff917 	ldw	r2,-28(fp)
10008784:	10800044 	addi	r2,r2,1
10008788:	e0bff915 	stw	r2,-28(fp)
1000878c:	e0bff917 	ldw	r2,-28(fp)
10008790:	10800210 	cmplti	r2,r2,8
10008794:	103fd01e 	bne	r2,zero,100086d8 <__alt_data_end+0xf80086d8>
  {
    int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
    if(!tree->children[i]) return -1;
    else tree = tree->children[i];
  }
  return tree ? tree->index : -1;
10008798:	e0bffb17 	ldw	r2,-20(fp)
1000879c:	10000326 	beq	r2,zero,100087ac <color_tree_get+0x110>
100087a0:	e0bffb17 	ldw	r2,-20(fp)
100087a4:	10801017 	ldw	r2,64(r2)
100087a8:	00000106 	br	100087b0 <color_tree_get+0x114>
100087ac:	00bfffc4 	movi	r2,-1
}
100087b0:	e037883a 	mov	sp,fp
100087b4:	df000017 	ldw	fp,0(sp)
100087b8:	dec00104 	addi	sp,sp,4
100087bc:	f800283a 	ret

100087c0 <color_tree_has>:

#ifdef LODEPNG_COMPILE_ENCODER
static int color_tree_has(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
{
100087c0:	defff804 	addi	sp,sp,-32
100087c4:	dfc00715 	stw	ra,28(sp)
100087c8:	df000615 	stw	fp,24(sp)
100087cc:	df000604 	addi	fp,sp,24
100087d0:	e13ffb15 	stw	r4,-20(fp)
100087d4:	2809883a 	mov	r4,r5
100087d8:	3007883a 	mov	r3,r6
100087dc:	3805883a 	mov	r2,r7
100087e0:	e1400217 	ldw	r5,8(fp)
100087e4:	e13ffc05 	stb	r4,-16(fp)
100087e8:	e0fffd05 	stb	r3,-12(fp)
100087ec:	e0bffe05 	stb	r2,-8(fp)
100087f0:	e17fff05 	stb	r5,-4(fp)
  return color_tree_get(tree, r, g, b, a) >= 0;
100087f4:	e17ffc03 	ldbu	r5,-16(fp)
100087f8:	e0fffd03 	ldbu	r3,-12(fp)
100087fc:	e0bffe03 	ldbu	r2,-8(fp)
10008800:	e13fff03 	ldbu	r4,-4(fp)
10008804:	d9000015 	stw	r4,0(sp)
10008808:	e13ffb17 	ldw	r4,-20(fp)
1000880c:	180d883a 	mov	r6,r3
10008810:	100f883a 	mov	r7,r2
10008814:	000869c0 	call	1000869c <color_tree_get>
10008818:	0084303a 	nor	r2,zero,r2
1000881c:	1004d7fa 	srli	r2,r2,31
10008820:	10803fcc 	andi	r2,r2,255
}
10008824:	e037883a 	mov	sp,fp
10008828:	dfc00117 	ldw	ra,4(sp)
1000882c:	df000017 	ldw	fp,0(sp)
10008830:	dec00204 	addi	sp,sp,8
10008834:	f800283a 	ret

10008838 <color_tree_add>:

/*color is not allowed to already exist.
Index should be >= 0 (it's signed to be compatible with using -1 for "doesn't exist")*/
static void color_tree_add(ColorTree* tree,
                           unsigned char r, unsigned char g, unsigned char b, unsigned char a, unsigned index)
{
10008838:	defff704 	addi	sp,sp,-36
1000883c:	dfc00815 	stw	ra,32(sp)
10008840:	df000715 	stw	fp,28(sp)
10008844:	df000704 	addi	fp,sp,28
10008848:	e13ffb15 	stw	r4,-20(fp)
1000884c:	2809883a 	mov	r4,r5
10008850:	3007883a 	mov	r3,r6
10008854:	3805883a 	mov	r2,r7
10008858:	e1400217 	ldw	r5,8(fp)
1000885c:	e13ffc05 	stb	r4,-16(fp)
10008860:	e0fffd05 	stb	r3,-12(fp)
10008864:	e0bffe05 	stb	r2,-8(fp)
10008868:	e17fff05 	stb	r5,-4(fp)
  int bit;
  for(bit = 0; bit < 8; ++bit)
1000886c:	e03ff915 	stw	zero,-28(fp)
10008870:	00003c06 	br	10008964 <color_tree_add+0x12c>
  {
    int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
10008874:	e0fffc03 	ldbu	r3,-16(fp)
10008878:	e0bff917 	ldw	r2,-28(fp)
1000887c:	1885d83a 	sra	r2,r3,r2
10008880:	1080004c 	andi	r2,r2,1
10008884:	1085883a 	add	r2,r2,r2
10008888:	1007883a 	mov	r3,r2
1000888c:	e13ffd03 	ldbu	r4,-12(fp)
10008890:	e0bff917 	ldw	r2,-28(fp)
10008894:	2085d83a 	sra	r2,r4,r2
10008898:	1080004c 	andi	r2,r2,1
1000889c:	1885883a 	add	r2,r3,r2
100088a0:	1085883a 	add	r2,r2,r2
100088a4:	1007883a 	mov	r3,r2
100088a8:	e13ffe03 	ldbu	r4,-8(fp)
100088ac:	e0bff917 	ldw	r2,-28(fp)
100088b0:	2085d83a 	sra	r2,r4,r2
100088b4:	1080004c 	andi	r2,r2,1
100088b8:	1885883a 	add	r2,r3,r2
100088bc:	1085883a 	add	r2,r2,r2
100088c0:	1007883a 	mov	r3,r2
100088c4:	e13fff03 	ldbu	r4,-4(fp)
100088c8:	e0bff917 	ldw	r2,-28(fp)
100088cc:	2085d83a 	sra	r2,r4,r2
100088d0:	1080004c 	andi	r2,r2,1
100088d4:	1885883a 	add	r2,r3,r2
100088d8:	e0bffa15 	stw	r2,-24(fp)
    if(!tree->children[i])
100088dc:	e0fffb17 	ldw	r3,-20(fp)
100088e0:	e0bffa17 	ldw	r2,-24(fp)
100088e4:	1085883a 	add	r2,r2,r2
100088e8:	1085883a 	add	r2,r2,r2
100088ec:	1885883a 	add	r2,r3,r2
100088f0:	10800017 	ldw	r2,0(r2)
100088f4:	1000111e 	bne	r2,zero,1000893c <color_tree_add+0x104>
    {
      tree->children[i] = (ColorTree*)lodepng_malloc(sizeof(ColorTree));
100088f8:	01001104 	movi	r4,68
100088fc:	00001f40 	call	100001f4 <lodepng_malloc>
10008900:	1007883a 	mov	r3,r2
10008904:	e13ffb17 	ldw	r4,-20(fp)
10008908:	e0bffa17 	ldw	r2,-24(fp)
1000890c:	1085883a 	add	r2,r2,r2
10008910:	1085883a 	add	r2,r2,r2
10008914:	2085883a 	add	r2,r4,r2
10008918:	10c00015 	stw	r3,0(r2)
      color_tree_init(tree->children[i]);
1000891c:	e0fffb17 	ldw	r3,-20(fp)
10008920:	e0bffa17 	ldw	r2,-24(fp)
10008924:	1085883a 	add	r2,r2,r2
10008928:	1085883a 	add	r2,r2,r2
1000892c:	1885883a 	add	r2,r3,r2
10008930:	10800017 	ldw	r2,0(r2)
10008934:	1009883a 	mov	r4,r2
10008938:	00085940 	call	10008594 <color_tree_init>
    }
    tree = tree->children[i];
1000893c:	e0fffb17 	ldw	r3,-20(fp)
10008940:	e0bffa17 	ldw	r2,-24(fp)
10008944:	1085883a 	add	r2,r2,r2
10008948:	1085883a 	add	r2,r2,r2
1000894c:	1885883a 	add	r2,r3,r2
10008950:	10800017 	ldw	r2,0(r2)
10008954:	e0bffb15 	stw	r2,-20(fp)
Index should be >= 0 (it's signed to be compatible with using -1 for "doesn't exist")*/
static void color_tree_add(ColorTree* tree,
                           unsigned char r, unsigned char g, unsigned char b, unsigned char a, unsigned index)
{
  int bit;
  for(bit = 0; bit < 8; ++bit)
10008958:	e0bff917 	ldw	r2,-28(fp)
1000895c:	10800044 	addi	r2,r2,1
10008960:	e0bff915 	stw	r2,-28(fp)
10008964:	e0bff917 	ldw	r2,-28(fp)
10008968:	10800210 	cmplti	r2,r2,8
1000896c:	103fc11e 	bne	r2,zero,10008874 <__alt_data_end+0xf8008874>
      tree->children[i] = (ColorTree*)lodepng_malloc(sizeof(ColorTree));
      color_tree_init(tree->children[i]);
    }
    tree = tree->children[i];
  }
  tree->index = (int)index;
10008970:	e0c00317 	ldw	r3,12(fp)
10008974:	e0bffb17 	ldw	r2,-20(fp)
10008978:	10c01015 	stw	r3,64(r2)
}
1000897c:	e037883a 	mov	sp,fp
10008980:	dfc00117 	ldw	ra,4(sp)
10008984:	df000017 	ldw	fp,0(sp)
10008988:	dec00204 	addi	sp,sp,8
1000898c:	f800283a 	ret

10008990 <rgba8ToPixel>:

/*put a pixel, given its RGBA color, into image of any color type*/
static unsigned rgba8ToPixel(unsigned char* out, size_t i,
                             const LodePNGColorMode* mode, ColorTree* tree /*for palette*/,
                             unsigned char r, unsigned char g, unsigned char b, unsigned char a)
{
10008990:	defff104 	addi	sp,sp,-60
10008994:	dfc00e15 	stw	ra,56(sp)
10008998:	df000d15 	stw	fp,52(sp)
1000899c:	dc000c15 	stw	r16,48(sp)
100089a0:	df000c04 	addi	fp,sp,48
100089a4:	e13ff815 	stw	r4,-32(fp)
100089a8:	e17ff915 	stw	r5,-28(fp)
100089ac:	e1bffa15 	stw	r6,-24(fp)
100089b0:	e1fffb15 	stw	r7,-20(fp)
100089b4:	e1400317 	ldw	r5,12(fp)
100089b8:	e1000417 	ldw	r4,16(fp)
100089bc:	e0c00517 	ldw	r3,20(fp)
100089c0:	e0800617 	ldw	r2,24(fp)
100089c4:	e17ffc05 	stb	r5,-16(fp)
100089c8:	e13ffd05 	stb	r4,-12(fp)
100089cc:	e0fffe05 	stb	r3,-8(fp)
100089d0:	e0bfff05 	stb	r2,-4(fp)
  if(mode->colortype == LCT_GREY)
100089d4:	e0bffa17 	ldw	r2,-24(fp)
100089d8:	10800017 	ldw	r2,0(r2)
100089dc:	1000351e 	bne	r2,zero,10008ab4 <rgba8ToPixel+0x124>
  {
    unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
100089e0:	e0bffc03 	ldbu	r2,-16(fp)
100089e4:	e0bff505 	stb	r2,-44(fp)
    if(mode->bitdepth == 8) out[i] = grey;
100089e8:	e0bffa17 	ldw	r2,-24(fp)
100089ec:	10800117 	ldw	r2,4(r2)
100089f0:	10800218 	cmpnei	r2,r2,8
100089f4:	1000061e 	bne	r2,zero,10008a10 <rgba8ToPixel+0x80>
100089f8:	e0fff817 	ldw	r3,-32(fp)
100089fc:	e0bff917 	ldw	r2,-28(fp)
10008a00:	1885883a 	add	r2,r3,r2
10008a04:	e0fff503 	ldbu	r3,-44(fp)
10008a08:	10c00005 	stb	r3,0(r2)
10008a0c:	00013c06 	br	10008f00 <rgba8ToPixel+0x570>
    else if(mode->bitdepth == 16) out[i * 2 + 0] = out[i * 2 + 1] = grey;
10008a10:	e0bffa17 	ldw	r2,-24(fp)
10008a14:	10800117 	ldw	r2,4(r2)
10008a18:	10800418 	cmpnei	r2,r2,16
10008a1c:	10000e1e 	bne	r2,zero,10008a58 <rgba8ToPixel+0xc8>
10008a20:	e0bff917 	ldw	r2,-28(fp)
10008a24:	1085883a 	add	r2,r2,r2
10008a28:	e0fff817 	ldw	r3,-32(fp)
10008a2c:	1887883a 	add	r3,r3,r2
10008a30:	e0bff917 	ldw	r2,-28(fp)
10008a34:	1085883a 	add	r2,r2,r2
10008a38:	10800044 	addi	r2,r2,1
10008a3c:	e13ff817 	ldw	r4,-32(fp)
10008a40:	2085883a 	add	r2,r4,r2
10008a44:	e13ff503 	ldbu	r4,-44(fp)
10008a48:	11000005 	stb	r4,0(r2)
10008a4c:	10800003 	ldbu	r2,0(r2)
10008a50:	18800005 	stb	r2,0(r3)
10008a54:	00012a06 	br	10008f00 <rgba8ToPixel+0x570>
    else
    {
      /*take the most significant bits of grey*/
      grey = (grey >> (8 - mode->bitdepth)) & ((1 << mode->bitdepth) - 1);
10008a58:	e0fff503 	ldbu	r3,-44(fp)
10008a5c:	e0bffa17 	ldw	r2,-24(fp)
10008a60:	10800117 	ldw	r2,4(r2)
10008a64:	01000204 	movi	r4,8
10008a68:	2085c83a 	sub	r2,r4,r2
10008a6c:	1885d83a 	sra	r2,r3,r2
10008a70:	1007883a 	mov	r3,r2
10008a74:	e0bffa17 	ldw	r2,-24(fp)
10008a78:	10800117 	ldw	r2,4(r2)
10008a7c:	01000044 	movi	r4,1
10008a80:	2084983a 	sll	r2,r4,r2
10008a84:	10bfffc4 	addi	r2,r2,-1
10008a88:	1884703a 	and	r2,r3,r2
10008a8c:	e0bff505 	stb	r2,-44(fp)
      addColorBits(out, i, mode->bitdepth, grey);
10008a90:	e0bffa17 	ldw	r2,-24(fp)
10008a94:	10c00117 	ldw	r3,4(r2)
10008a98:	e0bff503 	ldbu	r2,-44(fp)
10008a9c:	e13ff817 	ldw	r4,-32(fp)
10008aa0:	e17ff917 	ldw	r5,-28(fp)
10008aa4:	180d883a 	mov	r6,r3
10008aa8:	100f883a 	mov	r7,r2
10008aac:	00084840 	call	10008484 <addColorBits>
10008ab0:	00011306 	br	10008f00 <rgba8ToPixel+0x570>
    }
  }
  else if(mode->colortype == LCT_RGB)
10008ab4:	e0bffa17 	ldw	r2,-24(fp)
10008ab8:	10800017 	ldw	r2,0(r2)
10008abc:	10800098 	cmpnei	r2,r2,2
10008ac0:	10004f1e 	bne	r2,zero,10008c00 <rgba8ToPixel+0x270>
  {
    if(mode->bitdepth == 8)
10008ac4:	e0bffa17 	ldw	r2,-24(fp)
10008ac8:	10800117 	ldw	r2,4(r2)
10008acc:	10800218 	cmpnei	r2,r2,8
10008ad0:	10001b1e 	bne	r2,zero,10008b40 <rgba8ToPixel+0x1b0>
    {
      out[i * 3 + 0] = r;
10008ad4:	e0fff917 	ldw	r3,-28(fp)
10008ad8:	1805883a 	mov	r2,r3
10008adc:	1085883a 	add	r2,r2,r2
10008ae0:	10c5883a 	add	r2,r2,r3
10008ae4:	e0fff817 	ldw	r3,-32(fp)
10008ae8:	1885883a 	add	r2,r3,r2
10008aec:	e0fffc03 	ldbu	r3,-16(fp)
10008af0:	10c00005 	stb	r3,0(r2)
      out[i * 3 + 1] = g;
10008af4:	e0fff917 	ldw	r3,-28(fp)
10008af8:	1805883a 	mov	r2,r3
10008afc:	1085883a 	add	r2,r2,r2
10008b00:	10c5883a 	add	r2,r2,r3
10008b04:	10800044 	addi	r2,r2,1
10008b08:	e0fff817 	ldw	r3,-32(fp)
10008b0c:	1885883a 	add	r2,r3,r2
10008b10:	e0fffd03 	ldbu	r3,-12(fp)
10008b14:	10c00005 	stb	r3,0(r2)
      out[i * 3 + 2] = b;
10008b18:	e0fff917 	ldw	r3,-28(fp)
10008b1c:	1805883a 	mov	r2,r3
10008b20:	1085883a 	add	r2,r2,r2
10008b24:	10c5883a 	add	r2,r2,r3
10008b28:	10800084 	addi	r2,r2,2
10008b2c:	e0fff817 	ldw	r3,-32(fp)
10008b30:	1885883a 	add	r2,r3,r2
10008b34:	e0fffe03 	ldbu	r3,-8(fp)
10008b38:	10c00005 	stb	r3,0(r2)
10008b3c:	0000f006 	br	10008f00 <rgba8ToPixel+0x570>
    }
    else
    {
      out[i * 6 + 0] = out[i * 6 + 1] = r;
10008b40:	e13ff917 	ldw	r4,-28(fp)
10008b44:	01400184 	movi	r5,6
10008b48:	00146fc0 	call	100146fc <__mulsi3>
10008b4c:	e0fff817 	ldw	r3,-32(fp)
10008b50:	18a1883a 	add	r16,r3,r2
10008b54:	e13ff917 	ldw	r4,-28(fp)
10008b58:	01400184 	movi	r5,6
10008b5c:	00146fc0 	call	100146fc <__mulsi3>
10008b60:	10800044 	addi	r2,r2,1
10008b64:	e0fff817 	ldw	r3,-32(fp)
10008b68:	1885883a 	add	r2,r3,r2
10008b6c:	e0fffc03 	ldbu	r3,-16(fp)
10008b70:	10c00005 	stb	r3,0(r2)
10008b74:	10800003 	ldbu	r2,0(r2)
10008b78:	80800005 	stb	r2,0(r16)
      out[i * 6 + 2] = out[i * 6 + 3] = g;
10008b7c:	e13ff917 	ldw	r4,-28(fp)
10008b80:	01400184 	movi	r5,6
10008b84:	00146fc0 	call	100146fc <__mulsi3>
10008b88:	10800084 	addi	r2,r2,2
10008b8c:	e0fff817 	ldw	r3,-32(fp)
10008b90:	18a1883a 	add	r16,r3,r2
10008b94:	e13ff917 	ldw	r4,-28(fp)
10008b98:	01400184 	movi	r5,6
10008b9c:	00146fc0 	call	100146fc <__mulsi3>
10008ba0:	108000c4 	addi	r2,r2,3
10008ba4:	e0fff817 	ldw	r3,-32(fp)
10008ba8:	1885883a 	add	r2,r3,r2
10008bac:	e0fffd03 	ldbu	r3,-12(fp)
10008bb0:	10c00005 	stb	r3,0(r2)
10008bb4:	10800003 	ldbu	r2,0(r2)
10008bb8:	80800005 	stb	r2,0(r16)
      out[i * 6 + 4] = out[i * 6 + 5] = b;
10008bbc:	e13ff917 	ldw	r4,-28(fp)
10008bc0:	01400184 	movi	r5,6
10008bc4:	00146fc0 	call	100146fc <__mulsi3>
10008bc8:	10800104 	addi	r2,r2,4
10008bcc:	e0fff817 	ldw	r3,-32(fp)
10008bd0:	18a1883a 	add	r16,r3,r2
10008bd4:	e13ff917 	ldw	r4,-28(fp)
10008bd8:	01400184 	movi	r5,6
10008bdc:	00146fc0 	call	100146fc <__mulsi3>
10008be0:	10800144 	addi	r2,r2,5
10008be4:	e0fff817 	ldw	r3,-32(fp)
10008be8:	1885883a 	add	r2,r3,r2
10008bec:	e0fffe03 	ldbu	r3,-8(fp)
10008bf0:	10c00005 	stb	r3,0(r2)
10008bf4:	10800003 	ldbu	r2,0(r2)
10008bf8:	80800005 	stb	r2,0(r16)
10008bfc:	0000c006 	br	10008f00 <rgba8ToPixel+0x570>
    }
  }
  else if(mode->colortype == LCT_PALETTE)
10008c00:	e0bffa17 	ldw	r2,-24(fp)
10008c04:	10800017 	ldw	r2,0(r2)
10008c08:	108000d8 	cmpnei	r2,r2,3
10008c0c:	1000211e 	bne	r2,zero,10008c94 <rgba8ToPixel+0x304>
  {
    int index = color_tree_get(tree, r, g, b, a);
10008c10:	e17ffc03 	ldbu	r5,-16(fp)
10008c14:	e0fffd03 	ldbu	r3,-12(fp)
10008c18:	e0bffe03 	ldbu	r2,-8(fp)
10008c1c:	e13fff03 	ldbu	r4,-4(fp)
10008c20:	d9000015 	stw	r4,0(sp)
10008c24:	e13ffb17 	ldw	r4,-20(fp)
10008c28:	180d883a 	mov	r6,r3
10008c2c:	100f883a 	mov	r7,r2
10008c30:	000869c0 	call	1000869c <color_tree_get>
10008c34:	e0bff615 	stw	r2,-40(fp)
    if(index < 0) return 82; /*color not in palette*/
10008c38:	e0bff617 	ldw	r2,-40(fp)
10008c3c:	1000020e 	bge	r2,zero,10008c48 <rgba8ToPixel+0x2b8>
10008c40:	00801484 	movi	r2,82
10008c44:	0000af06 	br	10008f04 <rgba8ToPixel+0x574>
    if(mode->bitdepth == 8) out[i] = index;
10008c48:	e0bffa17 	ldw	r2,-24(fp)
10008c4c:	10800117 	ldw	r2,4(r2)
10008c50:	10800218 	cmpnei	r2,r2,8
10008c54:	1000061e 	bne	r2,zero,10008c70 <rgba8ToPixel+0x2e0>
10008c58:	e0fff817 	ldw	r3,-32(fp)
10008c5c:	e0bff917 	ldw	r2,-28(fp)
10008c60:	1885883a 	add	r2,r3,r2
10008c64:	e0fff617 	ldw	r3,-40(fp)
10008c68:	10c00005 	stb	r3,0(r2)
10008c6c:	0000a406 	br	10008f00 <rgba8ToPixel+0x570>
    else addColorBits(out, i, mode->bitdepth, (unsigned)index);
10008c70:	e0bffa17 	ldw	r2,-24(fp)
10008c74:	10c00117 	ldw	r3,4(r2)
10008c78:	e0bff617 	ldw	r2,-40(fp)
10008c7c:	e13ff817 	ldw	r4,-32(fp)
10008c80:	e17ff917 	ldw	r5,-28(fp)
10008c84:	180d883a 	mov	r6,r3
10008c88:	100f883a 	mov	r7,r2
10008c8c:	00084840 	call	10008484 <addColorBits>
10008c90:	00009b06 	br	10008f00 <rgba8ToPixel+0x570>
  }
  else if(mode->colortype == LCT_GREY_ALPHA)
10008c94:	e0bffa17 	ldw	r2,-24(fp)
10008c98:	10800017 	ldw	r2,0(r2)
10008c9c:	10800118 	cmpnei	r2,r2,4
10008ca0:	1000381e 	bne	r2,zero,10008d84 <rgba8ToPixel+0x3f4>
  {
    unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
10008ca4:	e0bffc03 	ldbu	r2,-16(fp)
10008ca8:	e0bff705 	stb	r2,-36(fp)
    if(mode->bitdepth == 8)
10008cac:	e0bffa17 	ldw	r2,-24(fp)
10008cb0:	10800117 	ldw	r2,4(r2)
10008cb4:	10800218 	cmpnei	r2,r2,8
10008cb8:	10000e1e 	bne	r2,zero,10008cf4 <rgba8ToPixel+0x364>
    {
      out[i * 2 + 0] = grey;
10008cbc:	e0bff917 	ldw	r2,-28(fp)
10008cc0:	1085883a 	add	r2,r2,r2
10008cc4:	e0fff817 	ldw	r3,-32(fp)
10008cc8:	1885883a 	add	r2,r3,r2
10008ccc:	e0fff703 	ldbu	r3,-36(fp)
10008cd0:	10c00005 	stb	r3,0(r2)
      out[i * 2 + 1] = a;
10008cd4:	e0bff917 	ldw	r2,-28(fp)
10008cd8:	1085883a 	add	r2,r2,r2
10008cdc:	10800044 	addi	r2,r2,1
10008ce0:	e0fff817 	ldw	r3,-32(fp)
10008ce4:	1885883a 	add	r2,r3,r2
10008ce8:	e0ffff03 	ldbu	r3,-4(fp)
10008cec:	10c00005 	stb	r3,0(r2)
10008cf0:	00008306 	br	10008f00 <rgba8ToPixel+0x570>
    }
    else if(mode->bitdepth == 16)
10008cf4:	e0bffa17 	ldw	r2,-24(fp)
10008cf8:	10800117 	ldw	r2,4(r2)
10008cfc:	10800418 	cmpnei	r2,r2,16
10008d00:	10007f1e 	bne	r2,zero,10008f00 <rgba8ToPixel+0x570>
    {
      out[i * 4 + 0] = out[i * 4 + 1] = grey;
10008d04:	e0bff917 	ldw	r2,-28(fp)
10008d08:	1085883a 	add	r2,r2,r2
10008d0c:	1085883a 	add	r2,r2,r2
10008d10:	e0fff817 	ldw	r3,-32(fp)
10008d14:	1887883a 	add	r3,r3,r2
10008d18:	e0bff917 	ldw	r2,-28(fp)
10008d1c:	1085883a 	add	r2,r2,r2
10008d20:	1085883a 	add	r2,r2,r2
10008d24:	10800044 	addi	r2,r2,1
10008d28:	e13ff817 	ldw	r4,-32(fp)
10008d2c:	2085883a 	add	r2,r4,r2
10008d30:	e13ff703 	ldbu	r4,-36(fp)
10008d34:	11000005 	stb	r4,0(r2)
10008d38:	10800003 	ldbu	r2,0(r2)
10008d3c:	18800005 	stb	r2,0(r3)
      out[i * 4 + 2] = out[i * 4 + 3] = a;
10008d40:	e0bff917 	ldw	r2,-28(fp)
10008d44:	1085883a 	add	r2,r2,r2
10008d48:	1085883a 	add	r2,r2,r2
10008d4c:	10800084 	addi	r2,r2,2
10008d50:	e0fff817 	ldw	r3,-32(fp)
10008d54:	1887883a 	add	r3,r3,r2
10008d58:	e0bff917 	ldw	r2,-28(fp)
10008d5c:	1085883a 	add	r2,r2,r2
10008d60:	1085883a 	add	r2,r2,r2
10008d64:	108000c4 	addi	r2,r2,3
10008d68:	e13ff817 	ldw	r4,-32(fp)
10008d6c:	2085883a 	add	r2,r4,r2
10008d70:	e13fff03 	ldbu	r4,-4(fp)
10008d74:	11000005 	stb	r4,0(r2)
10008d78:	10800003 	ldbu	r2,0(r2)
10008d7c:	18800005 	stb	r2,0(r3)
10008d80:	00005f06 	br	10008f00 <rgba8ToPixel+0x570>
    }
  }
  else if(mode->colortype == LCT_RGBA)
10008d84:	e0bffa17 	ldw	r2,-24(fp)
10008d88:	10800017 	ldw	r2,0(r2)
10008d8c:	10800198 	cmpnei	r2,r2,6
10008d90:	10005b1e 	bne	r2,zero,10008f00 <rgba8ToPixel+0x570>
  {
    if(mode->bitdepth == 8)
10008d94:	e0bffa17 	ldw	r2,-24(fp)
10008d98:	10800117 	ldw	r2,4(r2)
10008d9c:	10800218 	cmpnei	r2,r2,8
10008da0:	1000201e 	bne	r2,zero,10008e24 <rgba8ToPixel+0x494>
    {
      out[i * 4 + 0] = r;
10008da4:	e0bff917 	ldw	r2,-28(fp)
10008da8:	1085883a 	add	r2,r2,r2
10008dac:	1085883a 	add	r2,r2,r2
10008db0:	e0fff817 	ldw	r3,-32(fp)
10008db4:	1885883a 	add	r2,r3,r2
10008db8:	e0fffc03 	ldbu	r3,-16(fp)
10008dbc:	10c00005 	stb	r3,0(r2)
      out[i * 4 + 1] = g;
10008dc0:	e0bff917 	ldw	r2,-28(fp)
10008dc4:	1085883a 	add	r2,r2,r2
10008dc8:	1085883a 	add	r2,r2,r2
10008dcc:	10800044 	addi	r2,r2,1
10008dd0:	e0fff817 	ldw	r3,-32(fp)
10008dd4:	1885883a 	add	r2,r3,r2
10008dd8:	e0fffd03 	ldbu	r3,-12(fp)
10008ddc:	10c00005 	stb	r3,0(r2)
      out[i * 4 + 2] = b;
10008de0:	e0bff917 	ldw	r2,-28(fp)
10008de4:	1085883a 	add	r2,r2,r2
10008de8:	1085883a 	add	r2,r2,r2
10008dec:	10800084 	addi	r2,r2,2
10008df0:	e0fff817 	ldw	r3,-32(fp)
10008df4:	1885883a 	add	r2,r3,r2
10008df8:	e0fffe03 	ldbu	r3,-8(fp)
10008dfc:	10c00005 	stb	r3,0(r2)
      out[i * 4 + 3] = a;
10008e00:	e0bff917 	ldw	r2,-28(fp)
10008e04:	1085883a 	add	r2,r2,r2
10008e08:	1085883a 	add	r2,r2,r2
10008e0c:	108000c4 	addi	r2,r2,3
10008e10:	e0fff817 	ldw	r3,-32(fp)
10008e14:	1885883a 	add	r2,r3,r2
10008e18:	e0ffff03 	ldbu	r3,-4(fp)
10008e1c:	10c00005 	stb	r3,0(r2)
10008e20:	00003706 	br	10008f00 <rgba8ToPixel+0x570>
    }
    else
    {
      out[i * 8 + 0] = out[i * 8 + 1] = r;
10008e24:	e0bff917 	ldw	r2,-28(fp)
10008e28:	100490fa 	slli	r2,r2,3
10008e2c:	e0fff817 	ldw	r3,-32(fp)
10008e30:	1887883a 	add	r3,r3,r2
10008e34:	e0bff917 	ldw	r2,-28(fp)
10008e38:	100490fa 	slli	r2,r2,3
10008e3c:	10800044 	addi	r2,r2,1
10008e40:	e13ff817 	ldw	r4,-32(fp)
10008e44:	2085883a 	add	r2,r4,r2
10008e48:	e13ffc03 	ldbu	r4,-16(fp)
10008e4c:	11000005 	stb	r4,0(r2)
10008e50:	10800003 	ldbu	r2,0(r2)
10008e54:	18800005 	stb	r2,0(r3)
      out[i * 8 + 2] = out[i * 8 + 3] = g;
10008e58:	e0bff917 	ldw	r2,-28(fp)
10008e5c:	100490fa 	slli	r2,r2,3
10008e60:	10800084 	addi	r2,r2,2
10008e64:	e0fff817 	ldw	r3,-32(fp)
10008e68:	1887883a 	add	r3,r3,r2
10008e6c:	e0bff917 	ldw	r2,-28(fp)
10008e70:	100490fa 	slli	r2,r2,3
10008e74:	108000c4 	addi	r2,r2,3
10008e78:	e13ff817 	ldw	r4,-32(fp)
10008e7c:	2085883a 	add	r2,r4,r2
10008e80:	e13ffd03 	ldbu	r4,-12(fp)
10008e84:	11000005 	stb	r4,0(r2)
10008e88:	10800003 	ldbu	r2,0(r2)
10008e8c:	18800005 	stb	r2,0(r3)
      out[i * 8 + 4] = out[i * 8 + 5] = b;
10008e90:	e0bff917 	ldw	r2,-28(fp)
10008e94:	100490fa 	slli	r2,r2,3
10008e98:	10800104 	addi	r2,r2,4
10008e9c:	e0fff817 	ldw	r3,-32(fp)
10008ea0:	1887883a 	add	r3,r3,r2
10008ea4:	e0bff917 	ldw	r2,-28(fp)
10008ea8:	100490fa 	slli	r2,r2,3
10008eac:	10800144 	addi	r2,r2,5
10008eb0:	e13ff817 	ldw	r4,-32(fp)
10008eb4:	2085883a 	add	r2,r4,r2
10008eb8:	e13ffe03 	ldbu	r4,-8(fp)
10008ebc:	11000005 	stb	r4,0(r2)
10008ec0:	10800003 	ldbu	r2,0(r2)
10008ec4:	18800005 	stb	r2,0(r3)
      out[i * 8 + 6] = out[i * 8 + 7] = a;
10008ec8:	e0bff917 	ldw	r2,-28(fp)
10008ecc:	100490fa 	slli	r2,r2,3
10008ed0:	10800184 	addi	r2,r2,6
10008ed4:	e0fff817 	ldw	r3,-32(fp)
10008ed8:	1887883a 	add	r3,r3,r2
10008edc:	e0bff917 	ldw	r2,-28(fp)
10008ee0:	100490fa 	slli	r2,r2,3
10008ee4:	108001c4 	addi	r2,r2,7
10008ee8:	e13ff817 	ldw	r4,-32(fp)
10008eec:	2085883a 	add	r2,r4,r2
10008ef0:	e13fff03 	ldbu	r4,-4(fp)
10008ef4:	11000005 	stb	r4,0(r2)
10008ef8:	10800003 	ldbu	r2,0(r2)
10008efc:	18800005 	stb	r2,0(r3)
    }
  }

  return 0; /*no error*/
10008f00:	0005883a 	mov	r2,zero
}
10008f04:	e037883a 	mov	sp,fp
10008f08:	dfc00217 	ldw	ra,8(sp)
10008f0c:	df000117 	ldw	fp,4(sp)
10008f10:	dc000017 	ldw	r16,0(sp)
10008f14:	dec00304 	addi	sp,sp,12
10008f18:	f800283a 	ret

10008f1c <rgba16ToPixel>:

/*put a pixel, given its RGBA16 color, into image of any color 16-bitdepth type*/
static void rgba16ToPixel(unsigned char* out, size_t i,
                         const LodePNGColorMode* mode,
                         unsigned short r, unsigned short g, unsigned short b, unsigned short a)
{
10008f1c:	defff604 	addi	sp,sp,-40
10008f20:	dfc00915 	stw	ra,36(sp)
10008f24:	df000815 	stw	fp,32(sp)
10008f28:	df000804 	addi	fp,sp,32
10008f2c:	e13ff915 	stw	r4,-28(fp)
10008f30:	e17ffa15 	stw	r5,-24(fp)
10008f34:	e1bffb15 	stw	r6,-20(fp)
10008f38:	3805883a 	mov	r2,r7
10008f3c:	e1400217 	ldw	r5,8(fp)
10008f40:	e1000317 	ldw	r4,12(fp)
10008f44:	e0c00417 	ldw	r3,16(fp)
10008f48:	e0bffc0d 	sth	r2,-16(fp)
10008f4c:	e17ffd0d 	sth	r5,-12(fp)
10008f50:	e13ffe0d 	sth	r4,-8(fp)
10008f54:	e0ffff0d 	sth	r3,-4(fp)
  if(mode->colortype == LCT_GREY)
10008f58:	e0bffb17 	ldw	r2,-20(fp)
10008f5c:	10800017 	ldw	r2,0(r2)
10008f60:	1000111e 	bne	r2,zero,10008fa8 <rgba16ToPixel+0x8c>
  {
    unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
10008f64:	e0bffc0b 	ldhu	r2,-16(fp)
10008f68:	e0bff80d 	sth	r2,-32(fp)
    out[i * 2 + 0] = (grey >> 8) & 255;
10008f6c:	e0bffa17 	ldw	r2,-24(fp)
10008f70:	1085883a 	add	r2,r2,r2
10008f74:	e0fff917 	ldw	r3,-28(fp)
10008f78:	1885883a 	add	r2,r3,r2
10008f7c:	e0fff80b 	ldhu	r3,-32(fp)
10008f80:	1806d23a 	srli	r3,r3,8
10008f84:	10c00005 	stb	r3,0(r2)
    out[i * 2 + 1] = grey & 255;
10008f88:	e0bffa17 	ldw	r2,-24(fp)
10008f8c:	1085883a 	add	r2,r2,r2
10008f90:	10800044 	addi	r2,r2,1
10008f94:	e0fff917 	ldw	r3,-28(fp)
10008f98:	1885883a 	add	r2,r3,r2
10008f9c:	e0fff80b 	ldhu	r3,-32(fp)
10008fa0:	10c00005 	stb	r3,0(r2)
10008fa4:	00009e06 	br	10009220 <rgba16ToPixel+0x304>
  }
  else if(mode->colortype == LCT_RGB)
10008fa8:	e0bffb17 	ldw	r2,-20(fp)
10008fac:	10800017 	ldw	r2,0(r2)
10008fb0:	10800098 	cmpnei	r2,r2,2
10008fb4:	1000331e 	bne	r2,zero,10009084 <rgba16ToPixel+0x168>
  {
    out[i * 6 + 0] = (r >> 8) & 255;
10008fb8:	e13ffa17 	ldw	r4,-24(fp)
10008fbc:	01400184 	movi	r5,6
10008fc0:	00146fc0 	call	100146fc <__mulsi3>
10008fc4:	e0fff917 	ldw	r3,-28(fp)
10008fc8:	1885883a 	add	r2,r3,r2
10008fcc:	e0fffc0b 	ldhu	r3,-16(fp)
10008fd0:	1806d23a 	srli	r3,r3,8
10008fd4:	10c00005 	stb	r3,0(r2)
    out[i * 6 + 1] = r & 255;
10008fd8:	e13ffa17 	ldw	r4,-24(fp)
10008fdc:	01400184 	movi	r5,6
10008fe0:	00146fc0 	call	100146fc <__mulsi3>
10008fe4:	10800044 	addi	r2,r2,1
10008fe8:	e0fff917 	ldw	r3,-28(fp)
10008fec:	1885883a 	add	r2,r3,r2
10008ff0:	e0fffc0b 	ldhu	r3,-16(fp)
10008ff4:	10c00005 	stb	r3,0(r2)
    out[i * 6 + 2] = (g >> 8) & 255;
10008ff8:	e13ffa17 	ldw	r4,-24(fp)
10008ffc:	01400184 	movi	r5,6
10009000:	00146fc0 	call	100146fc <__mulsi3>
10009004:	10800084 	addi	r2,r2,2
10009008:	e0fff917 	ldw	r3,-28(fp)
1000900c:	1885883a 	add	r2,r3,r2
10009010:	e0fffd0b 	ldhu	r3,-12(fp)
10009014:	1806d23a 	srli	r3,r3,8
10009018:	10c00005 	stb	r3,0(r2)
    out[i * 6 + 3] = g & 255;
1000901c:	e13ffa17 	ldw	r4,-24(fp)
10009020:	01400184 	movi	r5,6
10009024:	00146fc0 	call	100146fc <__mulsi3>
10009028:	108000c4 	addi	r2,r2,3
1000902c:	e0fff917 	ldw	r3,-28(fp)
10009030:	1885883a 	add	r2,r3,r2
10009034:	e0fffd0b 	ldhu	r3,-12(fp)
10009038:	10c00005 	stb	r3,0(r2)
    out[i * 6 + 4] = (b >> 8) & 255;
1000903c:	e13ffa17 	ldw	r4,-24(fp)
10009040:	01400184 	movi	r5,6
10009044:	00146fc0 	call	100146fc <__mulsi3>
10009048:	10800104 	addi	r2,r2,4
1000904c:	e0fff917 	ldw	r3,-28(fp)
10009050:	1885883a 	add	r2,r3,r2
10009054:	e0fffe0b 	ldhu	r3,-8(fp)
10009058:	1806d23a 	srli	r3,r3,8
1000905c:	10c00005 	stb	r3,0(r2)
    out[i * 6 + 5] = b & 255;
10009060:	e13ffa17 	ldw	r4,-24(fp)
10009064:	01400184 	movi	r5,6
10009068:	00146fc0 	call	100146fc <__mulsi3>
1000906c:	10800144 	addi	r2,r2,5
10009070:	e0fff917 	ldw	r3,-28(fp)
10009074:	1885883a 	add	r2,r3,r2
10009078:	e0fffe0b 	ldhu	r3,-8(fp)
1000907c:	10c00005 	stb	r3,0(r2)
10009080:	00006706 	br	10009220 <rgba16ToPixel+0x304>
  }
  else if(mode->colortype == LCT_GREY_ALPHA)
10009084:	e0bffb17 	ldw	r2,-20(fp)
10009088:	10800017 	ldw	r2,0(r2)
1000908c:	10800118 	cmpnei	r2,r2,4
10009090:	1000241e 	bne	r2,zero,10009124 <rgba16ToPixel+0x208>
  {
    unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
10009094:	e0bffc0b 	ldhu	r2,-16(fp)
10009098:	e0bff88d 	sth	r2,-30(fp)
    out[i * 4 + 0] = (grey >> 8) & 255;
1000909c:	e0bffa17 	ldw	r2,-24(fp)
100090a0:	1085883a 	add	r2,r2,r2
100090a4:	1085883a 	add	r2,r2,r2
100090a8:	e0fff917 	ldw	r3,-28(fp)
100090ac:	1885883a 	add	r2,r3,r2
100090b0:	e0fff88b 	ldhu	r3,-30(fp)
100090b4:	1806d23a 	srli	r3,r3,8
100090b8:	10c00005 	stb	r3,0(r2)
    out[i * 4 + 1] = grey & 255;
100090bc:	e0bffa17 	ldw	r2,-24(fp)
100090c0:	1085883a 	add	r2,r2,r2
100090c4:	1085883a 	add	r2,r2,r2
100090c8:	10800044 	addi	r2,r2,1
100090cc:	e0fff917 	ldw	r3,-28(fp)
100090d0:	1885883a 	add	r2,r3,r2
100090d4:	e0fff88b 	ldhu	r3,-30(fp)
100090d8:	10c00005 	stb	r3,0(r2)
    out[i * 4 + 2] = (a >> 8) & 255;
100090dc:	e0bffa17 	ldw	r2,-24(fp)
100090e0:	1085883a 	add	r2,r2,r2
100090e4:	1085883a 	add	r2,r2,r2
100090e8:	10800084 	addi	r2,r2,2
100090ec:	e0fff917 	ldw	r3,-28(fp)
100090f0:	1885883a 	add	r2,r3,r2
100090f4:	e0ffff0b 	ldhu	r3,-4(fp)
100090f8:	1806d23a 	srli	r3,r3,8
100090fc:	10c00005 	stb	r3,0(r2)
    out[i * 4 + 3] = a & 255;
10009100:	e0bffa17 	ldw	r2,-24(fp)
10009104:	1085883a 	add	r2,r2,r2
10009108:	1085883a 	add	r2,r2,r2
1000910c:	108000c4 	addi	r2,r2,3
10009110:	e0fff917 	ldw	r3,-28(fp)
10009114:	1885883a 	add	r2,r3,r2
10009118:	e0ffff0b 	ldhu	r3,-4(fp)
1000911c:	10c00005 	stb	r3,0(r2)
10009120:	00003f06 	br	10009220 <rgba16ToPixel+0x304>
  }
  else if(mode->colortype == LCT_RGBA)
10009124:	e0bffb17 	ldw	r2,-20(fp)
10009128:	10800017 	ldw	r2,0(r2)
1000912c:	10800198 	cmpnei	r2,r2,6
10009130:	10003b1e 	bne	r2,zero,10009220 <rgba16ToPixel+0x304>
  {
    out[i * 8 + 0] = (r >> 8) & 255;
10009134:	e0bffa17 	ldw	r2,-24(fp)
10009138:	100490fa 	slli	r2,r2,3
1000913c:	e0fff917 	ldw	r3,-28(fp)
10009140:	1885883a 	add	r2,r3,r2
10009144:	e0fffc0b 	ldhu	r3,-16(fp)
10009148:	1806d23a 	srli	r3,r3,8
1000914c:	10c00005 	stb	r3,0(r2)
    out[i * 8 + 1] = r & 255;
10009150:	e0bffa17 	ldw	r2,-24(fp)
10009154:	100490fa 	slli	r2,r2,3
10009158:	10800044 	addi	r2,r2,1
1000915c:	e0fff917 	ldw	r3,-28(fp)
10009160:	1885883a 	add	r2,r3,r2
10009164:	e0fffc0b 	ldhu	r3,-16(fp)
10009168:	10c00005 	stb	r3,0(r2)
    out[i * 8 + 2] = (g >> 8) & 255;
1000916c:	e0bffa17 	ldw	r2,-24(fp)
10009170:	100490fa 	slli	r2,r2,3
10009174:	10800084 	addi	r2,r2,2
10009178:	e0fff917 	ldw	r3,-28(fp)
1000917c:	1885883a 	add	r2,r3,r2
10009180:	e0fffd0b 	ldhu	r3,-12(fp)
10009184:	1806d23a 	srli	r3,r3,8
10009188:	10c00005 	stb	r3,0(r2)
    out[i * 8 + 3] = g & 255;
1000918c:	e0bffa17 	ldw	r2,-24(fp)
10009190:	100490fa 	slli	r2,r2,3
10009194:	108000c4 	addi	r2,r2,3
10009198:	e0fff917 	ldw	r3,-28(fp)
1000919c:	1885883a 	add	r2,r3,r2
100091a0:	e0fffd0b 	ldhu	r3,-12(fp)
100091a4:	10c00005 	stb	r3,0(r2)
    out[i * 8 + 4] = (b >> 8) & 255;
100091a8:	e0bffa17 	ldw	r2,-24(fp)
100091ac:	100490fa 	slli	r2,r2,3
100091b0:	10800104 	addi	r2,r2,4
100091b4:	e0fff917 	ldw	r3,-28(fp)
100091b8:	1885883a 	add	r2,r3,r2
100091bc:	e0fffe0b 	ldhu	r3,-8(fp)
100091c0:	1806d23a 	srli	r3,r3,8
100091c4:	10c00005 	stb	r3,0(r2)
    out[i * 8 + 5] = b & 255;
100091c8:	e0bffa17 	ldw	r2,-24(fp)
100091cc:	100490fa 	slli	r2,r2,3
100091d0:	10800144 	addi	r2,r2,5
100091d4:	e0fff917 	ldw	r3,-28(fp)
100091d8:	1885883a 	add	r2,r3,r2
100091dc:	e0fffe0b 	ldhu	r3,-8(fp)
100091e0:	10c00005 	stb	r3,0(r2)
    out[i * 8 + 6] = (a >> 8) & 255;
100091e4:	e0bffa17 	ldw	r2,-24(fp)
100091e8:	100490fa 	slli	r2,r2,3
100091ec:	10800184 	addi	r2,r2,6
100091f0:	e0fff917 	ldw	r3,-28(fp)
100091f4:	1885883a 	add	r2,r3,r2
100091f8:	e0ffff0b 	ldhu	r3,-4(fp)
100091fc:	1806d23a 	srli	r3,r3,8
10009200:	10c00005 	stb	r3,0(r2)
    out[i * 8 + 7] = a & 255;
10009204:	e0bffa17 	ldw	r2,-24(fp)
10009208:	100490fa 	slli	r2,r2,3
1000920c:	108001c4 	addi	r2,r2,7
10009210:	e0fff917 	ldw	r3,-28(fp)
10009214:	1885883a 	add	r2,r3,r2
10009218:	e0ffff0b 	ldhu	r3,-4(fp)
1000921c:	10c00005 	stb	r3,0(r2)
  }
}
10009220:	e037883a 	mov	sp,fp
10009224:	dfc00117 	ldw	ra,4(sp)
10009228:	df000017 	ldw	fp,0(sp)
1000922c:	dec00204 	addi	sp,sp,8
10009230:	f800283a 	ret

10009234 <getPixelColorRGBA8>:
/*Get RGBA8 color of pixel with index i (y * width + x) from the raw image with given color type.*/
static void getPixelColorRGBA8(unsigned char* r, unsigned char* g,
                               unsigned char* b, unsigned char* a,
                               const unsigned char* in, size_t i,
                               const LodePNGColorMode* mode)
{
10009234:	defff404 	addi	sp,sp,-48
10009238:	dfc00b15 	stw	ra,44(sp)
1000923c:	df000a15 	stw	fp,40(sp)
10009240:	dc000915 	stw	r16,36(sp)
10009244:	df000904 	addi	fp,sp,36
10009248:	e13ffc15 	stw	r4,-16(fp)
1000924c:	e17ffd15 	stw	r5,-12(fp)
10009250:	e1bffe15 	stw	r6,-8(fp)
10009254:	e1ffff15 	stw	r7,-4(fp)
  if(mode->colortype == LCT_GREY)
10009258:	e0800517 	ldw	r2,20(fp)
1000925c:	10800017 	ldw	r2,0(r2)
10009260:	1000841e 	bne	r2,zero,10009474 <getPixelColorRGBA8+0x240>
  {
    if(mode->bitdepth == 8)
10009264:	e0800517 	ldw	r2,20(fp)
10009268:	10800117 	ldw	r2,4(r2)
1000926c:	10800218 	cmpnei	r2,r2,8
10009270:	10001e1e 	bne	r2,zero,100092ec <getPixelColorRGBA8+0xb8>
    {
      *r = *g = *b = in[i];
10009274:	e0c00317 	ldw	r3,12(fp)
10009278:	e0800417 	ldw	r2,16(fp)
1000927c:	1885883a 	add	r2,r3,r2
10009280:	10c00003 	ldbu	r3,0(r2)
10009284:	e0bffe17 	ldw	r2,-8(fp)
10009288:	10c00005 	stb	r3,0(r2)
1000928c:	e0bffe17 	ldw	r2,-8(fp)
10009290:	10c00003 	ldbu	r3,0(r2)
10009294:	e0bffd17 	ldw	r2,-12(fp)
10009298:	10c00005 	stb	r3,0(r2)
1000929c:	e0bffd17 	ldw	r2,-12(fp)
100092a0:	10c00003 	ldbu	r3,0(r2)
100092a4:	e0bffc17 	ldw	r2,-16(fp)
100092a8:	10c00005 	stb	r3,0(r2)
      if(mode->key_defined && *r == mode->key_r) *a = 0;
100092ac:	e0800517 	ldw	r2,20(fp)
100092b0:	10800417 	ldw	r2,16(r2)
100092b4:	10000926 	beq	r2,zero,100092dc <getPixelColorRGBA8+0xa8>
100092b8:	e0bffc17 	ldw	r2,-16(fp)
100092bc:	10800003 	ldbu	r2,0(r2)
100092c0:	10c03fcc 	andi	r3,r2,255
100092c4:	e0800517 	ldw	r2,20(fp)
100092c8:	10800517 	ldw	r2,20(r2)
100092cc:	1880031e 	bne	r3,r2,100092dc <getPixelColorRGBA8+0xa8>
100092d0:	e0bfff17 	ldw	r2,-4(fp)
100092d4:	10000005 	stb	zero,0(r2)
100092d8:	0001e506 	br	10009a70 <getPixelColorRGBA8+0x83c>
      else *a = 255;
100092dc:	e0bfff17 	ldw	r2,-4(fp)
100092e0:	00ffffc4 	movi	r3,-1
100092e4:	10c00005 	stb	r3,0(r2)
100092e8:	0001e106 	br	10009a70 <getPixelColorRGBA8+0x83c>
    }
    else if(mode->bitdepth == 16)
100092ec:	e0800517 	ldw	r2,20(fp)
100092f0:	10800117 	ldw	r2,4(r2)
100092f4:	10800418 	cmpnei	r2,r2,16
100092f8:	10002b1e 	bne	r2,zero,100093a8 <getPixelColorRGBA8+0x174>
    {
      *r = *g = *b = in[i * 2 + 0];
100092fc:	e0800417 	ldw	r2,16(fp)
10009300:	1085883a 	add	r2,r2,r2
10009304:	e0c00317 	ldw	r3,12(fp)
10009308:	1885883a 	add	r2,r3,r2
1000930c:	10c00003 	ldbu	r3,0(r2)
10009310:	e0bffe17 	ldw	r2,-8(fp)
10009314:	10c00005 	stb	r3,0(r2)
10009318:	e0bffe17 	ldw	r2,-8(fp)
1000931c:	10c00003 	ldbu	r3,0(r2)
10009320:	e0bffd17 	ldw	r2,-12(fp)
10009324:	10c00005 	stb	r3,0(r2)
10009328:	e0bffd17 	ldw	r2,-12(fp)
1000932c:	10c00003 	ldbu	r3,0(r2)
10009330:	e0bffc17 	ldw	r2,-16(fp)
10009334:	10c00005 	stb	r3,0(r2)
      if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;
10009338:	e0800517 	ldw	r2,20(fp)
1000933c:	10800417 	ldw	r2,16(r2)
10009340:	10001526 	beq	r2,zero,10009398 <getPixelColorRGBA8+0x164>
10009344:	e0800417 	ldw	r2,16(fp)
10009348:	1085883a 	add	r2,r2,r2
1000934c:	e0c00317 	ldw	r3,12(fp)
10009350:	1885883a 	add	r2,r3,r2
10009354:	10800003 	ldbu	r2,0(r2)
10009358:	10803fcc 	andi	r2,r2,255
1000935c:	1006923a 	slli	r3,r2,8
10009360:	e0800417 	ldw	r2,16(fp)
10009364:	1085883a 	add	r2,r2,r2
10009368:	10800044 	addi	r2,r2,1
1000936c:	e1000317 	ldw	r4,12(fp)
10009370:	2085883a 	add	r2,r4,r2
10009374:	10800003 	ldbu	r2,0(r2)
10009378:	10803fcc 	andi	r2,r2,255
1000937c:	1887883a 	add	r3,r3,r2
10009380:	e0800517 	ldw	r2,20(fp)
10009384:	10800517 	ldw	r2,20(r2)
10009388:	1880031e 	bne	r3,r2,10009398 <getPixelColorRGBA8+0x164>
1000938c:	e0bfff17 	ldw	r2,-4(fp)
10009390:	10000005 	stb	zero,0(r2)
10009394:	0001b606 	br	10009a70 <getPixelColorRGBA8+0x83c>
      else *a = 255;
10009398:	e0bfff17 	ldw	r2,-4(fp)
1000939c:	00ffffc4 	movi	r3,-1
100093a0:	10c00005 	stb	r3,0(r2)
100093a4:	0001b206 	br	10009a70 <getPixelColorRGBA8+0x83c>
    }
    else
    {
      unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
100093a8:	e0800517 	ldw	r2,20(fp)
100093ac:	10800117 	ldw	r2,4(r2)
100093b0:	00c00044 	movi	r3,1
100093b4:	1884983a 	sll	r2,r3,r2
100093b8:	10bfffc4 	addi	r2,r2,-1
100093bc:	e0bff815 	stw	r2,-32(fp)
      size_t j = i * mode->bitdepth;
100093c0:	e0800517 	ldw	r2,20(fp)
100093c4:	10800117 	ldw	r2,4(r2)
100093c8:	1009883a 	mov	r4,r2
100093cc:	e1400417 	ldw	r5,16(fp)
100093d0:	00146fc0 	call	100146fc <__mulsi3>
100093d4:	e0bffa15 	stw	r2,-24(fp)
      unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
100093d8:	e0800517 	ldw	r2,20(fp)
100093dc:	10800117 	ldw	r2,4(r2)
100093e0:	e0fffa04 	addi	r3,fp,-24
100093e4:	1809883a 	mov	r4,r3
100093e8:	e1400317 	ldw	r5,12(fp)
100093ec:	100d883a 	mov	r6,r2
100093f0:	00063b40 	call	100063b4 <readBitsFromReversedStream>
100093f4:	e0bff915 	stw	r2,-28(fp)
      *r = *g = *b = (value * 255) / highest;
100093f8:	e13ff917 	ldw	r4,-28(fp)
100093fc:	01403fc4 	movi	r5,255
10009400:	00146fc0 	call	100146fc <__mulsi3>
10009404:	1009883a 	mov	r4,r2
10009408:	e17ff817 	ldw	r5,-32(fp)
1000940c:	00146ec0 	call	100146ec <__udivsi3>
10009410:	1007883a 	mov	r3,r2
10009414:	e0bffe17 	ldw	r2,-8(fp)
10009418:	10c00005 	stb	r3,0(r2)
1000941c:	e0bffe17 	ldw	r2,-8(fp)
10009420:	10c00003 	ldbu	r3,0(r2)
10009424:	e0bffd17 	ldw	r2,-12(fp)
10009428:	10c00005 	stb	r3,0(r2)
1000942c:	e0bffd17 	ldw	r2,-12(fp)
10009430:	10c00003 	ldbu	r3,0(r2)
10009434:	e0bffc17 	ldw	r2,-16(fp)
10009438:	10c00005 	stb	r3,0(r2)
      if(mode->key_defined && value == mode->key_r) *a = 0;
1000943c:	e0800517 	ldw	r2,20(fp)
10009440:	10800417 	ldw	r2,16(r2)
10009444:	10000726 	beq	r2,zero,10009464 <getPixelColorRGBA8+0x230>
10009448:	e0800517 	ldw	r2,20(fp)
1000944c:	10c00517 	ldw	r3,20(r2)
10009450:	e0bff917 	ldw	r2,-28(fp)
10009454:	1880031e 	bne	r3,r2,10009464 <getPixelColorRGBA8+0x230>
10009458:	e0bfff17 	ldw	r2,-4(fp)
1000945c:	10000005 	stb	zero,0(r2)
10009460:	00018306 	br	10009a70 <getPixelColorRGBA8+0x83c>
      else *a = 255;
10009464:	e0bfff17 	ldw	r2,-4(fp)
10009468:	00ffffc4 	movi	r3,-1
1000946c:	10c00005 	stb	r3,0(r2)
10009470:	00017f06 	br	10009a70 <getPixelColorRGBA8+0x83c>
    }
  }
  else if(mode->colortype == LCT_RGB)
10009474:	e0800517 	ldw	r2,20(fp)
10009478:	10800017 	ldw	r2,0(r2)
1000947c:	10800098 	cmpnei	r2,r2,2
10009480:	10009f1e 	bne	r2,zero,10009700 <getPixelColorRGBA8+0x4cc>
  {
    if(mode->bitdepth == 8)
10009484:	e0800517 	ldw	r2,20(fp)
10009488:	10800117 	ldw	r2,4(r2)
1000948c:	10800218 	cmpnei	r2,r2,8
10009490:	1000391e 	bne	r2,zero,10009578 <getPixelColorRGBA8+0x344>
    {
      *r = in[i * 3 + 0]; *g = in[i * 3 + 1]; *b = in[i * 3 + 2];
10009494:	e0c00417 	ldw	r3,16(fp)
10009498:	1805883a 	mov	r2,r3
1000949c:	1085883a 	add	r2,r2,r2
100094a0:	10c5883a 	add	r2,r2,r3
100094a4:	e0c00317 	ldw	r3,12(fp)
100094a8:	1885883a 	add	r2,r3,r2
100094ac:	10c00003 	ldbu	r3,0(r2)
100094b0:	e0bffc17 	ldw	r2,-16(fp)
100094b4:	10c00005 	stb	r3,0(r2)
100094b8:	e0c00417 	ldw	r3,16(fp)
100094bc:	1805883a 	mov	r2,r3
100094c0:	1085883a 	add	r2,r2,r2
100094c4:	10c5883a 	add	r2,r2,r3
100094c8:	10800044 	addi	r2,r2,1
100094cc:	e0c00317 	ldw	r3,12(fp)
100094d0:	1885883a 	add	r2,r3,r2
100094d4:	10c00003 	ldbu	r3,0(r2)
100094d8:	e0bffd17 	ldw	r2,-12(fp)
100094dc:	10c00005 	stb	r3,0(r2)
100094e0:	e0c00417 	ldw	r3,16(fp)
100094e4:	1805883a 	mov	r2,r3
100094e8:	1085883a 	add	r2,r2,r2
100094ec:	10c5883a 	add	r2,r2,r3
100094f0:	10800084 	addi	r2,r2,2
100094f4:	e0c00317 	ldw	r3,12(fp)
100094f8:	1885883a 	add	r2,r3,r2
100094fc:	10c00003 	ldbu	r3,0(r2)
10009500:	e0bffe17 	ldw	r2,-8(fp)
10009504:	10c00005 	stb	r3,0(r2)
      if(mode->key_defined && *r == mode->key_r && *g == mode->key_g && *b == mode->key_b) *a = 0;
10009508:	e0800517 	ldw	r2,20(fp)
1000950c:	10800417 	ldw	r2,16(r2)
10009510:	10001526 	beq	r2,zero,10009568 <getPixelColorRGBA8+0x334>
10009514:	e0bffc17 	ldw	r2,-16(fp)
10009518:	10800003 	ldbu	r2,0(r2)
1000951c:	10c03fcc 	andi	r3,r2,255
10009520:	e0800517 	ldw	r2,20(fp)
10009524:	10800517 	ldw	r2,20(r2)
10009528:	18800f1e 	bne	r3,r2,10009568 <getPixelColorRGBA8+0x334>
1000952c:	e0bffd17 	ldw	r2,-12(fp)
10009530:	10800003 	ldbu	r2,0(r2)
10009534:	10c03fcc 	andi	r3,r2,255
10009538:	e0800517 	ldw	r2,20(fp)
1000953c:	10800617 	ldw	r2,24(r2)
10009540:	1880091e 	bne	r3,r2,10009568 <getPixelColorRGBA8+0x334>
10009544:	e0bffe17 	ldw	r2,-8(fp)
10009548:	10800003 	ldbu	r2,0(r2)
1000954c:	10c03fcc 	andi	r3,r2,255
10009550:	e0800517 	ldw	r2,20(fp)
10009554:	10800717 	ldw	r2,28(r2)
10009558:	1880031e 	bne	r3,r2,10009568 <getPixelColorRGBA8+0x334>
1000955c:	e0bfff17 	ldw	r2,-4(fp)
10009560:	10000005 	stb	zero,0(r2)
      *g = in[i * 6 + 2];
      *b = in[i * 6 + 4];
      if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
         && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
         && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;
      else *a = 255;
10009564:	00014206 	br	10009a70 <getPixelColorRGBA8+0x83c>
  {
    if(mode->bitdepth == 8)
    {
      *r = in[i * 3 + 0]; *g = in[i * 3 + 1]; *b = in[i * 3 + 2];
      if(mode->key_defined && *r == mode->key_r && *g == mode->key_g && *b == mode->key_b) *a = 0;
      else *a = 255;
10009568:	e0bfff17 	ldw	r2,-4(fp)
1000956c:	00ffffc4 	movi	r3,-1
10009570:	10c00005 	stb	r3,0(r2)
10009574:	00013e06 	br	10009a70 <getPixelColorRGBA8+0x83c>
    }
    else
    {
      *r = in[i * 6 + 0];
10009578:	e1000417 	ldw	r4,16(fp)
1000957c:	01400184 	movi	r5,6
10009580:	00146fc0 	call	100146fc <__mulsi3>
10009584:	e0c00317 	ldw	r3,12(fp)
10009588:	1885883a 	add	r2,r3,r2
1000958c:	10c00003 	ldbu	r3,0(r2)
10009590:	e0bffc17 	ldw	r2,-16(fp)
10009594:	10c00005 	stb	r3,0(r2)
      *g = in[i * 6 + 2];
10009598:	e1000417 	ldw	r4,16(fp)
1000959c:	01400184 	movi	r5,6
100095a0:	00146fc0 	call	100146fc <__mulsi3>
100095a4:	10800084 	addi	r2,r2,2
100095a8:	e0c00317 	ldw	r3,12(fp)
100095ac:	1885883a 	add	r2,r3,r2
100095b0:	10c00003 	ldbu	r3,0(r2)
100095b4:	e0bffd17 	ldw	r2,-12(fp)
100095b8:	10c00005 	stb	r3,0(r2)
      *b = in[i * 6 + 4];
100095bc:	e1000417 	ldw	r4,16(fp)
100095c0:	01400184 	movi	r5,6
100095c4:	00146fc0 	call	100146fc <__mulsi3>
100095c8:	10800104 	addi	r2,r2,4
100095cc:	e0c00317 	ldw	r3,12(fp)
100095d0:	1885883a 	add	r2,r3,r2
100095d4:	10c00003 	ldbu	r3,0(r2)
100095d8:	e0bffe17 	ldw	r2,-8(fp)
100095dc:	10c00005 	stb	r3,0(r2)
      if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
100095e0:	e0800517 	ldw	r2,20(fp)
100095e4:	10800417 	ldw	r2,16(r2)
100095e8:	10004126 	beq	r2,zero,100096f0 <getPixelColorRGBA8+0x4bc>
100095ec:	e1000417 	ldw	r4,16(fp)
100095f0:	01400184 	movi	r5,6
100095f4:	00146fc0 	call	100146fc <__mulsi3>
100095f8:	e0c00317 	ldw	r3,12(fp)
100095fc:	1885883a 	add	r2,r3,r2
10009600:	10800003 	ldbu	r2,0(r2)
10009604:	10803fcc 	andi	r2,r2,255
10009608:	1020923a 	slli	r16,r2,8
1000960c:	e1000417 	ldw	r4,16(fp)
10009610:	01400184 	movi	r5,6
10009614:	00146fc0 	call	100146fc <__mulsi3>
10009618:	10800044 	addi	r2,r2,1
1000961c:	e0c00317 	ldw	r3,12(fp)
10009620:	1885883a 	add	r2,r3,r2
10009624:	10800003 	ldbu	r2,0(r2)
10009628:	10803fcc 	andi	r2,r2,255
1000962c:	8087883a 	add	r3,r16,r2
10009630:	e0800517 	ldw	r2,20(fp)
10009634:	10800517 	ldw	r2,20(r2)
10009638:	18802d1e 	bne	r3,r2,100096f0 <getPixelColorRGBA8+0x4bc>
         && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
1000963c:	e1000417 	ldw	r4,16(fp)
10009640:	01400184 	movi	r5,6
10009644:	00146fc0 	call	100146fc <__mulsi3>
10009648:	10800084 	addi	r2,r2,2
1000964c:	e0c00317 	ldw	r3,12(fp)
10009650:	1885883a 	add	r2,r3,r2
10009654:	10800003 	ldbu	r2,0(r2)
10009658:	10803fcc 	andi	r2,r2,255
1000965c:	1020923a 	slli	r16,r2,8
10009660:	e1000417 	ldw	r4,16(fp)
10009664:	01400184 	movi	r5,6
10009668:	00146fc0 	call	100146fc <__mulsi3>
1000966c:	108000c4 	addi	r2,r2,3
10009670:	e0c00317 	ldw	r3,12(fp)
10009674:	1885883a 	add	r2,r3,r2
10009678:	10800003 	ldbu	r2,0(r2)
1000967c:	10803fcc 	andi	r2,r2,255
10009680:	8087883a 	add	r3,r16,r2
10009684:	e0800517 	ldw	r2,20(fp)
10009688:	10800617 	ldw	r2,24(r2)
1000968c:	1880181e 	bne	r3,r2,100096f0 <getPixelColorRGBA8+0x4bc>
         && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;
10009690:	e1000417 	ldw	r4,16(fp)
10009694:	01400184 	movi	r5,6
10009698:	00146fc0 	call	100146fc <__mulsi3>
1000969c:	10800104 	addi	r2,r2,4
100096a0:	e0c00317 	ldw	r3,12(fp)
100096a4:	1885883a 	add	r2,r3,r2
100096a8:	10800003 	ldbu	r2,0(r2)
100096ac:	10803fcc 	andi	r2,r2,255
100096b0:	1020923a 	slli	r16,r2,8
100096b4:	e1000417 	ldw	r4,16(fp)
100096b8:	01400184 	movi	r5,6
100096bc:	00146fc0 	call	100146fc <__mulsi3>
100096c0:	10800144 	addi	r2,r2,5
100096c4:	e0c00317 	ldw	r3,12(fp)
100096c8:	1885883a 	add	r2,r3,r2
100096cc:	10800003 	ldbu	r2,0(r2)
100096d0:	10803fcc 	andi	r2,r2,255
100096d4:	8087883a 	add	r3,r16,r2
100096d8:	e0800517 	ldw	r2,20(fp)
100096dc:	10800717 	ldw	r2,28(r2)
100096e0:	1880031e 	bne	r3,r2,100096f0 <getPixelColorRGBA8+0x4bc>
100096e4:	e0bfff17 	ldw	r2,-4(fp)
100096e8:	10000005 	stb	zero,0(r2)
100096ec:	0000e006 	br	10009a70 <getPixelColorRGBA8+0x83c>
      else *a = 255;
100096f0:	e0bfff17 	ldw	r2,-4(fp)
100096f4:	00ffffc4 	movi	r3,-1
100096f8:	10c00005 	stb	r3,0(r2)
100096fc:	0000dc06 	br	10009a70 <getPixelColorRGBA8+0x83c>
    }
  }
  else if(mode->colortype == LCT_PALETTE)
10009700:	e0800517 	ldw	r2,20(fp)
10009704:	10800017 	ldw	r2,0(r2)
10009708:	108000d8 	cmpnei	r2,r2,3
1000970c:	1000531e 	bne	r2,zero,1000985c <getPixelColorRGBA8+0x628>
  {
    unsigned index;
    if(mode->bitdepth == 8) index = in[i];
10009710:	e0800517 	ldw	r2,20(fp)
10009714:	10800117 	ldw	r2,4(r2)
10009718:	10800218 	cmpnei	r2,r2,8
1000971c:	1000071e 	bne	r2,zero,1000973c <getPixelColorRGBA8+0x508>
10009720:	e0c00317 	ldw	r3,12(fp)
10009724:	e0800417 	ldw	r2,16(fp)
10009728:	1885883a 	add	r2,r3,r2
1000972c:	10800003 	ldbu	r2,0(r2)
10009730:	10803fcc 	andi	r2,r2,255
10009734:	e0bff715 	stw	r2,-36(fp)
10009738:	00000e06 	br	10009774 <getPixelColorRGBA8+0x540>
    else
    {
      size_t j = i * mode->bitdepth;
1000973c:	e0800517 	ldw	r2,20(fp)
10009740:	10800117 	ldw	r2,4(r2)
10009744:	1009883a 	mov	r4,r2
10009748:	e1400417 	ldw	r5,16(fp)
1000974c:	00146fc0 	call	100146fc <__mulsi3>
10009750:	e0bffb15 	stw	r2,-20(fp)
      index = readBitsFromReversedStream(&j, in, mode->bitdepth);
10009754:	e0800517 	ldw	r2,20(fp)
10009758:	10800117 	ldw	r2,4(r2)
1000975c:	e0fffb04 	addi	r3,fp,-20
10009760:	1809883a 	mov	r4,r3
10009764:	e1400317 	ldw	r5,12(fp)
10009768:	100d883a 	mov	r6,r2
1000976c:	00063b40 	call	100063b4 <readBitsFromReversedStream>
10009770:	e0bff715 	stw	r2,-36(fp)
    }

    if(index >= mode->palettesize)
10009774:	e0800517 	ldw	r2,20(fp)
10009778:	10800317 	ldw	r2,12(r2)
1000977c:	e0fff717 	ldw	r3,-36(fp)
10009780:	18800e36 	bltu	r3,r2,100097bc <getPixelColorRGBA8+0x588>
    {
      /*This is an error according to the PNG spec, but common PNG decoders make it black instead.
      Done here too, slightly faster due to no error handling needed.*/
      *r = *g = *b = 0;
10009784:	e0bffe17 	ldw	r2,-8(fp)
10009788:	10000005 	stb	zero,0(r2)
1000978c:	e0bffe17 	ldw	r2,-8(fp)
10009790:	10c00003 	ldbu	r3,0(r2)
10009794:	e0bffd17 	ldw	r2,-12(fp)
10009798:	10c00005 	stb	r3,0(r2)
1000979c:	e0bffd17 	ldw	r2,-12(fp)
100097a0:	10c00003 	ldbu	r3,0(r2)
100097a4:	e0bffc17 	ldw	r2,-16(fp)
100097a8:	10c00005 	stb	r3,0(r2)
      *a = 255;
100097ac:	e0bfff17 	ldw	r2,-4(fp)
100097b0:	00ffffc4 	movi	r3,-1
100097b4:	10c00005 	stb	r3,0(r2)
100097b8:	0000ad06 	br	10009a70 <getPixelColorRGBA8+0x83c>
    }
    else
    {
      *r = mode->palette[index * 4 + 0];
100097bc:	e0800517 	ldw	r2,20(fp)
100097c0:	10c00217 	ldw	r3,8(r2)
100097c4:	e0bff717 	ldw	r2,-36(fp)
100097c8:	1085883a 	add	r2,r2,r2
100097cc:	1085883a 	add	r2,r2,r2
100097d0:	1885883a 	add	r2,r3,r2
100097d4:	10c00003 	ldbu	r3,0(r2)
100097d8:	e0bffc17 	ldw	r2,-16(fp)
100097dc:	10c00005 	stb	r3,0(r2)
      *g = mode->palette[index * 4 + 1];
100097e0:	e0800517 	ldw	r2,20(fp)
100097e4:	10c00217 	ldw	r3,8(r2)
100097e8:	e0bff717 	ldw	r2,-36(fp)
100097ec:	1085883a 	add	r2,r2,r2
100097f0:	1085883a 	add	r2,r2,r2
100097f4:	10800044 	addi	r2,r2,1
100097f8:	1885883a 	add	r2,r3,r2
100097fc:	10c00003 	ldbu	r3,0(r2)
10009800:	e0bffd17 	ldw	r2,-12(fp)
10009804:	10c00005 	stb	r3,0(r2)
      *b = mode->palette[index * 4 + 2];
10009808:	e0800517 	ldw	r2,20(fp)
1000980c:	10c00217 	ldw	r3,8(r2)
10009810:	e0bff717 	ldw	r2,-36(fp)
10009814:	1085883a 	add	r2,r2,r2
10009818:	1085883a 	add	r2,r2,r2
1000981c:	10800084 	addi	r2,r2,2
10009820:	1885883a 	add	r2,r3,r2
10009824:	10c00003 	ldbu	r3,0(r2)
10009828:	e0bffe17 	ldw	r2,-8(fp)
1000982c:	10c00005 	stb	r3,0(r2)
      *a = mode->palette[index * 4 + 3];
10009830:	e0800517 	ldw	r2,20(fp)
10009834:	10c00217 	ldw	r3,8(r2)
10009838:	e0bff717 	ldw	r2,-36(fp)
1000983c:	1085883a 	add	r2,r2,r2
10009840:	1085883a 	add	r2,r2,r2
10009844:	108000c4 	addi	r2,r2,3
10009848:	1885883a 	add	r2,r3,r2
1000984c:	10c00003 	ldbu	r3,0(r2)
10009850:	e0bfff17 	ldw	r2,-4(fp)
10009854:	10c00005 	stb	r3,0(r2)
10009858:	00008506 	br	10009a70 <getPixelColorRGBA8+0x83c>
    }
  }
  else if(mode->colortype == LCT_GREY_ALPHA)
1000985c:	e0800517 	ldw	r2,20(fp)
10009860:	10800017 	ldw	r2,0(r2)
10009864:	10800118 	cmpnei	r2,r2,4
10009868:	1000361e 	bne	r2,zero,10009944 <getPixelColorRGBA8+0x710>
  {
    if(mode->bitdepth == 8)
1000986c:	e0800517 	ldw	r2,20(fp)
10009870:	10800117 	ldw	r2,4(r2)
10009874:	10800218 	cmpnei	r2,r2,8
10009878:	1000181e 	bne	r2,zero,100098dc <getPixelColorRGBA8+0x6a8>
    {
      *r = *g = *b = in[i * 2 + 0];
1000987c:	e0800417 	ldw	r2,16(fp)
10009880:	1085883a 	add	r2,r2,r2
10009884:	e0c00317 	ldw	r3,12(fp)
10009888:	1885883a 	add	r2,r3,r2
1000988c:	10c00003 	ldbu	r3,0(r2)
10009890:	e0bffe17 	ldw	r2,-8(fp)
10009894:	10c00005 	stb	r3,0(r2)
10009898:	e0bffe17 	ldw	r2,-8(fp)
1000989c:	10c00003 	ldbu	r3,0(r2)
100098a0:	e0bffd17 	ldw	r2,-12(fp)
100098a4:	10c00005 	stb	r3,0(r2)
100098a8:	e0bffd17 	ldw	r2,-12(fp)
100098ac:	10c00003 	ldbu	r3,0(r2)
100098b0:	e0bffc17 	ldw	r2,-16(fp)
100098b4:	10c00005 	stb	r3,0(r2)
      *a = in[i * 2 + 1];
100098b8:	e0800417 	ldw	r2,16(fp)
100098bc:	1085883a 	add	r2,r2,r2
100098c0:	10800044 	addi	r2,r2,1
100098c4:	e0c00317 	ldw	r3,12(fp)
100098c8:	1885883a 	add	r2,r3,r2
100098cc:	10c00003 	ldbu	r3,0(r2)
100098d0:	e0bfff17 	ldw	r2,-4(fp)
100098d4:	10c00005 	stb	r3,0(r2)
100098d8:	00006506 	br	10009a70 <getPixelColorRGBA8+0x83c>
    }
    else
    {
      *r = *g = *b = in[i * 4 + 0];
100098dc:	e0800417 	ldw	r2,16(fp)
100098e0:	1085883a 	add	r2,r2,r2
100098e4:	1085883a 	add	r2,r2,r2
100098e8:	e0c00317 	ldw	r3,12(fp)
100098ec:	1885883a 	add	r2,r3,r2
100098f0:	10c00003 	ldbu	r3,0(r2)
100098f4:	e0bffe17 	ldw	r2,-8(fp)
100098f8:	10c00005 	stb	r3,0(r2)
100098fc:	e0bffe17 	ldw	r2,-8(fp)
10009900:	10c00003 	ldbu	r3,0(r2)
10009904:	e0bffd17 	ldw	r2,-12(fp)
10009908:	10c00005 	stb	r3,0(r2)
1000990c:	e0bffd17 	ldw	r2,-12(fp)
10009910:	10c00003 	ldbu	r3,0(r2)
10009914:	e0bffc17 	ldw	r2,-16(fp)
10009918:	10c00005 	stb	r3,0(r2)
      *a = in[i * 4 + 2];
1000991c:	e0800417 	ldw	r2,16(fp)
10009920:	1085883a 	add	r2,r2,r2
10009924:	1085883a 	add	r2,r2,r2
10009928:	10800084 	addi	r2,r2,2
1000992c:	e0c00317 	ldw	r3,12(fp)
10009930:	1885883a 	add	r2,r3,r2
10009934:	10c00003 	ldbu	r3,0(r2)
10009938:	e0bfff17 	ldw	r2,-4(fp)
1000993c:	10c00005 	stb	r3,0(r2)
10009940:	00004b06 	br	10009a70 <getPixelColorRGBA8+0x83c>
    }
  }
  else if(mode->colortype == LCT_RGBA)
10009944:	e0800517 	ldw	r2,20(fp)
10009948:	10800017 	ldw	r2,0(r2)
1000994c:	10800198 	cmpnei	r2,r2,6
10009950:	1000471e 	bne	r2,zero,10009a70 <getPixelColorRGBA8+0x83c>
  {
    if(mode->bitdepth == 8)
10009954:	e0800517 	ldw	r2,20(fp)
10009958:	10800117 	ldw	r2,4(r2)
1000995c:	10800218 	cmpnei	r2,r2,8
10009960:	1000241e 	bne	r2,zero,100099f4 <getPixelColorRGBA8+0x7c0>
    {
      *r = in[i * 4 + 0];
10009964:	e0800417 	ldw	r2,16(fp)
10009968:	1085883a 	add	r2,r2,r2
1000996c:	1085883a 	add	r2,r2,r2
10009970:	e0c00317 	ldw	r3,12(fp)
10009974:	1885883a 	add	r2,r3,r2
10009978:	10c00003 	ldbu	r3,0(r2)
1000997c:	e0bffc17 	ldw	r2,-16(fp)
10009980:	10c00005 	stb	r3,0(r2)
      *g = in[i * 4 + 1];
10009984:	e0800417 	ldw	r2,16(fp)
10009988:	1085883a 	add	r2,r2,r2
1000998c:	1085883a 	add	r2,r2,r2
10009990:	10800044 	addi	r2,r2,1
10009994:	e0c00317 	ldw	r3,12(fp)
10009998:	1885883a 	add	r2,r3,r2
1000999c:	10c00003 	ldbu	r3,0(r2)
100099a0:	e0bffd17 	ldw	r2,-12(fp)
100099a4:	10c00005 	stb	r3,0(r2)
      *b = in[i * 4 + 2];
100099a8:	e0800417 	ldw	r2,16(fp)
100099ac:	1085883a 	add	r2,r2,r2
100099b0:	1085883a 	add	r2,r2,r2
100099b4:	10800084 	addi	r2,r2,2
100099b8:	e0c00317 	ldw	r3,12(fp)
100099bc:	1885883a 	add	r2,r3,r2
100099c0:	10c00003 	ldbu	r3,0(r2)
100099c4:	e0bffe17 	ldw	r2,-8(fp)
100099c8:	10c00005 	stb	r3,0(r2)
      *a = in[i * 4 + 3];
100099cc:	e0800417 	ldw	r2,16(fp)
100099d0:	1085883a 	add	r2,r2,r2
100099d4:	1085883a 	add	r2,r2,r2
100099d8:	108000c4 	addi	r2,r2,3
100099dc:	e0c00317 	ldw	r3,12(fp)
100099e0:	1885883a 	add	r2,r3,r2
100099e4:	10c00003 	ldbu	r3,0(r2)
100099e8:	e0bfff17 	ldw	r2,-4(fp)
100099ec:	10c00005 	stb	r3,0(r2)
100099f0:	00001f06 	br	10009a70 <getPixelColorRGBA8+0x83c>
    }
    else
    {
      *r = in[i * 8 + 0];
100099f4:	e0800417 	ldw	r2,16(fp)
100099f8:	100490fa 	slli	r2,r2,3
100099fc:	e0c00317 	ldw	r3,12(fp)
10009a00:	1885883a 	add	r2,r3,r2
10009a04:	10c00003 	ldbu	r3,0(r2)
10009a08:	e0bffc17 	ldw	r2,-16(fp)
10009a0c:	10c00005 	stb	r3,0(r2)
      *g = in[i * 8 + 2];
10009a10:	e0800417 	ldw	r2,16(fp)
10009a14:	100490fa 	slli	r2,r2,3
10009a18:	10800084 	addi	r2,r2,2
10009a1c:	e0c00317 	ldw	r3,12(fp)
10009a20:	1885883a 	add	r2,r3,r2
10009a24:	10c00003 	ldbu	r3,0(r2)
10009a28:	e0bffd17 	ldw	r2,-12(fp)
10009a2c:	10c00005 	stb	r3,0(r2)
      *b = in[i * 8 + 4];
10009a30:	e0800417 	ldw	r2,16(fp)
10009a34:	100490fa 	slli	r2,r2,3
10009a38:	10800104 	addi	r2,r2,4
10009a3c:	e0c00317 	ldw	r3,12(fp)
10009a40:	1885883a 	add	r2,r3,r2
10009a44:	10c00003 	ldbu	r3,0(r2)
10009a48:	e0bffe17 	ldw	r2,-8(fp)
10009a4c:	10c00005 	stb	r3,0(r2)
      *a = in[i * 8 + 6];
10009a50:	e0800417 	ldw	r2,16(fp)
10009a54:	100490fa 	slli	r2,r2,3
10009a58:	10800184 	addi	r2,r2,6
10009a5c:	e0c00317 	ldw	r3,12(fp)
10009a60:	1885883a 	add	r2,r3,r2
10009a64:	10c00003 	ldbu	r3,0(r2)
10009a68:	e0bfff17 	ldw	r2,-4(fp)
10009a6c:	10c00005 	stb	r3,0(r2)
    }
  }
}
10009a70:	e037883a 	mov	sp,fp
10009a74:	dfc00217 	ldw	ra,8(sp)
10009a78:	df000117 	ldw	fp,4(sp)
10009a7c:	dc000017 	ldw	r16,0(sp)
10009a80:	dec00304 	addi	sp,sp,12
10009a84:	f800283a 	ret

10009a88 <getPixelColorsRGBA8>:
enough memory, if has_alpha is true the output is RGBA. mode has the color mode
of the input buffer.*/
static void getPixelColorsRGBA8(unsigned char* buffer, size_t numpixels,
                                unsigned has_alpha, const unsigned char* in,
                                const LodePNGColorMode* mode)
{
10009a88:	defff104 	addi	sp,sp,-60
10009a8c:	dfc00e15 	stw	ra,56(sp)
10009a90:	df000d15 	stw	fp,52(sp)
10009a94:	dc400c15 	stw	r17,48(sp)
10009a98:	dc000b15 	stw	r16,44(sp)
10009a9c:	df000b04 	addi	fp,sp,44
10009aa0:	e13ffc15 	stw	r4,-16(fp)
10009aa4:	e17ffd15 	stw	r5,-12(fp)
10009aa8:	e1bffe15 	stw	r6,-8(fp)
10009aac:	e1ffff15 	stw	r7,-4(fp)
  unsigned num_channels = has_alpha ? 4 : 3;
10009ab0:	e0bffe17 	ldw	r2,-8(fp)
10009ab4:	10000226 	beq	r2,zero,10009ac0 <getPixelColorsRGBA8+0x38>
10009ab8:	00800104 	movi	r2,4
10009abc:	00000106 	br	10009ac4 <getPixelColorsRGBA8+0x3c>
10009ac0:	008000c4 	movi	r2,3
10009ac4:	e0bff715 	stw	r2,-36(fp)
  size_t i;
  if(mode->colortype == LCT_GREY)
10009ac8:	e0800417 	ldw	r2,16(fp)
10009acc:	10800017 	ldw	r2,0(r2)
10009ad0:	1000aa1e 	bne	r2,zero,10009d7c <getPixelColorsRGBA8+0x2f4>
  {
    if(mode->bitdepth == 8)
10009ad4:	e0800417 	ldw	r2,16(fp)
10009ad8:	10800117 	ldw	r2,4(r2)
10009adc:	10800218 	cmpnei	r2,r2,8
10009ae0:	10002e1e 	bne	r2,zero,10009b9c <getPixelColorsRGBA8+0x114>
    {
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
10009ae4:	e03ff515 	stw	zero,-44(fp)
10009ae8:	00002806 	br	10009b8c <getPixelColorsRGBA8+0x104>
      {
        buffer[0] = buffer[1] = buffer[2] = in[i];
10009aec:	e0bffc17 	ldw	r2,-16(fp)
10009af0:	10800044 	addi	r2,r2,1
10009af4:	e0fffc17 	ldw	r3,-16(fp)
10009af8:	18c00084 	addi	r3,r3,2
10009afc:	e17fff17 	ldw	r5,-4(fp)
10009b00:	e13ff517 	ldw	r4,-44(fp)
10009b04:	2909883a 	add	r4,r5,r4
10009b08:	21000003 	ldbu	r4,0(r4)
10009b0c:	19000005 	stb	r4,0(r3)
10009b10:	18c00003 	ldbu	r3,0(r3)
10009b14:	10c00005 	stb	r3,0(r2)
10009b18:	10c00003 	ldbu	r3,0(r2)
10009b1c:	e0bffc17 	ldw	r2,-16(fp)
10009b20:	10c00005 	stb	r3,0(r2)
        if(has_alpha) buffer[3] = mode->key_defined && in[i] == mode->key_r ? 0 : 255;
10009b24:	e0bffe17 	ldw	r2,-8(fp)
10009b28:	10001126 	beq	r2,zero,10009b70 <getPixelColorsRGBA8+0xe8>
10009b2c:	e0bffc17 	ldw	r2,-16(fp)
10009b30:	10c000c4 	addi	r3,r2,3
10009b34:	e0800417 	ldw	r2,16(fp)
10009b38:	10800417 	ldw	r2,16(r2)
10009b3c:	10000a26 	beq	r2,zero,10009b68 <getPixelColorsRGBA8+0xe0>
10009b40:	e13fff17 	ldw	r4,-4(fp)
10009b44:	e0bff517 	ldw	r2,-44(fp)
10009b48:	2085883a 	add	r2,r4,r2
10009b4c:	10800003 	ldbu	r2,0(r2)
10009b50:	11003fcc 	andi	r4,r2,255
10009b54:	e0800417 	ldw	r2,16(fp)
10009b58:	10800517 	ldw	r2,20(r2)
10009b5c:	2080021e 	bne	r4,r2,10009b68 <getPixelColorsRGBA8+0xe0>
10009b60:	0005883a 	mov	r2,zero
10009b64:	00000106 	br	10009b6c <getPixelColorsRGBA8+0xe4>
10009b68:	00bfffc4 	movi	r2,-1
10009b6c:	18800005 	stb	r2,0(r3)
  size_t i;
  if(mode->colortype == LCT_GREY)
  {
    if(mode->bitdepth == 8)
    {
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
10009b70:	e0bff517 	ldw	r2,-44(fp)
10009b74:	10800044 	addi	r2,r2,1
10009b78:	e0bff515 	stw	r2,-44(fp)
10009b7c:	e0fffc17 	ldw	r3,-16(fp)
10009b80:	e0bff717 	ldw	r2,-36(fp)
10009b84:	1885883a 	add	r2,r3,r2
10009b88:	e0bffc15 	stw	r2,-16(fp)
10009b8c:	e0fff517 	ldw	r3,-44(fp)
10009b90:	e0bffd17 	ldw	r2,-12(fp)
10009b94:	18bfd51e 	bne	r3,r2,10009aec <__alt_data_end+0xf8009aec>
10009b98:	00026806 	br	1000a53c <getPixelColorsRGBA8+0xab4>
      {
        buffer[0] = buffer[1] = buffer[2] = in[i];
        if(has_alpha) buffer[3] = mode->key_defined && in[i] == mode->key_r ? 0 : 255;
      }
    }
    else if(mode->bitdepth == 16)
10009b9c:	e0800417 	ldw	r2,16(fp)
10009ba0:	10800117 	ldw	r2,4(r2)
10009ba4:	10800418 	cmpnei	r2,r2,16
10009ba8:	1000391e 	bne	r2,zero,10009c90 <getPixelColorsRGBA8+0x208>
    {
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
10009bac:	e03ff515 	stw	zero,-44(fp)
10009bb0:	00003306 	br	10009c80 <getPixelColorsRGBA8+0x1f8>
      {
        buffer[0] = buffer[1] = buffer[2] = in[i * 2];
10009bb4:	e0bffc17 	ldw	r2,-16(fp)
10009bb8:	10800044 	addi	r2,r2,1
10009bbc:	e0fffc17 	ldw	r3,-16(fp)
10009bc0:	18c00084 	addi	r3,r3,2
10009bc4:	e13ff517 	ldw	r4,-44(fp)
10009bc8:	2109883a 	add	r4,r4,r4
10009bcc:	e17fff17 	ldw	r5,-4(fp)
10009bd0:	2909883a 	add	r4,r5,r4
10009bd4:	21000003 	ldbu	r4,0(r4)
10009bd8:	19000005 	stb	r4,0(r3)
10009bdc:	18c00003 	ldbu	r3,0(r3)
10009be0:	10c00005 	stb	r3,0(r2)
10009be4:	10c00003 	ldbu	r3,0(r2)
10009be8:	e0bffc17 	ldw	r2,-16(fp)
10009bec:	10c00005 	stb	r3,0(r2)
        if(has_alpha) buffer[3] = mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r ? 0 : 255;
10009bf0:	e0bffe17 	ldw	r2,-8(fp)
10009bf4:	10001b26 	beq	r2,zero,10009c64 <getPixelColorsRGBA8+0x1dc>
10009bf8:	e0bffc17 	ldw	r2,-16(fp)
10009bfc:	10c000c4 	addi	r3,r2,3
10009c00:	e0800417 	ldw	r2,16(fp)
10009c04:	10800417 	ldw	r2,16(r2)
10009c08:	10001426 	beq	r2,zero,10009c5c <getPixelColorsRGBA8+0x1d4>
10009c0c:	e0bff517 	ldw	r2,-44(fp)
10009c10:	1085883a 	add	r2,r2,r2
10009c14:	e13fff17 	ldw	r4,-4(fp)
10009c18:	2085883a 	add	r2,r4,r2
10009c1c:	10800003 	ldbu	r2,0(r2)
10009c20:	10803fcc 	andi	r2,r2,255
10009c24:	1008923a 	slli	r4,r2,8
10009c28:	e0bff517 	ldw	r2,-44(fp)
10009c2c:	1085883a 	add	r2,r2,r2
10009c30:	10800044 	addi	r2,r2,1
10009c34:	e17fff17 	ldw	r5,-4(fp)
10009c38:	2885883a 	add	r2,r5,r2
10009c3c:	10800003 	ldbu	r2,0(r2)
10009c40:	10803fcc 	andi	r2,r2,255
10009c44:	2089883a 	add	r4,r4,r2
10009c48:	e0800417 	ldw	r2,16(fp)
10009c4c:	10800517 	ldw	r2,20(r2)
10009c50:	2080021e 	bne	r4,r2,10009c5c <getPixelColorsRGBA8+0x1d4>
10009c54:	0005883a 	mov	r2,zero
10009c58:	00000106 	br	10009c60 <getPixelColorsRGBA8+0x1d8>
10009c5c:	00bfffc4 	movi	r2,-1
10009c60:	18800005 	stb	r2,0(r3)
        if(has_alpha) buffer[3] = mode->key_defined && in[i] == mode->key_r ? 0 : 255;
      }
    }
    else if(mode->bitdepth == 16)
    {
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
10009c64:	e0bff517 	ldw	r2,-44(fp)
10009c68:	10800044 	addi	r2,r2,1
10009c6c:	e0bff515 	stw	r2,-44(fp)
10009c70:	e0fffc17 	ldw	r3,-16(fp)
10009c74:	e0bff717 	ldw	r2,-36(fp)
10009c78:	1885883a 	add	r2,r3,r2
10009c7c:	e0bffc15 	stw	r2,-16(fp)
10009c80:	e0fff517 	ldw	r3,-44(fp)
10009c84:	e0bffd17 	ldw	r2,-12(fp)
10009c88:	18bfca1e 	bne	r3,r2,10009bb4 <__alt_data_end+0xf8009bb4>
10009c8c:	00022b06 	br	1000a53c <getPixelColorsRGBA8+0xab4>
        if(has_alpha) buffer[3] = mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r ? 0 : 255;
      }
    }
    else
    {
      unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
10009c90:	e0800417 	ldw	r2,16(fp)
10009c94:	10800117 	ldw	r2,4(r2)
10009c98:	00c00044 	movi	r3,1
10009c9c:	1884983a 	sll	r2,r3,r2
10009ca0:	10bfffc4 	addi	r2,r2,-1
10009ca4:	e0bff815 	stw	r2,-32(fp)
      size_t j = 0;
10009ca8:	e03ffa15 	stw	zero,-24(fp)
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
10009cac:	e03ff515 	stw	zero,-44(fp)
10009cb0:	00002e06 	br	10009d6c <getPixelColorsRGBA8+0x2e4>
      {
        unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
10009cb4:	e0800417 	ldw	r2,16(fp)
10009cb8:	10800117 	ldw	r2,4(r2)
10009cbc:	e0fffa04 	addi	r3,fp,-24
10009cc0:	1809883a 	mov	r4,r3
10009cc4:	e17fff17 	ldw	r5,-4(fp)
10009cc8:	100d883a 	mov	r6,r2
10009ccc:	00063b40 	call	100063b4 <readBitsFromReversedStream>
10009cd0:	e0bff915 	stw	r2,-28(fp)
        buffer[0] = buffer[1] = buffer[2] = (value * 255) / highest;
10009cd4:	e0bffc17 	ldw	r2,-16(fp)
10009cd8:	14000044 	addi	r16,r2,1
10009cdc:	e0bffc17 	ldw	r2,-16(fp)
10009ce0:	14400084 	addi	r17,r2,2
10009ce4:	e13ff917 	ldw	r4,-28(fp)
10009ce8:	01403fc4 	movi	r5,255
10009cec:	00146fc0 	call	100146fc <__mulsi3>
10009cf0:	1009883a 	mov	r4,r2
10009cf4:	e17ff817 	ldw	r5,-32(fp)
10009cf8:	00146ec0 	call	100146ec <__udivsi3>
10009cfc:	88800005 	stb	r2,0(r17)
10009d00:	88800003 	ldbu	r2,0(r17)
10009d04:	80800005 	stb	r2,0(r16)
10009d08:	80c00003 	ldbu	r3,0(r16)
10009d0c:	e0bffc17 	ldw	r2,-16(fp)
10009d10:	10c00005 	stb	r3,0(r2)
        if(has_alpha) buffer[3] = mode->key_defined && value == mode->key_r ? 0 : 255;
10009d14:	e0bffe17 	ldw	r2,-8(fp)
10009d18:	10000d26 	beq	r2,zero,10009d50 <getPixelColorsRGBA8+0x2c8>
10009d1c:	e0bffc17 	ldw	r2,-16(fp)
10009d20:	10c000c4 	addi	r3,r2,3
10009d24:	e0800417 	ldw	r2,16(fp)
10009d28:	10800417 	ldw	r2,16(r2)
10009d2c:	10000626 	beq	r2,zero,10009d48 <getPixelColorsRGBA8+0x2c0>
10009d30:	e0800417 	ldw	r2,16(fp)
10009d34:	11000517 	ldw	r4,20(r2)
10009d38:	e0bff917 	ldw	r2,-28(fp)
10009d3c:	2080021e 	bne	r4,r2,10009d48 <getPixelColorsRGBA8+0x2c0>
10009d40:	0005883a 	mov	r2,zero
10009d44:	00000106 	br	10009d4c <getPixelColorsRGBA8+0x2c4>
10009d48:	00bfffc4 	movi	r2,-1
10009d4c:	18800005 	stb	r2,0(r3)
    }
    else
    {
      unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
      size_t j = 0;
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
10009d50:	e0bff517 	ldw	r2,-44(fp)
10009d54:	10800044 	addi	r2,r2,1
10009d58:	e0bff515 	stw	r2,-44(fp)
10009d5c:	e0fffc17 	ldw	r3,-16(fp)
10009d60:	e0bff717 	ldw	r2,-36(fp)
10009d64:	1885883a 	add	r2,r3,r2
10009d68:	e0bffc15 	stw	r2,-16(fp)
10009d6c:	e0fff517 	ldw	r3,-44(fp)
10009d70:	e0bffd17 	ldw	r2,-12(fp)
10009d74:	18bfcf1e 	bne	r3,r2,10009cb4 <__alt_data_end+0xf8009cb4>
10009d78:	0001f006 	br	1000a53c <getPixelColorsRGBA8+0xab4>
        buffer[0] = buffer[1] = buffer[2] = (value * 255) / highest;
        if(has_alpha) buffer[3] = mode->key_defined && value == mode->key_r ? 0 : 255;
      }
    }
  }
  else if(mode->colortype == LCT_RGB)
10009d7c:	e0800417 	ldw	r2,16(fp)
10009d80:	10800017 	ldw	r2,0(r2)
10009d84:	10800098 	cmpnei	r2,r2,2
10009d88:	1000c11e 	bne	r2,zero,1000a090 <getPixelColorsRGBA8+0x608>
  {
    if(mode->bitdepth == 8)
10009d8c:	e0800417 	ldw	r2,16(fp)
10009d90:	10800117 	ldw	r2,4(r2)
10009d94:	10800218 	cmpnei	r2,r2,8
10009d98:	10004b1e 	bne	r2,zero,10009ec8 <getPixelColorsRGBA8+0x440>
    {
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
10009d9c:	e03ff515 	stw	zero,-44(fp)
10009da0:	00004506 	br	10009eb8 <getPixelColorsRGBA8+0x430>
      {
        buffer[0] = in[i * 3 + 0];
10009da4:	e0fff517 	ldw	r3,-44(fp)
10009da8:	1805883a 	mov	r2,r3
10009dac:	1085883a 	add	r2,r2,r2
10009db0:	10c5883a 	add	r2,r2,r3
10009db4:	e0ffff17 	ldw	r3,-4(fp)
10009db8:	1885883a 	add	r2,r3,r2
10009dbc:	10c00003 	ldbu	r3,0(r2)
10009dc0:	e0bffc17 	ldw	r2,-16(fp)
10009dc4:	10c00005 	stb	r3,0(r2)
        buffer[1] = in[i * 3 + 1];
10009dc8:	e0bffc17 	ldw	r2,-16(fp)
10009dcc:	11000044 	addi	r4,r2,1
10009dd0:	e0fff517 	ldw	r3,-44(fp)
10009dd4:	1805883a 	mov	r2,r3
10009dd8:	1085883a 	add	r2,r2,r2
10009ddc:	10c5883a 	add	r2,r2,r3
10009de0:	10800044 	addi	r2,r2,1
10009de4:	e0ffff17 	ldw	r3,-4(fp)
10009de8:	1885883a 	add	r2,r3,r2
10009dec:	10800003 	ldbu	r2,0(r2)
10009df0:	20800005 	stb	r2,0(r4)
        buffer[2] = in[i * 3 + 2];
10009df4:	e0bffc17 	ldw	r2,-16(fp)
10009df8:	11000084 	addi	r4,r2,2
10009dfc:	e0fff517 	ldw	r3,-44(fp)
10009e00:	1805883a 	mov	r2,r3
10009e04:	1085883a 	add	r2,r2,r2
10009e08:	10c5883a 	add	r2,r2,r3
10009e0c:	10800084 	addi	r2,r2,2
10009e10:	e0ffff17 	ldw	r3,-4(fp)
10009e14:	1885883a 	add	r2,r3,r2
10009e18:	10800003 	ldbu	r2,0(r2)
10009e1c:	20800005 	stb	r2,0(r4)
        if(has_alpha) buffer[3] = mode->key_defined && buffer[0] == mode->key_r
10009e20:	e0bffe17 	ldw	r2,-8(fp)
10009e24:	10001d26 	beq	r2,zero,10009e9c <getPixelColorsRGBA8+0x414>
10009e28:	e0bffc17 	ldw	r2,-16(fp)
10009e2c:	10c000c4 	addi	r3,r2,3
10009e30:	e0800417 	ldw	r2,16(fp)
10009e34:	10800417 	ldw	r2,16(r2)
10009e38:	10001626 	beq	r2,zero,10009e94 <getPixelColorsRGBA8+0x40c>
10009e3c:	e0bffc17 	ldw	r2,-16(fp)
10009e40:	10800003 	ldbu	r2,0(r2)
10009e44:	11003fcc 	andi	r4,r2,255
10009e48:	e0800417 	ldw	r2,16(fp)
10009e4c:	10800517 	ldw	r2,20(r2)
10009e50:	2080101e 	bne	r4,r2,10009e94 <getPixelColorsRGBA8+0x40c>
           && buffer[1]== mode->key_g && buffer[2] == mode->key_b ? 0 : 255;
10009e54:	e0bffc17 	ldw	r2,-16(fp)
10009e58:	10800044 	addi	r2,r2,1
10009e5c:	10800003 	ldbu	r2,0(r2)
10009e60:	11003fcc 	andi	r4,r2,255
10009e64:	e0800417 	ldw	r2,16(fp)
10009e68:	10800617 	ldw	r2,24(r2)
10009e6c:	2080091e 	bne	r4,r2,10009e94 <getPixelColorsRGBA8+0x40c>
10009e70:	e0bffc17 	ldw	r2,-16(fp)
10009e74:	10800084 	addi	r2,r2,2
10009e78:	10800003 	ldbu	r2,0(r2)
10009e7c:	11003fcc 	andi	r4,r2,255
10009e80:	e0800417 	ldw	r2,16(fp)
10009e84:	10800717 	ldw	r2,28(r2)
10009e88:	2080021e 	bne	r4,r2,10009e94 <getPixelColorsRGBA8+0x40c>
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
      {
        buffer[0] = in[i * 3 + 0];
        buffer[1] = in[i * 3 + 1];
        buffer[2] = in[i * 3 + 2];
        if(has_alpha) buffer[3] = mode->key_defined && buffer[0] == mode->key_r
10009e8c:	0005883a 	mov	r2,zero
10009e90:	00000106 	br	10009e98 <getPixelColorsRGBA8+0x410>
10009e94:	00bfffc4 	movi	r2,-1
10009e98:	18800005 	stb	r2,0(r3)
  }
  else if(mode->colortype == LCT_RGB)
  {
    if(mode->bitdepth == 8)
    {
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
10009e9c:	e0bff517 	ldw	r2,-44(fp)
10009ea0:	10800044 	addi	r2,r2,1
10009ea4:	e0bff515 	stw	r2,-44(fp)
10009ea8:	e0fffc17 	ldw	r3,-16(fp)
10009eac:	e0bff717 	ldw	r2,-36(fp)
10009eb0:	1885883a 	add	r2,r3,r2
10009eb4:	e0bffc15 	stw	r2,-16(fp)
10009eb8:	e0fff517 	ldw	r3,-44(fp)
10009ebc:	e0bffd17 	ldw	r2,-12(fp)
10009ec0:	18bfb81e 	bne	r3,r2,10009da4 <__alt_data_end+0xf8009da4>
10009ec4:	00019d06 	br	1000a53c <getPixelColorsRGBA8+0xab4>
           && buffer[1]== mode->key_g && buffer[2] == mode->key_b ? 0 : 255;
      }
    }
    else
    {
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
10009ec8:	e03ff515 	stw	zero,-44(fp)
10009ecc:	00006c06 	br	1000a080 <getPixelColorsRGBA8+0x5f8>
      {
        buffer[0] = in[i * 6 + 0];
10009ed0:	e13ff517 	ldw	r4,-44(fp)
10009ed4:	01400184 	movi	r5,6
10009ed8:	00146fc0 	call	100146fc <__mulsi3>
10009edc:	e0ffff17 	ldw	r3,-4(fp)
10009ee0:	1885883a 	add	r2,r3,r2
10009ee4:	10c00003 	ldbu	r3,0(r2)
10009ee8:	e0bffc17 	ldw	r2,-16(fp)
10009eec:	10c00005 	stb	r3,0(r2)
        buffer[1] = in[i * 6 + 2];
10009ef0:	e0bffc17 	ldw	r2,-16(fp)
10009ef4:	14000044 	addi	r16,r2,1
10009ef8:	e13ff517 	ldw	r4,-44(fp)
10009efc:	01400184 	movi	r5,6
10009f00:	00146fc0 	call	100146fc <__mulsi3>
10009f04:	10800084 	addi	r2,r2,2
10009f08:	e0ffff17 	ldw	r3,-4(fp)
10009f0c:	1885883a 	add	r2,r3,r2
10009f10:	10800003 	ldbu	r2,0(r2)
10009f14:	80800005 	stb	r2,0(r16)
        buffer[2] = in[i * 6 + 4];
10009f18:	e0bffc17 	ldw	r2,-16(fp)
10009f1c:	14000084 	addi	r16,r2,2
10009f20:	e13ff517 	ldw	r4,-44(fp)
10009f24:	01400184 	movi	r5,6
10009f28:	00146fc0 	call	100146fc <__mulsi3>
10009f2c:	10800104 	addi	r2,r2,4
10009f30:	e0ffff17 	ldw	r3,-4(fp)
10009f34:	1885883a 	add	r2,r3,r2
10009f38:	10800003 	ldbu	r2,0(r2)
10009f3c:	80800005 	stb	r2,0(r16)
        if(has_alpha) buffer[3] = mode->key_defined
10009f40:	e0bffe17 	ldw	r2,-8(fp)
10009f44:	10004726 	beq	r2,zero,1000a064 <getPixelColorsRGBA8+0x5dc>
10009f48:	e0bffc17 	ldw	r2,-16(fp)
10009f4c:	140000c4 	addi	r16,r2,3
10009f50:	e0800417 	ldw	r2,16(fp)
10009f54:	10800417 	ldw	r2,16(r2)
10009f58:	10004026 	beq	r2,zero,1000a05c <getPixelColorsRGBA8+0x5d4>
           && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
10009f5c:	e13ff517 	ldw	r4,-44(fp)
10009f60:	01400184 	movi	r5,6
10009f64:	00146fc0 	call	100146fc <__mulsi3>
10009f68:	e0ffff17 	ldw	r3,-4(fp)
10009f6c:	1885883a 	add	r2,r3,r2
10009f70:	10800003 	ldbu	r2,0(r2)
10009f74:	10803fcc 	andi	r2,r2,255
10009f78:	1022923a 	slli	r17,r2,8
10009f7c:	e13ff517 	ldw	r4,-44(fp)
10009f80:	01400184 	movi	r5,6
10009f84:	00146fc0 	call	100146fc <__mulsi3>
10009f88:	10800044 	addi	r2,r2,1
10009f8c:	e0ffff17 	ldw	r3,-4(fp)
10009f90:	1885883a 	add	r2,r3,r2
10009f94:	10800003 	ldbu	r2,0(r2)
10009f98:	10803fcc 	andi	r2,r2,255
10009f9c:	8887883a 	add	r3,r17,r2
10009fa0:	e0800417 	ldw	r2,16(fp)
10009fa4:	10800517 	ldw	r2,20(r2)
10009fa8:	18802c1e 	bne	r3,r2,1000a05c <getPixelColorsRGBA8+0x5d4>
           && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
10009fac:	e13ff517 	ldw	r4,-44(fp)
10009fb0:	01400184 	movi	r5,6
10009fb4:	00146fc0 	call	100146fc <__mulsi3>
10009fb8:	10800084 	addi	r2,r2,2
10009fbc:	e0ffff17 	ldw	r3,-4(fp)
10009fc0:	1885883a 	add	r2,r3,r2
10009fc4:	10800003 	ldbu	r2,0(r2)
10009fc8:	10803fcc 	andi	r2,r2,255
10009fcc:	1022923a 	slli	r17,r2,8
10009fd0:	e13ff517 	ldw	r4,-44(fp)
10009fd4:	01400184 	movi	r5,6
10009fd8:	00146fc0 	call	100146fc <__mulsi3>
10009fdc:	108000c4 	addi	r2,r2,3
10009fe0:	e0ffff17 	ldw	r3,-4(fp)
10009fe4:	1885883a 	add	r2,r3,r2
10009fe8:	10800003 	ldbu	r2,0(r2)
10009fec:	10803fcc 	andi	r2,r2,255
10009ff0:	8887883a 	add	r3,r17,r2
10009ff4:	e0800417 	ldw	r2,16(fp)
10009ff8:	10800617 	ldw	r2,24(r2)
10009ffc:	1880171e 	bne	r3,r2,1000a05c <getPixelColorsRGBA8+0x5d4>
           && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b ? 0 : 255;
1000a000:	e13ff517 	ldw	r4,-44(fp)
1000a004:	01400184 	movi	r5,6
1000a008:	00146fc0 	call	100146fc <__mulsi3>
1000a00c:	10800104 	addi	r2,r2,4
1000a010:	e0ffff17 	ldw	r3,-4(fp)
1000a014:	1885883a 	add	r2,r3,r2
1000a018:	10800003 	ldbu	r2,0(r2)
1000a01c:	10803fcc 	andi	r2,r2,255
1000a020:	1022923a 	slli	r17,r2,8
1000a024:	e13ff517 	ldw	r4,-44(fp)
1000a028:	01400184 	movi	r5,6
1000a02c:	00146fc0 	call	100146fc <__mulsi3>
1000a030:	10800144 	addi	r2,r2,5
1000a034:	e0ffff17 	ldw	r3,-4(fp)
1000a038:	1885883a 	add	r2,r3,r2
1000a03c:	10800003 	ldbu	r2,0(r2)
1000a040:	10803fcc 	andi	r2,r2,255
1000a044:	8887883a 	add	r3,r17,r2
1000a048:	e0800417 	ldw	r2,16(fp)
1000a04c:	10800717 	ldw	r2,28(r2)
1000a050:	1880021e 	bne	r3,r2,1000a05c <getPixelColorsRGBA8+0x5d4>
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
      {
        buffer[0] = in[i * 6 + 0];
        buffer[1] = in[i * 6 + 2];
        buffer[2] = in[i * 6 + 4];
        if(has_alpha) buffer[3] = mode->key_defined
1000a054:	0005883a 	mov	r2,zero
1000a058:	00000106 	br	1000a060 <getPixelColorsRGBA8+0x5d8>
1000a05c:	00bfffc4 	movi	r2,-1
1000a060:	80800005 	stb	r2,0(r16)
           && buffer[1]== mode->key_g && buffer[2] == mode->key_b ? 0 : 255;
      }
    }
    else
    {
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
1000a064:	e0bff517 	ldw	r2,-44(fp)
1000a068:	10800044 	addi	r2,r2,1
1000a06c:	e0bff515 	stw	r2,-44(fp)
1000a070:	e0fffc17 	ldw	r3,-16(fp)
1000a074:	e0bff717 	ldw	r2,-36(fp)
1000a078:	1885883a 	add	r2,r3,r2
1000a07c:	e0bffc15 	stw	r2,-16(fp)
1000a080:	e0fff517 	ldw	r3,-44(fp)
1000a084:	e0bffd17 	ldw	r2,-12(fp)
1000a088:	18bf911e 	bne	r3,r2,10009ed0 <__alt_data_end+0xf8009ed0>
1000a08c:	00012b06 	br	1000a53c <getPixelColorsRGBA8+0xab4>
           && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
           && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b ? 0 : 255;
      }
    }
  }
  else if(mode->colortype == LCT_PALETTE)
1000a090:	e0800417 	ldw	r2,16(fp)
1000a094:	10800017 	ldw	r2,0(r2)
1000a098:	108000d8 	cmpnei	r2,r2,3
1000a09c:	1000621e 	bne	r2,zero,1000a228 <getPixelColorsRGBA8+0x7a0>
  {
    unsigned index;
    size_t j = 0;
1000a0a0:	e03ffb15 	stw	zero,-20(fp)
    for(i = 0; i != numpixels; ++i, buffer += num_channels)
1000a0a4:	e03ff515 	stw	zero,-44(fp)
1000a0a8:	00005b06 	br	1000a218 <getPixelColorsRGBA8+0x790>
    {
      if(mode->bitdepth == 8) index = in[i];
1000a0ac:	e0800417 	ldw	r2,16(fp)
1000a0b0:	10800117 	ldw	r2,4(r2)
1000a0b4:	10800218 	cmpnei	r2,r2,8
1000a0b8:	1000071e 	bne	r2,zero,1000a0d8 <getPixelColorsRGBA8+0x650>
1000a0bc:	e0ffff17 	ldw	r3,-4(fp)
1000a0c0:	e0bff517 	ldw	r2,-44(fp)
1000a0c4:	1885883a 	add	r2,r3,r2
1000a0c8:	10800003 	ldbu	r2,0(r2)
1000a0cc:	10803fcc 	andi	r2,r2,255
1000a0d0:	e0bff615 	stw	r2,-40(fp)
1000a0d4:	00000806 	br	1000a0f8 <getPixelColorsRGBA8+0x670>
      else index = readBitsFromReversedStream(&j, in, mode->bitdepth);
1000a0d8:	e0800417 	ldw	r2,16(fp)
1000a0dc:	10800117 	ldw	r2,4(r2)
1000a0e0:	e0fffb04 	addi	r3,fp,-20
1000a0e4:	1809883a 	mov	r4,r3
1000a0e8:	e17fff17 	ldw	r5,-4(fp)
1000a0ec:	100d883a 	mov	r6,r2
1000a0f0:	00063b40 	call	100063b4 <readBitsFromReversedStream>
1000a0f4:	e0bff615 	stw	r2,-40(fp)

      if(index >= mode->palettesize)
1000a0f8:	e0800417 	ldw	r2,16(fp)
1000a0fc:	10800317 	ldw	r2,12(r2)
1000a100:	e0fff617 	ldw	r3,-40(fp)
1000a104:	18801136 	bltu	r3,r2,1000a14c <getPixelColorsRGBA8+0x6c4>
      {
        /*This is an error according to the PNG spec, but most PNG decoders make it black instead.
        Done here too, slightly faster due to no error handling needed.*/
        buffer[0] = buffer[1] = buffer[2] = 0;
1000a108:	e0bffc17 	ldw	r2,-16(fp)
1000a10c:	10800044 	addi	r2,r2,1
1000a110:	e0fffc17 	ldw	r3,-16(fp)
1000a114:	18c00084 	addi	r3,r3,2
1000a118:	18000005 	stb	zero,0(r3)
1000a11c:	18c00003 	ldbu	r3,0(r3)
1000a120:	10c00005 	stb	r3,0(r2)
1000a124:	10c00003 	ldbu	r3,0(r2)
1000a128:	e0bffc17 	ldw	r2,-16(fp)
1000a12c:	10c00005 	stb	r3,0(r2)
        if(has_alpha) buffer[3] = 255;
1000a130:	e0bffe17 	ldw	r2,-8(fp)
1000a134:	10003126 	beq	r2,zero,1000a1fc <getPixelColorsRGBA8+0x774>
1000a138:	e0bffc17 	ldw	r2,-16(fp)
1000a13c:	108000c4 	addi	r2,r2,3
1000a140:	00ffffc4 	movi	r3,-1
1000a144:	10c00005 	stb	r3,0(r2)
1000a148:	00002c06 	br	1000a1fc <getPixelColorsRGBA8+0x774>
      }
      else
      {
        buffer[0] = mode->palette[index * 4 + 0];
1000a14c:	e0800417 	ldw	r2,16(fp)
1000a150:	10c00217 	ldw	r3,8(r2)
1000a154:	e0bff617 	ldw	r2,-40(fp)
1000a158:	1085883a 	add	r2,r2,r2
1000a15c:	1085883a 	add	r2,r2,r2
1000a160:	1885883a 	add	r2,r3,r2
1000a164:	10c00003 	ldbu	r3,0(r2)
1000a168:	e0bffc17 	ldw	r2,-16(fp)
1000a16c:	10c00005 	stb	r3,0(r2)
        buffer[1] = mode->palette[index * 4 + 1];
1000a170:	e0bffc17 	ldw	r2,-16(fp)
1000a174:	10c00044 	addi	r3,r2,1
1000a178:	e0800417 	ldw	r2,16(fp)
1000a17c:	11000217 	ldw	r4,8(r2)
1000a180:	e0bff617 	ldw	r2,-40(fp)
1000a184:	1085883a 	add	r2,r2,r2
1000a188:	1085883a 	add	r2,r2,r2
1000a18c:	10800044 	addi	r2,r2,1
1000a190:	2085883a 	add	r2,r4,r2
1000a194:	10800003 	ldbu	r2,0(r2)
1000a198:	18800005 	stb	r2,0(r3)
        buffer[2] = mode->palette[index * 4 + 2];
1000a19c:	e0bffc17 	ldw	r2,-16(fp)
1000a1a0:	10c00084 	addi	r3,r2,2
1000a1a4:	e0800417 	ldw	r2,16(fp)
1000a1a8:	11000217 	ldw	r4,8(r2)
1000a1ac:	e0bff617 	ldw	r2,-40(fp)
1000a1b0:	1085883a 	add	r2,r2,r2
1000a1b4:	1085883a 	add	r2,r2,r2
1000a1b8:	10800084 	addi	r2,r2,2
1000a1bc:	2085883a 	add	r2,r4,r2
1000a1c0:	10800003 	ldbu	r2,0(r2)
1000a1c4:	18800005 	stb	r2,0(r3)
        if(has_alpha) buffer[3] = mode->palette[index * 4 + 3];
1000a1c8:	e0bffe17 	ldw	r2,-8(fp)
1000a1cc:	10000b26 	beq	r2,zero,1000a1fc <getPixelColorsRGBA8+0x774>
1000a1d0:	e0bffc17 	ldw	r2,-16(fp)
1000a1d4:	10c000c4 	addi	r3,r2,3
1000a1d8:	e0800417 	ldw	r2,16(fp)
1000a1dc:	11000217 	ldw	r4,8(r2)
1000a1e0:	e0bff617 	ldw	r2,-40(fp)
1000a1e4:	1085883a 	add	r2,r2,r2
1000a1e8:	1085883a 	add	r2,r2,r2
1000a1ec:	108000c4 	addi	r2,r2,3
1000a1f0:	2085883a 	add	r2,r4,r2
1000a1f4:	10800003 	ldbu	r2,0(r2)
1000a1f8:	18800005 	stb	r2,0(r3)
  }
  else if(mode->colortype == LCT_PALETTE)
  {
    unsigned index;
    size_t j = 0;
    for(i = 0; i != numpixels; ++i, buffer += num_channels)
1000a1fc:	e0bff517 	ldw	r2,-44(fp)
1000a200:	10800044 	addi	r2,r2,1
1000a204:	e0bff515 	stw	r2,-44(fp)
1000a208:	e0fffc17 	ldw	r3,-16(fp)
1000a20c:	e0bff717 	ldw	r2,-36(fp)
1000a210:	1885883a 	add	r2,r3,r2
1000a214:	e0bffc15 	stw	r2,-16(fp)
1000a218:	e0fff517 	ldw	r3,-44(fp)
1000a21c:	e0bffd17 	ldw	r2,-12(fp)
1000a220:	18bfa21e 	bne	r3,r2,1000a0ac <__alt_data_end+0xf800a0ac>
1000a224:	0000c506 	br	1000a53c <getPixelColorsRGBA8+0xab4>
        buffer[2] = mode->palette[index * 4 + 2];
        if(has_alpha) buffer[3] = mode->palette[index * 4 + 3];
      }
    }
  }
  else if(mode->colortype == LCT_GREY_ALPHA)
1000a228:	e0800417 	ldw	r2,16(fp)
1000a22c:	10800017 	ldw	r2,0(r2)
1000a230:	10800118 	cmpnei	r2,r2,4
1000a234:	1000541e 	bne	r2,zero,1000a388 <getPixelColorsRGBA8+0x900>
  {
    if(mode->bitdepth == 8)
1000a238:	e0800417 	ldw	r2,16(fp)
1000a23c:	10800117 	ldw	r2,4(r2)
1000a240:	10800218 	cmpnei	r2,r2,8
1000a244:	1000271e 	bne	r2,zero,1000a2e4 <getPixelColorsRGBA8+0x85c>
    {
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
1000a248:	e03ff515 	stw	zero,-44(fp)
1000a24c:	00002106 	br	1000a2d4 <getPixelColorsRGBA8+0x84c>
      {
        buffer[0] = buffer[1] = buffer[2] = in[i * 2 + 0];
1000a250:	e0bffc17 	ldw	r2,-16(fp)
1000a254:	10800044 	addi	r2,r2,1
1000a258:	e0fffc17 	ldw	r3,-16(fp)
1000a25c:	18c00084 	addi	r3,r3,2
1000a260:	e13ff517 	ldw	r4,-44(fp)
1000a264:	2109883a 	add	r4,r4,r4
1000a268:	e17fff17 	ldw	r5,-4(fp)
1000a26c:	2909883a 	add	r4,r5,r4
1000a270:	21000003 	ldbu	r4,0(r4)
1000a274:	19000005 	stb	r4,0(r3)
1000a278:	18c00003 	ldbu	r3,0(r3)
1000a27c:	10c00005 	stb	r3,0(r2)
1000a280:	10c00003 	ldbu	r3,0(r2)
1000a284:	e0bffc17 	ldw	r2,-16(fp)
1000a288:	10c00005 	stb	r3,0(r2)
        if(has_alpha) buffer[3] = in[i * 2 + 1];
1000a28c:	e0bffe17 	ldw	r2,-8(fp)
1000a290:	10000926 	beq	r2,zero,1000a2b8 <getPixelColorsRGBA8+0x830>
1000a294:	e0bffc17 	ldw	r2,-16(fp)
1000a298:	10c000c4 	addi	r3,r2,3
1000a29c:	e0bff517 	ldw	r2,-44(fp)
1000a2a0:	1085883a 	add	r2,r2,r2
1000a2a4:	10800044 	addi	r2,r2,1
1000a2a8:	e13fff17 	ldw	r4,-4(fp)
1000a2ac:	2085883a 	add	r2,r4,r2
1000a2b0:	10800003 	ldbu	r2,0(r2)
1000a2b4:	18800005 	stb	r2,0(r3)
  }
  else if(mode->colortype == LCT_GREY_ALPHA)
  {
    if(mode->bitdepth == 8)
    {
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
1000a2b8:	e0bff517 	ldw	r2,-44(fp)
1000a2bc:	10800044 	addi	r2,r2,1
1000a2c0:	e0bff515 	stw	r2,-44(fp)
1000a2c4:	e0fffc17 	ldw	r3,-16(fp)
1000a2c8:	e0bff717 	ldw	r2,-36(fp)
1000a2cc:	1885883a 	add	r2,r3,r2
1000a2d0:	e0bffc15 	stw	r2,-16(fp)
1000a2d4:	e0fff517 	ldw	r3,-44(fp)
1000a2d8:	e0bffd17 	ldw	r2,-12(fp)
1000a2dc:	18bfdc1e 	bne	r3,r2,1000a250 <__alt_data_end+0xf800a250>
1000a2e0:	00009606 	br	1000a53c <getPixelColorsRGBA8+0xab4>
        if(has_alpha) buffer[3] = in[i * 2 + 1];
      }
    }
    else
    {
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
1000a2e4:	e03ff515 	stw	zero,-44(fp)
1000a2e8:	00002306 	br	1000a378 <getPixelColorsRGBA8+0x8f0>
      {
        buffer[0] = buffer[1] = buffer[2] = in[i * 4 + 0];
1000a2ec:	e0bffc17 	ldw	r2,-16(fp)
1000a2f0:	10800044 	addi	r2,r2,1
1000a2f4:	e0fffc17 	ldw	r3,-16(fp)
1000a2f8:	18c00084 	addi	r3,r3,2
1000a2fc:	e13ff517 	ldw	r4,-44(fp)
1000a300:	2109883a 	add	r4,r4,r4
1000a304:	2109883a 	add	r4,r4,r4
1000a308:	e17fff17 	ldw	r5,-4(fp)
1000a30c:	2909883a 	add	r4,r5,r4
1000a310:	21000003 	ldbu	r4,0(r4)
1000a314:	19000005 	stb	r4,0(r3)
1000a318:	18c00003 	ldbu	r3,0(r3)
1000a31c:	10c00005 	stb	r3,0(r2)
1000a320:	10c00003 	ldbu	r3,0(r2)
1000a324:	e0bffc17 	ldw	r2,-16(fp)
1000a328:	10c00005 	stb	r3,0(r2)
        if(has_alpha) buffer[3] = in[i * 4 + 2];
1000a32c:	e0bffe17 	ldw	r2,-8(fp)
1000a330:	10000a26 	beq	r2,zero,1000a35c <getPixelColorsRGBA8+0x8d4>
1000a334:	e0bffc17 	ldw	r2,-16(fp)
1000a338:	10c000c4 	addi	r3,r2,3
1000a33c:	e0bff517 	ldw	r2,-44(fp)
1000a340:	1085883a 	add	r2,r2,r2
1000a344:	1085883a 	add	r2,r2,r2
1000a348:	10800084 	addi	r2,r2,2
1000a34c:	e13fff17 	ldw	r4,-4(fp)
1000a350:	2085883a 	add	r2,r4,r2
1000a354:	10800003 	ldbu	r2,0(r2)
1000a358:	18800005 	stb	r2,0(r3)
        if(has_alpha) buffer[3] = in[i * 2 + 1];
      }
    }
    else
    {
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
1000a35c:	e0bff517 	ldw	r2,-44(fp)
1000a360:	10800044 	addi	r2,r2,1
1000a364:	e0bff515 	stw	r2,-44(fp)
1000a368:	e0fffc17 	ldw	r3,-16(fp)
1000a36c:	e0bff717 	ldw	r2,-36(fp)
1000a370:	1885883a 	add	r2,r3,r2
1000a374:	e0bffc15 	stw	r2,-16(fp)
1000a378:	e0fff517 	ldw	r3,-44(fp)
1000a37c:	e0bffd17 	ldw	r2,-12(fp)
1000a380:	18bfda1e 	bne	r3,r2,1000a2ec <__alt_data_end+0xf800a2ec>
1000a384:	00006d06 	br	1000a53c <getPixelColorsRGBA8+0xab4>
        buffer[0] = buffer[1] = buffer[2] = in[i * 4 + 0];
        if(has_alpha) buffer[3] = in[i * 4 + 2];
      }
    }
  }
  else if(mode->colortype == LCT_RGBA)
1000a388:	e0800417 	ldw	r2,16(fp)
1000a38c:	10800017 	ldw	r2,0(r2)
1000a390:	10800198 	cmpnei	r2,r2,6
1000a394:	1000691e 	bne	r2,zero,1000a53c <getPixelColorsRGBA8+0xab4>
  {
    if(mode->bitdepth == 8)
1000a398:	e0800417 	ldw	r2,16(fp)
1000a39c:	10800117 	ldw	r2,4(r2)
1000a3a0:	10800218 	cmpnei	r2,r2,8
1000a3a4:	1000351e 	bne	r2,zero,1000a47c <getPixelColorsRGBA8+0x9f4>
    {
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
1000a3a8:	e03ff515 	stw	zero,-44(fp)
1000a3ac:	00002f06 	br	1000a46c <getPixelColorsRGBA8+0x9e4>
      {
        buffer[0] = in[i * 4 + 0];
1000a3b0:	e0bff517 	ldw	r2,-44(fp)
1000a3b4:	1085883a 	add	r2,r2,r2
1000a3b8:	1085883a 	add	r2,r2,r2
1000a3bc:	e0ffff17 	ldw	r3,-4(fp)
1000a3c0:	1885883a 	add	r2,r3,r2
1000a3c4:	10c00003 	ldbu	r3,0(r2)
1000a3c8:	e0bffc17 	ldw	r2,-16(fp)
1000a3cc:	10c00005 	stb	r3,0(r2)
        buffer[1] = in[i * 4 + 1];
1000a3d0:	e0bffc17 	ldw	r2,-16(fp)
1000a3d4:	10c00044 	addi	r3,r2,1
1000a3d8:	e0bff517 	ldw	r2,-44(fp)
1000a3dc:	1085883a 	add	r2,r2,r2
1000a3e0:	1085883a 	add	r2,r2,r2
1000a3e4:	10800044 	addi	r2,r2,1
1000a3e8:	e13fff17 	ldw	r4,-4(fp)
1000a3ec:	2085883a 	add	r2,r4,r2
1000a3f0:	10800003 	ldbu	r2,0(r2)
1000a3f4:	18800005 	stb	r2,0(r3)
        buffer[2] = in[i * 4 + 2];
1000a3f8:	e0bffc17 	ldw	r2,-16(fp)
1000a3fc:	10c00084 	addi	r3,r2,2
1000a400:	e0bff517 	ldw	r2,-44(fp)
1000a404:	1085883a 	add	r2,r2,r2
1000a408:	1085883a 	add	r2,r2,r2
1000a40c:	10800084 	addi	r2,r2,2
1000a410:	e13fff17 	ldw	r4,-4(fp)
1000a414:	2085883a 	add	r2,r4,r2
1000a418:	10800003 	ldbu	r2,0(r2)
1000a41c:	18800005 	stb	r2,0(r3)
        if(has_alpha) buffer[3] = in[i * 4 + 3];
1000a420:	e0bffe17 	ldw	r2,-8(fp)
1000a424:	10000a26 	beq	r2,zero,1000a450 <getPixelColorsRGBA8+0x9c8>
1000a428:	e0bffc17 	ldw	r2,-16(fp)
1000a42c:	10c000c4 	addi	r3,r2,3
1000a430:	e0bff517 	ldw	r2,-44(fp)
1000a434:	1085883a 	add	r2,r2,r2
1000a438:	1085883a 	add	r2,r2,r2
1000a43c:	108000c4 	addi	r2,r2,3
1000a440:	e13fff17 	ldw	r4,-4(fp)
1000a444:	2085883a 	add	r2,r4,r2
1000a448:	10800003 	ldbu	r2,0(r2)
1000a44c:	18800005 	stb	r2,0(r3)
  }
  else if(mode->colortype == LCT_RGBA)
  {
    if(mode->bitdepth == 8)
    {
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
1000a450:	e0bff517 	ldw	r2,-44(fp)
1000a454:	10800044 	addi	r2,r2,1
1000a458:	e0bff515 	stw	r2,-44(fp)
1000a45c:	e0fffc17 	ldw	r3,-16(fp)
1000a460:	e0bff717 	ldw	r2,-36(fp)
1000a464:	1885883a 	add	r2,r3,r2
1000a468:	e0bffc15 	stw	r2,-16(fp)
1000a46c:	e0fff517 	ldw	r3,-44(fp)
1000a470:	e0bffd17 	ldw	r2,-12(fp)
1000a474:	18bfce1e 	bne	r3,r2,1000a3b0 <__alt_data_end+0xf800a3b0>
1000a478:	00003006 	br	1000a53c <getPixelColorsRGBA8+0xab4>
        if(has_alpha) buffer[3] = in[i * 4 + 3];
      }
    }
    else
    {
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
1000a47c:	e03ff515 	stw	zero,-44(fp)
1000a480:	00002b06 	br	1000a530 <getPixelColorsRGBA8+0xaa8>
      {
        buffer[0] = in[i * 8 + 0];
1000a484:	e0bff517 	ldw	r2,-44(fp)
1000a488:	100490fa 	slli	r2,r2,3
1000a48c:	e0ffff17 	ldw	r3,-4(fp)
1000a490:	1885883a 	add	r2,r3,r2
1000a494:	10c00003 	ldbu	r3,0(r2)
1000a498:	e0bffc17 	ldw	r2,-16(fp)
1000a49c:	10c00005 	stb	r3,0(r2)
        buffer[1] = in[i * 8 + 2];
1000a4a0:	e0bffc17 	ldw	r2,-16(fp)
1000a4a4:	10800044 	addi	r2,r2,1
1000a4a8:	e0fff517 	ldw	r3,-44(fp)
1000a4ac:	180690fa 	slli	r3,r3,3
1000a4b0:	18c00084 	addi	r3,r3,2
1000a4b4:	e13fff17 	ldw	r4,-4(fp)
1000a4b8:	20c7883a 	add	r3,r4,r3
1000a4bc:	18c00003 	ldbu	r3,0(r3)
1000a4c0:	10c00005 	stb	r3,0(r2)
        buffer[2] = in[i * 8 + 4];
1000a4c4:	e0bffc17 	ldw	r2,-16(fp)
1000a4c8:	10800084 	addi	r2,r2,2
1000a4cc:	e0fff517 	ldw	r3,-44(fp)
1000a4d0:	180690fa 	slli	r3,r3,3
1000a4d4:	18c00104 	addi	r3,r3,4
1000a4d8:	e13fff17 	ldw	r4,-4(fp)
1000a4dc:	20c7883a 	add	r3,r4,r3
1000a4e0:	18c00003 	ldbu	r3,0(r3)
1000a4e4:	10c00005 	stb	r3,0(r2)
        if(has_alpha) buffer[3] = in[i * 8 + 6];
1000a4e8:	e0bffe17 	ldw	r2,-8(fp)
1000a4ec:	10000926 	beq	r2,zero,1000a514 <getPixelColorsRGBA8+0xa8c>
1000a4f0:	e0bffc17 	ldw	r2,-16(fp)
1000a4f4:	108000c4 	addi	r2,r2,3
1000a4f8:	e0fff517 	ldw	r3,-44(fp)
1000a4fc:	180690fa 	slli	r3,r3,3
1000a500:	18c00184 	addi	r3,r3,6
1000a504:	e13fff17 	ldw	r4,-4(fp)
1000a508:	20c7883a 	add	r3,r4,r3
1000a50c:	18c00003 	ldbu	r3,0(r3)
1000a510:	10c00005 	stb	r3,0(r2)
        if(has_alpha) buffer[3] = in[i * 4 + 3];
      }
    }
    else
    {
      for(i = 0; i != numpixels; ++i, buffer += num_channels)
1000a514:	e0bff517 	ldw	r2,-44(fp)
1000a518:	10800044 	addi	r2,r2,1
1000a51c:	e0bff515 	stw	r2,-44(fp)
1000a520:	e0fffc17 	ldw	r3,-16(fp)
1000a524:	e0bff717 	ldw	r2,-36(fp)
1000a528:	1885883a 	add	r2,r3,r2
1000a52c:	e0bffc15 	stw	r2,-16(fp)
1000a530:	e0fff517 	ldw	r3,-44(fp)
1000a534:	e0bffd17 	ldw	r2,-12(fp)
1000a538:	18bfd21e 	bne	r3,r2,1000a484 <__alt_data_end+0xf800a484>
        buffer[2] = in[i * 8 + 4];
        if(has_alpha) buffer[3] = in[i * 8 + 6];
      }
    }
  }
}
1000a53c:	e037883a 	mov	sp,fp
1000a540:	dfc00317 	ldw	ra,12(sp)
1000a544:	df000217 	ldw	fp,8(sp)
1000a548:	dc400117 	ldw	r17,4(sp)
1000a54c:	dc000017 	ldw	r16,0(sp)
1000a550:	dec00404 	addi	sp,sp,16
1000a554:	f800283a 	ret

1000a558 <getPixelColorRGBA16>:

/*Get RGBA16 color of pixel with index i (y * width + x) from the raw image with
given color type, but the given color type must be 16-bit itself.*/
static void getPixelColorRGBA16(unsigned short* r, unsigned short* g, unsigned short* b, unsigned short* a,
                                const unsigned char* in, size_t i, const LodePNGColorMode* mode)
{
1000a558:	defff904 	addi	sp,sp,-28
1000a55c:	dfc00615 	stw	ra,24(sp)
1000a560:	df000515 	stw	fp,20(sp)
1000a564:	dc000415 	stw	r16,16(sp)
1000a568:	df000404 	addi	fp,sp,16
1000a56c:	e13ffc15 	stw	r4,-16(fp)
1000a570:	e17ffd15 	stw	r5,-12(fp)
1000a574:	e1bffe15 	stw	r6,-8(fp)
1000a578:	e1ffff15 	stw	r7,-4(fp)
  if(mode->colortype == LCT_GREY)
1000a57c:	e0800517 	ldw	r2,20(fp)
1000a580:	10800017 	ldw	r2,0(r2)
1000a584:	1000371e 	bne	r2,zero,1000a664 <getPixelColorRGBA16+0x10c>
  {
    *r = *g = *b = 256 * in[i * 2 + 0] + in[i * 2 + 1];
1000a588:	e0800417 	ldw	r2,16(fp)
1000a58c:	1085883a 	add	r2,r2,r2
1000a590:	e0c00317 	ldw	r3,12(fp)
1000a594:	1885883a 	add	r2,r3,r2
1000a598:	10800003 	ldbu	r2,0(r2)
1000a59c:	10803fcc 	andi	r2,r2,255
1000a5a0:	1004923a 	slli	r2,r2,8
1000a5a4:	1007883a 	mov	r3,r2
1000a5a8:	e0800417 	ldw	r2,16(fp)
1000a5ac:	1085883a 	add	r2,r2,r2
1000a5b0:	10800044 	addi	r2,r2,1
1000a5b4:	e1000317 	ldw	r4,12(fp)
1000a5b8:	2085883a 	add	r2,r4,r2
1000a5bc:	10800003 	ldbu	r2,0(r2)
1000a5c0:	10803fcc 	andi	r2,r2,255
1000a5c4:	1885883a 	add	r2,r3,r2
1000a5c8:	1007883a 	mov	r3,r2
1000a5cc:	e0bffe17 	ldw	r2,-8(fp)
1000a5d0:	10c0000d 	sth	r3,0(r2)
1000a5d4:	e0bffe17 	ldw	r2,-8(fp)
1000a5d8:	10c0000b 	ldhu	r3,0(r2)
1000a5dc:	e0bffd17 	ldw	r2,-12(fp)
1000a5e0:	10c0000d 	sth	r3,0(r2)
1000a5e4:	e0bffd17 	ldw	r2,-12(fp)
1000a5e8:	10c0000b 	ldhu	r3,0(r2)
1000a5ec:	e0bffc17 	ldw	r2,-16(fp)
1000a5f0:	10c0000d 	sth	r3,0(r2)
    if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;
1000a5f4:	e0800517 	ldw	r2,20(fp)
1000a5f8:	10800417 	ldw	r2,16(r2)
1000a5fc:	10001526 	beq	r2,zero,1000a654 <getPixelColorRGBA16+0xfc>
1000a600:	e0800417 	ldw	r2,16(fp)
1000a604:	1085883a 	add	r2,r2,r2
1000a608:	e0c00317 	ldw	r3,12(fp)
1000a60c:	1885883a 	add	r2,r3,r2
1000a610:	10800003 	ldbu	r2,0(r2)
1000a614:	10803fcc 	andi	r2,r2,255
1000a618:	1006923a 	slli	r3,r2,8
1000a61c:	e0800417 	ldw	r2,16(fp)
1000a620:	1085883a 	add	r2,r2,r2
1000a624:	10800044 	addi	r2,r2,1
1000a628:	e1000317 	ldw	r4,12(fp)
1000a62c:	2085883a 	add	r2,r4,r2
1000a630:	10800003 	ldbu	r2,0(r2)
1000a634:	10803fcc 	andi	r2,r2,255
1000a638:	1887883a 	add	r3,r3,r2
1000a63c:	e0800517 	ldw	r2,20(fp)
1000a640:	10800517 	ldw	r2,20(r2)
1000a644:	1880031e 	bne	r3,r2,1000a654 <getPixelColorRGBA16+0xfc>
1000a648:	e0bfff17 	ldw	r2,-4(fp)
1000a64c:	1000000d 	sth	zero,0(r2)
1000a650:	00011c06 	br	1000aac4 <getPixelColorRGBA16+0x56c>
    else *a = 65535;
1000a654:	e0bfff17 	ldw	r2,-4(fp)
1000a658:	00ffffc4 	movi	r3,-1
1000a65c:	10c0000d 	sth	r3,0(r2)
1000a660:	00011806 	br	1000aac4 <getPixelColorRGBA16+0x56c>
  }
  else if(mode->colortype == LCT_RGB)
1000a664:	e0800517 	ldw	r2,20(fp)
1000a668:	10800017 	ldw	r2,0(r2)
1000a66c:	10800098 	cmpnei	r2,r2,2
1000a670:	1000891e 	bne	r2,zero,1000a898 <getPixelColorRGBA16+0x340>
  {
    *r = 256 * in[i * 6 + 0] + in[i * 6 + 1];
1000a674:	e1000417 	ldw	r4,16(fp)
1000a678:	01400184 	movi	r5,6
1000a67c:	00146fc0 	call	100146fc <__mulsi3>
1000a680:	e0c00317 	ldw	r3,12(fp)
1000a684:	1885883a 	add	r2,r3,r2
1000a688:	10800003 	ldbu	r2,0(r2)
1000a68c:	10803fcc 	andi	r2,r2,255
1000a690:	1004923a 	slli	r2,r2,8
1000a694:	1021883a 	mov	r16,r2
1000a698:	e1000417 	ldw	r4,16(fp)
1000a69c:	01400184 	movi	r5,6
1000a6a0:	00146fc0 	call	100146fc <__mulsi3>
1000a6a4:	10800044 	addi	r2,r2,1
1000a6a8:	e0c00317 	ldw	r3,12(fp)
1000a6ac:	1885883a 	add	r2,r3,r2
1000a6b0:	10800003 	ldbu	r2,0(r2)
1000a6b4:	10803fcc 	andi	r2,r2,255
1000a6b8:	8085883a 	add	r2,r16,r2
1000a6bc:	1007883a 	mov	r3,r2
1000a6c0:	e0bffc17 	ldw	r2,-16(fp)
1000a6c4:	10c0000d 	sth	r3,0(r2)
    *g = 256 * in[i * 6 + 2] + in[i * 6 + 3];
1000a6c8:	e1000417 	ldw	r4,16(fp)
1000a6cc:	01400184 	movi	r5,6
1000a6d0:	00146fc0 	call	100146fc <__mulsi3>
1000a6d4:	10800084 	addi	r2,r2,2
1000a6d8:	e0c00317 	ldw	r3,12(fp)
1000a6dc:	1885883a 	add	r2,r3,r2
1000a6e0:	10800003 	ldbu	r2,0(r2)
1000a6e4:	10803fcc 	andi	r2,r2,255
1000a6e8:	1004923a 	slli	r2,r2,8
1000a6ec:	1021883a 	mov	r16,r2
1000a6f0:	e1000417 	ldw	r4,16(fp)
1000a6f4:	01400184 	movi	r5,6
1000a6f8:	00146fc0 	call	100146fc <__mulsi3>
1000a6fc:	108000c4 	addi	r2,r2,3
1000a700:	e0c00317 	ldw	r3,12(fp)
1000a704:	1885883a 	add	r2,r3,r2
1000a708:	10800003 	ldbu	r2,0(r2)
1000a70c:	10803fcc 	andi	r2,r2,255
1000a710:	8085883a 	add	r2,r16,r2
1000a714:	1007883a 	mov	r3,r2
1000a718:	e0bffd17 	ldw	r2,-12(fp)
1000a71c:	10c0000d 	sth	r3,0(r2)
    *b = 256 * in[i * 6 + 4] + in[i * 6 + 5];
1000a720:	e1000417 	ldw	r4,16(fp)
1000a724:	01400184 	movi	r5,6
1000a728:	00146fc0 	call	100146fc <__mulsi3>
1000a72c:	10800104 	addi	r2,r2,4
1000a730:	e0c00317 	ldw	r3,12(fp)
1000a734:	1885883a 	add	r2,r3,r2
1000a738:	10800003 	ldbu	r2,0(r2)
1000a73c:	10803fcc 	andi	r2,r2,255
1000a740:	1004923a 	slli	r2,r2,8
1000a744:	1021883a 	mov	r16,r2
1000a748:	e1000417 	ldw	r4,16(fp)
1000a74c:	01400184 	movi	r5,6
1000a750:	00146fc0 	call	100146fc <__mulsi3>
1000a754:	10800144 	addi	r2,r2,5
1000a758:	e0c00317 	ldw	r3,12(fp)
1000a75c:	1885883a 	add	r2,r3,r2
1000a760:	10800003 	ldbu	r2,0(r2)
1000a764:	10803fcc 	andi	r2,r2,255
1000a768:	8085883a 	add	r2,r16,r2
1000a76c:	1007883a 	mov	r3,r2
1000a770:	e0bffe17 	ldw	r2,-8(fp)
1000a774:	10c0000d 	sth	r3,0(r2)
    if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
1000a778:	e0800517 	ldw	r2,20(fp)
1000a77c:	10800417 	ldw	r2,16(r2)
1000a780:	10004126 	beq	r2,zero,1000a888 <getPixelColorRGBA16+0x330>
1000a784:	e1000417 	ldw	r4,16(fp)
1000a788:	01400184 	movi	r5,6
1000a78c:	00146fc0 	call	100146fc <__mulsi3>
1000a790:	e0c00317 	ldw	r3,12(fp)
1000a794:	1885883a 	add	r2,r3,r2
1000a798:	10800003 	ldbu	r2,0(r2)
1000a79c:	10803fcc 	andi	r2,r2,255
1000a7a0:	1020923a 	slli	r16,r2,8
1000a7a4:	e1000417 	ldw	r4,16(fp)
1000a7a8:	01400184 	movi	r5,6
1000a7ac:	00146fc0 	call	100146fc <__mulsi3>
1000a7b0:	10800044 	addi	r2,r2,1
1000a7b4:	e0c00317 	ldw	r3,12(fp)
1000a7b8:	1885883a 	add	r2,r3,r2
1000a7bc:	10800003 	ldbu	r2,0(r2)
1000a7c0:	10803fcc 	andi	r2,r2,255
1000a7c4:	8087883a 	add	r3,r16,r2
1000a7c8:	e0800517 	ldw	r2,20(fp)
1000a7cc:	10800517 	ldw	r2,20(r2)
1000a7d0:	18802d1e 	bne	r3,r2,1000a888 <getPixelColorRGBA16+0x330>
       && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
1000a7d4:	e1000417 	ldw	r4,16(fp)
1000a7d8:	01400184 	movi	r5,6
1000a7dc:	00146fc0 	call	100146fc <__mulsi3>
1000a7e0:	10800084 	addi	r2,r2,2
1000a7e4:	e0c00317 	ldw	r3,12(fp)
1000a7e8:	1885883a 	add	r2,r3,r2
1000a7ec:	10800003 	ldbu	r2,0(r2)
1000a7f0:	10803fcc 	andi	r2,r2,255
1000a7f4:	1020923a 	slli	r16,r2,8
1000a7f8:	e1000417 	ldw	r4,16(fp)
1000a7fc:	01400184 	movi	r5,6
1000a800:	00146fc0 	call	100146fc <__mulsi3>
1000a804:	108000c4 	addi	r2,r2,3
1000a808:	e0c00317 	ldw	r3,12(fp)
1000a80c:	1885883a 	add	r2,r3,r2
1000a810:	10800003 	ldbu	r2,0(r2)
1000a814:	10803fcc 	andi	r2,r2,255
1000a818:	8087883a 	add	r3,r16,r2
1000a81c:	e0800517 	ldw	r2,20(fp)
1000a820:	10800617 	ldw	r2,24(r2)
1000a824:	1880181e 	bne	r3,r2,1000a888 <getPixelColorRGBA16+0x330>
       && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;
1000a828:	e1000417 	ldw	r4,16(fp)
1000a82c:	01400184 	movi	r5,6
1000a830:	00146fc0 	call	100146fc <__mulsi3>
1000a834:	10800104 	addi	r2,r2,4
1000a838:	e0c00317 	ldw	r3,12(fp)
1000a83c:	1885883a 	add	r2,r3,r2
1000a840:	10800003 	ldbu	r2,0(r2)
1000a844:	10803fcc 	andi	r2,r2,255
1000a848:	1020923a 	slli	r16,r2,8
1000a84c:	e1000417 	ldw	r4,16(fp)
1000a850:	01400184 	movi	r5,6
1000a854:	00146fc0 	call	100146fc <__mulsi3>
1000a858:	10800144 	addi	r2,r2,5
1000a85c:	e0c00317 	ldw	r3,12(fp)
1000a860:	1885883a 	add	r2,r3,r2
1000a864:	10800003 	ldbu	r2,0(r2)
1000a868:	10803fcc 	andi	r2,r2,255
1000a86c:	8087883a 	add	r3,r16,r2
1000a870:	e0800517 	ldw	r2,20(fp)
1000a874:	10800717 	ldw	r2,28(r2)
1000a878:	1880031e 	bne	r3,r2,1000a888 <getPixelColorRGBA16+0x330>
1000a87c:	e0bfff17 	ldw	r2,-4(fp)
1000a880:	1000000d 	sth	zero,0(r2)
1000a884:	00008f06 	br	1000aac4 <getPixelColorRGBA16+0x56c>
    else *a = 65535;
1000a888:	e0bfff17 	ldw	r2,-4(fp)
1000a88c:	00ffffc4 	movi	r3,-1
1000a890:	10c0000d 	sth	r3,0(r2)
1000a894:	00008b06 	br	1000aac4 <getPixelColorRGBA16+0x56c>
  }
  else if(mode->colortype == LCT_GREY_ALPHA)
1000a898:	e0800517 	ldw	r2,20(fp)
1000a89c:	10800017 	ldw	r2,0(r2)
1000a8a0:	10800118 	cmpnei	r2,r2,4
1000a8a4:	1000341e 	bne	r2,zero,1000a978 <getPixelColorRGBA16+0x420>
  {
    *r = *g = *b = 256 * in[i * 4 + 0] + in[i * 4 + 1];
1000a8a8:	e0800417 	ldw	r2,16(fp)
1000a8ac:	1085883a 	add	r2,r2,r2
1000a8b0:	1085883a 	add	r2,r2,r2
1000a8b4:	e0c00317 	ldw	r3,12(fp)
1000a8b8:	1885883a 	add	r2,r3,r2
1000a8bc:	10800003 	ldbu	r2,0(r2)
1000a8c0:	10803fcc 	andi	r2,r2,255
1000a8c4:	1004923a 	slli	r2,r2,8
1000a8c8:	1007883a 	mov	r3,r2
1000a8cc:	e0800417 	ldw	r2,16(fp)
1000a8d0:	1085883a 	add	r2,r2,r2
1000a8d4:	1085883a 	add	r2,r2,r2
1000a8d8:	10800044 	addi	r2,r2,1
1000a8dc:	e1000317 	ldw	r4,12(fp)
1000a8e0:	2085883a 	add	r2,r4,r2
1000a8e4:	10800003 	ldbu	r2,0(r2)
1000a8e8:	10803fcc 	andi	r2,r2,255
1000a8ec:	1885883a 	add	r2,r3,r2
1000a8f0:	1007883a 	mov	r3,r2
1000a8f4:	e0bffe17 	ldw	r2,-8(fp)
1000a8f8:	10c0000d 	sth	r3,0(r2)
1000a8fc:	e0bffe17 	ldw	r2,-8(fp)
1000a900:	10c0000b 	ldhu	r3,0(r2)
1000a904:	e0bffd17 	ldw	r2,-12(fp)
1000a908:	10c0000d 	sth	r3,0(r2)
1000a90c:	e0bffd17 	ldw	r2,-12(fp)
1000a910:	10c0000b 	ldhu	r3,0(r2)
1000a914:	e0bffc17 	ldw	r2,-16(fp)
1000a918:	10c0000d 	sth	r3,0(r2)
    *a = 256 * in[i * 4 + 2] + in[i * 4 + 3];
1000a91c:	e0800417 	ldw	r2,16(fp)
1000a920:	1085883a 	add	r2,r2,r2
1000a924:	1085883a 	add	r2,r2,r2
1000a928:	10800084 	addi	r2,r2,2
1000a92c:	e0c00317 	ldw	r3,12(fp)
1000a930:	1885883a 	add	r2,r3,r2
1000a934:	10800003 	ldbu	r2,0(r2)
1000a938:	10803fcc 	andi	r2,r2,255
1000a93c:	1004923a 	slli	r2,r2,8
1000a940:	1007883a 	mov	r3,r2
1000a944:	e0800417 	ldw	r2,16(fp)
1000a948:	1085883a 	add	r2,r2,r2
1000a94c:	1085883a 	add	r2,r2,r2
1000a950:	108000c4 	addi	r2,r2,3
1000a954:	e1000317 	ldw	r4,12(fp)
1000a958:	2085883a 	add	r2,r4,r2
1000a95c:	10800003 	ldbu	r2,0(r2)
1000a960:	10803fcc 	andi	r2,r2,255
1000a964:	1885883a 	add	r2,r3,r2
1000a968:	1007883a 	mov	r3,r2
1000a96c:	e0bfff17 	ldw	r2,-4(fp)
1000a970:	10c0000d 	sth	r3,0(r2)
1000a974:	00005306 	br	1000aac4 <getPixelColorRGBA16+0x56c>
  }
  else if(mode->colortype == LCT_RGBA)
1000a978:	e0800517 	ldw	r2,20(fp)
1000a97c:	10800017 	ldw	r2,0(r2)
1000a980:	10800198 	cmpnei	r2,r2,6
1000a984:	10004f1e 	bne	r2,zero,1000aac4 <getPixelColorRGBA16+0x56c>
  {
    *r = 256 * in[i * 8 + 0] + in[i * 8 + 1];
1000a988:	e0800417 	ldw	r2,16(fp)
1000a98c:	100490fa 	slli	r2,r2,3
1000a990:	e0c00317 	ldw	r3,12(fp)
1000a994:	1885883a 	add	r2,r3,r2
1000a998:	10800003 	ldbu	r2,0(r2)
1000a99c:	10803fcc 	andi	r2,r2,255
1000a9a0:	1004923a 	slli	r2,r2,8
1000a9a4:	1007883a 	mov	r3,r2
1000a9a8:	e0800417 	ldw	r2,16(fp)
1000a9ac:	100490fa 	slli	r2,r2,3
1000a9b0:	10800044 	addi	r2,r2,1
1000a9b4:	e1000317 	ldw	r4,12(fp)
1000a9b8:	2085883a 	add	r2,r4,r2
1000a9bc:	10800003 	ldbu	r2,0(r2)
1000a9c0:	10803fcc 	andi	r2,r2,255
1000a9c4:	1885883a 	add	r2,r3,r2
1000a9c8:	1007883a 	mov	r3,r2
1000a9cc:	e0bffc17 	ldw	r2,-16(fp)
1000a9d0:	10c0000d 	sth	r3,0(r2)
    *g = 256 * in[i * 8 + 2] + in[i * 8 + 3];
1000a9d4:	e0800417 	ldw	r2,16(fp)
1000a9d8:	100490fa 	slli	r2,r2,3
1000a9dc:	10800084 	addi	r2,r2,2
1000a9e0:	e0c00317 	ldw	r3,12(fp)
1000a9e4:	1885883a 	add	r2,r3,r2
1000a9e8:	10800003 	ldbu	r2,0(r2)
1000a9ec:	10803fcc 	andi	r2,r2,255
1000a9f0:	1004923a 	slli	r2,r2,8
1000a9f4:	1007883a 	mov	r3,r2
1000a9f8:	e0800417 	ldw	r2,16(fp)
1000a9fc:	100490fa 	slli	r2,r2,3
1000aa00:	108000c4 	addi	r2,r2,3
1000aa04:	e1000317 	ldw	r4,12(fp)
1000aa08:	2085883a 	add	r2,r4,r2
1000aa0c:	10800003 	ldbu	r2,0(r2)
1000aa10:	10803fcc 	andi	r2,r2,255
1000aa14:	1885883a 	add	r2,r3,r2
1000aa18:	1007883a 	mov	r3,r2
1000aa1c:	e0bffd17 	ldw	r2,-12(fp)
1000aa20:	10c0000d 	sth	r3,0(r2)
    *b = 256 * in[i * 8 + 4] + in[i * 8 + 5];
1000aa24:	e0800417 	ldw	r2,16(fp)
1000aa28:	100490fa 	slli	r2,r2,3
1000aa2c:	10800104 	addi	r2,r2,4
1000aa30:	e0c00317 	ldw	r3,12(fp)
1000aa34:	1885883a 	add	r2,r3,r2
1000aa38:	10800003 	ldbu	r2,0(r2)
1000aa3c:	10803fcc 	andi	r2,r2,255
1000aa40:	1004923a 	slli	r2,r2,8
1000aa44:	1007883a 	mov	r3,r2
1000aa48:	e0800417 	ldw	r2,16(fp)
1000aa4c:	100490fa 	slli	r2,r2,3
1000aa50:	10800144 	addi	r2,r2,5
1000aa54:	e1000317 	ldw	r4,12(fp)
1000aa58:	2085883a 	add	r2,r4,r2
1000aa5c:	10800003 	ldbu	r2,0(r2)
1000aa60:	10803fcc 	andi	r2,r2,255
1000aa64:	1885883a 	add	r2,r3,r2
1000aa68:	1007883a 	mov	r3,r2
1000aa6c:	e0bffe17 	ldw	r2,-8(fp)
1000aa70:	10c0000d 	sth	r3,0(r2)
    *a = 256 * in[i * 8 + 6] + in[i * 8 + 7];
1000aa74:	e0800417 	ldw	r2,16(fp)
1000aa78:	100490fa 	slli	r2,r2,3
1000aa7c:	10800184 	addi	r2,r2,6
1000aa80:	e0c00317 	ldw	r3,12(fp)
1000aa84:	1885883a 	add	r2,r3,r2
1000aa88:	10800003 	ldbu	r2,0(r2)
1000aa8c:	10803fcc 	andi	r2,r2,255
1000aa90:	1004923a 	slli	r2,r2,8
1000aa94:	1007883a 	mov	r3,r2
1000aa98:	e0800417 	ldw	r2,16(fp)
1000aa9c:	100490fa 	slli	r2,r2,3
1000aaa0:	108001c4 	addi	r2,r2,7
1000aaa4:	e1000317 	ldw	r4,12(fp)
1000aaa8:	2085883a 	add	r2,r4,r2
1000aaac:	10800003 	ldbu	r2,0(r2)
1000aab0:	10803fcc 	andi	r2,r2,255
1000aab4:	1885883a 	add	r2,r3,r2
1000aab8:	1007883a 	mov	r3,r2
1000aabc:	e0bfff17 	ldw	r2,-4(fp)
1000aac0:	10c0000d 	sth	r3,0(r2)
  }
}
1000aac4:	e037883a 	mov	sp,fp
1000aac8:	dfc00217 	ldw	ra,8(sp)
1000aacc:	df000117 	ldw	fp,4(sp)
1000aad0:	dc000017 	ldw	r16,0(sp)
1000aad4:	dec00304 	addi	sp,sp,12
1000aad8:	f800283a 	ret

1000aadc <lodepng_convert>:

unsigned lodepng_convert(unsigned char* out, const unsigned char* in,
                         const LodePNGColorMode* mode_out, const LodePNGColorMode* mode_in,
                         unsigned w, unsigned h)
{
1000aadc:	deffda04 	addi	sp,sp,-152
1000aae0:	dfc02515 	stw	ra,148(sp)
1000aae4:	df002415 	stw	fp,144(sp)
1000aae8:	df002404 	addi	fp,sp,144
1000aaec:	e13ffc15 	stw	r4,-16(fp)
1000aaf0:	e17ffd15 	stw	r5,-12(fp)
1000aaf4:	e1bffe15 	stw	r6,-8(fp)
1000aaf8:	e1ffff15 	stw	r7,-4(fp)
  size_t i;
  ColorTree tree;
  size_t numpixels = w * h;
1000aafc:	e1000217 	ldw	r4,8(fp)
1000ab00:	e1400317 	ldw	r5,12(fp)
1000ab04:	00146fc0 	call	100146fc <__mulsi3>
1000ab08:	e0bfe415 	stw	r2,-112(fp)

  if(lodepng_color_mode_equal(mode_out, mode_in))
1000ab0c:	e13ffe17 	ldw	r4,-8(fp)
1000ab10:	e17fff17 	ldw	r5,-4(fp)
1000ab14:	00070840 	call	10007084 <lodepng_color_mode_equal>
1000ab18:	10001726 	beq	r2,zero,1000ab78 <lodepng_convert+0x9c>
  {
    size_t numbytes = lodepng_get_raw_size(w, h, mode_in);
1000ab1c:	e1000217 	ldw	r4,8(fp)
1000ab20:	e1400317 	ldw	r5,12(fp)
1000ab24:	e1bfff17 	ldw	r6,-4(fp)
1000ab28:	00075740 	call	10007574 <lodepng_get_raw_size>
1000ab2c:	e0bfe515 	stw	r2,-108(fp)
    for(i = 0; i != numbytes; ++i) out[i] = in[i];
1000ab30:	e03fe015 	stw	zero,-128(fp)
1000ab34:	00000b06 	br	1000ab64 <lodepng_convert+0x88>
1000ab38:	e0fffc17 	ldw	r3,-16(fp)
1000ab3c:	e0bfe017 	ldw	r2,-128(fp)
1000ab40:	1885883a 	add	r2,r3,r2
1000ab44:	e13ffd17 	ldw	r4,-12(fp)
1000ab48:	e0ffe017 	ldw	r3,-128(fp)
1000ab4c:	20c7883a 	add	r3,r4,r3
1000ab50:	18c00003 	ldbu	r3,0(r3)
1000ab54:	10c00005 	stb	r3,0(r2)
1000ab58:	e0bfe017 	ldw	r2,-128(fp)
1000ab5c:	10800044 	addi	r2,r2,1
1000ab60:	e0bfe015 	stw	r2,-128(fp)
1000ab64:	e0ffe017 	ldw	r3,-128(fp)
1000ab68:	e0bfe517 	ldw	r2,-108(fp)
1000ab6c:	18bff21e 	bne	r3,r2,1000ab38 <__alt_data_end+0xf800ab38>
    return 0;
1000ab70:	0005883a 	mov	r2,zero
1000ab74:	0000cd06 	br	1000aeac <lodepng_convert+0x3d0>
  }

  if(mode_out->colortype == LCT_PALETTE)
1000ab78:	e0bffe17 	ldw	r2,-8(fp)
1000ab7c:	10800017 	ldw	r2,0(r2)
1000ab80:	108000d8 	cmpnei	r2,r2,3
1000ab84:	10003f1e 	bne	r2,zero,1000ac84 <lodepng_convert+0x1a8>
  {
    size_t palettesize = mode_out->palettesize;
1000ab88:	e0bffe17 	ldw	r2,-8(fp)
1000ab8c:	10800317 	ldw	r2,12(r2)
1000ab90:	e0bfe115 	stw	r2,-124(fp)
    const unsigned char* palette = mode_out->palette;
1000ab94:	e0bffe17 	ldw	r2,-8(fp)
1000ab98:	10800217 	ldw	r2,8(r2)
1000ab9c:	e0bfe215 	stw	r2,-120(fp)
    size_t palsize = 1u << mode_out->bitdepth;
1000aba0:	e0bffe17 	ldw	r2,-8(fp)
1000aba4:	10800117 	ldw	r2,4(r2)
1000aba8:	00c00044 	movi	r3,1
1000abac:	1884983a 	sll	r2,r3,r2
1000abb0:	e0bfe315 	stw	r2,-116(fp)
    /*if the user specified output palette but did not give the values, assume
    they want the values of the input color type (assuming that one is palette).
    Note that we never create a new palette ourselves.*/
    if(palettesize == 0) {
1000abb4:	e0bfe117 	ldw	r2,-124(fp)
1000abb8:	1000061e 	bne	r2,zero,1000abd4 <lodepng_convert+0xf8>
      palettesize = mode_in->palettesize;
1000abbc:	e0bfff17 	ldw	r2,-4(fp)
1000abc0:	10800317 	ldw	r2,12(r2)
1000abc4:	e0bfe115 	stw	r2,-124(fp)
      palette = mode_in->palette;
1000abc8:	e0bfff17 	ldw	r2,-4(fp)
1000abcc:	10800217 	ldw	r2,8(r2)
1000abd0:	e0bfe215 	stw	r2,-120(fp)
    }
    if(palettesize < palsize) palsize = palettesize;
1000abd4:	e0ffe117 	ldw	r3,-124(fp)
1000abd8:	e0bfe317 	ldw	r2,-116(fp)
1000abdc:	1880022e 	bgeu	r3,r2,1000abe8 <lodepng_convert+0x10c>
1000abe0:	e0bfe117 	ldw	r2,-124(fp)
1000abe4:	e0bfe315 	stw	r2,-116(fp)
    color_tree_init(&tree);
1000abe8:	e0bfe804 	addi	r2,fp,-96
1000abec:	1009883a 	mov	r4,r2
1000abf0:	00085940 	call	10008594 <color_tree_init>
    for(i = 0; i != palsize; ++i)
1000abf4:	e03fe015 	stw	zero,-128(fp)
1000abf8:	00001f06 	br	1000ac78 <lodepng_convert+0x19c>
    {
      const unsigned char* p = &palette[i * 4];
1000abfc:	e0bfe017 	ldw	r2,-128(fp)
1000ac00:	1085883a 	add	r2,r2,r2
1000ac04:	1085883a 	add	r2,r2,r2
1000ac08:	e0ffe217 	ldw	r3,-120(fp)
1000ac0c:	1885883a 	add	r2,r3,r2
1000ac10:	e0bfe615 	stw	r2,-104(fp)
      color_tree_add(&tree, p[0], p[1], p[2], p[3], i);
1000ac14:	e0bfe617 	ldw	r2,-104(fp)
1000ac18:	10800003 	ldbu	r2,0(r2)
1000ac1c:	11403fcc 	andi	r5,r2,255
1000ac20:	e0bfe617 	ldw	r2,-104(fp)
1000ac24:	10800044 	addi	r2,r2,1
1000ac28:	10800003 	ldbu	r2,0(r2)
1000ac2c:	10c03fcc 	andi	r3,r2,255
1000ac30:	e0bfe617 	ldw	r2,-104(fp)
1000ac34:	10800084 	addi	r2,r2,2
1000ac38:	10800003 	ldbu	r2,0(r2)
1000ac3c:	10803fcc 	andi	r2,r2,255
1000ac40:	e13fe617 	ldw	r4,-104(fp)
1000ac44:	210000c4 	addi	r4,r4,3
1000ac48:	21000003 	ldbu	r4,0(r4)
1000ac4c:	21803fcc 	andi	r6,r4,255
1000ac50:	e13fe804 	addi	r4,fp,-96
1000ac54:	d9800015 	stw	r6,0(sp)
1000ac58:	e1bfe017 	ldw	r6,-128(fp)
1000ac5c:	d9800115 	stw	r6,4(sp)
1000ac60:	180d883a 	mov	r6,r3
1000ac64:	100f883a 	mov	r7,r2
1000ac68:	00088380 	call	10008838 <color_tree_add>
      palettesize = mode_in->palettesize;
      palette = mode_in->palette;
    }
    if(palettesize < palsize) palsize = palettesize;
    color_tree_init(&tree);
    for(i = 0; i != palsize; ++i)
1000ac6c:	e0bfe017 	ldw	r2,-128(fp)
1000ac70:	10800044 	addi	r2,r2,1
1000ac74:	e0bfe015 	stw	r2,-128(fp)
1000ac78:	e0ffe017 	ldw	r3,-128(fp)
1000ac7c:	e0bfe317 	ldw	r2,-116(fp)
1000ac80:	18bfde1e 	bne	r3,r2,1000abfc <__alt_data_end+0xf800abfc>
      const unsigned char* p = &palette[i * 4];
      color_tree_add(&tree, p[0], p[1], p[2], p[3], i);
    }
  }

  if(mode_in->bitdepth == 16 && mode_out->bitdepth == 16)
1000ac84:	e0bfff17 	ldw	r2,-4(fp)
1000ac88:	10800117 	ldw	r2,4(r2)
1000ac8c:	10800418 	cmpnei	r2,r2,16
1000ac90:	10002e1e 	bne	r2,zero,1000ad4c <lodepng_convert+0x270>
1000ac94:	e0bffe17 	ldw	r2,-8(fp)
1000ac98:	10800117 	ldw	r2,4(r2)
1000ac9c:	10800418 	cmpnei	r2,r2,16
1000aca0:	10002a1e 	bne	r2,zero,1000ad4c <lodepng_convert+0x270>
  {
    for(i = 0; i != numpixels; ++i)
1000aca4:	e03fe015 	stw	zero,-128(fp)
1000aca8:	00002406 	br	1000ad3c <lodepng_convert+0x260>
    {
      unsigned short r = 0, g = 0, b = 0, a = 0;
1000acac:	e03ff90d 	sth	zero,-28(fp)
1000acb0:	e03ff98d 	sth	zero,-26(fp)
1000acb4:	e03ffa0d 	sth	zero,-24(fp)
1000acb8:	e03ffa8d 	sth	zero,-22(fp)
      getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode_in);
1000acbc:	e13ff904 	addi	r4,fp,-28
1000acc0:	e17ff984 	addi	r5,fp,-26
1000acc4:	e0fffa04 	addi	r3,fp,-24
1000acc8:	e0bffa84 	addi	r2,fp,-22
1000accc:	e1bffd17 	ldw	r6,-12(fp)
1000acd0:	d9800015 	stw	r6,0(sp)
1000acd4:	e1bfe017 	ldw	r6,-128(fp)
1000acd8:	d9800115 	stw	r6,4(sp)
1000acdc:	e1bfff17 	ldw	r6,-4(fp)
1000ace0:	d9800215 	stw	r6,8(sp)
1000ace4:	180d883a 	mov	r6,r3
1000ace8:	100f883a 	mov	r7,r2
1000acec:	000a5580 	call	1000a558 <getPixelColorRGBA16>
      rgba16ToPixel(out, i, mode_out, r, g, b, a);
1000acf0:	e0bff90b 	ldhu	r2,-28(fp)
1000acf4:	10bfffcc 	andi	r2,r2,65535
1000acf8:	e0fff98b 	ldhu	r3,-26(fp)
1000acfc:	197fffcc 	andi	r5,r3,65535
1000ad00:	e0fffa0b 	ldhu	r3,-24(fp)
1000ad04:	193fffcc 	andi	r4,r3,65535
1000ad08:	e0fffa8b 	ldhu	r3,-22(fp)
1000ad0c:	18ffffcc 	andi	r3,r3,65535
1000ad10:	d9400015 	stw	r5,0(sp)
1000ad14:	d9000115 	stw	r4,4(sp)
1000ad18:	d8c00215 	stw	r3,8(sp)
1000ad1c:	e13ffc17 	ldw	r4,-16(fp)
1000ad20:	e17fe017 	ldw	r5,-128(fp)
1000ad24:	e1bffe17 	ldw	r6,-8(fp)
1000ad28:	100f883a 	mov	r7,r2
1000ad2c:	0008f1c0 	call	10008f1c <rgba16ToPixel>
    }
  }

  if(mode_in->bitdepth == 16 && mode_out->bitdepth == 16)
  {
    for(i = 0; i != numpixels; ++i)
1000ad30:	e0bfe017 	ldw	r2,-128(fp)
1000ad34:	10800044 	addi	r2,r2,1
1000ad38:	e0bfe015 	stw	r2,-128(fp)
1000ad3c:	e0ffe017 	ldw	r3,-128(fp)
1000ad40:	e0bfe417 	ldw	r2,-112(fp)
1000ad44:	18bfd91e 	bne	r3,r2,1000acac <__alt_data_end+0xf800acac>
      const unsigned char* p = &palette[i * 4];
      color_tree_add(&tree, p[0], p[1], p[2], p[3], i);
    }
  }

  if(mode_in->bitdepth == 16 && mode_out->bitdepth == 16)
1000ad48:	00005006 	br	1000ae8c <lodepng_convert+0x3b0>
      unsigned short r = 0, g = 0, b = 0, a = 0;
      getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode_in);
      rgba16ToPixel(out, i, mode_out, r, g, b, a);
    }
  }
  else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGBA)
1000ad4c:	e0bffe17 	ldw	r2,-8(fp)
1000ad50:	10800117 	ldw	r2,4(r2)
1000ad54:	10800218 	cmpnei	r2,r2,8
1000ad58:	10000c1e 	bne	r2,zero,1000ad8c <lodepng_convert+0x2b0>
1000ad5c:	e0bffe17 	ldw	r2,-8(fp)
1000ad60:	10800017 	ldw	r2,0(r2)
1000ad64:	10800198 	cmpnei	r2,r2,6
1000ad68:	1000081e 	bne	r2,zero,1000ad8c <lodepng_convert+0x2b0>
  {
    getPixelColorsRGBA8(out, numpixels, 1, in, mode_in);
1000ad6c:	e0bfff17 	ldw	r2,-4(fp)
1000ad70:	d8800015 	stw	r2,0(sp)
1000ad74:	e13ffc17 	ldw	r4,-16(fp)
1000ad78:	e17fe417 	ldw	r5,-112(fp)
1000ad7c:	01800044 	movi	r6,1
1000ad80:	e1fffd17 	ldw	r7,-12(fp)
1000ad84:	0009a880 	call	10009a88 <getPixelColorsRGBA8>
1000ad88:	00004006 	br	1000ae8c <lodepng_convert+0x3b0>
  }
  else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGB)
1000ad8c:	e0bffe17 	ldw	r2,-8(fp)
1000ad90:	10800117 	ldw	r2,4(r2)
1000ad94:	10800218 	cmpnei	r2,r2,8
1000ad98:	10000c1e 	bne	r2,zero,1000adcc <lodepng_convert+0x2f0>
1000ad9c:	e0bffe17 	ldw	r2,-8(fp)
1000ada0:	10800017 	ldw	r2,0(r2)
1000ada4:	10800098 	cmpnei	r2,r2,2
1000ada8:	1000081e 	bne	r2,zero,1000adcc <lodepng_convert+0x2f0>
  {
    getPixelColorsRGBA8(out, numpixels, 0, in, mode_in);
1000adac:	e0bfff17 	ldw	r2,-4(fp)
1000adb0:	d8800015 	stw	r2,0(sp)
1000adb4:	e13ffc17 	ldw	r4,-16(fp)
1000adb8:	e17fe417 	ldw	r5,-112(fp)
1000adbc:	000d883a 	mov	r6,zero
1000adc0:	e1fffd17 	ldw	r7,-12(fp)
1000adc4:	0009a880 	call	10009a88 <getPixelColorsRGBA8>
1000adc8:	00003006 	br	1000ae8c <lodepng_convert+0x3b0>
  }
  else
  {
    unsigned char r = 0, g = 0, b = 0, a = 0;
1000adcc:	e03ffb05 	stb	zero,-20(fp)
1000add0:	e03ffb45 	stb	zero,-19(fp)
1000add4:	e03ffb85 	stb	zero,-18(fp)
1000add8:	e03ffbc5 	stb	zero,-17(fp)
    for(i = 0; i != numpixels; ++i)
1000addc:	e03fe015 	stw	zero,-128(fp)
1000ade0:	00002706 	br	1000ae80 <lodepng_convert+0x3a4>
    {
      getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode_in);
1000ade4:	e13ffb04 	addi	r4,fp,-20
1000ade8:	e17ffb44 	addi	r5,fp,-19
1000adec:	e0fffb84 	addi	r3,fp,-18
1000adf0:	e0bffbc4 	addi	r2,fp,-17
1000adf4:	e1bffd17 	ldw	r6,-12(fp)
1000adf8:	d9800015 	stw	r6,0(sp)
1000adfc:	e1bfe017 	ldw	r6,-128(fp)
1000ae00:	d9800115 	stw	r6,4(sp)
1000ae04:	e1bfff17 	ldw	r6,-4(fp)
1000ae08:	d9800215 	stw	r6,8(sp)
1000ae0c:	180d883a 	mov	r6,r3
1000ae10:	100f883a 	mov	r7,r2
1000ae14:	00092340 	call	10009234 <getPixelColorRGBA8>
      CERROR_TRY_RETURN(rgba8ToPixel(out, i, mode_out, &tree, r, g, b, a));
1000ae18:	e0bffb03 	ldbu	r2,-20(fp)
1000ae1c:	11803fcc 	andi	r6,r2,255
1000ae20:	e0bffb43 	ldbu	r2,-19(fp)
1000ae24:	11403fcc 	andi	r5,r2,255
1000ae28:	e0bffb83 	ldbu	r2,-18(fp)
1000ae2c:	11003fcc 	andi	r4,r2,255
1000ae30:	e0bffbc3 	ldbu	r2,-17(fp)
1000ae34:	10c03fcc 	andi	r3,r2,255
1000ae38:	e0bfe804 	addi	r2,fp,-96
1000ae3c:	d9800015 	stw	r6,0(sp)
1000ae40:	d9400115 	stw	r5,4(sp)
1000ae44:	d9000215 	stw	r4,8(sp)
1000ae48:	d8c00315 	stw	r3,12(sp)
1000ae4c:	e13ffc17 	ldw	r4,-16(fp)
1000ae50:	e17fe017 	ldw	r5,-128(fp)
1000ae54:	e1bffe17 	ldw	r6,-8(fp)
1000ae58:	100f883a 	mov	r7,r2
1000ae5c:	00089900 	call	10008990 <rgba8ToPixel>
1000ae60:	e0bfe715 	stw	r2,-100(fp)
1000ae64:	e0bfe717 	ldw	r2,-100(fp)
1000ae68:	10000226 	beq	r2,zero,1000ae74 <lodepng_convert+0x398>
1000ae6c:	e0bfe717 	ldw	r2,-100(fp)
1000ae70:	00000e06 	br	1000aeac <lodepng_convert+0x3d0>
    getPixelColorsRGBA8(out, numpixels, 0, in, mode_in);
  }
  else
  {
    unsigned char r = 0, g = 0, b = 0, a = 0;
    for(i = 0; i != numpixels; ++i)
1000ae74:	e0bfe017 	ldw	r2,-128(fp)
1000ae78:	10800044 	addi	r2,r2,1
1000ae7c:	e0bfe015 	stw	r2,-128(fp)
1000ae80:	e0ffe017 	ldw	r3,-128(fp)
1000ae84:	e0bfe417 	ldw	r2,-112(fp)
1000ae88:	18bfd61e 	bne	r3,r2,1000ade4 <__alt_data_end+0xf800ade4>
      getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode_in);
      CERROR_TRY_RETURN(rgba8ToPixel(out, i, mode_out, &tree, r, g, b, a));
    }
  }

  if(mode_out->colortype == LCT_PALETTE)
1000ae8c:	e0bffe17 	ldw	r2,-8(fp)
1000ae90:	10800017 	ldw	r2,0(r2)
1000ae94:	108000d8 	cmpnei	r2,r2,3
1000ae98:	1000031e 	bne	r2,zero,1000aea8 <lodepng_convert+0x3cc>
  {
    color_tree_cleanup(&tree);
1000ae9c:	e0bfe804 	addi	r2,fp,-96
1000aea0:	1009883a 	mov	r4,r2
1000aea4:	00085f80 	call	100085f8 <color_tree_cleanup>
  }

  return 0; /*no error*/
1000aea8:	0005883a 	mov	r2,zero
}
1000aeac:	e037883a 	mov	sp,fp
1000aeb0:	dfc00117 	ldw	ra,4(sp)
1000aeb4:	df000017 	ldw	fp,0(sp)
1000aeb8:	dec00204 	addi	sp,sp,8
1000aebc:	f800283a 	ret

1000aec0 <lodepng_color_profile_init>:

#ifdef LODEPNG_COMPILE_ENCODER

void lodepng_color_profile_init(LodePNGColorProfile* profile)
{
1000aec0:	defffe04 	addi	sp,sp,-8
1000aec4:	df000115 	stw	fp,4(sp)
1000aec8:	df000104 	addi	fp,sp,4
1000aecc:	e13fff15 	stw	r4,-4(fp)
  profile->colored = 0;
1000aed0:	e0bfff17 	ldw	r2,-4(fp)
1000aed4:	10000015 	stw	zero,0(r2)
  profile->key = 0;
1000aed8:	e0bfff17 	ldw	r2,-4(fp)
1000aedc:	10000115 	stw	zero,4(r2)
  profile->alpha = 0;
1000aee0:	e0bfff17 	ldw	r2,-4(fp)
1000aee4:	10000415 	stw	zero,16(r2)
  profile->key_r = profile->key_g = profile->key_b = 0;
1000aee8:	e0bfff17 	ldw	r2,-4(fp)
1000aeec:	1000030d 	sth	zero,12(r2)
1000aef0:	e0bfff17 	ldw	r2,-4(fp)
1000aef4:	10c0030b 	ldhu	r3,12(r2)
1000aef8:	e0bfff17 	ldw	r2,-4(fp)
1000aefc:	10c0028d 	sth	r3,10(r2)
1000af00:	e0bfff17 	ldw	r2,-4(fp)
1000af04:	10c0028b 	ldhu	r3,10(r2)
1000af08:	e0bfff17 	ldw	r2,-4(fp)
1000af0c:	10c0020d 	sth	r3,8(r2)
  profile->numcolors = 0;
1000af10:	e0bfff17 	ldw	r2,-4(fp)
1000af14:	10000515 	stw	zero,20(r2)
  profile->bits = 1;
1000af18:	e0bfff17 	ldw	r2,-4(fp)
1000af1c:	00c00044 	movi	r3,1
1000af20:	10c10615 	stw	r3,1048(r2)
}
1000af24:	e037883a 	mov	sp,fp
1000af28:	df000017 	ldw	fp,0(sp)
1000af2c:	dec00104 	addi	sp,sp,4
1000af30:	f800283a 	ret

1000af34 <getValueRequiredBits>:
  std::cout << "bits: " << (int)p->bits << std::endl;
}*/

/*Returns how many bits needed to represent given value (max 8 bit)*/
static unsigned getValueRequiredBits(unsigned char value)
{
1000af34:	defffd04 	addi	sp,sp,-12
1000af38:	dfc00215 	stw	ra,8(sp)
1000af3c:	df000115 	stw	fp,4(sp)
1000af40:	df000104 	addi	fp,sp,4
1000af44:	2005883a 	mov	r2,r4
1000af48:	e0bfff05 	stb	r2,-4(fp)
  if(value == 0 || value == 255) return 1;
1000af4c:	e0bfff03 	ldbu	r2,-4(fp)
1000af50:	10000326 	beq	r2,zero,1000af60 <getValueRequiredBits+0x2c>
1000af54:	e0bfff03 	ldbu	r2,-4(fp)
1000af58:	10803fd8 	cmpnei	r2,r2,255
1000af5c:	1000021e 	bne	r2,zero,1000af68 <getValueRequiredBits+0x34>
1000af60:	00800044 	movi	r2,1
1000af64:	00001106 	br	1000afac <getValueRequiredBits+0x78>
  /*The scaling of 2-bit and 4-bit values uses multiples of 85 and 17*/
  if(value % 17 == 0) return value % 85 == 0 ? 2 : 4;
1000af68:	e0bfff03 	ldbu	r2,-4(fp)
1000af6c:	1009883a 	mov	r4,r2
1000af70:	01400444 	movi	r5,17
1000af74:	00146f40 	call	100146f4 <__umodsi3>
1000af78:	10803fcc 	andi	r2,r2,255
1000af7c:	10000a1e 	bne	r2,zero,1000afa8 <getValueRequiredBits+0x74>
1000af80:	e0bfff03 	ldbu	r2,-4(fp)
1000af84:	1009883a 	mov	r4,r2
1000af88:	01401544 	movi	r5,85
1000af8c:	00146f40 	call	100146f4 <__umodsi3>
1000af90:	10803fcc 	andi	r2,r2,255
1000af94:	1000021e 	bne	r2,zero,1000afa0 <getValueRequiredBits+0x6c>
1000af98:	00800084 	movi	r2,2
1000af9c:	00000106 	br	1000afa4 <getValueRequiredBits+0x70>
1000afa0:	00800104 	movi	r2,4
1000afa4:	00000106 	br	1000afac <getValueRequiredBits+0x78>
  return 8;
1000afa8:	00800204 	movi	r2,8
}
1000afac:	e037883a 	mov	sp,fp
1000afb0:	dfc00117 	ldw	ra,4(sp)
1000afb4:	df000017 	ldw	fp,0(sp)
1000afb8:	dec00204 	addi	sp,sp,8
1000afbc:	f800283a 	ret

1000afc0 <lodepng_get_color_profile>:
/*profile must already have been inited with mode.
It's ok to set some parameters of profile to done already.*/
unsigned lodepng_get_color_profile(LodePNGColorProfile* profile,
                                   const unsigned char* in, unsigned w, unsigned h,
                                   const LodePNGColorMode* mode)
{
1000afc0:	deffd204 	addi	sp,sp,-184
1000afc4:	dfc02d15 	stw	ra,180(sp)
1000afc8:	df002c15 	stw	fp,176(sp)
1000afcc:	df002c04 	addi	fp,sp,176
1000afd0:	e13ffc15 	stw	r4,-16(fp)
1000afd4:	e17ffd15 	stw	r5,-12(fp)
1000afd8:	e1bffe15 	stw	r6,-8(fp)
1000afdc:	e1ffff15 	stw	r7,-4(fp)
  unsigned error = 0;
1000afe0:	e03fde15 	stw	zero,-136(fp)
  size_t i;
  ColorTree tree;
  size_t numpixels = w * h;
1000afe4:	e13ffe17 	ldw	r4,-8(fp)
1000afe8:	e17fff17 	ldw	r5,-4(fp)
1000afec:	00146fc0 	call	100146fc <__mulsi3>
1000aff0:	e0bfdf15 	stw	r2,-132(fp)

  unsigned colored_done = lodepng_is_greyscale_type(mode) ? 1 : 0;
1000aff4:	e1000217 	ldw	r4,8(fp)
1000aff8:	00073f40 	call	100073f4 <lodepng_is_greyscale_type>
1000affc:	1004c03a 	cmpne	r2,r2,zero
1000b000:	10803fcc 	andi	r2,r2,255
1000b004:	e0bfd815 	stw	r2,-160(fp)
  unsigned alpha_done = lodepng_can_have_alpha(mode) ? 0 : 1;
1000b008:	e1000217 	ldw	r4,8(fp)
1000b00c:	000751c0 	call	1000751c <lodepng_can_have_alpha>
1000b010:	1005003a 	cmpeq	r2,r2,zero
1000b014:	10803fcc 	andi	r2,r2,255
1000b018:	e0bfd915 	stw	r2,-156(fp)
  unsigned numcolors_done = 0;
1000b01c:	e03fda15 	stw	zero,-152(fp)
  unsigned bpp = lodepng_get_bpp(mode);
1000b020:	e1000217 	ldw	r4,8(fp)
1000b024:	00073780 	call	10007378 <lodepng_get_bpp>
1000b028:	e0bfe015 	stw	r2,-128(fp)
  unsigned bits_done = bpp == 1 ? 1 : 0;
1000b02c:	e0bfe017 	ldw	r2,-128(fp)
1000b030:	10800060 	cmpeqi	r2,r2,1
1000b034:	10803fcc 	andi	r2,r2,255
1000b038:	e0bfdb15 	stw	r2,-148(fp)
  unsigned maxnumcolors = 257;
1000b03c:	00804044 	movi	r2,257
1000b040:	e0bfdc15 	stw	r2,-144(fp)
  unsigned sixteen = 0;
1000b044:	e03fdd15 	stw	zero,-140(fp)
  if(bpp <= 8) maxnumcolors = bpp == 1 ? 2 : (bpp == 2 ? 4 : (bpp == 4 ? 16 : 256));
1000b048:	e0bfe017 	ldw	r2,-128(fp)
1000b04c:	10800268 	cmpgeui	r2,r2,9
1000b050:	1000111e 	bne	r2,zero,1000b098 <lodepng_get_color_profile+0xd8>
1000b054:	e0bfe017 	ldw	r2,-128(fp)
1000b058:	10800060 	cmpeqi	r2,r2,1
1000b05c:	10000c1e 	bne	r2,zero,1000b090 <lodepng_get_color_profile+0xd0>
1000b060:	e0bfe017 	ldw	r2,-128(fp)
1000b064:	108000a0 	cmpeqi	r2,r2,2
1000b068:	1000071e 	bne	r2,zero,1000b088 <lodepng_get_color_profile+0xc8>
1000b06c:	e0bfe017 	ldw	r2,-128(fp)
1000b070:	10800118 	cmpnei	r2,r2,4
1000b074:	1000021e 	bne	r2,zero,1000b080 <lodepng_get_color_profile+0xc0>
1000b078:	00800404 	movi	r2,16
1000b07c:	00000106 	br	1000b084 <lodepng_get_color_profile+0xc4>
1000b080:	00804004 	movi	r2,256
1000b084:	00000106 	br	1000b08c <lodepng_get_color_profile+0xcc>
1000b088:	00800104 	movi	r2,4
1000b08c:	00000106 	br	1000b094 <lodepng_get_color_profile+0xd4>
1000b090:	00800084 	movi	r2,2
1000b094:	e0bfdc15 	stw	r2,-144(fp)

  color_tree_init(&tree);
1000b098:	e0bfe604 	addi	r2,fp,-104
1000b09c:	1009883a 	mov	r4,r2
1000b0a0:	00085940 	call	10008594 <color_tree_init>

  /*Check if the 16-bit input is truly 16-bit*/
  if(mode->bitdepth == 16)
1000b0a4:	e0800217 	ldw	r2,8(fp)
1000b0a8:	10800117 	ldw	r2,4(r2)
1000b0ac:	10800418 	cmpnei	r2,r2,16
1000b0b0:	10003c1e 	bne	r2,zero,1000b1a4 <lodepng_get_color_profile+0x1e4>
  {
    unsigned short r, g, b, a;
    for(i = 0; i != numpixels; ++i)
1000b0b4:	e03fd715 	stw	zero,-164(fp)
1000b0b8:	00003706 	br	1000b198 <lodepng_get_color_profile+0x1d8>
    {
      getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode);
1000b0bc:	e13ff704 	addi	r4,fp,-36
1000b0c0:	e17ff784 	addi	r5,fp,-34
1000b0c4:	e0fff804 	addi	r3,fp,-32
1000b0c8:	e0bff884 	addi	r2,fp,-30
1000b0cc:	e1bffd17 	ldw	r6,-12(fp)
1000b0d0:	d9800015 	stw	r6,0(sp)
1000b0d4:	e1bfd717 	ldw	r6,-164(fp)
1000b0d8:	d9800115 	stw	r6,4(sp)
1000b0dc:	e1800217 	ldw	r6,8(fp)
1000b0e0:	d9800215 	stw	r6,8(sp)
1000b0e4:	180d883a 	mov	r6,r3
1000b0e8:	100f883a 	mov	r7,r2
1000b0ec:	000a5580 	call	1000a558 <getPixelColorRGBA16>
      if((r & 255) != ((r >> 8) & 255) || (g & 255) != ((g >> 8) & 255) ||
1000b0f0:	e0bff70b 	ldhu	r2,-36(fp)
1000b0f4:	10ffffcc 	andi	r3,r2,65535
1000b0f8:	e0bff70b 	ldhu	r2,-36(fp)
1000b0fc:	10bfffcc 	andi	r2,r2,65535
1000b100:	1004d23a 	srli	r2,r2,8
1000b104:	10bfffcc 	andi	r2,r2,65535
1000b108:	1884f03a 	xor	r2,r3,r2
1000b10c:	10803fcc 	andi	r2,r2,255
1000b110:	10001b1e 	bne	r2,zero,1000b180 <lodepng_get_color_profile+0x1c0>
1000b114:	e0bff78b 	ldhu	r2,-34(fp)
1000b118:	10ffffcc 	andi	r3,r2,65535
1000b11c:	e0bff78b 	ldhu	r2,-34(fp)
1000b120:	10bfffcc 	andi	r2,r2,65535
1000b124:	1004d23a 	srli	r2,r2,8
1000b128:	10bfffcc 	andi	r2,r2,65535
1000b12c:	1884f03a 	xor	r2,r3,r2
1000b130:	10803fcc 	andi	r2,r2,255
1000b134:	1000121e 	bne	r2,zero,1000b180 <lodepng_get_color_profile+0x1c0>
         (b & 255) != ((b >> 8) & 255) || (a & 255) != ((a >> 8) & 255)) /*first and second byte differ*/
1000b138:	e0bff80b 	ldhu	r2,-32(fp)
1000b13c:	10ffffcc 	andi	r3,r2,65535
1000b140:	e0bff80b 	ldhu	r2,-32(fp)
1000b144:	10bfffcc 	andi	r2,r2,65535
1000b148:	1004d23a 	srli	r2,r2,8
1000b14c:	10bfffcc 	andi	r2,r2,65535
1000b150:	1884f03a 	xor	r2,r3,r2
1000b154:	10803fcc 	andi	r2,r2,255
  {
    unsigned short r, g, b, a;
    for(i = 0; i != numpixels; ++i)
    {
      getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode);
      if((r & 255) != ((r >> 8) & 255) || (g & 255) != ((g >> 8) & 255) ||
1000b158:	1000091e 	bne	r2,zero,1000b180 <lodepng_get_color_profile+0x1c0>
         (b & 255) != ((b >> 8) & 255) || (a & 255) != ((a >> 8) & 255)) /*first and second byte differ*/
1000b15c:	e0bff88b 	ldhu	r2,-30(fp)
1000b160:	10ffffcc 	andi	r3,r2,65535
1000b164:	e0bff88b 	ldhu	r2,-30(fp)
1000b168:	10bfffcc 	andi	r2,r2,65535
1000b16c:	1004d23a 	srli	r2,r2,8
1000b170:	10bfffcc 	andi	r2,r2,65535
1000b174:	1884f03a 	xor	r2,r3,r2
1000b178:	10803fcc 	andi	r2,r2,255
1000b17c:	10000326 	beq	r2,zero,1000b18c <lodepng_get_color_profile+0x1cc>
      {
        sixteen = 1;
1000b180:	00800044 	movi	r2,1
1000b184:	e0bfdd15 	stw	r2,-140(fp)
        break;
1000b188:	00000606 	br	1000b1a4 <lodepng_get_color_profile+0x1e4>

  /*Check if the 16-bit input is truly 16-bit*/
  if(mode->bitdepth == 16)
  {
    unsigned short r, g, b, a;
    for(i = 0; i != numpixels; ++i)
1000b18c:	e0bfd717 	ldw	r2,-164(fp)
1000b190:	10800044 	addi	r2,r2,1
1000b194:	e0bfd715 	stw	r2,-164(fp)
1000b198:	e0ffd717 	ldw	r3,-164(fp)
1000b19c:	e0bfdf17 	ldw	r2,-132(fp)
1000b1a0:	18bfc61e 	bne	r3,r2,1000b0bc <__alt_data_end+0xf800b0bc>
        break;
      }
    }
  }

  if(sixteen)
1000b1a4:	e0bfdd17 	ldw	r2,-140(fp)
1000b1a8:	10008f26 	beq	r2,zero,1000b3e8 <lodepng_get_color_profile+0x428>
  {
    unsigned short r = 0, g = 0, b = 0, a = 0;
1000b1ac:	e03ff90d 	sth	zero,-28(fp)
1000b1b0:	e03ff98d 	sth	zero,-26(fp)
1000b1b4:	e03ffa0d 	sth	zero,-24(fp)
1000b1b8:	e03ffa8d 	sth	zero,-22(fp)
    profile->bits = 16;
1000b1bc:	e0bffc17 	ldw	r2,-16(fp)
1000b1c0:	00c00404 	movi	r3,16
1000b1c4:	10c10615 	stw	r3,1048(r2)
    bits_done = numcolors_done = 1; /*counting colors no longer useful, palette doesn't support 16-bit*/
1000b1c8:	00800044 	movi	r2,1
1000b1cc:	e0bfda15 	stw	r2,-152(fp)
1000b1d0:	e0bfda17 	ldw	r2,-152(fp)
1000b1d4:	e0bfdb15 	stw	r2,-148(fp)

    for(i = 0; i != numpixels; ++i)
1000b1d8:	e03fd715 	stw	zero,-164(fp)
1000b1dc:	00007e06 	br	1000b3d8 <lodepng_get_color_profile+0x418>
    {
      getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode);
1000b1e0:	e13ff904 	addi	r4,fp,-28
1000b1e4:	e17ff984 	addi	r5,fp,-26
1000b1e8:	e0fffa04 	addi	r3,fp,-24
1000b1ec:	e0bffa84 	addi	r2,fp,-22
1000b1f0:	e1bffd17 	ldw	r6,-12(fp)
1000b1f4:	d9800015 	stw	r6,0(sp)
1000b1f8:	e1bfd717 	ldw	r6,-164(fp)
1000b1fc:	d9800115 	stw	r6,4(sp)
1000b200:	e1800217 	ldw	r6,8(fp)
1000b204:	d9800215 	stw	r6,8(sp)
1000b208:	180d883a 	mov	r6,r3
1000b20c:	100f883a 	mov	r7,r2
1000b210:	000a5580 	call	1000a558 <getPixelColorRGBA16>

      if(!colored_done && (r != g || r != b))
1000b214:	e0bfd817 	ldw	r2,-160(fp)
1000b218:	10000f1e 	bne	r2,zero,1000b258 <lodepng_get_color_profile+0x298>
1000b21c:	e0fff90b 	ldhu	r3,-28(fp)
1000b220:	e0bff98b 	ldhu	r2,-26(fp)
1000b224:	18ffffcc 	andi	r3,r3,65535
1000b228:	10bfffcc 	andi	r2,r2,65535
1000b22c:	1880051e 	bne	r3,r2,1000b244 <lodepng_get_color_profile+0x284>
1000b230:	e0fff90b 	ldhu	r3,-28(fp)
1000b234:	e0bffa0b 	ldhu	r2,-24(fp)
1000b238:	18ffffcc 	andi	r3,r3,65535
1000b23c:	10bfffcc 	andi	r2,r2,65535
1000b240:	18800526 	beq	r3,r2,1000b258 <lodepng_get_color_profile+0x298>
      {
        profile->colored = 1;
1000b244:	e0bffc17 	ldw	r2,-16(fp)
1000b248:	00c00044 	movi	r3,1
1000b24c:	10c00015 	stw	r3,0(r2)
        colored_done = 1;
1000b250:	00800044 	movi	r2,1
1000b254:	e0bfd815 	stw	r2,-160(fp)
      }

      if(!alpha_done)
1000b258:	e0bfd917 	ldw	r2,-156(fp)
1000b25c:	1000531e 	bne	r2,zero,1000b3ac <lodepng_get_color_profile+0x3ec>
      {
        unsigned matchkey = (r == profile->key_r && g == profile->key_g && b == profile->key_b);
1000b260:	e0bffc17 	ldw	r2,-16(fp)
1000b264:	10c0020b 	ldhu	r3,8(r2)
1000b268:	e0bff90b 	ldhu	r2,-28(fp)
1000b26c:	18ffffcc 	andi	r3,r3,65535
1000b270:	10bfffcc 	andi	r2,r2,65535
1000b274:	18800e1e 	bne	r3,r2,1000b2b0 <lodepng_get_color_profile+0x2f0>
1000b278:	e0bffc17 	ldw	r2,-16(fp)
1000b27c:	10c0028b 	ldhu	r3,10(r2)
1000b280:	e0bff98b 	ldhu	r2,-26(fp)
1000b284:	18ffffcc 	andi	r3,r3,65535
1000b288:	10bfffcc 	andi	r2,r2,65535
1000b28c:	1880081e 	bne	r3,r2,1000b2b0 <lodepng_get_color_profile+0x2f0>
1000b290:	e0bffc17 	ldw	r2,-16(fp)
1000b294:	10c0030b 	ldhu	r3,12(r2)
1000b298:	e0bffa0b 	ldhu	r2,-24(fp)
1000b29c:	18ffffcc 	andi	r3,r3,65535
1000b2a0:	10bfffcc 	andi	r2,r2,65535
1000b2a4:	1880021e 	bne	r3,r2,1000b2b0 <lodepng_get_color_profile+0x2f0>
1000b2a8:	00800044 	movi	r2,1
1000b2ac:	00000106 	br	1000b2b4 <lodepng_get_color_profile+0x2f4>
1000b2b0:	0005883a 	mov	r2,zero
1000b2b4:	e0bfe115 	stw	r2,-124(fp)
        if(a != 65535 && (a != 0 || (profile->key && !matchkey)))
1000b2b8:	e0bffa8b 	ldhu	r2,-22(fp)
1000b2bc:	10ffffcc 	andi	r3,r2,65535
1000b2c0:	00bfffd4 	movui	r2,65535
1000b2c4:	18801526 	beq	r3,r2,1000b31c <lodepng_get_color_profile+0x35c>
1000b2c8:	e0bffa8b 	ldhu	r2,-22(fp)
1000b2cc:	10bfffcc 	andi	r2,r2,65535
1000b2d0:	1000051e 	bne	r2,zero,1000b2e8 <lodepng_get_color_profile+0x328>
1000b2d4:	e0bffc17 	ldw	r2,-16(fp)
1000b2d8:	10800117 	ldw	r2,4(r2)
1000b2dc:	10000f26 	beq	r2,zero,1000b31c <lodepng_get_color_profile+0x35c>
1000b2e0:	e0bfe117 	ldw	r2,-124(fp)
1000b2e4:	10000d1e 	bne	r2,zero,1000b31c <lodepng_get_color_profile+0x35c>
        {
          profile->alpha = 1;
1000b2e8:	e0bffc17 	ldw	r2,-16(fp)
1000b2ec:	00c00044 	movi	r3,1
1000b2f0:	10c00415 	stw	r3,16(r2)
          alpha_done = 1;
1000b2f4:	00800044 	movi	r2,1
1000b2f8:	e0bfd915 	stw	r2,-156(fp)
          if(profile->bits < 8) profile->bits = 8; /*PNG has no alphachannel modes with less than 8-bit per channel*/
1000b2fc:	e0bffc17 	ldw	r2,-16(fp)
1000b300:	10810617 	ldw	r2,1048(r2)
1000b304:	10800228 	cmpgeui	r2,r2,8
1000b308:	1000281e 	bne	r2,zero,1000b3ac <lodepng_get_color_profile+0x3ec>
1000b30c:	e0bffc17 	ldw	r2,-16(fp)
1000b310:	00c00204 	movi	r3,8
1000b314:	10c10615 	stw	r3,1048(r2)
1000b318:	00002406 	br	1000b3ac <lodepng_get_color_profile+0x3ec>
        }
        else if(a == 0 && !profile->alpha && !profile->key)
1000b31c:	e0bffa8b 	ldhu	r2,-22(fp)
1000b320:	10bfffcc 	andi	r2,r2,65535
1000b324:	1000131e 	bne	r2,zero,1000b374 <lodepng_get_color_profile+0x3b4>
1000b328:	e0bffc17 	ldw	r2,-16(fp)
1000b32c:	10800417 	ldw	r2,16(r2)
1000b330:	1000101e 	bne	r2,zero,1000b374 <lodepng_get_color_profile+0x3b4>
1000b334:	e0bffc17 	ldw	r2,-16(fp)
1000b338:	10800117 	ldw	r2,4(r2)
1000b33c:	10000d1e 	bne	r2,zero,1000b374 <lodepng_get_color_profile+0x3b4>
        {
          profile->key = 1;
1000b340:	e0bffc17 	ldw	r2,-16(fp)
1000b344:	00c00044 	movi	r3,1
1000b348:	10c00115 	stw	r3,4(r2)
          profile->key_r = r;
1000b34c:	e0fff90b 	ldhu	r3,-28(fp)
1000b350:	e0bffc17 	ldw	r2,-16(fp)
1000b354:	10c0020d 	sth	r3,8(r2)
          profile->key_g = g;
1000b358:	e0fff98b 	ldhu	r3,-26(fp)
1000b35c:	e0bffc17 	ldw	r2,-16(fp)
1000b360:	10c0028d 	sth	r3,10(r2)
          profile->key_b = b;
1000b364:	e0fffa0b 	ldhu	r3,-24(fp)
1000b368:	e0bffc17 	ldw	r2,-16(fp)
1000b36c:	10c0030d 	sth	r3,12(r2)
1000b370:	00000e06 	br	1000b3ac <lodepng_get_color_profile+0x3ec>
        }
        else if(a == 65535 && profile->key && matchkey)
1000b374:	e0bffa8b 	ldhu	r2,-22(fp)
1000b378:	10ffffcc 	andi	r3,r2,65535
1000b37c:	00bfffd4 	movui	r2,65535
1000b380:	18800a1e 	bne	r3,r2,1000b3ac <lodepng_get_color_profile+0x3ec>
1000b384:	e0bffc17 	ldw	r2,-16(fp)
1000b388:	10800117 	ldw	r2,4(r2)
1000b38c:	10000726 	beq	r2,zero,1000b3ac <lodepng_get_color_profile+0x3ec>
1000b390:	e0bfe117 	ldw	r2,-124(fp)
1000b394:	10000526 	beq	r2,zero,1000b3ac <lodepng_get_color_profile+0x3ec>
        {
          /* Color key cannot be used if an opaque pixel also has that RGB color. */
          profile->alpha = 1;
1000b398:	e0bffc17 	ldw	r2,-16(fp)
1000b39c:	00c00044 	movi	r3,1
1000b3a0:	10c00415 	stw	r3,16(r2)
          alpha_done = 1;
1000b3a4:	00800044 	movi	r2,1
1000b3a8:	e0bfd915 	stw	r2,-156(fp)
        }
      }

      if(alpha_done && numcolors_done && colored_done && bits_done) break;
1000b3ac:	e0bfd917 	ldw	r2,-156(fp)
1000b3b0:	10000626 	beq	r2,zero,1000b3cc <lodepng_get_color_profile+0x40c>
1000b3b4:	e0bfda17 	ldw	r2,-152(fp)
1000b3b8:	10000426 	beq	r2,zero,1000b3cc <lodepng_get_color_profile+0x40c>
1000b3bc:	e0bfd817 	ldw	r2,-160(fp)
1000b3c0:	10000226 	beq	r2,zero,1000b3cc <lodepng_get_color_profile+0x40c>
1000b3c4:	e0bfdb17 	ldw	r2,-148(fp)
1000b3c8:	10012a1e 	bne	r2,zero,1000b874 <lodepng_get_color_profile+0x8b4>
  {
    unsigned short r = 0, g = 0, b = 0, a = 0;
    profile->bits = 16;
    bits_done = numcolors_done = 1; /*counting colors no longer useful, palette doesn't support 16-bit*/

    for(i = 0; i != numpixels; ++i)
1000b3cc:	e0bfd717 	ldw	r2,-164(fp)
1000b3d0:	10800044 	addi	r2,r2,1
1000b3d4:	e0bfd715 	stw	r2,-164(fp)
1000b3d8:	e0ffd717 	ldw	r3,-164(fp)
1000b3dc:	e0bfdf17 	ldw	r2,-132(fp)
1000b3e0:	18bf7f1e 	bne	r3,r2,1000b1e0 <__alt_data_end+0xf800b1e0>
1000b3e4:	00012406 	br	1000b878 <lodepng_get_color_profile+0x8b8>
      if(alpha_done && numcolors_done && colored_done && bits_done) break;
    }
  }
  else /* < 16-bit */
  {
    for(i = 0; i != numpixels; ++i)
1000b3e8:	e03fd715 	stw	zero,-164(fp)
1000b3ec:	00010206 	br	1000b7f8 <lodepng_get_color_profile+0x838>
    {
      unsigned char r = 0, g = 0, b = 0, a = 0;
1000b3f0:	e03ffb05 	stb	zero,-20(fp)
1000b3f4:	e03ffb45 	stb	zero,-19(fp)
1000b3f8:	e03ffb85 	stb	zero,-18(fp)
1000b3fc:	e03ffbc5 	stb	zero,-17(fp)
      getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode);
1000b400:	e13ffb04 	addi	r4,fp,-20
1000b404:	e17ffb44 	addi	r5,fp,-19
1000b408:	e0fffb84 	addi	r3,fp,-18
1000b40c:	e0bffbc4 	addi	r2,fp,-17
1000b410:	e1bffd17 	ldw	r6,-12(fp)
1000b414:	d9800015 	stw	r6,0(sp)
1000b418:	e1bfd717 	ldw	r6,-164(fp)
1000b41c:	d9800115 	stw	r6,4(sp)
1000b420:	e1800217 	ldw	r6,8(fp)
1000b424:	d9800215 	stw	r6,8(sp)
1000b428:	180d883a 	mov	r6,r3
1000b42c:	100f883a 	mov	r7,r2
1000b430:	00092340 	call	10009234 <getPixelColorRGBA8>

      if(!bits_done && profile->bits < 8)
1000b434:	e0bfdb17 	ldw	r2,-148(fp)
1000b438:	1000101e 	bne	r2,zero,1000b47c <lodepng_get_color_profile+0x4bc>
1000b43c:	e0bffc17 	ldw	r2,-16(fp)
1000b440:	10810617 	ldw	r2,1048(r2)
1000b444:	10800228 	cmpgeui	r2,r2,8
1000b448:	10000c1e 	bne	r2,zero,1000b47c <lodepng_get_color_profile+0x4bc>
      {
        /*only r is checked, < 8 bits is only relevant for greyscale*/
        unsigned bits = getValueRequiredBits(r);
1000b44c:	e0bffb03 	ldbu	r2,-20(fp)
1000b450:	10803fcc 	andi	r2,r2,255
1000b454:	1009883a 	mov	r4,r2
1000b458:	000af340 	call	1000af34 <getValueRequiredBits>
1000b45c:	e0bfe215 	stw	r2,-120(fp)
        if(bits > profile->bits) profile->bits = bits;
1000b460:	e0bffc17 	ldw	r2,-16(fp)
1000b464:	10c10617 	ldw	r3,1048(r2)
1000b468:	e0bfe217 	ldw	r2,-120(fp)
1000b46c:	1880032e 	bgeu	r3,r2,1000b47c <lodepng_get_color_profile+0x4bc>
1000b470:	e0bffc17 	ldw	r2,-16(fp)
1000b474:	e0ffe217 	ldw	r3,-120(fp)
1000b478:	10c10615 	stw	r3,1048(r2)
      }
      bits_done = (profile->bits >= bpp);
1000b47c:	e0bffc17 	ldw	r2,-16(fp)
1000b480:	10c10617 	ldw	r3,1048(r2)
1000b484:	e0bfe017 	ldw	r2,-128(fp)
1000b488:	1885403a 	cmpgeu	r2,r3,r2
1000b48c:	10803fcc 	andi	r2,r2,255
1000b490:	e0bfdb15 	stw	r2,-148(fp)

      if(!colored_done && (r != g || r != b))
1000b494:	e0bfd817 	ldw	r2,-160(fp)
1000b498:	1000161e 	bne	r2,zero,1000b4f4 <lodepng_get_color_profile+0x534>
1000b49c:	e0fffb03 	ldbu	r3,-20(fp)
1000b4a0:	e0bffb43 	ldbu	r2,-19(fp)
1000b4a4:	18c03fcc 	andi	r3,r3,255
1000b4a8:	10803fcc 	andi	r2,r2,255
1000b4ac:	1880051e 	bne	r3,r2,1000b4c4 <lodepng_get_color_profile+0x504>
1000b4b0:	e0fffb03 	ldbu	r3,-20(fp)
1000b4b4:	e0bffb83 	ldbu	r2,-18(fp)
1000b4b8:	18c03fcc 	andi	r3,r3,255
1000b4bc:	10803fcc 	andi	r2,r2,255
1000b4c0:	18800c26 	beq	r3,r2,1000b4f4 <lodepng_get_color_profile+0x534>
      {
        profile->colored = 1;
1000b4c4:	e0bffc17 	ldw	r2,-16(fp)
1000b4c8:	00c00044 	movi	r3,1
1000b4cc:	10c00015 	stw	r3,0(r2)
        colored_done = 1;
1000b4d0:	00800044 	movi	r2,1
1000b4d4:	e0bfd815 	stw	r2,-160(fp)
        if(profile->bits < 8) profile->bits = 8; /*PNG has no colored modes with less than 8-bit per channel*/
1000b4d8:	e0bffc17 	ldw	r2,-16(fp)
1000b4dc:	10810617 	ldw	r2,1048(r2)
1000b4e0:	10800228 	cmpgeui	r2,r2,8
1000b4e4:	1000031e 	bne	r2,zero,1000b4f4 <lodepng_get_color_profile+0x534>
1000b4e8:	e0bffc17 	ldw	r2,-16(fp)
1000b4ec:	00c00204 	movi	r3,8
1000b4f0:	10c10615 	stw	r3,1048(r2)
      }

      if(!alpha_done)
1000b4f4:	e0bfd917 	ldw	r2,-156(fp)
1000b4f8:	1000601e 	bne	r2,zero,1000b67c <lodepng_get_color_profile+0x6bc>
      {
        unsigned matchkey = (r == profile->key_r && g == profile->key_g && b == profile->key_b);
1000b4fc:	e0bffb03 	ldbu	r2,-20(fp)
1000b500:	10c03fcc 	andi	r3,r2,255
1000b504:	e0bffc17 	ldw	r2,-16(fp)
1000b508:	1080020b 	ldhu	r2,8(r2)
1000b50c:	18ffffcc 	andi	r3,r3,65535
1000b510:	10bfffcc 	andi	r2,r2,65535
1000b514:	1880101e 	bne	r3,r2,1000b558 <lodepng_get_color_profile+0x598>
1000b518:	e0bffb43 	ldbu	r2,-19(fp)
1000b51c:	10c03fcc 	andi	r3,r2,255
1000b520:	e0bffc17 	ldw	r2,-16(fp)
1000b524:	1080028b 	ldhu	r2,10(r2)
1000b528:	18ffffcc 	andi	r3,r3,65535
1000b52c:	10bfffcc 	andi	r2,r2,65535
1000b530:	1880091e 	bne	r3,r2,1000b558 <lodepng_get_color_profile+0x598>
1000b534:	e0bffb83 	ldbu	r2,-18(fp)
1000b538:	10c03fcc 	andi	r3,r2,255
1000b53c:	e0bffc17 	ldw	r2,-16(fp)
1000b540:	1080030b 	ldhu	r2,12(r2)
1000b544:	18ffffcc 	andi	r3,r3,65535
1000b548:	10bfffcc 	andi	r2,r2,65535
1000b54c:	1880021e 	bne	r3,r2,1000b558 <lodepng_get_color_profile+0x598>
1000b550:	00800044 	movi	r2,1
1000b554:	00000106 	br	1000b55c <lodepng_get_color_profile+0x59c>
1000b558:	0005883a 	mov	r2,zero
1000b55c:	e0bfe315 	stw	r2,-116(fp)
        if(a != 255 && (a != 0 || (profile->key && !matchkey)))
1000b560:	e0bffbc3 	ldbu	r2,-17(fp)
1000b564:	10803fcc 	andi	r2,r2,255
1000b568:	10803fe0 	cmpeqi	r2,r2,255
1000b56c:	1000151e 	bne	r2,zero,1000b5c4 <lodepng_get_color_profile+0x604>
1000b570:	e0bffbc3 	ldbu	r2,-17(fp)
1000b574:	10803fcc 	andi	r2,r2,255
1000b578:	1000051e 	bne	r2,zero,1000b590 <lodepng_get_color_profile+0x5d0>
1000b57c:	e0bffc17 	ldw	r2,-16(fp)
1000b580:	10800117 	ldw	r2,4(r2)
1000b584:	10000f26 	beq	r2,zero,1000b5c4 <lodepng_get_color_profile+0x604>
1000b588:	e0bfe317 	ldw	r2,-116(fp)
1000b58c:	10000d1e 	bne	r2,zero,1000b5c4 <lodepng_get_color_profile+0x604>
        {
          profile->alpha = 1;
1000b590:	e0bffc17 	ldw	r2,-16(fp)
1000b594:	00c00044 	movi	r3,1
1000b598:	10c00415 	stw	r3,16(r2)
          alpha_done = 1;
1000b59c:	00800044 	movi	r2,1
1000b5a0:	e0bfd915 	stw	r2,-156(fp)
          if(profile->bits < 8) profile->bits = 8; /*PNG has no alphachannel modes with less than 8-bit per channel*/
1000b5a4:	e0bffc17 	ldw	r2,-16(fp)
1000b5a8:	10810617 	ldw	r2,1048(r2)
1000b5ac:	10800228 	cmpgeui	r2,r2,8
1000b5b0:	1000321e 	bne	r2,zero,1000b67c <lodepng_get_color_profile+0x6bc>
1000b5b4:	e0bffc17 	ldw	r2,-16(fp)
1000b5b8:	00c00204 	movi	r3,8
1000b5bc:	10c10615 	stw	r3,1048(r2)
1000b5c0:	00002e06 	br	1000b67c <lodepng_get_color_profile+0x6bc>
        }
        else if(a == 0 && !profile->alpha && !profile->key)
1000b5c4:	e0bffbc3 	ldbu	r2,-17(fp)
1000b5c8:	10803fcc 	andi	r2,r2,255
1000b5cc:	1000161e 	bne	r2,zero,1000b628 <lodepng_get_color_profile+0x668>
1000b5d0:	e0bffc17 	ldw	r2,-16(fp)
1000b5d4:	10800417 	ldw	r2,16(r2)
1000b5d8:	1000131e 	bne	r2,zero,1000b628 <lodepng_get_color_profile+0x668>
1000b5dc:	e0bffc17 	ldw	r2,-16(fp)
1000b5e0:	10800117 	ldw	r2,4(r2)
1000b5e4:	1000101e 	bne	r2,zero,1000b628 <lodepng_get_color_profile+0x668>
        {
          profile->key = 1;
1000b5e8:	e0bffc17 	ldw	r2,-16(fp)
1000b5ec:	00c00044 	movi	r3,1
1000b5f0:	10c00115 	stw	r3,4(r2)
          profile->key_r = r;
1000b5f4:	e0bffb03 	ldbu	r2,-20(fp)
1000b5f8:	10c03fcc 	andi	r3,r2,255
1000b5fc:	e0bffc17 	ldw	r2,-16(fp)
1000b600:	10c0020d 	sth	r3,8(r2)
          profile->key_g = g;
1000b604:	e0bffb43 	ldbu	r2,-19(fp)
1000b608:	10c03fcc 	andi	r3,r2,255
1000b60c:	e0bffc17 	ldw	r2,-16(fp)
1000b610:	10c0028d 	sth	r3,10(r2)
          profile->key_b = b;
1000b614:	e0bffb83 	ldbu	r2,-18(fp)
1000b618:	10c03fcc 	andi	r3,r2,255
1000b61c:	e0bffc17 	ldw	r2,-16(fp)
1000b620:	10c0030d 	sth	r3,12(r2)
1000b624:	00001506 	br	1000b67c <lodepng_get_color_profile+0x6bc>
        }
        else if(a == 255 && profile->key && matchkey)
1000b628:	e0bffbc3 	ldbu	r2,-17(fp)
1000b62c:	10803fcc 	andi	r2,r2,255
1000b630:	10803fd8 	cmpnei	r2,r2,255
1000b634:	1000111e 	bne	r2,zero,1000b67c <lodepng_get_color_profile+0x6bc>
1000b638:	e0bffc17 	ldw	r2,-16(fp)
1000b63c:	10800117 	ldw	r2,4(r2)
1000b640:	10000e26 	beq	r2,zero,1000b67c <lodepng_get_color_profile+0x6bc>
1000b644:	e0bfe317 	ldw	r2,-116(fp)
1000b648:	10000c26 	beq	r2,zero,1000b67c <lodepng_get_color_profile+0x6bc>
        {
          /* Color key cannot be used if an opaque pixel also has that RGB color. */
          profile->alpha = 1;
1000b64c:	e0bffc17 	ldw	r2,-16(fp)
1000b650:	00c00044 	movi	r3,1
1000b654:	10c00415 	stw	r3,16(r2)
          alpha_done = 1;
1000b658:	00800044 	movi	r2,1
1000b65c:	e0bfd915 	stw	r2,-156(fp)
          if(profile->bits < 8) profile->bits = 8; /*PNG has no alphachannel modes with less than 8-bit per channel*/
1000b660:	e0bffc17 	ldw	r2,-16(fp)
1000b664:	10810617 	ldw	r2,1048(r2)
1000b668:	10800228 	cmpgeui	r2,r2,8
1000b66c:	1000031e 	bne	r2,zero,1000b67c <lodepng_get_color_profile+0x6bc>
1000b670:	e0bffc17 	ldw	r2,-16(fp)
1000b674:	00c00204 	movi	r3,8
1000b678:	10c10615 	stw	r3,1048(r2)
        }
      }

      if(!numcolors_done)
1000b67c:	e0bfda17 	ldw	r2,-152(fp)
1000b680:	1000521e 	bne	r2,zero,1000b7cc <lodepng_get_color_profile+0x80c>
      {
        if(!color_tree_has(&tree, r, g, b, a))
1000b684:	e0bffb03 	ldbu	r2,-20(fp)
1000b688:	11403fcc 	andi	r5,r2,255
1000b68c:	e0bffb43 	ldbu	r2,-19(fp)
1000b690:	10c03fcc 	andi	r3,r2,255
1000b694:	e0bffb83 	ldbu	r2,-18(fp)
1000b698:	10803fcc 	andi	r2,r2,255
1000b69c:	e13ffbc3 	ldbu	r4,-17(fp)
1000b6a0:	21803fcc 	andi	r6,r4,255
1000b6a4:	e13fe604 	addi	r4,fp,-104
1000b6a8:	d9800015 	stw	r6,0(sp)
1000b6ac:	180d883a 	mov	r6,r3
1000b6b0:	100f883a 	mov	r7,r2
1000b6b4:	00087c00 	call	100087c0 <color_tree_has>
1000b6b8:	1000441e 	bne	r2,zero,1000b7cc <lodepng_get_color_profile+0x80c>
        {
          color_tree_add(&tree, r, g, b, a, profile->numcolors);
1000b6bc:	e0bffb03 	ldbu	r2,-20(fp)
1000b6c0:	11403fcc 	andi	r5,r2,255
1000b6c4:	e0bffb43 	ldbu	r2,-19(fp)
1000b6c8:	10c03fcc 	andi	r3,r2,255
1000b6cc:	e0bffb83 	ldbu	r2,-18(fp)
1000b6d0:	10803fcc 	andi	r2,r2,255
1000b6d4:	e13ffbc3 	ldbu	r4,-17(fp)
1000b6d8:	21c03fcc 	andi	r7,r4,255
1000b6dc:	e13ffc17 	ldw	r4,-16(fp)
1000b6e0:	21800517 	ldw	r6,20(r4)
1000b6e4:	e13fe604 	addi	r4,fp,-104
1000b6e8:	d9c00015 	stw	r7,0(sp)
1000b6ec:	d9800115 	stw	r6,4(sp)
1000b6f0:	180d883a 	mov	r6,r3
1000b6f4:	100f883a 	mov	r7,r2
1000b6f8:	00088380 	call	10008838 <color_tree_add>
          if(profile->numcolors < 256)
1000b6fc:	e0bffc17 	ldw	r2,-16(fp)
1000b700:	10800517 	ldw	r2,20(r2)
1000b704:	10804028 	cmpgeui	r2,r2,256
1000b708:	1000251e 	bne	r2,zero,1000b7a0 <lodepng_get_color_profile+0x7e0>
          {
            unsigned char* p = profile->palette;
1000b70c:	e0bffc17 	ldw	r2,-16(fp)
1000b710:	10800604 	addi	r2,r2,24
1000b714:	e0bfe415 	stw	r2,-112(fp)
            unsigned n = profile->numcolors;
1000b718:	e0bffc17 	ldw	r2,-16(fp)
1000b71c:	10800517 	ldw	r2,20(r2)
1000b720:	e0bfe515 	stw	r2,-108(fp)
            p[n * 4 + 0] = r;
1000b724:	e0bfe517 	ldw	r2,-108(fp)
1000b728:	1085883a 	add	r2,r2,r2
1000b72c:	1085883a 	add	r2,r2,r2
1000b730:	e0ffe417 	ldw	r3,-112(fp)
1000b734:	1885883a 	add	r2,r3,r2
1000b738:	e0fffb03 	ldbu	r3,-20(fp)
1000b73c:	10c00005 	stb	r3,0(r2)
            p[n * 4 + 1] = g;
1000b740:	e0bfe517 	ldw	r2,-108(fp)
1000b744:	1085883a 	add	r2,r2,r2
1000b748:	1085883a 	add	r2,r2,r2
1000b74c:	10800044 	addi	r2,r2,1
1000b750:	e0ffe417 	ldw	r3,-112(fp)
1000b754:	1885883a 	add	r2,r3,r2
1000b758:	e0fffb43 	ldbu	r3,-19(fp)
1000b75c:	10c00005 	stb	r3,0(r2)
            p[n * 4 + 2] = b;
1000b760:	e0bfe517 	ldw	r2,-108(fp)
1000b764:	1085883a 	add	r2,r2,r2
1000b768:	1085883a 	add	r2,r2,r2
1000b76c:	10800084 	addi	r2,r2,2
1000b770:	e0ffe417 	ldw	r3,-112(fp)
1000b774:	1885883a 	add	r2,r3,r2
1000b778:	e0fffb83 	ldbu	r3,-18(fp)
1000b77c:	10c00005 	stb	r3,0(r2)
            p[n * 4 + 3] = a;
1000b780:	e0bfe517 	ldw	r2,-108(fp)
1000b784:	1085883a 	add	r2,r2,r2
1000b788:	1085883a 	add	r2,r2,r2
1000b78c:	108000c4 	addi	r2,r2,3
1000b790:	e0ffe417 	ldw	r3,-112(fp)
1000b794:	1885883a 	add	r2,r3,r2
1000b798:	e0fffbc3 	ldbu	r3,-17(fp)
1000b79c:	10c00005 	stb	r3,0(r2)
          }
          ++profile->numcolors;
1000b7a0:	e0bffc17 	ldw	r2,-16(fp)
1000b7a4:	10800517 	ldw	r2,20(r2)
1000b7a8:	10c00044 	addi	r3,r2,1
1000b7ac:	e0bffc17 	ldw	r2,-16(fp)
1000b7b0:	10c00515 	stw	r3,20(r2)
          numcolors_done = profile->numcolors >= maxnumcolors;
1000b7b4:	e0bffc17 	ldw	r2,-16(fp)
1000b7b8:	10c00517 	ldw	r3,20(r2)
1000b7bc:	e0bfdc17 	ldw	r2,-144(fp)
1000b7c0:	1885403a 	cmpgeu	r2,r3,r2
1000b7c4:	10803fcc 	andi	r2,r2,255
1000b7c8:	e0bfda15 	stw	r2,-152(fp)
        }
      }

      if(alpha_done && numcolors_done && colored_done && bits_done) break;
1000b7cc:	e0bfd917 	ldw	r2,-156(fp)
1000b7d0:	10000626 	beq	r2,zero,1000b7ec <lodepng_get_color_profile+0x82c>
1000b7d4:	e0bfda17 	ldw	r2,-152(fp)
1000b7d8:	10000426 	beq	r2,zero,1000b7ec <lodepng_get_color_profile+0x82c>
1000b7dc:	e0bfd817 	ldw	r2,-160(fp)
1000b7e0:	10000226 	beq	r2,zero,1000b7ec <lodepng_get_color_profile+0x82c>
1000b7e4:	e0bfdb17 	ldw	r2,-148(fp)
1000b7e8:	1000061e 	bne	r2,zero,1000b804 <lodepng_get_color_profile+0x844>
      if(alpha_done && numcolors_done && colored_done && bits_done) break;
    }
  }
  else /* < 16-bit */
  {
    for(i = 0; i != numpixels; ++i)
1000b7ec:	e0bfd717 	ldw	r2,-164(fp)
1000b7f0:	10800044 	addi	r2,r2,1
1000b7f4:	e0bfd715 	stw	r2,-164(fp)
1000b7f8:	e0ffd717 	ldw	r3,-164(fp)
1000b7fc:	e0bfdf17 	ldw	r2,-132(fp)
1000b800:	18befb1e 	bne	r3,r2,1000b3f0 <__alt_data_end+0xf800b3f0>

      if(alpha_done && numcolors_done && colored_done && bits_done) break;
    }

    /*make the profile's key always 16-bit for consistency - repeat each byte twice*/
    profile->key_r += (profile->key_r << 8);
1000b804:	e0bffc17 	ldw	r2,-16(fp)
1000b808:	10c0020b 	ldhu	r3,8(r2)
1000b80c:	e0bffc17 	ldw	r2,-16(fp)
1000b810:	1080020b 	ldhu	r2,8(r2)
1000b814:	1004923a 	slli	r2,r2,8
1000b818:	1885883a 	add	r2,r3,r2
1000b81c:	1007883a 	mov	r3,r2
1000b820:	e0bffc17 	ldw	r2,-16(fp)
1000b824:	10c0020d 	sth	r3,8(r2)
    profile->key_g += (profile->key_g << 8);
1000b828:	e0bffc17 	ldw	r2,-16(fp)
1000b82c:	10c0028b 	ldhu	r3,10(r2)
1000b830:	e0bffc17 	ldw	r2,-16(fp)
1000b834:	1080028b 	ldhu	r2,10(r2)
1000b838:	1004923a 	slli	r2,r2,8
1000b83c:	1885883a 	add	r2,r3,r2
1000b840:	1007883a 	mov	r3,r2
1000b844:	e0bffc17 	ldw	r2,-16(fp)
1000b848:	10c0028d 	sth	r3,10(r2)
    profile->key_b += (profile->key_b << 8);
1000b84c:	e0bffc17 	ldw	r2,-16(fp)
1000b850:	10c0030b 	ldhu	r3,12(r2)
1000b854:	e0bffc17 	ldw	r2,-16(fp)
1000b858:	1080030b 	ldhu	r2,12(r2)
1000b85c:	1004923a 	slli	r2,r2,8
1000b860:	1885883a 	add	r2,r3,r2
1000b864:	1007883a 	mov	r3,r2
1000b868:	e0bffc17 	ldw	r2,-16(fp)
1000b86c:	10c0030d 	sth	r3,12(r2)
1000b870:	00000106 	br	1000b878 <lodepng_get_color_profile+0x8b8>
          profile->alpha = 1;
          alpha_done = 1;
        }
      }

      if(alpha_done && numcolors_done && colored_done && bits_done) break;
1000b874:	0001883a 	nop
    profile->key_r += (profile->key_r << 8);
    profile->key_g += (profile->key_g << 8);
    profile->key_b += (profile->key_b << 8);
  }

  color_tree_cleanup(&tree);
1000b878:	e0bfe604 	addi	r2,fp,-104
1000b87c:	1009883a 	mov	r4,r2
1000b880:	00085f80 	call	100085f8 <color_tree_cleanup>
  return error;
1000b884:	e0bfde17 	ldw	r2,-136(fp)
}
1000b888:	e037883a 	mov	sp,fp
1000b88c:	dfc00117 	ldw	ra,4(sp)
1000b890:	df000017 	ldw	fp,0(sp)
1000b894:	dec00204 	addi	sp,sp,8
1000b898:	f800283a 	ret

1000b89c <lodepng_auto_choose_color>:
Updates values of mode with a potentially smaller color model. mode_out should
contain the user chosen color model, but will be overwritten with the new chosen one.*/
unsigned lodepng_auto_choose_color(LodePNGColorMode* mode_out,
                                   const unsigned char* image, unsigned w, unsigned h,
                                   const LodePNGColorMode* mode_in)
{
1000b89c:	defee904 	addi	sp,sp,-1116
1000b8a0:	dfc11615 	stw	ra,1112(sp)
1000b8a4:	df011515 	stw	fp,1108(sp)
1000b8a8:	dc011415 	stw	r16,1104(sp)
1000b8ac:	df011404 	addi	fp,sp,1104
1000b8b0:	e13ffc15 	stw	r4,-16(fp)
1000b8b4:	e17ffd15 	stw	r5,-12(fp)
1000b8b8:	e1bffe15 	stw	r6,-8(fp)
1000b8bc:	e1ffff15 	stw	r7,-4(fp)
  LodePNGColorProfile prof;
  unsigned error = 0;
1000b8c0:	e03eed15 	stw	zero,-1100(fp)
  unsigned i, n, palettebits, grey_ok, palette_ok;

  lodepng_color_profile_init(&prof);
1000b8c4:	e0bef504 	addi	r2,fp,-1068
1000b8c8:	1009883a 	mov	r4,r2
1000b8cc:	000aec00 	call	1000aec0 <lodepng_color_profile_init>
  error = lodepng_get_color_profile(&prof, image, w, h, mode_in);
1000b8d0:	e0bef504 	addi	r2,fp,-1068
1000b8d4:	e0c00317 	ldw	r3,12(fp)
1000b8d8:	d8c00015 	stw	r3,0(sp)
1000b8dc:	1009883a 	mov	r4,r2
1000b8e0:	e17ffd17 	ldw	r5,-12(fp)
1000b8e4:	e1bffe17 	ldw	r6,-8(fp)
1000b8e8:	e1ffff17 	ldw	r7,-4(fp)
1000b8ec:	000afc00 	call	1000afc0 <lodepng_get_color_profile>
1000b8f0:	e0beed15 	stw	r2,-1100(fp)
  if(error) return error;
1000b8f4:	e0beed17 	ldw	r2,-1100(fp)
1000b8f8:	10000226 	beq	r2,zero,1000b904 <lodepng_auto_choose_color+0x68>
1000b8fc:	e0beed17 	ldw	r2,-1100(fp)
1000b900:	0000cd06 	br	1000bc38 <lodepng_auto_choose_color+0x39c>
  mode_out->key_defined = 0;
1000b904:	e0bffc17 	ldw	r2,-16(fp)
1000b908:	10000415 	stw	zero,16(r2)

  if(prof.key && w * h <= 16)
1000b90c:	e0bef617 	ldw	r2,-1064(fp)
1000b910:	10000c26 	beq	r2,zero,1000b944 <lodepng_auto_choose_color+0xa8>
1000b914:	e13ffe17 	ldw	r4,-8(fp)
1000b918:	e17fff17 	ldw	r5,-4(fp)
1000b91c:	00146fc0 	call	100146fc <__mulsi3>
1000b920:	10800468 	cmpgeui	r2,r2,17
1000b924:	1000071e 	bne	r2,zero,1000b944 <lodepng_auto_choose_color+0xa8>
  {
    prof.alpha = 1; /*too few pixels to justify tRNS chunk overhead*/
1000b928:	00800044 	movi	r2,1
1000b92c:	e0bef915 	stw	r2,-1052(fp)
    if(prof.bits < 8) prof.bits = 8; /*PNG has no alphachannel modes with less than 8-bit per channel*/
1000b930:	e0bffb17 	ldw	r2,-20(fp)
1000b934:	10800228 	cmpgeui	r2,r2,8
1000b938:	1000021e 	bne	r2,zero,1000b944 <lodepng_auto_choose_color+0xa8>
1000b93c:	00800204 	movi	r2,8
1000b940:	e0bffb15 	stw	r2,-20(fp)
  }
  grey_ok = !prof.colored && !prof.alpha; /*grey without alpha, with potentially low bits*/
1000b944:	e0bef517 	ldw	r2,-1068(fp)
1000b948:	1000041e 	bne	r2,zero,1000b95c <lodepng_auto_choose_color+0xc0>
1000b94c:	e0bef917 	ldw	r2,-1052(fp)
1000b950:	1000021e 	bne	r2,zero,1000b95c <lodepng_auto_choose_color+0xc0>
1000b954:	00800044 	movi	r2,1
1000b958:	00000106 	br	1000b960 <lodepng_auto_choose_color+0xc4>
1000b95c:	0005883a 	mov	r2,zero
1000b960:	e0bef015 	stw	r2,-1088(fp)
  n = prof.numcolors;
1000b964:	e0befa17 	ldw	r2,-1048(fp)
1000b968:	e0bef115 	stw	r2,-1084(fp)
  palettebits = n <= 2 ? 1 : (n <= 4 ? 2 : (n <= 16 ? 4 : 8));
1000b96c:	e0bef117 	ldw	r2,-1084(fp)
1000b970:	108000f0 	cmpltui	r2,r2,3
1000b974:	10000c1e 	bne	r2,zero,1000b9a8 <lodepng_auto_choose_color+0x10c>
1000b978:	e0bef117 	ldw	r2,-1084(fp)
1000b97c:	10800170 	cmpltui	r2,r2,5
1000b980:	1000071e 	bne	r2,zero,1000b9a0 <lodepng_auto_choose_color+0x104>
1000b984:	e0bef117 	ldw	r2,-1084(fp)
1000b988:	10800468 	cmpgeui	r2,r2,17
1000b98c:	1000021e 	bne	r2,zero,1000b998 <lodepng_auto_choose_color+0xfc>
1000b990:	00800104 	movi	r2,4
1000b994:	00000106 	br	1000b99c <lodepng_auto_choose_color+0x100>
1000b998:	00800204 	movi	r2,8
1000b99c:	00000106 	br	1000b9a4 <lodepng_auto_choose_color+0x108>
1000b9a0:	00800084 	movi	r2,2
1000b9a4:	00000106 	br	1000b9ac <lodepng_auto_choose_color+0x110>
1000b9a8:	00800044 	movi	r2,1
1000b9ac:	e0bef215 	stw	r2,-1080(fp)
  palette_ok = n <= 256 && (n * 2 < w * h) && prof.bits <= 8;
1000b9b0:	e0bef117 	ldw	r2,-1084(fp)
1000b9b4:	10804068 	cmpgeui	r2,r2,257
1000b9b8:	10000c1e 	bne	r2,zero,1000b9ec <lodepng_auto_choose_color+0x150>
1000b9bc:	e0bef117 	ldw	r2,-1084(fp)
1000b9c0:	1085883a 	add	r2,r2,r2
1000b9c4:	1021883a 	mov	r16,r2
1000b9c8:	e13ffe17 	ldw	r4,-8(fp)
1000b9cc:	e17fff17 	ldw	r5,-4(fp)
1000b9d0:	00146fc0 	call	100146fc <__mulsi3>
1000b9d4:	8080052e 	bgeu	r16,r2,1000b9ec <lodepng_auto_choose_color+0x150>
1000b9d8:	e0bffb17 	ldw	r2,-20(fp)
1000b9dc:	10800268 	cmpgeui	r2,r2,9
1000b9e0:	1000021e 	bne	r2,zero,1000b9ec <lodepng_auto_choose_color+0x150>
1000b9e4:	00800044 	movi	r2,1
1000b9e8:	00000106 	br	1000b9f0 <lodepng_auto_choose_color+0x154>
1000b9ec:	0005883a 	mov	r2,zero
1000b9f0:	e0beef15 	stw	r2,-1092(fp)
  if(w * h < n * 2) palette_ok = 0; /*don't add palette overhead if image has only a few pixels*/
1000b9f4:	e13ffe17 	ldw	r4,-8(fp)
1000b9f8:	e17fff17 	ldw	r5,-4(fp)
1000b9fc:	00146fc0 	call	100146fc <__mulsi3>
1000ba00:	1007883a 	mov	r3,r2
1000ba04:	e0bef117 	ldw	r2,-1084(fp)
1000ba08:	1085883a 	add	r2,r2,r2
1000ba0c:	1880012e 	bgeu	r3,r2,1000ba14 <lodepng_auto_choose_color+0x178>
1000ba10:	e03eef15 	stw	zero,-1092(fp)
  if(grey_ok && prof.bits <= palettebits) palette_ok = 0; /*grey is less overhead*/
1000ba14:	e0bef017 	ldw	r2,-1088(fp)
1000ba18:	10000426 	beq	r2,zero,1000ba2c <lodepng_auto_choose_color+0x190>
1000ba1c:	e0bffb17 	ldw	r2,-20(fp)
1000ba20:	e0fef217 	ldw	r3,-1080(fp)
1000ba24:	18800136 	bltu	r3,r2,1000ba2c <lodepng_auto_choose_color+0x190>
1000ba28:	e03eef15 	stw	zero,-1092(fp)

  if(palette_ok)
1000ba2c:	e0beef17 	ldw	r2,-1092(fp)
1000ba30:	10004f26 	beq	r2,zero,1000bb70 <lodepng_auto_choose_color+0x2d4>
  {
    unsigned char* p = prof.palette;
1000ba34:	e0bef504 	addi	r2,fp,-1068
1000ba38:	10800604 	addi	r2,r2,24
1000ba3c:	e0bef315 	stw	r2,-1076(fp)
    lodepng_palette_clear(mode_out); /*remove potential earlier palette*/
1000ba40:	e13ffc17 	ldw	r4,-16(fp)
1000ba44:	00071e80 	call	100071e8 <lodepng_palette_clear>
    for(i = 0; i != prof.numcolors; ++i)
1000ba48:	e03eee15 	stw	zero,-1096(fp)
1000ba4c:	00002906 	br	1000baf4 <lodepng_auto_choose_color+0x258>
    {
      error = lodepng_palette_add(mode_out, p[i * 4 + 0], p[i * 4 + 1], p[i * 4 + 2], p[i * 4 + 3]);
1000ba50:	e0beee17 	ldw	r2,-1096(fp)
1000ba54:	1085883a 	add	r2,r2,r2
1000ba58:	1085883a 	add	r2,r2,r2
1000ba5c:	e0fef317 	ldw	r3,-1076(fp)
1000ba60:	1885883a 	add	r2,r3,r2
1000ba64:	10800003 	ldbu	r2,0(r2)
1000ba68:	11403fcc 	andi	r5,r2,255
1000ba6c:	e0beee17 	ldw	r2,-1096(fp)
1000ba70:	1085883a 	add	r2,r2,r2
1000ba74:	1085883a 	add	r2,r2,r2
1000ba78:	10800044 	addi	r2,r2,1
1000ba7c:	e0fef317 	ldw	r3,-1076(fp)
1000ba80:	1885883a 	add	r2,r3,r2
1000ba84:	10800003 	ldbu	r2,0(r2)
1000ba88:	11803fcc 	andi	r6,r2,255
1000ba8c:	e0beee17 	ldw	r2,-1096(fp)
1000ba90:	1085883a 	add	r2,r2,r2
1000ba94:	1085883a 	add	r2,r2,r2
1000ba98:	10800084 	addi	r2,r2,2
1000ba9c:	e0fef317 	ldw	r3,-1076(fp)
1000baa0:	1885883a 	add	r2,r3,r2
1000baa4:	10800003 	ldbu	r2,0(r2)
1000baa8:	10c03fcc 	andi	r3,r2,255
1000baac:	e0beee17 	ldw	r2,-1096(fp)
1000bab0:	1085883a 	add	r2,r2,r2
1000bab4:	1085883a 	add	r2,r2,r2
1000bab8:	108000c4 	addi	r2,r2,3
1000babc:	e13ef317 	ldw	r4,-1076(fp)
1000bac0:	2085883a 	add	r2,r4,r2
1000bac4:	10800003 	ldbu	r2,0(r2)
1000bac8:	10803fcc 	andi	r2,r2,255
1000bacc:	d8800015 	stw	r2,0(sp)
1000bad0:	e13ffc17 	ldw	r4,-16(fp)
1000bad4:	180f883a 	mov	r7,r3
1000bad8:	000723c0 	call	1000723c <lodepng_palette_add>
1000badc:	e0beed15 	stw	r2,-1100(fp)
      if(error) break;
1000bae0:	e0beed17 	ldw	r2,-1100(fp)
1000bae4:	1000071e 	bne	r2,zero,1000bb04 <lodepng_auto_choose_color+0x268>

  if(palette_ok)
  {
    unsigned char* p = prof.palette;
    lodepng_palette_clear(mode_out); /*remove potential earlier palette*/
    for(i = 0; i != prof.numcolors; ++i)
1000bae8:	e0beee17 	ldw	r2,-1096(fp)
1000baec:	10800044 	addi	r2,r2,1
1000baf0:	e0beee15 	stw	r2,-1096(fp)
1000baf4:	e0fefa17 	ldw	r3,-1048(fp)
1000baf8:	e0beee17 	ldw	r2,-1096(fp)
1000bafc:	18bfd41e 	bne	r3,r2,1000ba50 <__alt_data_end+0xf800ba50>
1000bb00:	00000106 	br	1000bb08 <lodepng_auto_choose_color+0x26c>
    {
      error = lodepng_palette_add(mode_out, p[i * 4 + 0], p[i * 4 + 1], p[i * 4 + 2], p[i * 4 + 3]);
      if(error) break;
1000bb04:	0001883a 	nop
    }

    mode_out->colortype = LCT_PALETTE;
1000bb08:	e0bffc17 	ldw	r2,-16(fp)
1000bb0c:	00c000c4 	movi	r3,3
1000bb10:	10c00015 	stw	r3,0(r2)
    mode_out->bitdepth = palettebits;
1000bb14:	e0bffc17 	ldw	r2,-16(fp)
1000bb18:	e0fef217 	ldw	r3,-1080(fp)
1000bb1c:	10c00115 	stw	r3,4(r2)

    if(mode_in->colortype == LCT_PALETTE && mode_in->palettesize >= mode_out->palettesize
1000bb20:	e0800317 	ldw	r2,12(fp)
1000bb24:	10800017 	ldw	r2,0(r2)
1000bb28:	108000d8 	cmpnei	r2,r2,3
1000bb2c:	1000411e 	bne	r2,zero,1000bc34 <lodepng_auto_choose_color+0x398>
1000bb30:	e0800317 	ldw	r2,12(fp)
1000bb34:	10c00317 	ldw	r3,12(r2)
1000bb38:	e0bffc17 	ldw	r2,-16(fp)
1000bb3c:	10800317 	ldw	r2,12(r2)
1000bb40:	18803c36 	bltu	r3,r2,1000bc34 <lodepng_auto_choose_color+0x398>
        && mode_in->bitdepth == mode_out->bitdepth)
1000bb44:	e0800317 	ldw	r2,12(fp)
1000bb48:	10c00117 	ldw	r3,4(r2)
1000bb4c:	e0bffc17 	ldw	r2,-16(fp)
1000bb50:	10800117 	ldw	r2,4(r2)
1000bb54:	1880371e 	bne	r3,r2,1000bc34 <lodepng_auto_choose_color+0x398>
    {
      /*If input should have same palette colors, keep original to preserve its order and prevent conversion*/
      lodepng_color_mode_cleanup(mode_out);
1000bb58:	e13ffc17 	ldw	r4,-16(fp)
1000bb5c:	0006f400 	call	10006f40 <lodepng_color_mode_cleanup>
      lodepng_color_mode_copy(mode_out, mode_in);
1000bb60:	e13ffc17 	ldw	r4,-16(fp)
1000bb64:	e1400317 	ldw	r5,12(fp)
1000bb68:	0006f700 	call	10006f70 <lodepng_color_mode_copy>
1000bb6c:	00003106 	br	1000bc34 <lodepng_auto_choose_color+0x398>
    }
  }
  else /*8-bit or 16-bit per channel*/
  {
    mode_out->bitdepth = prof.bits;
1000bb70:	e0fffb17 	ldw	r3,-20(fp)
1000bb74:	e0bffc17 	ldw	r2,-16(fp)
1000bb78:	10c00115 	stw	r3,4(r2)
    mode_out->colortype = prof.alpha ? (prof.colored ? LCT_RGBA : LCT_GREY_ALPHA)
1000bb7c:	e0bef917 	ldw	r2,-1052(fp)
1000bb80:	10000626 	beq	r2,zero,1000bb9c <lodepng_auto_choose_color+0x300>
1000bb84:	e0bef517 	ldw	r2,-1068(fp)
1000bb88:	10000226 	beq	r2,zero,1000bb94 <lodepng_auto_choose_color+0x2f8>
1000bb8c:	00800184 	movi	r2,6
1000bb90:	00000106 	br	1000bb98 <lodepng_auto_choose_color+0x2fc>
1000bb94:	00800104 	movi	r2,4
1000bb98:	00000506 	br	1000bbb0 <lodepng_auto_choose_color+0x314>
                                     : (prof.colored ? LCT_RGB : LCT_GREY);
1000bb9c:	e0bef517 	ldw	r2,-1068(fp)
    }
  }
  else /*8-bit or 16-bit per channel*/
  {
    mode_out->bitdepth = prof.bits;
    mode_out->colortype = prof.alpha ? (prof.colored ? LCT_RGBA : LCT_GREY_ALPHA)
1000bba0:	10000226 	beq	r2,zero,1000bbac <lodepng_auto_choose_color+0x310>
1000bba4:	00800084 	movi	r2,2
1000bba8:	00000106 	br	1000bbb0 <lodepng_auto_choose_color+0x314>
1000bbac:	0005883a 	mov	r2,zero
1000bbb0:	e0fffc17 	ldw	r3,-16(fp)
1000bbb4:	18800015 	stw	r2,0(r3)
                                     : (prof.colored ? LCT_RGB : LCT_GREY);

    if(prof.key && !prof.alpha)
1000bbb8:	e0bef617 	ldw	r2,-1064(fp)
1000bbbc:	10001d26 	beq	r2,zero,1000bc34 <lodepng_auto_choose_color+0x398>
1000bbc0:	e0bef917 	ldw	r2,-1052(fp)
1000bbc4:	10001b1e 	bne	r2,zero,1000bc34 <lodepng_auto_choose_color+0x398>
    {
      unsigned mask = (1u << mode_out->bitdepth) - 1u; /*profile always uses 16-bit, mask converts it*/
1000bbc8:	e0bffc17 	ldw	r2,-16(fp)
1000bbcc:	10800117 	ldw	r2,4(r2)
1000bbd0:	00c00044 	movi	r3,1
1000bbd4:	1884983a 	sll	r2,r3,r2
1000bbd8:	10bfffc4 	addi	r2,r2,-1
1000bbdc:	e0bef415 	stw	r2,-1072(fp)
      mode_out->key_r = prof.key_r & mask;
1000bbe0:	e0bef70b 	ldhu	r2,-1060(fp)
1000bbe4:	10ffffcc 	andi	r3,r2,65535
1000bbe8:	e0bef417 	ldw	r2,-1072(fp)
1000bbec:	1886703a 	and	r3,r3,r2
1000bbf0:	e0bffc17 	ldw	r2,-16(fp)
1000bbf4:	10c00515 	stw	r3,20(r2)
      mode_out->key_g = prof.key_g & mask;
1000bbf8:	e0bef78b 	ldhu	r2,-1058(fp)
1000bbfc:	10ffffcc 	andi	r3,r2,65535
1000bc00:	e0bef417 	ldw	r2,-1072(fp)
1000bc04:	1886703a 	and	r3,r3,r2
1000bc08:	e0bffc17 	ldw	r2,-16(fp)
1000bc0c:	10c00615 	stw	r3,24(r2)
      mode_out->key_b = prof.key_b & mask;
1000bc10:	e0bef80b 	ldhu	r2,-1056(fp)
1000bc14:	10ffffcc 	andi	r3,r2,65535
1000bc18:	e0bef417 	ldw	r2,-1072(fp)
1000bc1c:	1886703a 	and	r3,r3,r2
1000bc20:	e0bffc17 	ldw	r2,-16(fp)
1000bc24:	10c00715 	stw	r3,28(r2)
      mode_out->key_defined = 1;
1000bc28:	e0bffc17 	ldw	r2,-16(fp)
1000bc2c:	00c00044 	movi	r3,1
1000bc30:	10c00415 	stw	r3,16(r2)
    }
  }

  return error;
1000bc34:	e0beed17 	ldw	r2,-1100(fp)
}
1000bc38:	e037883a 	mov	sp,fp
1000bc3c:	dfc00217 	ldw	ra,8(sp)
1000bc40:	df000117 	ldw	fp,4(sp)
1000bc44:	dc000017 	ldw	r16,0(sp)
1000bc48:	dec00304 	addi	sp,sp,12
1000bc4c:	f800283a 	ret

1000bc50 <paethPredictor>:
Paeth predicter, used by PNG filter type 4
The parameters are of type short, but should come from unsigned chars, the shorts
are only needed to make the paeth calculation correct.
*/
static unsigned char paethPredictor(short a, short b, short c)
{
1000bc50:	defffa04 	addi	sp,sp,-24
1000bc54:	df000515 	stw	fp,20(sp)
1000bc58:	df000504 	addi	fp,sp,20
1000bc5c:	2807883a 	mov	r3,r5
1000bc60:	3005883a 	mov	r2,r6
1000bc64:	e13ffd0d 	sth	r4,-12(fp)
1000bc68:	e0fffe0d 	sth	r3,-8(fp)
1000bc6c:	e0bfff0d 	sth	r2,-4(fp)
  short pa = abs(b - c);
1000bc70:	e0fffe0f 	ldh	r3,-8(fp)
1000bc74:	e0bfff0f 	ldh	r2,-4(fp)
1000bc78:	1885c83a 	sub	r2,r3,r2
1000bc7c:	1000010e 	bge	r2,zero,1000bc84 <paethPredictor+0x34>
1000bc80:	0085c83a 	sub	r2,zero,r2
1000bc84:	e0bffb0d 	sth	r2,-20(fp)
  short pb = abs(a - c);
1000bc88:	e0fffd0f 	ldh	r3,-12(fp)
1000bc8c:	e0bfff0f 	ldh	r2,-4(fp)
1000bc90:	1885c83a 	sub	r2,r3,r2
1000bc94:	1000010e 	bge	r2,zero,1000bc9c <paethPredictor+0x4c>
1000bc98:	0085c83a 	sub	r2,zero,r2
1000bc9c:	e0bffb8d 	sth	r2,-18(fp)
  short pc = abs(a + b - c - c);
1000bca0:	e0fffd0f 	ldh	r3,-12(fp)
1000bca4:	e0bffe0f 	ldh	r2,-8(fp)
1000bca8:	1887883a 	add	r3,r3,r2
1000bcac:	e0bfff0f 	ldh	r2,-4(fp)
1000bcb0:	1887c83a 	sub	r3,r3,r2
1000bcb4:	e0bfff0f 	ldh	r2,-4(fp)
1000bcb8:	1885c83a 	sub	r2,r3,r2
1000bcbc:	1000010e 	bge	r2,zero,1000bcc4 <paethPredictor+0x74>
1000bcc0:	0085c83a 	sub	r2,zero,r2
1000bcc4:	e0bffc0d 	sth	r2,-16(fp)

  if(pc < pa && pc < pb) return (unsigned char)c;
1000bcc8:	e0fffc0f 	ldh	r3,-16(fp)
1000bccc:	e0bffb0f 	ldh	r2,-20(fp)
1000bcd0:	1880050e 	bge	r3,r2,1000bce8 <paethPredictor+0x98>
1000bcd4:	e0fffc0f 	ldh	r3,-16(fp)
1000bcd8:	e0bffb8f 	ldh	r2,-18(fp)
1000bcdc:	1880020e 	bge	r3,r2,1000bce8 <paethPredictor+0x98>
1000bce0:	e0bfff0b 	ldhu	r2,-4(fp)
1000bce4:	00000606 	br	1000bd00 <paethPredictor+0xb0>
  else if(pb < pa) return (unsigned char)b;
1000bce8:	e0fffb8f 	ldh	r3,-18(fp)
1000bcec:	e0bffb0f 	ldh	r2,-20(fp)
1000bcf0:	1880020e 	bge	r3,r2,1000bcfc <paethPredictor+0xac>
1000bcf4:	e0bffe0b 	ldhu	r2,-8(fp)
1000bcf8:	00000106 	br	1000bd00 <paethPredictor+0xb0>
  else return (unsigned char)a;
1000bcfc:	e0bffd0b 	ldhu	r2,-12(fp)
}
1000bd00:	e037883a 	mov	sp,fp
1000bd04:	df000017 	ldw	fp,0(sp)
1000bd08:	dec00104 	addi	sp,sp,4
1000bd0c:	f800283a 	ret

1000bd10 <Adam7_getpassvalues>:
"padded" is only relevant if bpp is less than 8 and a scanline or image does not
 end at a full byte
*/
static void Adam7_getpassvalues(unsigned passw[7], unsigned passh[7], size_t filter_passstart[8],
                                size_t padded_passstart[8], size_t passstart[8], unsigned w, unsigned h, unsigned bpp)
{
1000bd10:	defff604 	addi	sp,sp,-40
1000bd14:	dfc00915 	stw	ra,36(sp)
1000bd18:	df000815 	stw	fp,32(sp)
1000bd1c:	dc800715 	stw	r18,28(sp)
1000bd20:	dc400615 	stw	r17,24(sp)
1000bd24:	dc000515 	stw	r16,20(sp)
1000bd28:	df000504 	addi	fp,sp,20
1000bd2c:	e13ffc15 	stw	r4,-16(fp)
1000bd30:	e17ffd15 	stw	r5,-12(fp)
1000bd34:	e1bffe15 	stw	r6,-8(fp)
1000bd38:	e1ffff15 	stw	r7,-4(fp)
  /*the passstart values have 8 values: the 8th one indicates the byte after the end of the 7th (= last) pass*/
  unsigned i;

  /*calculate width and height in pixels of each pass*/
  for(i = 0; i != 7; ++i)
1000bd3c:	e03ffb15 	stw	zero,-20(fp)
1000bd40:	00006106 	br	1000bec8 <Adam7_getpassvalues+0x1b8>
  {
    passw[i] = (w + ADAM7_DX[i] - ADAM7_IX[i] - 1) / ADAM7_DX[i];
1000bd44:	e0bffb17 	ldw	r2,-20(fp)
1000bd48:	1085883a 	add	r2,r2,r2
1000bd4c:	1085883a 	add	r2,r2,r2
1000bd50:	e0fffc17 	ldw	r3,-16(fp)
1000bd54:	18a1883a 	add	r16,r3,r2
1000bd58:	00c400b4 	movhi	r3,4098
1000bd5c:	18ca7b04 	addi	r3,r3,10732
1000bd60:	e0bffb17 	ldw	r2,-20(fp)
1000bd64:	1085883a 	add	r2,r2,r2
1000bd68:	1085883a 	add	r2,r2,r2
1000bd6c:	1885883a 	add	r2,r3,r2
1000bd70:	10c00017 	ldw	r3,0(r2)
1000bd74:	e0800617 	ldw	r2,24(fp)
1000bd78:	1887883a 	add	r3,r3,r2
1000bd7c:	010400b4 	movhi	r4,4098
1000bd80:	210a6d04 	addi	r4,r4,10676
1000bd84:	e0bffb17 	ldw	r2,-20(fp)
1000bd88:	1085883a 	add	r2,r2,r2
1000bd8c:	1085883a 	add	r2,r2,r2
1000bd90:	2085883a 	add	r2,r4,r2
1000bd94:	10800017 	ldw	r2,0(r2)
1000bd98:	1885c83a 	sub	r2,r3,r2
1000bd9c:	10ffffc4 	addi	r3,r2,-1
1000bda0:	010400b4 	movhi	r4,4098
1000bda4:	210a7b04 	addi	r4,r4,10732
1000bda8:	e0bffb17 	ldw	r2,-20(fp)
1000bdac:	1085883a 	add	r2,r2,r2
1000bdb0:	1085883a 	add	r2,r2,r2
1000bdb4:	2085883a 	add	r2,r4,r2
1000bdb8:	10800017 	ldw	r2,0(r2)
1000bdbc:	1809883a 	mov	r4,r3
1000bdc0:	100b883a 	mov	r5,r2
1000bdc4:	00146ec0 	call	100146ec <__udivsi3>
1000bdc8:	80800015 	stw	r2,0(r16)
    passh[i] = (h + ADAM7_DY[i] - ADAM7_IY[i] - 1) / ADAM7_DY[i];
1000bdcc:	e0bffb17 	ldw	r2,-20(fp)
1000bdd0:	1085883a 	add	r2,r2,r2
1000bdd4:	1085883a 	add	r2,r2,r2
1000bdd8:	e0fffd17 	ldw	r3,-12(fp)
1000bddc:	18a1883a 	add	r16,r3,r2
1000bde0:	00c400b4 	movhi	r3,4098
1000bde4:	18ca8204 	addi	r3,r3,10760
1000bde8:	e0bffb17 	ldw	r2,-20(fp)
1000bdec:	1085883a 	add	r2,r2,r2
1000bdf0:	1085883a 	add	r2,r2,r2
1000bdf4:	1885883a 	add	r2,r3,r2
1000bdf8:	10c00017 	ldw	r3,0(r2)
1000bdfc:	e0800717 	ldw	r2,28(fp)
1000be00:	1887883a 	add	r3,r3,r2
1000be04:	010400b4 	movhi	r4,4098
1000be08:	210a7404 	addi	r4,r4,10704
1000be0c:	e0bffb17 	ldw	r2,-20(fp)
1000be10:	1085883a 	add	r2,r2,r2
1000be14:	1085883a 	add	r2,r2,r2
1000be18:	2085883a 	add	r2,r4,r2
1000be1c:	10800017 	ldw	r2,0(r2)
1000be20:	1885c83a 	sub	r2,r3,r2
1000be24:	10ffffc4 	addi	r3,r2,-1
1000be28:	010400b4 	movhi	r4,4098
1000be2c:	210a8204 	addi	r4,r4,10760
1000be30:	e0bffb17 	ldw	r2,-20(fp)
1000be34:	1085883a 	add	r2,r2,r2
1000be38:	1085883a 	add	r2,r2,r2
1000be3c:	2085883a 	add	r2,r4,r2
1000be40:	10800017 	ldw	r2,0(r2)
1000be44:	1809883a 	mov	r4,r3
1000be48:	100b883a 	mov	r5,r2
1000be4c:	00146ec0 	call	100146ec <__udivsi3>
1000be50:	80800015 	stw	r2,0(r16)
    if(passw[i] == 0) passh[i] = 0;
1000be54:	e0bffb17 	ldw	r2,-20(fp)
1000be58:	1085883a 	add	r2,r2,r2
1000be5c:	1085883a 	add	r2,r2,r2
1000be60:	e0fffc17 	ldw	r3,-16(fp)
1000be64:	1885883a 	add	r2,r3,r2
1000be68:	10800017 	ldw	r2,0(r2)
1000be6c:	1000061e 	bne	r2,zero,1000be88 <Adam7_getpassvalues+0x178>
1000be70:	e0bffb17 	ldw	r2,-20(fp)
1000be74:	1085883a 	add	r2,r2,r2
1000be78:	1085883a 	add	r2,r2,r2
1000be7c:	e0fffd17 	ldw	r3,-12(fp)
1000be80:	1885883a 	add	r2,r3,r2
1000be84:	10000015 	stw	zero,0(r2)
    if(passh[i] == 0) passw[i] = 0;
1000be88:	e0bffb17 	ldw	r2,-20(fp)
1000be8c:	1085883a 	add	r2,r2,r2
1000be90:	1085883a 	add	r2,r2,r2
1000be94:	e0fffd17 	ldw	r3,-12(fp)
1000be98:	1885883a 	add	r2,r3,r2
1000be9c:	10800017 	ldw	r2,0(r2)
1000bea0:	1000061e 	bne	r2,zero,1000bebc <Adam7_getpassvalues+0x1ac>
1000bea4:	e0bffb17 	ldw	r2,-20(fp)
1000bea8:	1085883a 	add	r2,r2,r2
1000beac:	1085883a 	add	r2,r2,r2
1000beb0:	e0fffc17 	ldw	r3,-16(fp)
1000beb4:	1885883a 	add	r2,r3,r2
1000beb8:	10000015 	stw	zero,0(r2)
{
  /*the passstart values have 8 values: the 8th one indicates the byte after the end of the 7th (= last) pass*/
  unsigned i;

  /*calculate width and height in pixels of each pass*/
  for(i = 0; i != 7; ++i)
1000bebc:	e0bffb17 	ldw	r2,-20(fp)
1000bec0:	10800044 	addi	r2,r2,1
1000bec4:	e0bffb15 	stw	r2,-20(fp)
1000bec8:	e0bffb17 	ldw	r2,-20(fp)
1000becc:	108001d8 	cmpnei	r2,r2,7
1000bed0:	103f9c1e 	bne	r2,zero,1000bd44 <__alt_data_end+0xf800bd44>
    passh[i] = (h + ADAM7_DY[i] - ADAM7_IY[i] - 1) / ADAM7_DY[i];
    if(passw[i] == 0) passh[i] = 0;
    if(passh[i] == 0) passw[i] = 0;
  }

  filter_passstart[0] = padded_passstart[0] = passstart[0] = 0;
1000bed4:	e0800517 	ldw	r2,20(fp)
1000bed8:	10000015 	stw	zero,0(r2)
1000bedc:	e0800517 	ldw	r2,20(fp)
1000bee0:	10c00017 	ldw	r3,0(r2)
1000bee4:	e0bfff17 	ldw	r2,-4(fp)
1000bee8:	10c00015 	stw	r3,0(r2)
1000beec:	e0bfff17 	ldw	r2,-4(fp)
1000bef0:	10c00017 	ldw	r3,0(r2)
1000bef4:	e0bffe17 	ldw	r2,-8(fp)
1000bef8:	10c00015 	stw	r3,0(r2)
  for(i = 0; i != 7; ++i)
1000befc:	e03ffb15 	stw	zero,-20(fp)
1000bf00:	00007a06 	br	1000c0ec <Adam7_getpassvalues+0x3dc>
  {
    /*if passw[i] is 0, it's 0 bytes, not 1 (no filtertype-byte)*/
    filter_passstart[i + 1] = filter_passstart[i]
1000bf04:	e0bffb17 	ldw	r2,-20(fp)
1000bf08:	10800044 	addi	r2,r2,1
1000bf0c:	1085883a 	add	r2,r2,r2
1000bf10:	1085883a 	add	r2,r2,r2
1000bf14:	e0fffe17 	ldw	r3,-8(fp)
1000bf18:	18a3883a 	add	r17,r3,r2
1000bf1c:	e0bffb17 	ldw	r2,-20(fp)
1000bf20:	1085883a 	add	r2,r2,r2
1000bf24:	1085883a 	add	r2,r2,r2
1000bf28:	e0fffe17 	ldw	r3,-8(fp)
1000bf2c:	1885883a 	add	r2,r3,r2
1000bf30:	14800017 	ldw	r18,0(r2)
                            + ((passw[i] && passh[i]) ? passh[i] * (1 + (passw[i] * bpp + 7) / 8) : 0);
1000bf34:	e0bffb17 	ldw	r2,-20(fp)
1000bf38:	1085883a 	add	r2,r2,r2
1000bf3c:	1085883a 	add	r2,r2,r2
1000bf40:	e0fffc17 	ldw	r3,-16(fp)
1000bf44:	1885883a 	add	r2,r3,r2
1000bf48:	10800017 	ldw	r2,0(r2)
1000bf4c:	10001d26 	beq	r2,zero,1000bfc4 <Adam7_getpassvalues+0x2b4>
1000bf50:	e0bffb17 	ldw	r2,-20(fp)
1000bf54:	1085883a 	add	r2,r2,r2
1000bf58:	1085883a 	add	r2,r2,r2
1000bf5c:	e0fffd17 	ldw	r3,-12(fp)
1000bf60:	1885883a 	add	r2,r3,r2
1000bf64:	10800017 	ldw	r2,0(r2)
1000bf68:	10001626 	beq	r2,zero,1000bfc4 <Adam7_getpassvalues+0x2b4>
1000bf6c:	e0bffb17 	ldw	r2,-20(fp)
1000bf70:	1085883a 	add	r2,r2,r2
1000bf74:	1085883a 	add	r2,r2,r2
1000bf78:	e0fffd17 	ldw	r3,-12(fp)
1000bf7c:	1885883a 	add	r2,r3,r2
1000bf80:	14000017 	ldw	r16,0(r2)
1000bf84:	e0bffb17 	ldw	r2,-20(fp)
1000bf88:	1085883a 	add	r2,r2,r2
1000bf8c:	1085883a 	add	r2,r2,r2
1000bf90:	e0fffc17 	ldw	r3,-16(fp)
1000bf94:	1885883a 	add	r2,r3,r2
1000bf98:	10800017 	ldw	r2,0(r2)
1000bf9c:	1009883a 	mov	r4,r2
1000bfa0:	e1400817 	ldw	r5,32(fp)
1000bfa4:	00146fc0 	call	100146fc <__mulsi3>
1000bfa8:	108001c4 	addi	r2,r2,7
1000bfac:	1004d0fa 	srli	r2,r2,3
1000bfb0:	10800044 	addi	r2,r2,1
1000bfb4:	8009883a 	mov	r4,r16
1000bfb8:	100b883a 	mov	r5,r2
1000bfbc:	00146fc0 	call	100146fc <__mulsi3>
1000bfc0:	00000106 	br	1000bfc8 <Adam7_getpassvalues+0x2b8>
1000bfc4:	0005883a 	mov	r2,zero
1000bfc8:	9085883a 	add	r2,r18,r2

  filter_passstart[0] = padded_passstart[0] = passstart[0] = 0;
  for(i = 0; i != 7; ++i)
  {
    /*if passw[i] is 0, it's 0 bytes, not 1 (no filtertype-byte)*/
    filter_passstart[i + 1] = filter_passstart[i]
1000bfcc:	88800015 	stw	r2,0(r17)
                            + ((passw[i] && passh[i]) ? passh[i] * (1 + (passw[i] * bpp + 7) / 8) : 0);
    /*bits padded if needed to fill full byte at end of each scanline*/
    padded_passstart[i + 1] = padded_passstart[i] + passh[i] * ((passw[i] * bpp + 7) / 8);
1000bfd0:	e0bffb17 	ldw	r2,-20(fp)
1000bfd4:	10800044 	addi	r2,r2,1
1000bfd8:	1085883a 	add	r2,r2,r2
1000bfdc:	1085883a 	add	r2,r2,r2
1000bfe0:	e0ffff17 	ldw	r3,-4(fp)
1000bfe4:	18a3883a 	add	r17,r3,r2
1000bfe8:	e0bffb17 	ldw	r2,-20(fp)
1000bfec:	1085883a 	add	r2,r2,r2
1000bff0:	1085883a 	add	r2,r2,r2
1000bff4:	e0ffff17 	ldw	r3,-4(fp)
1000bff8:	1885883a 	add	r2,r3,r2
1000bffc:	14800017 	ldw	r18,0(r2)
1000c000:	e0bffb17 	ldw	r2,-20(fp)
1000c004:	1085883a 	add	r2,r2,r2
1000c008:	1085883a 	add	r2,r2,r2
1000c00c:	e0fffd17 	ldw	r3,-12(fp)
1000c010:	1885883a 	add	r2,r3,r2
1000c014:	14000017 	ldw	r16,0(r2)
1000c018:	e0bffb17 	ldw	r2,-20(fp)
1000c01c:	1085883a 	add	r2,r2,r2
1000c020:	1085883a 	add	r2,r2,r2
1000c024:	e0fffc17 	ldw	r3,-16(fp)
1000c028:	1885883a 	add	r2,r3,r2
1000c02c:	10800017 	ldw	r2,0(r2)
1000c030:	1009883a 	mov	r4,r2
1000c034:	e1400817 	ldw	r5,32(fp)
1000c038:	00146fc0 	call	100146fc <__mulsi3>
1000c03c:	108001c4 	addi	r2,r2,7
1000c040:	1004d0fa 	srli	r2,r2,3
1000c044:	8009883a 	mov	r4,r16
1000c048:	100b883a 	mov	r5,r2
1000c04c:	00146fc0 	call	100146fc <__mulsi3>
1000c050:	9085883a 	add	r2,r18,r2
1000c054:	88800015 	stw	r2,0(r17)
    /*only padded at end of reduced image*/
    passstart[i + 1] = passstart[i] + (passh[i] * passw[i] * bpp + 7) / 8;
1000c058:	e0bffb17 	ldw	r2,-20(fp)
1000c05c:	10800044 	addi	r2,r2,1
1000c060:	1085883a 	add	r2,r2,r2
1000c064:	1085883a 	add	r2,r2,r2
1000c068:	e0c00517 	ldw	r3,20(fp)
1000c06c:	18a1883a 	add	r16,r3,r2
1000c070:	e0bffb17 	ldw	r2,-20(fp)
1000c074:	1085883a 	add	r2,r2,r2
1000c078:	1085883a 	add	r2,r2,r2
1000c07c:	e0c00517 	ldw	r3,20(fp)
1000c080:	1885883a 	add	r2,r3,r2
1000c084:	14400017 	ldw	r17,0(r2)
1000c088:	e0bffb17 	ldw	r2,-20(fp)
1000c08c:	1085883a 	add	r2,r2,r2
1000c090:	1085883a 	add	r2,r2,r2
1000c094:	e0fffd17 	ldw	r3,-12(fp)
1000c098:	1885883a 	add	r2,r3,r2
1000c09c:	10c00017 	ldw	r3,0(r2)
1000c0a0:	e0bffb17 	ldw	r2,-20(fp)
1000c0a4:	1085883a 	add	r2,r2,r2
1000c0a8:	1085883a 	add	r2,r2,r2
1000c0ac:	e13ffc17 	ldw	r4,-16(fp)
1000c0b0:	2085883a 	add	r2,r4,r2
1000c0b4:	10800017 	ldw	r2,0(r2)
1000c0b8:	1809883a 	mov	r4,r3
1000c0bc:	100b883a 	mov	r5,r2
1000c0c0:	00146fc0 	call	100146fc <__mulsi3>
1000c0c4:	1009883a 	mov	r4,r2
1000c0c8:	e1400817 	ldw	r5,32(fp)
1000c0cc:	00146fc0 	call	100146fc <__mulsi3>
1000c0d0:	108001c4 	addi	r2,r2,7
1000c0d4:	1004d0fa 	srli	r2,r2,3
1000c0d8:	8885883a 	add	r2,r17,r2
1000c0dc:	80800015 	stw	r2,0(r16)
    if(passw[i] == 0) passh[i] = 0;
    if(passh[i] == 0) passw[i] = 0;
  }

  filter_passstart[0] = padded_passstart[0] = passstart[0] = 0;
  for(i = 0; i != 7; ++i)
1000c0e0:	e0bffb17 	ldw	r2,-20(fp)
1000c0e4:	10800044 	addi	r2,r2,1
1000c0e8:	e0bffb15 	stw	r2,-20(fp)
1000c0ec:	e0bffb17 	ldw	r2,-20(fp)
1000c0f0:	108001d8 	cmpnei	r2,r2,7
1000c0f4:	103f831e 	bne	r2,zero,1000bf04 <__alt_data_end+0xf800bf04>
    /*bits padded if needed to fill full byte at end of each scanline*/
    padded_passstart[i + 1] = padded_passstart[i] + passh[i] * ((passw[i] * bpp + 7) / 8);
    /*only padded at end of reduced image*/
    passstart[i + 1] = passstart[i] + (passh[i] * passw[i] * bpp + 7) / 8;
  }
}
1000c0f8:	e037883a 	mov	sp,fp
1000c0fc:	dfc00417 	ldw	ra,16(sp)
1000c100:	df000317 	ldw	fp,12(sp)
1000c104:	dc800217 	ldw	r18,8(sp)
1000c108:	dc400117 	ldw	r17,4(sp)
1000c10c:	dc000017 	ldw	r16,0(sp)
1000c110:	dec00504 	addi	sp,sp,20
1000c114:	f800283a 	ret

1000c118 <lodepng_inspect>:
/* ////////////////////////////////////////////////////////////////////////// */

/*read the information from the header and store it in the LodePNGInfo. return value is error*/
unsigned lodepng_inspect(unsigned* w, unsigned* h, LodePNGState* state,
                         const unsigned char* in, size_t insize)
{
1000c118:	defff704 	addi	sp,sp,-36
1000c11c:	dfc00815 	stw	ra,32(sp)
1000c120:	df000715 	stw	fp,28(sp)
1000c124:	df000704 	addi	fp,sp,28
1000c128:	e13ffc15 	stw	r4,-16(fp)
1000c12c:	e17ffd15 	stw	r5,-12(fp)
1000c130:	e1bffe15 	stw	r6,-8(fp)
1000c134:	e1ffff15 	stw	r7,-4(fp)
  LodePNGInfo* info = &state->info_png;
1000c138:	e0bffe17 	ldw	r2,-8(fp)
1000c13c:	10802004 	addi	r2,r2,128
1000c140:	e0bff915 	stw	r2,-28(fp)
  if(insize == 0 || in == 0)
1000c144:	e0800217 	ldw	r2,8(fp)
1000c148:	10000226 	beq	r2,zero,1000c154 <lodepng_inspect+0x3c>
1000c14c:	e0bfff17 	ldw	r2,-4(fp)
1000c150:	1000051e 	bne	r2,zero,1000c168 <lodepng_inspect+0x50>
  {
    CERROR_RETURN_ERROR(state->error, 48); /*error: the given data is empty*/
1000c154:	e0bffe17 	ldw	r2,-8(fp)
1000c158:	00c00c04 	movi	r3,48
1000c15c:	10c04815 	stw	r3,288(r2)
1000c160:	00800c04 	movi	r2,48
1000c164:	0000cc06 	br	1000c498 <lodepng_inspect+0x380>
  }
  if(insize < 33)
1000c168:	e0800217 	ldw	r2,8(fp)
1000c16c:	10800868 	cmpgeui	r2,r2,33
1000c170:	1000051e 	bne	r2,zero,1000c188 <lodepng_inspect+0x70>
  {
    CERROR_RETURN_ERROR(state->error, 27); /*error: the data length is smaller than the length of a PNG header*/
1000c174:	e0bffe17 	ldw	r2,-8(fp)
1000c178:	00c006c4 	movi	r3,27
1000c17c:	10c04815 	stw	r3,288(r2)
1000c180:	008006c4 	movi	r2,27
1000c184:	0000c406 	br	1000c498 <lodepng_inspect+0x380>
  }

  /*when decoding a new PNG image, make sure all parameters created after previous decoding are reset*/
  lodepng_info_cleanup(info);
1000c188:	e13ff917 	ldw	r4,-28(fp)
1000c18c:	00082b00 	call	100082b0 <lodepng_info_cleanup>
  lodepng_info_init(info);
1000c190:	e13ff917 	ldw	r4,-28(fp)
1000c194:	00082080 	call	10008208 <lodepng_info_init>

  if(in[0] != 137 || in[1] != 80 || in[2] != 78 || in[3] != 71
1000c198:	e0bfff17 	ldw	r2,-4(fp)
1000c19c:	10800003 	ldbu	r2,0(r2)
1000c1a0:	10803fcc 	andi	r2,r2,255
1000c1a4:	10802258 	cmpnei	r2,r2,137
1000c1a8:	10002a1e 	bne	r2,zero,1000c254 <lodepng_inspect+0x13c>
1000c1ac:	e0bfff17 	ldw	r2,-4(fp)
1000c1b0:	10800044 	addi	r2,r2,1
1000c1b4:	10800003 	ldbu	r2,0(r2)
1000c1b8:	10803fcc 	andi	r2,r2,255
1000c1bc:	10801418 	cmpnei	r2,r2,80
1000c1c0:	1000241e 	bne	r2,zero,1000c254 <lodepng_inspect+0x13c>
1000c1c4:	e0bfff17 	ldw	r2,-4(fp)
1000c1c8:	10800084 	addi	r2,r2,2
1000c1cc:	10800003 	ldbu	r2,0(r2)
1000c1d0:	10803fcc 	andi	r2,r2,255
1000c1d4:	10801398 	cmpnei	r2,r2,78
1000c1d8:	10001e1e 	bne	r2,zero,1000c254 <lodepng_inspect+0x13c>
1000c1dc:	e0bfff17 	ldw	r2,-4(fp)
1000c1e0:	108000c4 	addi	r2,r2,3
1000c1e4:	10800003 	ldbu	r2,0(r2)
1000c1e8:	10803fcc 	andi	r2,r2,255
1000c1ec:	108011d8 	cmpnei	r2,r2,71
1000c1f0:	1000181e 	bne	r2,zero,1000c254 <lodepng_inspect+0x13c>
     || in[4] != 13 || in[5] != 10 || in[6] != 26 || in[7] != 10)
1000c1f4:	e0bfff17 	ldw	r2,-4(fp)
1000c1f8:	10800104 	addi	r2,r2,4
1000c1fc:	10800003 	ldbu	r2,0(r2)
1000c200:	10803fcc 	andi	r2,r2,255
1000c204:	10800358 	cmpnei	r2,r2,13
1000c208:	1000121e 	bne	r2,zero,1000c254 <lodepng_inspect+0x13c>
1000c20c:	e0bfff17 	ldw	r2,-4(fp)
1000c210:	10800144 	addi	r2,r2,5
1000c214:	10800003 	ldbu	r2,0(r2)
1000c218:	10803fcc 	andi	r2,r2,255
1000c21c:	10800298 	cmpnei	r2,r2,10
1000c220:	10000c1e 	bne	r2,zero,1000c254 <lodepng_inspect+0x13c>
1000c224:	e0bfff17 	ldw	r2,-4(fp)
1000c228:	10800184 	addi	r2,r2,6
1000c22c:	10800003 	ldbu	r2,0(r2)
1000c230:	10803fcc 	andi	r2,r2,255
1000c234:	10800698 	cmpnei	r2,r2,26
1000c238:	1000061e 	bne	r2,zero,1000c254 <lodepng_inspect+0x13c>
1000c23c:	e0bfff17 	ldw	r2,-4(fp)
1000c240:	108001c4 	addi	r2,r2,7
1000c244:	10800003 	ldbu	r2,0(r2)
1000c248:	10803fcc 	andi	r2,r2,255
1000c24c:	108002a0 	cmpeqi	r2,r2,10
1000c250:	1000051e 	bne	r2,zero,1000c268 <lodepng_inspect+0x150>
  {
    CERROR_RETURN_ERROR(state->error, 28); /*error: the first 8 bytes are not the correct PNG signature*/
1000c254:	e0bffe17 	ldw	r2,-8(fp)
1000c258:	00c00704 	movi	r3,28
1000c25c:	10c04815 	stw	r3,288(r2)
1000c260:	00800704 	movi	r2,28
1000c264:	00008c06 	br	1000c498 <lodepng_inspect+0x380>
  }
  if(in[12] != 'I' || in[13] != 'H' || in[14] != 'D' || in[15] != 'R')
1000c268:	e0bfff17 	ldw	r2,-4(fp)
1000c26c:	10800304 	addi	r2,r2,12
1000c270:	10800003 	ldbu	r2,0(r2)
1000c274:	10803fcc 	andi	r2,r2,255
1000c278:	10801258 	cmpnei	r2,r2,73
1000c27c:	1000121e 	bne	r2,zero,1000c2c8 <lodepng_inspect+0x1b0>
1000c280:	e0bfff17 	ldw	r2,-4(fp)
1000c284:	10800344 	addi	r2,r2,13
1000c288:	10800003 	ldbu	r2,0(r2)
1000c28c:	10803fcc 	andi	r2,r2,255
1000c290:	10801218 	cmpnei	r2,r2,72
1000c294:	10000c1e 	bne	r2,zero,1000c2c8 <lodepng_inspect+0x1b0>
1000c298:	e0bfff17 	ldw	r2,-4(fp)
1000c29c:	10800384 	addi	r2,r2,14
1000c2a0:	10800003 	ldbu	r2,0(r2)
1000c2a4:	10803fcc 	andi	r2,r2,255
1000c2a8:	10801118 	cmpnei	r2,r2,68
1000c2ac:	1000061e 	bne	r2,zero,1000c2c8 <lodepng_inspect+0x1b0>
1000c2b0:	e0bfff17 	ldw	r2,-4(fp)
1000c2b4:	108003c4 	addi	r2,r2,15
1000c2b8:	10800003 	ldbu	r2,0(r2)
1000c2bc:	10803fcc 	andi	r2,r2,255
1000c2c0:	108014a0 	cmpeqi	r2,r2,82
1000c2c4:	1000051e 	bne	r2,zero,1000c2dc <lodepng_inspect+0x1c4>
  {
    CERROR_RETURN_ERROR(state->error, 29); /*error: it doesn't start with a IHDR chunk!*/
1000c2c8:	e0bffe17 	ldw	r2,-8(fp)
1000c2cc:	00c00744 	movi	r3,29
1000c2d0:	10c04815 	stw	r3,288(r2)
1000c2d4:	00800744 	movi	r2,29
1000c2d8:	00006f06 	br	1000c498 <lodepng_inspect+0x380>
  }

  /*read the values given in the header*/
  *w = lodepng_read32bitInt(&in[16]);
1000c2dc:	e0bfff17 	ldw	r2,-4(fp)
1000c2e0:	10800404 	addi	r2,r2,16
1000c2e4:	1009883a 	mov	r4,r2
1000c2e8:	00009e40 	call	100009e4 <lodepng_read32bitInt>
1000c2ec:	e0fffc17 	ldw	r3,-16(fp)
1000c2f0:	18800015 	stw	r2,0(r3)
  *h = lodepng_read32bitInt(&in[20]);
1000c2f4:	e0bfff17 	ldw	r2,-4(fp)
1000c2f8:	10800504 	addi	r2,r2,20
1000c2fc:	1009883a 	mov	r4,r2
1000c300:	00009e40 	call	100009e4 <lodepng_read32bitInt>
1000c304:	e0fffd17 	ldw	r3,-12(fp)
1000c308:	18800015 	stw	r2,0(r3)
  info->color.bitdepth = in[24];
1000c30c:	e0bfff17 	ldw	r2,-4(fp)
1000c310:	10800604 	addi	r2,r2,24
1000c314:	10800003 	ldbu	r2,0(r2)
1000c318:	10c03fcc 	andi	r3,r2,255
1000c31c:	e0bff917 	ldw	r2,-28(fp)
1000c320:	10c00415 	stw	r3,16(r2)
  info->color.colortype = (LodePNGColorType)in[25];
1000c324:	e0bfff17 	ldw	r2,-4(fp)
1000c328:	10800644 	addi	r2,r2,25
1000c32c:	10800003 	ldbu	r2,0(r2)
1000c330:	10c03fcc 	andi	r3,r2,255
1000c334:	e0bff917 	ldw	r2,-28(fp)
1000c338:	10c00315 	stw	r3,12(r2)
  info->compression_method = in[26];
1000c33c:	e0bfff17 	ldw	r2,-4(fp)
1000c340:	10800684 	addi	r2,r2,26
1000c344:	10800003 	ldbu	r2,0(r2)
1000c348:	10c03fcc 	andi	r3,r2,255
1000c34c:	e0bff917 	ldw	r2,-28(fp)
1000c350:	10c00015 	stw	r3,0(r2)
  info->filter_method = in[27];
1000c354:	e0bfff17 	ldw	r2,-4(fp)
1000c358:	108006c4 	addi	r2,r2,27
1000c35c:	10800003 	ldbu	r2,0(r2)
1000c360:	10c03fcc 	andi	r3,r2,255
1000c364:	e0bff917 	ldw	r2,-28(fp)
1000c368:	10c00115 	stw	r3,4(r2)
  info->interlace_method = in[28];
1000c36c:	e0bfff17 	ldw	r2,-4(fp)
1000c370:	10800704 	addi	r2,r2,28
1000c374:	10800003 	ldbu	r2,0(r2)
1000c378:	10c03fcc 	andi	r3,r2,255
1000c37c:	e0bff917 	ldw	r2,-28(fp)
1000c380:	10c00215 	stw	r3,8(r2)

  if(*w == 0 || *h == 0)
1000c384:	e0bffc17 	ldw	r2,-16(fp)
1000c388:	10800017 	ldw	r2,0(r2)
1000c38c:	10000326 	beq	r2,zero,1000c39c <lodepng_inspect+0x284>
1000c390:	e0bffd17 	ldw	r2,-12(fp)
1000c394:	10800017 	ldw	r2,0(r2)
1000c398:	1000051e 	bne	r2,zero,1000c3b0 <lodepng_inspect+0x298>
  {
    CERROR_RETURN_ERROR(state->error, 93);
1000c39c:	e0bffe17 	ldw	r2,-8(fp)
1000c3a0:	00c01744 	movi	r3,93
1000c3a4:	10c04815 	stw	r3,288(r2)
1000c3a8:	00801744 	movi	r2,93
1000c3ac:	00003a06 	br	1000c498 <lodepng_inspect+0x380>
  }

  if(!state->decoder.ignore_crc)
1000c3b0:	e0bffe17 	ldw	r2,-8(fp)
1000c3b4:	10800417 	ldw	r2,16(r2)
1000c3b8:	1000131e 	bne	r2,zero,1000c408 <lodepng_inspect+0x2f0>
  {
    unsigned CRC = lodepng_read32bitInt(&in[29]);
1000c3bc:	e0bfff17 	ldw	r2,-4(fp)
1000c3c0:	10800744 	addi	r2,r2,29
1000c3c4:	1009883a 	mov	r4,r2
1000c3c8:	00009e40 	call	100009e4 <lodepng_read32bitInt>
1000c3cc:	e0bffa15 	stw	r2,-24(fp)
    unsigned checksum = lodepng_crc32(&in[12], 17);
1000c3d0:	e0bfff17 	ldw	r2,-4(fp)
1000c3d4:	10800304 	addi	r2,r2,12
1000c3d8:	1009883a 	mov	r4,r2
1000c3dc:	01400444 	movi	r5,17
1000c3e0:	00062a40 	call	100062a4 <lodepng_crc32>
1000c3e4:	e0bffb15 	stw	r2,-20(fp)
    if(CRC != checksum)
1000c3e8:	e0fffa17 	ldw	r3,-24(fp)
1000c3ec:	e0bffb17 	ldw	r2,-20(fp)
1000c3f0:	18800526 	beq	r3,r2,1000c408 <lodepng_inspect+0x2f0>
    {
      CERROR_RETURN_ERROR(state->error, 57); /*invalid CRC*/
1000c3f4:	e0bffe17 	ldw	r2,-8(fp)
1000c3f8:	00c00e44 	movi	r3,57
1000c3fc:	10c04815 	stw	r3,288(r2)
1000c400:	00800e44 	movi	r2,57
1000c404:	00002406 	br	1000c498 <lodepng_inspect+0x380>
    }
  }

  /*error: only compression method 0 is allowed in the specification*/
  if(info->compression_method != 0) CERROR_RETURN_ERROR(state->error, 32);
1000c408:	e0bff917 	ldw	r2,-28(fp)
1000c40c:	10800017 	ldw	r2,0(r2)
1000c410:	10000526 	beq	r2,zero,1000c428 <lodepng_inspect+0x310>
1000c414:	e0bffe17 	ldw	r2,-8(fp)
1000c418:	00c00804 	movi	r3,32
1000c41c:	10c04815 	stw	r3,288(r2)
1000c420:	00800804 	movi	r2,32
1000c424:	00001c06 	br	1000c498 <lodepng_inspect+0x380>
  /*error: only filter method 0 is allowed in the specification*/
  if(info->filter_method != 0) CERROR_RETURN_ERROR(state->error, 33);
1000c428:	e0bff917 	ldw	r2,-28(fp)
1000c42c:	10800117 	ldw	r2,4(r2)
1000c430:	10000526 	beq	r2,zero,1000c448 <lodepng_inspect+0x330>
1000c434:	e0bffe17 	ldw	r2,-8(fp)
1000c438:	00c00844 	movi	r3,33
1000c43c:	10c04815 	stw	r3,288(r2)
1000c440:	00800844 	movi	r2,33
1000c444:	00001406 	br	1000c498 <lodepng_inspect+0x380>
  /*error: only interlace methods 0 and 1 exist in the specification*/
  if(info->interlace_method > 1) CERROR_RETURN_ERROR(state->error, 34);
1000c448:	e0bff917 	ldw	r2,-28(fp)
1000c44c:	10800217 	ldw	r2,8(r2)
1000c450:	108000b0 	cmpltui	r2,r2,2
1000c454:	1000051e 	bne	r2,zero,1000c46c <lodepng_inspect+0x354>
1000c458:	e0bffe17 	ldw	r2,-8(fp)
1000c45c:	00c00884 	movi	r3,34
1000c460:	10c04815 	stw	r3,288(r2)
1000c464:	00800884 	movi	r2,34
1000c468:	00000b06 	br	1000c498 <lodepng_inspect+0x380>

  state->error = checkColorValidity(info->color.colortype, info->color.bitdepth);
1000c46c:	e0bff917 	ldw	r2,-28(fp)
1000c470:	10c00317 	ldw	r3,12(r2)
1000c474:	e0bff917 	ldw	r2,-28(fp)
1000c478:	10800417 	ldw	r2,16(r2)
1000c47c:	1809883a 	mov	r4,r3
1000c480:	100b883a 	mov	r5,r2
1000c484:	0006c7c0 	call	10006c7c <checkColorValidity>
1000c488:	e0fffe17 	ldw	r3,-8(fp)
1000c48c:	18804815 	stw	r2,288(r3)
  return state->error;
1000c490:	e0bffe17 	ldw	r2,-8(fp)
1000c494:	10804817 	ldw	r2,288(r2)
}
1000c498:	e037883a 	mov	sp,fp
1000c49c:	dfc00117 	ldw	ra,4(sp)
1000c4a0:	df000017 	ldw	fp,0(sp)
1000c4a4:	dec00204 	addi	sp,sp,8
1000c4a8:	f800283a 	ret

1000c4ac <unfilterScanline>:

static unsigned unfilterScanline(unsigned char* recon, const unsigned char* scanline, const unsigned char* precon,
                                 size_t bytewidth, unsigned char filterType, size_t length)
{
1000c4ac:	defff604 	addi	sp,sp,-40
1000c4b0:	dfc00915 	stw	ra,36(sp)
1000c4b4:	df000815 	stw	fp,32(sp)
1000c4b8:	dc400715 	stw	r17,28(sp)
1000c4bc:	dc000615 	stw	r16,24(sp)
1000c4c0:	df000604 	addi	fp,sp,24
1000c4c4:	e13ffb15 	stw	r4,-20(fp)
1000c4c8:	e17ffc15 	stw	r5,-16(fp)
1000c4cc:	e1bffd15 	stw	r6,-12(fp)
1000c4d0:	e1fffe15 	stw	r7,-8(fp)
1000c4d4:	e0800417 	ldw	r2,16(fp)
1000c4d8:	e0bfff05 	stb	r2,-4(fp)
  the incoming scanlines do NOT include the filtertype byte, that one is given in the parameter filterType instead
  recon and scanline MAY be the same memory address! precon must be disjoint.
  */

  size_t i;
  switch(filterType)
1000c4dc:	e0bfff03 	ldbu	r2,-4(fp)
1000c4e0:	10c00168 	cmpgeui	r3,r2,5
1000c4e4:	1801421e 	bne	r3,zero,1000c9f0 <unfilterScanline+0x544>
1000c4e8:	1085883a 	add	r2,r2,r2
1000c4ec:	1087883a 	add	r3,r2,r2
1000c4f0:	00840074 	movhi	r2,4097
1000c4f4:	10b14104 	addi	r2,r2,-15100
1000c4f8:	1885883a 	add	r2,r3,r2
1000c4fc:	10800017 	ldw	r2,0(r2)
1000c500:	1000683a 	jmp	r2
1000c504:	1000c518 	cmpnei	zero,r2,788
1000c508:	1000c55c 	xori	zero,r2,789
1000c50c:	1000c600 	call	11000c60 <_gp+0xfd30b4>
1000c510:	1000c6a8 	cmpgeui	zero,r2,794
1000c514:	1000c848 	cmpgei	zero,r2,801
  {
    case 0:
      for(i = 0; i != length; ++i) recon[i] = scanline[i];
1000c518:	e03ffa15 	stw	zero,-24(fp)
1000c51c:	00000b06 	br	1000c54c <unfilterScanline+0xa0>
1000c520:	e0fffb17 	ldw	r3,-20(fp)
1000c524:	e0bffa17 	ldw	r2,-24(fp)
1000c528:	1885883a 	add	r2,r3,r2
1000c52c:	e13ffc17 	ldw	r4,-16(fp)
1000c530:	e0fffa17 	ldw	r3,-24(fp)
1000c534:	20c7883a 	add	r3,r4,r3
1000c538:	18c00003 	ldbu	r3,0(r3)
1000c53c:	10c00005 	stb	r3,0(r2)
1000c540:	e0bffa17 	ldw	r2,-24(fp)
1000c544:	10800044 	addi	r2,r2,1
1000c548:	e0bffa15 	stw	r2,-24(fp)
1000c54c:	e0fffa17 	ldw	r3,-24(fp)
1000c550:	e0800517 	ldw	r2,20(fp)
1000c554:	18bff21e 	bne	r3,r2,1000c520 <__alt_data_end+0xf800c520>
      break;
1000c558:	00012706 	br	1000c9f8 <unfilterScanline+0x54c>
    case 1:
      for(i = 0; i != bytewidth; ++i) recon[i] = scanline[i];
1000c55c:	e03ffa15 	stw	zero,-24(fp)
1000c560:	00000b06 	br	1000c590 <unfilterScanline+0xe4>
1000c564:	e0fffb17 	ldw	r3,-20(fp)
1000c568:	e0bffa17 	ldw	r2,-24(fp)
1000c56c:	1885883a 	add	r2,r3,r2
1000c570:	e13ffc17 	ldw	r4,-16(fp)
1000c574:	e0fffa17 	ldw	r3,-24(fp)
1000c578:	20c7883a 	add	r3,r4,r3
1000c57c:	18c00003 	ldbu	r3,0(r3)
1000c580:	10c00005 	stb	r3,0(r2)
1000c584:	e0bffa17 	ldw	r2,-24(fp)
1000c588:	10800044 	addi	r2,r2,1
1000c58c:	e0bffa15 	stw	r2,-24(fp)
1000c590:	e0fffa17 	ldw	r3,-24(fp)
1000c594:	e0bffe17 	ldw	r2,-8(fp)
1000c598:	18bff21e 	bne	r3,r2,1000c564 <__alt_data_end+0xf800c564>
      for(i = bytewidth; i < length; ++i) recon[i] = scanline[i] + recon[i - bytewidth];
1000c59c:	e0bffe17 	ldw	r2,-8(fp)
1000c5a0:	e0bffa15 	stw	r2,-24(fp)
1000c5a4:	00001206 	br	1000c5f0 <unfilterScanline+0x144>
1000c5a8:	e0fffb17 	ldw	r3,-20(fp)
1000c5ac:	e0bffa17 	ldw	r2,-24(fp)
1000c5b0:	1885883a 	add	r2,r3,r2
1000c5b4:	e13ffc17 	ldw	r4,-16(fp)
1000c5b8:	e0fffa17 	ldw	r3,-24(fp)
1000c5bc:	20c7883a 	add	r3,r4,r3
1000c5c0:	19000003 	ldbu	r4,0(r3)
1000c5c4:	e17ffa17 	ldw	r5,-24(fp)
1000c5c8:	e0fffe17 	ldw	r3,-8(fp)
1000c5cc:	28c7c83a 	sub	r3,r5,r3
1000c5d0:	e17ffb17 	ldw	r5,-20(fp)
1000c5d4:	28c7883a 	add	r3,r5,r3
1000c5d8:	18c00003 	ldbu	r3,0(r3)
1000c5dc:	20c7883a 	add	r3,r4,r3
1000c5e0:	10c00005 	stb	r3,0(r2)
1000c5e4:	e0bffa17 	ldw	r2,-24(fp)
1000c5e8:	10800044 	addi	r2,r2,1
1000c5ec:	e0bffa15 	stw	r2,-24(fp)
1000c5f0:	e0fffa17 	ldw	r3,-24(fp)
1000c5f4:	e0800517 	ldw	r2,20(fp)
1000c5f8:	18bfeb36 	bltu	r3,r2,1000c5a8 <__alt_data_end+0xf800c5a8>
      break;
1000c5fc:	0000fe06 	br	1000c9f8 <unfilterScanline+0x54c>
    case 2:
      if(precon)
1000c600:	e0bffd17 	ldw	r2,-12(fp)
1000c604:	10001626 	beq	r2,zero,1000c660 <unfilterScanline+0x1b4>
      {
        for(i = 0; i != length; ++i) recon[i] = scanline[i] + precon[i];
1000c608:	e03ffa15 	stw	zero,-24(fp)
1000c60c:	00001006 	br	1000c650 <unfilterScanline+0x1a4>
1000c610:	e0fffb17 	ldw	r3,-20(fp)
1000c614:	e0bffa17 	ldw	r2,-24(fp)
1000c618:	1885883a 	add	r2,r3,r2
1000c61c:	e13ffc17 	ldw	r4,-16(fp)
1000c620:	e0fffa17 	ldw	r3,-24(fp)
1000c624:	20c7883a 	add	r3,r4,r3
1000c628:	19000003 	ldbu	r4,0(r3)
1000c62c:	e17ffd17 	ldw	r5,-12(fp)
1000c630:	e0fffa17 	ldw	r3,-24(fp)
1000c634:	28c7883a 	add	r3,r5,r3
1000c638:	18c00003 	ldbu	r3,0(r3)
1000c63c:	20c7883a 	add	r3,r4,r3
1000c640:	10c00005 	stb	r3,0(r2)
1000c644:	e0bffa17 	ldw	r2,-24(fp)
1000c648:	10800044 	addi	r2,r2,1
1000c64c:	e0bffa15 	stw	r2,-24(fp)
1000c650:	e0fffa17 	ldw	r3,-24(fp)
1000c654:	e0800517 	ldw	r2,20(fp)
1000c658:	18bfed1e 	bne	r3,r2,1000c610 <__alt_data_end+0xf800c610>
1000c65c:	00001106 	br	1000c6a4 <unfilterScanline+0x1f8>
      }
      else
      {
        for(i = 0; i != length; ++i) recon[i] = scanline[i];
1000c660:	e03ffa15 	stw	zero,-24(fp)
1000c664:	00000b06 	br	1000c694 <unfilterScanline+0x1e8>
1000c668:	e0fffb17 	ldw	r3,-20(fp)
1000c66c:	e0bffa17 	ldw	r2,-24(fp)
1000c670:	1885883a 	add	r2,r3,r2
1000c674:	e13ffc17 	ldw	r4,-16(fp)
1000c678:	e0fffa17 	ldw	r3,-24(fp)
1000c67c:	20c7883a 	add	r3,r4,r3
1000c680:	18c00003 	ldbu	r3,0(r3)
1000c684:	10c00005 	stb	r3,0(r2)
1000c688:	e0bffa17 	ldw	r2,-24(fp)
1000c68c:	10800044 	addi	r2,r2,1
1000c690:	e0bffa15 	stw	r2,-24(fp)
1000c694:	e0fffa17 	ldw	r3,-24(fp)
1000c698:	e0800517 	ldw	r2,20(fp)
1000c69c:	18bff21e 	bne	r3,r2,1000c668 <__alt_data_end+0xf800c668>
      }
      break;
1000c6a0:	0000d506 	br	1000c9f8 <unfilterScanline+0x54c>
1000c6a4:	0000d406 	br	1000c9f8 <unfilterScanline+0x54c>
    case 3:
      if(precon)
1000c6a8:	e0bffd17 	ldw	r2,-12(fp)
1000c6ac:	10003a26 	beq	r2,zero,1000c798 <unfilterScanline+0x2ec>
      {
        for(i = 0; i != bytewidth; ++i) recon[i] = scanline[i] + precon[i] / 2;
1000c6b0:	e03ffa15 	stw	zero,-24(fp)
1000c6b4:	00001206 	br	1000c700 <unfilterScanline+0x254>
1000c6b8:	e0fffb17 	ldw	r3,-20(fp)
1000c6bc:	e0bffa17 	ldw	r2,-24(fp)
1000c6c0:	1885883a 	add	r2,r3,r2
1000c6c4:	e13ffc17 	ldw	r4,-16(fp)
1000c6c8:	e0fffa17 	ldw	r3,-24(fp)
1000c6cc:	20c7883a 	add	r3,r4,r3
1000c6d0:	19000003 	ldbu	r4,0(r3)
1000c6d4:	e17ffd17 	ldw	r5,-12(fp)
1000c6d8:	e0fffa17 	ldw	r3,-24(fp)
1000c6dc:	28c7883a 	add	r3,r5,r3
1000c6e0:	18c00003 	ldbu	r3,0(r3)
1000c6e4:	18c03fcc 	andi	r3,r3,255
1000c6e8:	1806d07a 	srli	r3,r3,1
1000c6ec:	20c7883a 	add	r3,r4,r3
1000c6f0:	10c00005 	stb	r3,0(r2)
1000c6f4:	e0bffa17 	ldw	r2,-24(fp)
1000c6f8:	10800044 	addi	r2,r2,1
1000c6fc:	e0bffa15 	stw	r2,-24(fp)
1000c700:	e0fffa17 	ldw	r3,-24(fp)
1000c704:	e0bffe17 	ldw	r2,-8(fp)
1000c708:	18bfeb1e 	bne	r3,r2,1000c6b8 <__alt_data_end+0xf800c6b8>
        for(i = bytewidth; i < length; ++i) recon[i] = scanline[i] + ((recon[i - bytewidth] + precon[i]) / 2);
1000c70c:	e0bffe17 	ldw	r2,-8(fp)
1000c710:	e0bffa15 	stw	r2,-24(fp)
1000c714:	00001c06 	br	1000c788 <unfilterScanline+0x2dc>
1000c718:	e0fffb17 	ldw	r3,-20(fp)
1000c71c:	e0bffa17 	ldw	r2,-24(fp)
1000c720:	1887883a 	add	r3,r3,r2
1000c724:	e13ffc17 	ldw	r4,-16(fp)
1000c728:	e0bffa17 	ldw	r2,-24(fp)
1000c72c:	2085883a 	add	r2,r4,r2
1000c730:	11000003 	ldbu	r4,0(r2)
1000c734:	e17ffa17 	ldw	r5,-24(fp)
1000c738:	e0bffe17 	ldw	r2,-8(fp)
1000c73c:	2885c83a 	sub	r2,r5,r2
1000c740:	e17ffb17 	ldw	r5,-20(fp)
1000c744:	2885883a 	add	r2,r5,r2
1000c748:	10800003 	ldbu	r2,0(r2)
1000c74c:	11403fcc 	andi	r5,r2,255
1000c750:	e1bffd17 	ldw	r6,-12(fp)
1000c754:	e0bffa17 	ldw	r2,-24(fp)
1000c758:	3085883a 	add	r2,r6,r2
1000c75c:	10800003 	ldbu	r2,0(r2)
1000c760:	10803fcc 	andi	r2,r2,255
1000c764:	2885883a 	add	r2,r5,r2
1000c768:	100ad7fa 	srli	r5,r2,31
1000c76c:	2885883a 	add	r2,r5,r2
1000c770:	1005d07a 	srai	r2,r2,1
1000c774:	2085883a 	add	r2,r4,r2
1000c778:	18800005 	stb	r2,0(r3)
1000c77c:	e0bffa17 	ldw	r2,-24(fp)
1000c780:	10800044 	addi	r2,r2,1
1000c784:	e0bffa15 	stw	r2,-24(fp)
1000c788:	e0fffa17 	ldw	r3,-24(fp)
1000c78c:	e0800517 	ldw	r2,20(fp)
1000c790:	18bfe136 	bltu	r3,r2,1000c718 <__alt_data_end+0xf800c718>
1000c794:	00002b06 	br	1000c844 <unfilterScanline+0x398>
      }
      else
      {
        for(i = 0; i != bytewidth; ++i) recon[i] = scanline[i];
1000c798:	e03ffa15 	stw	zero,-24(fp)
1000c79c:	00000b06 	br	1000c7cc <unfilterScanline+0x320>
1000c7a0:	e0fffb17 	ldw	r3,-20(fp)
1000c7a4:	e0bffa17 	ldw	r2,-24(fp)
1000c7a8:	1885883a 	add	r2,r3,r2
1000c7ac:	e13ffc17 	ldw	r4,-16(fp)
1000c7b0:	e0fffa17 	ldw	r3,-24(fp)
1000c7b4:	20c7883a 	add	r3,r4,r3
1000c7b8:	18c00003 	ldbu	r3,0(r3)
1000c7bc:	10c00005 	stb	r3,0(r2)
1000c7c0:	e0bffa17 	ldw	r2,-24(fp)
1000c7c4:	10800044 	addi	r2,r2,1
1000c7c8:	e0bffa15 	stw	r2,-24(fp)
1000c7cc:	e0fffa17 	ldw	r3,-24(fp)
1000c7d0:	e0bffe17 	ldw	r2,-8(fp)
1000c7d4:	18bff21e 	bne	r3,r2,1000c7a0 <__alt_data_end+0xf800c7a0>
        for(i = bytewidth; i < length; ++i) recon[i] = scanline[i] + recon[i - bytewidth] / 2;
1000c7d8:	e0bffe17 	ldw	r2,-8(fp)
1000c7dc:	e0bffa15 	stw	r2,-24(fp)
1000c7e0:	00001406 	br	1000c834 <unfilterScanline+0x388>
1000c7e4:	e0fffb17 	ldw	r3,-20(fp)
1000c7e8:	e0bffa17 	ldw	r2,-24(fp)
1000c7ec:	1885883a 	add	r2,r3,r2
1000c7f0:	e13ffc17 	ldw	r4,-16(fp)
1000c7f4:	e0fffa17 	ldw	r3,-24(fp)
1000c7f8:	20c7883a 	add	r3,r4,r3
1000c7fc:	19000003 	ldbu	r4,0(r3)
1000c800:	e17ffa17 	ldw	r5,-24(fp)
1000c804:	e0fffe17 	ldw	r3,-8(fp)
1000c808:	28c7c83a 	sub	r3,r5,r3
1000c80c:	e17ffb17 	ldw	r5,-20(fp)
1000c810:	28c7883a 	add	r3,r5,r3
1000c814:	18c00003 	ldbu	r3,0(r3)
1000c818:	18c03fcc 	andi	r3,r3,255
1000c81c:	1806d07a 	srli	r3,r3,1
1000c820:	20c7883a 	add	r3,r4,r3
1000c824:	10c00005 	stb	r3,0(r2)
1000c828:	e0bffa17 	ldw	r2,-24(fp)
1000c82c:	10800044 	addi	r2,r2,1
1000c830:	e0bffa15 	stw	r2,-24(fp)
1000c834:	e0fffa17 	ldw	r3,-24(fp)
1000c838:	e0800517 	ldw	r2,20(fp)
1000c83c:	18bfe936 	bltu	r3,r2,1000c7e4 <__alt_data_end+0xf800c7e4>
      }
      break;
1000c840:	00006d06 	br	1000c9f8 <unfilterScanline+0x54c>
1000c844:	00006c06 	br	1000c9f8 <unfilterScanline+0x54c>
    case 4:
      if(precon)
1000c848:	e0bffd17 	ldw	r2,-12(fp)
1000c84c:	10003e26 	beq	r2,zero,1000c948 <unfilterScanline+0x49c>
      {
        for(i = 0; i != bytewidth; ++i)
1000c850:	e03ffa15 	stw	zero,-24(fp)
1000c854:	00001006 	br	1000c898 <unfilterScanline+0x3ec>
        {
          recon[i] = (scanline[i] + precon[i]); /*paethPredictor(0, precon[i], 0) is always precon[i]*/
1000c858:	e0fffb17 	ldw	r3,-20(fp)
1000c85c:	e0bffa17 	ldw	r2,-24(fp)
1000c860:	1885883a 	add	r2,r3,r2
1000c864:	e13ffc17 	ldw	r4,-16(fp)
1000c868:	e0fffa17 	ldw	r3,-24(fp)
1000c86c:	20c7883a 	add	r3,r4,r3
1000c870:	19000003 	ldbu	r4,0(r3)
1000c874:	e17ffd17 	ldw	r5,-12(fp)
1000c878:	e0fffa17 	ldw	r3,-24(fp)
1000c87c:	28c7883a 	add	r3,r5,r3
1000c880:	18c00003 	ldbu	r3,0(r3)
1000c884:	20c7883a 	add	r3,r4,r3
1000c888:	10c00005 	stb	r3,0(r2)
      }
      break;
    case 4:
      if(precon)
      {
        for(i = 0; i != bytewidth; ++i)
1000c88c:	e0bffa17 	ldw	r2,-24(fp)
1000c890:	10800044 	addi	r2,r2,1
1000c894:	e0bffa15 	stw	r2,-24(fp)
1000c898:	e0fffa17 	ldw	r3,-24(fp)
1000c89c:	e0bffe17 	ldw	r2,-8(fp)
1000c8a0:	18bfed1e 	bne	r3,r2,1000c858 <__alt_data_end+0xf800c858>
        {
          recon[i] = (scanline[i] + precon[i]); /*paethPredictor(0, precon[i], 0) is always precon[i]*/
        }
        for(i = bytewidth; i < length; ++i)
1000c8a4:	e0bffe17 	ldw	r2,-8(fp)
1000c8a8:	e0bffa15 	stw	r2,-24(fp)
1000c8ac:	00002206 	br	1000c938 <unfilterScanline+0x48c>
        {
          recon[i] = (scanline[i] + paethPredictor(recon[i - bytewidth], precon[i], precon[i - bytewidth]));
1000c8b0:	e0fffb17 	ldw	r3,-20(fp)
1000c8b4:	e0bffa17 	ldw	r2,-24(fp)
1000c8b8:	18a1883a 	add	r16,r3,r2
1000c8bc:	e0fffc17 	ldw	r3,-16(fp)
1000c8c0:	e0bffa17 	ldw	r2,-24(fp)
1000c8c4:	1885883a 	add	r2,r3,r2
1000c8c8:	14400003 	ldbu	r17,0(r2)
1000c8cc:	e0fffa17 	ldw	r3,-24(fp)
1000c8d0:	e0bffe17 	ldw	r2,-8(fp)
1000c8d4:	1885c83a 	sub	r2,r3,r2
1000c8d8:	e0fffb17 	ldw	r3,-20(fp)
1000c8dc:	1885883a 	add	r2,r3,r2
1000c8e0:	10800003 	ldbu	r2,0(r2)
1000c8e4:	11003fcc 	andi	r4,r2,255
1000c8e8:	e0fffd17 	ldw	r3,-12(fp)
1000c8ec:	e0bffa17 	ldw	r2,-24(fp)
1000c8f0:	1885883a 	add	r2,r3,r2
1000c8f4:	10800003 	ldbu	r2,0(r2)
1000c8f8:	10c03fcc 	andi	r3,r2,255
1000c8fc:	e17ffa17 	ldw	r5,-24(fp)
1000c900:	e0bffe17 	ldw	r2,-8(fp)
1000c904:	2885c83a 	sub	r2,r5,r2
1000c908:	e17ffd17 	ldw	r5,-12(fp)
1000c90c:	2885883a 	add	r2,r5,r2
1000c910:	10800003 	ldbu	r2,0(r2)
1000c914:	10803fcc 	andi	r2,r2,255
1000c918:	180b883a 	mov	r5,r3
1000c91c:	100d883a 	mov	r6,r2
1000c920:	000bc500 	call	1000bc50 <paethPredictor>
1000c924:	8885883a 	add	r2,r17,r2
1000c928:	80800005 	stb	r2,0(r16)
      {
        for(i = 0; i != bytewidth; ++i)
        {
          recon[i] = (scanline[i] + precon[i]); /*paethPredictor(0, precon[i], 0) is always precon[i]*/
        }
        for(i = bytewidth; i < length; ++i)
1000c92c:	e0bffa17 	ldw	r2,-24(fp)
1000c930:	10800044 	addi	r2,r2,1
1000c934:	e0bffa15 	stw	r2,-24(fp)
1000c938:	e0fffa17 	ldw	r3,-24(fp)
1000c93c:	e0800517 	ldw	r2,20(fp)
1000c940:	18bfdb36 	bltu	r3,r2,1000c8b0 <__alt_data_end+0xf800c8b0>
1000c944:	00002906 	br	1000c9ec <unfilterScanline+0x540>
          recon[i] = (scanline[i] + paethPredictor(recon[i - bytewidth], precon[i], precon[i - bytewidth]));
        }
      }
      else
      {
        for(i = 0; i != bytewidth; ++i)
1000c948:	e03ffa15 	stw	zero,-24(fp)
1000c94c:	00000b06 	br	1000c97c <unfilterScanline+0x4d0>
        {
          recon[i] = scanline[i];
1000c950:	e0fffb17 	ldw	r3,-20(fp)
1000c954:	e0bffa17 	ldw	r2,-24(fp)
1000c958:	1885883a 	add	r2,r3,r2
1000c95c:	e13ffc17 	ldw	r4,-16(fp)
1000c960:	e0fffa17 	ldw	r3,-24(fp)
1000c964:	20c7883a 	add	r3,r4,r3
1000c968:	18c00003 	ldbu	r3,0(r3)
1000c96c:	10c00005 	stb	r3,0(r2)
          recon[i] = (scanline[i] + paethPredictor(recon[i - bytewidth], precon[i], precon[i - bytewidth]));
        }
      }
      else
      {
        for(i = 0; i != bytewidth; ++i)
1000c970:	e0bffa17 	ldw	r2,-24(fp)
1000c974:	10800044 	addi	r2,r2,1
1000c978:	e0bffa15 	stw	r2,-24(fp)
1000c97c:	e0fffa17 	ldw	r3,-24(fp)
1000c980:	e0bffe17 	ldw	r2,-8(fp)
1000c984:	18bff21e 	bne	r3,r2,1000c950 <__alt_data_end+0xf800c950>
        {
          recon[i] = scanline[i];
        }
        for(i = bytewidth; i < length; ++i)
1000c988:	e0bffe17 	ldw	r2,-8(fp)
1000c98c:	e0bffa15 	stw	r2,-24(fp)
1000c990:	00001206 	br	1000c9dc <unfilterScanline+0x530>
        {
          /*paethPredictor(recon[i - bytewidth], 0, 0) is always recon[i - bytewidth]*/
          recon[i] = (scanline[i] + recon[i - bytewidth]);
1000c994:	e0fffb17 	ldw	r3,-20(fp)
1000c998:	e0bffa17 	ldw	r2,-24(fp)
1000c99c:	1885883a 	add	r2,r3,r2
1000c9a0:	e13ffc17 	ldw	r4,-16(fp)
1000c9a4:	e0fffa17 	ldw	r3,-24(fp)
1000c9a8:	20c7883a 	add	r3,r4,r3
1000c9ac:	19000003 	ldbu	r4,0(r3)
1000c9b0:	e17ffa17 	ldw	r5,-24(fp)
1000c9b4:	e0fffe17 	ldw	r3,-8(fp)
1000c9b8:	28c7c83a 	sub	r3,r5,r3
1000c9bc:	e17ffb17 	ldw	r5,-20(fp)
1000c9c0:	28c7883a 	add	r3,r5,r3
1000c9c4:	18c00003 	ldbu	r3,0(r3)
1000c9c8:	20c7883a 	add	r3,r4,r3
1000c9cc:	10c00005 	stb	r3,0(r2)
      {
        for(i = 0; i != bytewidth; ++i)
        {
          recon[i] = scanline[i];
        }
        for(i = bytewidth; i < length; ++i)
1000c9d0:	e0bffa17 	ldw	r2,-24(fp)
1000c9d4:	10800044 	addi	r2,r2,1
1000c9d8:	e0bffa15 	stw	r2,-24(fp)
1000c9dc:	e0fffa17 	ldw	r3,-24(fp)
1000c9e0:	e0800517 	ldw	r2,20(fp)
1000c9e4:	18bfeb36 	bltu	r3,r2,1000c994 <__alt_data_end+0xf800c994>
        {
          /*paethPredictor(recon[i - bytewidth], 0, 0) is always recon[i - bytewidth]*/
          recon[i] = (scanline[i] + recon[i - bytewidth]);
        }
      }
      break;
1000c9e8:	00000306 	br	1000c9f8 <unfilterScanline+0x54c>
1000c9ec:	00000206 	br	1000c9f8 <unfilterScanline+0x54c>
    default: return 36; /*error: unexisting filter type given*/
1000c9f0:	00800904 	movi	r2,36
1000c9f4:	00000106 	br	1000c9fc <unfilterScanline+0x550>
  }
  return 0;
1000c9f8:	0005883a 	mov	r2,zero
}
1000c9fc:	e037883a 	mov	sp,fp
1000ca00:	dfc00317 	ldw	ra,12(sp)
1000ca04:	df000217 	ldw	fp,8(sp)
1000ca08:	dc400117 	ldw	r17,4(sp)
1000ca0c:	dc000017 	ldw	r16,0(sp)
1000ca10:	dec00404 	addi	sp,sp,16
1000ca14:	f800283a 	ret

1000ca18 <unfilter>:

static unsigned unfilter(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
{
1000ca18:	defff004 	addi	sp,sp,-64
1000ca1c:	dfc00f15 	stw	ra,60(sp)
1000ca20:	df000e15 	stw	fp,56(sp)
1000ca24:	df000e04 	addi	fp,sp,56
1000ca28:	e13ffc15 	stw	r4,-16(fp)
1000ca2c:	e17ffd15 	stw	r5,-12(fp)
1000ca30:	e1bffe15 	stw	r6,-8(fp)
1000ca34:	e1ffff15 	stw	r7,-4(fp)
  w and h are image dimensions or dimensions of reduced image, bpp is bits per pixel
  in and out are allowed to be the same memory address (but aren't the same size since in has the extra filter bytes)
  */

  unsigned y;
  unsigned char* prevline = 0;
1000ca38:	e03ff515 	stw	zero,-44(fp)

  /*bytewidth is used for filtering, is 1 when bpp < 8, number of bytes per pixel otherwise*/
  size_t bytewidth = (bpp + 7) / 8;
1000ca3c:	e0800217 	ldw	r2,8(fp)
1000ca40:	108001c4 	addi	r2,r2,7
1000ca44:	1004d0fa 	srli	r2,r2,3
1000ca48:	e0bff615 	stw	r2,-40(fp)
  size_t linebytes = (w * bpp + 7) / 8;
1000ca4c:	e13ffe17 	ldw	r4,-8(fp)
1000ca50:	e1400217 	ldw	r5,8(fp)
1000ca54:	00146fc0 	call	100146fc <__mulsi3>
1000ca58:	108001c4 	addi	r2,r2,7
1000ca5c:	1004d0fa 	srli	r2,r2,3
1000ca60:	e0bff715 	stw	r2,-36(fp)

  for(y = 0; y < h; ++y)
1000ca64:	e03ff415 	stw	zero,-48(fp)
1000ca68:	00002b06 	br	1000cb18 <unfilter+0x100>
  {
    size_t outindex = linebytes * y;
1000ca6c:	e13ff717 	ldw	r4,-36(fp)
1000ca70:	e17ff417 	ldw	r5,-48(fp)
1000ca74:	00146fc0 	call	100146fc <__mulsi3>
1000ca78:	e0bff815 	stw	r2,-32(fp)
    size_t inindex = (1 + linebytes) * y; /*the extra filterbyte added to each row*/
1000ca7c:	e0bff717 	ldw	r2,-36(fp)
1000ca80:	10800044 	addi	r2,r2,1
1000ca84:	1009883a 	mov	r4,r2
1000ca88:	e17ff417 	ldw	r5,-48(fp)
1000ca8c:	00146fc0 	call	100146fc <__mulsi3>
1000ca90:	e0bff915 	stw	r2,-28(fp)
    unsigned char filterType = in[inindex];
1000ca94:	e0fffd17 	ldw	r3,-12(fp)
1000ca98:	e0bff917 	ldw	r2,-28(fp)
1000ca9c:	1885883a 	add	r2,r3,r2
1000caa0:	10800003 	ldbu	r2,0(r2)
1000caa4:	e0bffa05 	stb	r2,-24(fp)

    CERROR_TRY_RETURN(unfilterScanline(&out[outindex], &in[inindex + 1], prevline, bytewidth, filterType, linebytes));
1000caa8:	e0fffc17 	ldw	r3,-16(fp)
1000caac:	e0bff817 	ldw	r2,-32(fp)
1000cab0:	1887883a 	add	r3,r3,r2
1000cab4:	e0bff917 	ldw	r2,-28(fp)
1000cab8:	10800044 	addi	r2,r2,1
1000cabc:	e13ffd17 	ldw	r4,-12(fp)
1000cac0:	2085883a 	add	r2,r4,r2
1000cac4:	e13ffa03 	ldbu	r4,-24(fp)
1000cac8:	d9000015 	stw	r4,0(sp)
1000cacc:	e13ff717 	ldw	r4,-36(fp)
1000cad0:	d9000115 	stw	r4,4(sp)
1000cad4:	1809883a 	mov	r4,r3
1000cad8:	100b883a 	mov	r5,r2
1000cadc:	e1bff517 	ldw	r6,-44(fp)
1000cae0:	e1fff617 	ldw	r7,-40(fp)
1000cae4:	000c4ac0 	call	1000c4ac <unfilterScanline>
1000cae8:	e0bffb15 	stw	r2,-20(fp)
1000caec:	e0bffb17 	ldw	r2,-20(fp)
1000caf0:	10000226 	beq	r2,zero,1000cafc <unfilter+0xe4>
1000caf4:	e0bffb17 	ldw	r2,-20(fp)
1000caf8:	00000b06 	br	1000cb28 <unfilter+0x110>

    prevline = &out[outindex];
1000cafc:	e0fffc17 	ldw	r3,-16(fp)
1000cb00:	e0bff817 	ldw	r2,-32(fp)
1000cb04:	1885883a 	add	r2,r3,r2
1000cb08:	e0bff515 	stw	r2,-44(fp)

  /*bytewidth is used for filtering, is 1 when bpp < 8, number of bytes per pixel otherwise*/
  size_t bytewidth = (bpp + 7) / 8;
  size_t linebytes = (w * bpp + 7) / 8;

  for(y = 0; y < h; ++y)
1000cb0c:	e0bff417 	ldw	r2,-48(fp)
1000cb10:	10800044 	addi	r2,r2,1
1000cb14:	e0bff415 	stw	r2,-48(fp)
1000cb18:	e0fff417 	ldw	r3,-48(fp)
1000cb1c:	e0bfff17 	ldw	r2,-4(fp)
1000cb20:	18bfd236 	bltu	r3,r2,1000ca6c <__alt_data_end+0xf800ca6c>
    CERROR_TRY_RETURN(unfilterScanline(&out[outindex], &in[inindex + 1], prevline, bytewidth, filterType, linebytes));

    prevline = &out[outindex];
  }

  return 0;
1000cb24:	0005883a 	mov	r2,zero
}
1000cb28:	e037883a 	mov	sp,fp
1000cb2c:	dfc00117 	ldw	ra,4(sp)
1000cb30:	df000017 	ldw	fp,0(sp)
1000cb34:	dec00204 	addi	sp,sp,8
1000cb38:	f800283a 	ret

1000cb3c <Adam7_deinterlace>:
out must be big enough AND must be 0 everywhere if bpp < 8 in the current implementation
(because that's likely a little bit faster)
NOTE: comments about padding bits are only relevant if bpp < 8
*/
static void Adam7_deinterlace(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
{
1000cb3c:	deffbf04 	addi	sp,sp,-260
1000cb40:	dfc04015 	stw	ra,256(sp)
1000cb44:	df003f15 	stw	fp,252(sp)
1000cb48:	dc403e15 	stw	r17,248(sp)
1000cb4c:	dc003d15 	stw	r16,244(sp)
1000cb50:	df003d04 	addi	fp,sp,244
1000cb54:	e13ffc15 	stw	r4,-16(fp)
1000cb58:	e17ffd15 	stw	r5,-12(fp)
1000cb5c:	e1bffe15 	stw	r6,-8(fp)
1000cb60:	e1ffff15 	stw	r7,-4(fp)
  unsigned passw[7], passh[7];
  size_t filter_passstart[8], padded_passstart[8], passstart[8];
  unsigned i;

  Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
1000cb64:	e13fd404 	addi	r4,fp,-176
1000cb68:	e17fdb04 	addi	r5,fp,-148
1000cb6c:	e0ffe204 	addi	r3,fp,-120
1000cb70:	e0bfea04 	addi	r2,fp,-88
1000cb74:	e1bff204 	addi	r6,fp,-56
1000cb78:	d9800015 	stw	r6,0(sp)
1000cb7c:	e1bffe17 	ldw	r6,-8(fp)
1000cb80:	d9800115 	stw	r6,4(sp)
1000cb84:	e1bfff17 	ldw	r6,-4(fp)
1000cb88:	d9800215 	stw	r6,8(sp)
1000cb8c:	e1800417 	ldw	r6,16(fp)
1000cb90:	d9800315 	stw	r6,12(sp)
1000cb94:	180d883a 	mov	r6,r3
1000cb98:	100f883a 	mov	r7,r2
1000cb9c:	000bd100 	call	1000bd10 <Adam7_getpassvalues>

  if(bpp >= 8)
1000cba0:	e0800417 	ldw	r2,16(fp)
1000cba4:	10800230 	cmpltui	r2,r2,8
1000cba8:	1000821e 	bne	r2,zero,1000cdb4 <Adam7_deinterlace+0x278>
  {
    for(i = 0; i != 7; ++i)
1000cbac:	e03fc715 	stw	zero,-228(fp)
1000cbb0:	00007c06 	br	1000cda4 <Adam7_deinterlace+0x268>
    {
      unsigned x, y, b;
      size_t bytewidth = bpp / 8;
1000cbb4:	e0800417 	ldw	r2,16(fp)
1000cbb8:	1004d0fa 	srli	r2,r2,3
1000cbbc:	e0bfce15 	stw	r2,-200(fp)
      for(y = 0; y < passh[i]; ++y)
1000cbc0:	e03fc915 	stw	zero,-220(fp)
1000cbc4:	00006b06 	br	1000cd74 <Adam7_deinterlace+0x238>
      for(x = 0; x < passw[i]; ++x)
1000cbc8:	e03fc815 	stw	zero,-224(fp)
1000cbcc:	00005d06 	br	1000cd44 <Adam7_deinterlace+0x208>
      {
        size_t pixelinstart = passstart[i] + (y * passw[i] + x) * bytewidth;
1000cbd0:	e0bfc717 	ldw	r2,-228(fp)
1000cbd4:	1085883a 	add	r2,r2,r2
1000cbd8:	1085883a 	add	r2,r2,r2
1000cbdc:	e0ffc704 	addi	r3,fp,-228
1000cbe0:	1885883a 	add	r2,r3,r2
1000cbe4:	10802b04 	addi	r2,r2,172
1000cbe8:	14000017 	ldw	r16,0(r2)
1000cbec:	e0bfc717 	ldw	r2,-228(fp)
1000cbf0:	1085883a 	add	r2,r2,r2
1000cbf4:	1085883a 	add	r2,r2,r2
1000cbf8:	e0ffc704 	addi	r3,fp,-228
1000cbfc:	1885883a 	add	r2,r3,r2
1000cc00:	10800d04 	addi	r2,r2,52
1000cc04:	10800017 	ldw	r2,0(r2)
1000cc08:	1009883a 	mov	r4,r2
1000cc0c:	e17fc917 	ldw	r5,-220(fp)
1000cc10:	00146fc0 	call	100146fc <__mulsi3>
1000cc14:	1007883a 	mov	r3,r2
1000cc18:	e0bfc817 	ldw	r2,-224(fp)
1000cc1c:	1885883a 	add	r2,r3,r2
1000cc20:	1009883a 	mov	r4,r2
1000cc24:	e17fce17 	ldw	r5,-200(fp)
1000cc28:	00146fc0 	call	100146fc <__mulsi3>
1000cc2c:	8085883a 	add	r2,r16,r2
1000cc30:	e0bfcf15 	stw	r2,-196(fp)
        size_t pixeloutstart = ((ADAM7_IY[i] + y * ADAM7_DY[i]) * w + ADAM7_IX[i] + x * ADAM7_DX[i]) * bytewidth;
1000cc34:	00c400b4 	movhi	r3,4098
1000cc38:	18ca7404 	addi	r3,r3,10704
1000cc3c:	e0bfc717 	ldw	r2,-228(fp)
1000cc40:	1085883a 	add	r2,r2,r2
1000cc44:	1085883a 	add	r2,r2,r2
1000cc48:	1885883a 	add	r2,r3,r2
1000cc4c:	14000017 	ldw	r16,0(r2)
1000cc50:	00c400b4 	movhi	r3,4098
1000cc54:	18ca8204 	addi	r3,r3,10760
1000cc58:	e0bfc717 	ldw	r2,-228(fp)
1000cc5c:	1085883a 	add	r2,r2,r2
1000cc60:	1085883a 	add	r2,r2,r2
1000cc64:	1885883a 	add	r2,r3,r2
1000cc68:	10800017 	ldw	r2,0(r2)
1000cc6c:	1009883a 	mov	r4,r2
1000cc70:	e17fc917 	ldw	r5,-220(fp)
1000cc74:	00146fc0 	call	100146fc <__mulsi3>
1000cc78:	8085883a 	add	r2,r16,r2
1000cc7c:	1009883a 	mov	r4,r2
1000cc80:	e17ffe17 	ldw	r5,-8(fp)
1000cc84:	00146fc0 	call	100146fc <__mulsi3>
1000cc88:	1021883a 	mov	r16,r2
1000cc8c:	00c400b4 	movhi	r3,4098
1000cc90:	18ca7b04 	addi	r3,r3,10732
1000cc94:	e0bfc717 	ldw	r2,-228(fp)
1000cc98:	1085883a 	add	r2,r2,r2
1000cc9c:	1085883a 	add	r2,r2,r2
1000cca0:	1885883a 	add	r2,r3,r2
1000cca4:	10800017 	ldw	r2,0(r2)
1000cca8:	1009883a 	mov	r4,r2
1000ccac:	e17fc817 	ldw	r5,-224(fp)
1000ccb0:	00146fc0 	call	100146fc <__mulsi3>
1000ccb4:	8087883a 	add	r3,r16,r2
1000ccb8:	010400b4 	movhi	r4,4098
1000ccbc:	210a6d04 	addi	r4,r4,10676
1000ccc0:	e0bfc717 	ldw	r2,-228(fp)
1000ccc4:	1085883a 	add	r2,r2,r2
1000ccc8:	1085883a 	add	r2,r2,r2
1000cccc:	2085883a 	add	r2,r4,r2
1000ccd0:	10800017 	ldw	r2,0(r2)
1000ccd4:	1885883a 	add	r2,r3,r2
1000ccd8:	1009883a 	mov	r4,r2
1000ccdc:	e17fce17 	ldw	r5,-200(fp)
1000cce0:	00146fc0 	call	100146fc <__mulsi3>
1000cce4:	e0bfd015 	stw	r2,-192(fp)
        for(b = 0; b < bytewidth; ++b)
1000cce8:	e03fca15 	stw	zero,-216(fp)
1000ccec:	00000f06 	br	1000cd2c <Adam7_deinterlace+0x1f0>
        {
          out[pixeloutstart + b] = in[pixelinstart + b];
1000ccf0:	e0ffd017 	ldw	r3,-192(fp)
1000ccf4:	e0bfca17 	ldw	r2,-216(fp)
1000ccf8:	1885883a 	add	r2,r3,r2
1000ccfc:	e0fffc17 	ldw	r3,-16(fp)
1000cd00:	1885883a 	add	r2,r3,r2
1000cd04:	e13fcf17 	ldw	r4,-196(fp)
1000cd08:	e0ffca17 	ldw	r3,-216(fp)
1000cd0c:	20c7883a 	add	r3,r4,r3
1000cd10:	e13ffd17 	ldw	r4,-12(fp)
1000cd14:	20c7883a 	add	r3,r4,r3
1000cd18:	18c00003 	ldbu	r3,0(r3)
1000cd1c:	10c00005 	stb	r3,0(r2)
      for(y = 0; y < passh[i]; ++y)
      for(x = 0; x < passw[i]; ++x)
      {
        size_t pixelinstart = passstart[i] + (y * passw[i] + x) * bytewidth;
        size_t pixeloutstart = ((ADAM7_IY[i] + y * ADAM7_DY[i]) * w + ADAM7_IX[i] + x * ADAM7_DX[i]) * bytewidth;
        for(b = 0; b < bytewidth; ++b)
1000cd20:	e0bfca17 	ldw	r2,-216(fp)
1000cd24:	10800044 	addi	r2,r2,1
1000cd28:	e0bfca15 	stw	r2,-216(fp)
1000cd2c:	e0ffca17 	ldw	r3,-216(fp)
1000cd30:	e0bfce17 	ldw	r2,-200(fp)
1000cd34:	18bfee36 	bltu	r3,r2,1000ccf0 <__alt_data_end+0xf800ccf0>
    for(i = 0; i != 7; ++i)
    {
      unsigned x, y, b;
      size_t bytewidth = bpp / 8;
      for(y = 0; y < passh[i]; ++y)
      for(x = 0; x < passw[i]; ++x)
1000cd38:	e0bfc817 	ldw	r2,-224(fp)
1000cd3c:	10800044 	addi	r2,r2,1
1000cd40:	e0bfc815 	stw	r2,-224(fp)
1000cd44:	e0bfc717 	ldw	r2,-228(fp)
1000cd48:	1085883a 	add	r2,r2,r2
1000cd4c:	1085883a 	add	r2,r2,r2
1000cd50:	e0ffc704 	addi	r3,fp,-228
1000cd54:	1885883a 	add	r2,r3,r2
1000cd58:	10800d04 	addi	r2,r2,52
1000cd5c:	10800017 	ldw	r2,0(r2)
1000cd60:	e0ffc817 	ldw	r3,-224(fp)
1000cd64:	18bf9a36 	bltu	r3,r2,1000cbd0 <__alt_data_end+0xf800cbd0>
  {
    for(i = 0; i != 7; ++i)
    {
      unsigned x, y, b;
      size_t bytewidth = bpp / 8;
      for(y = 0; y < passh[i]; ++y)
1000cd68:	e0bfc917 	ldw	r2,-220(fp)
1000cd6c:	10800044 	addi	r2,r2,1
1000cd70:	e0bfc915 	stw	r2,-220(fp)
1000cd74:	e0bfc717 	ldw	r2,-228(fp)
1000cd78:	1085883a 	add	r2,r2,r2
1000cd7c:	1085883a 	add	r2,r2,r2
1000cd80:	e0ffc704 	addi	r3,fp,-228
1000cd84:	1885883a 	add	r2,r3,r2
1000cd88:	10801404 	addi	r2,r2,80
1000cd8c:	10800017 	ldw	r2,0(r2)
1000cd90:	e0ffc917 	ldw	r3,-220(fp)
1000cd94:	18bf8c36 	bltu	r3,r2,1000cbc8 <__alt_data_end+0xf800cbc8>

  Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);

  if(bpp >= 8)
  {
    for(i = 0; i != 7; ++i)
1000cd98:	e0bfc717 	ldw	r2,-228(fp)
1000cd9c:	10800044 	addi	r2,r2,1
1000cda0:	e0bfc715 	stw	r2,-228(fp)
1000cda4:	e0bfc717 	ldw	r2,-228(fp)
1000cda8:	108001d8 	cmpnei	r2,r2,7
1000cdac:	103f811e 	bne	r2,zero,1000cbb4 <__alt_data_end+0xf800cbb4>
1000cdb0:	00008506 	br	1000cfc8 <Adam7_deinterlace+0x48c>
      }
    }
  }
  else /*bpp < 8: Adam7 with pixels < 8 bit is a bit trickier: with bit pointers*/
  {
    for(i = 0; i != 7; ++i)
1000cdb4:	e03fc715 	stw	zero,-228(fp)
1000cdb8:	00008006 	br	1000cfbc <Adam7_deinterlace+0x480>
    {
      unsigned x, y, b;
      unsigned ilinebits = bpp * passw[i];
1000cdbc:	e0bfc717 	ldw	r2,-228(fp)
1000cdc0:	1085883a 	add	r2,r2,r2
1000cdc4:	1085883a 	add	r2,r2,r2
1000cdc8:	e0ffc704 	addi	r3,fp,-228
1000cdcc:	1885883a 	add	r2,r3,r2
1000cdd0:	10800d04 	addi	r2,r2,52
1000cdd4:	10800017 	ldw	r2,0(r2)
1000cdd8:	1009883a 	mov	r4,r2
1000cddc:	e1400417 	ldw	r5,16(fp)
1000cde0:	00146fc0 	call	100146fc <__mulsi3>
1000cde4:	e0bfd115 	stw	r2,-188(fp)
      unsigned olinebits = bpp * w;
1000cde8:	e1000417 	ldw	r4,16(fp)
1000cdec:	e17ffe17 	ldw	r5,-8(fp)
1000cdf0:	00146fc0 	call	100146fc <__mulsi3>
1000cdf4:	e0bfd215 	stw	r2,-184(fp)
      size_t obp, ibp; /*bit pointers (for out and in buffer)*/
      for(y = 0; y < passh[i]; ++y)
1000cdf8:	e03fcc15 	stw	zero,-208(fp)
1000cdfc:	00006306 	br	1000cf8c <Adam7_deinterlace+0x450>
      for(x = 0; x < passw[i]; ++x)
1000ce00:	e03fcb15 	stw	zero,-212(fp)
1000ce04:	00005506 	br	1000cf5c <Adam7_deinterlace+0x420>
      {
        ibp = (8 * passstart[i]) + (y * ilinebits + x * bpp);
1000ce08:	e0bfc717 	ldw	r2,-228(fp)
1000ce0c:	1085883a 	add	r2,r2,r2
1000ce10:	1085883a 	add	r2,r2,r2
1000ce14:	e0ffc704 	addi	r3,fp,-228
1000ce18:	1885883a 	add	r2,r3,r2
1000ce1c:	10802b04 	addi	r2,r2,172
1000ce20:	10800017 	ldw	r2,0(r2)
1000ce24:	102090fa 	slli	r16,r2,3
1000ce28:	e13fcc17 	ldw	r4,-208(fp)
1000ce2c:	e17fd117 	ldw	r5,-188(fp)
1000ce30:	00146fc0 	call	100146fc <__mulsi3>
1000ce34:	1023883a 	mov	r17,r2
1000ce38:	e13fcb17 	ldw	r4,-212(fp)
1000ce3c:	e1400417 	ldw	r5,16(fp)
1000ce40:	00146fc0 	call	100146fc <__mulsi3>
1000ce44:	8885883a 	add	r2,r17,r2
1000ce48:	8085883a 	add	r2,r16,r2
1000ce4c:	e0bffb15 	stw	r2,-20(fp)
        obp = (ADAM7_IY[i] + y * ADAM7_DY[i]) * olinebits + (ADAM7_IX[i] + x * ADAM7_DX[i]) * bpp;
1000ce50:	00c400b4 	movhi	r3,4098
1000ce54:	18ca7404 	addi	r3,r3,10704
1000ce58:	e0bfc717 	ldw	r2,-228(fp)
1000ce5c:	1085883a 	add	r2,r2,r2
1000ce60:	1085883a 	add	r2,r2,r2
1000ce64:	1885883a 	add	r2,r3,r2
1000ce68:	14000017 	ldw	r16,0(r2)
1000ce6c:	00c400b4 	movhi	r3,4098
1000ce70:	18ca8204 	addi	r3,r3,10760
1000ce74:	e0bfc717 	ldw	r2,-228(fp)
1000ce78:	1085883a 	add	r2,r2,r2
1000ce7c:	1085883a 	add	r2,r2,r2
1000ce80:	1885883a 	add	r2,r3,r2
1000ce84:	10800017 	ldw	r2,0(r2)
1000ce88:	1009883a 	mov	r4,r2
1000ce8c:	e17fcc17 	ldw	r5,-208(fp)
1000ce90:	00146fc0 	call	100146fc <__mulsi3>
1000ce94:	8085883a 	add	r2,r16,r2
1000ce98:	1009883a 	mov	r4,r2
1000ce9c:	e17fd217 	ldw	r5,-184(fp)
1000cea0:	00146fc0 	call	100146fc <__mulsi3>
1000cea4:	1021883a 	mov	r16,r2
1000cea8:	00c400b4 	movhi	r3,4098
1000ceac:	18ca6d04 	addi	r3,r3,10676
1000ceb0:	e0bfc717 	ldw	r2,-228(fp)
1000ceb4:	1085883a 	add	r2,r2,r2
1000ceb8:	1085883a 	add	r2,r2,r2
1000cebc:	1885883a 	add	r2,r3,r2
1000cec0:	14400017 	ldw	r17,0(r2)
1000cec4:	00c400b4 	movhi	r3,4098
1000cec8:	18ca7b04 	addi	r3,r3,10732
1000cecc:	e0bfc717 	ldw	r2,-228(fp)
1000ced0:	1085883a 	add	r2,r2,r2
1000ced4:	1085883a 	add	r2,r2,r2
1000ced8:	1885883a 	add	r2,r3,r2
1000cedc:	10800017 	ldw	r2,0(r2)
1000cee0:	1009883a 	mov	r4,r2
1000cee4:	e17fcb17 	ldw	r5,-212(fp)
1000cee8:	00146fc0 	call	100146fc <__mulsi3>
1000ceec:	8885883a 	add	r2,r17,r2
1000cef0:	1009883a 	mov	r4,r2
1000cef4:	e1400417 	ldw	r5,16(fp)
1000cef8:	00146fc0 	call	100146fc <__mulsi3>
1000cefc:	8085883a 	add	r2,r16,r2
1000cf00:	e0bffa15 	stw	r2,-24(fp)
        for(b = 0; b < bpp; ++b)
1000cf04:	e03fcd15 	stw	zero,-204(fp)
1000cf08:	00000e06 	br	1000cf44 <Adam7_deinterlace+0x408>
        {
          unsigned char bit = readBitFromReversedStream(&ibp, in);
1000cf0c:	e0bffb04 	addi	r2,fp,-20
1000cf10:	1009883a 	mov	r4,r2
1000cf14:	e17ffd17 	ldw	r5,-12(fp)
1000cf18:	00063400 	call	10006340 <readBitFromReversedStream>
1000cf1c:	e0bfd305 	stb	r2,-180(fp)
          /*note that this function assumes the out buffer is completely 0, use setBitOfReversedStream otherwise*/
          setBitOfReversedStream0(&obp, out, bit);
1000cf20:	e0bfd303 	ldbu	r2,-180(fp)
1000cf24:	e0fffa04 	addi	r3,fp,-24
1000cf28:	1809883a 	mov	r4,r3
1000cf2c:	e17ffc17 	ldw	r5,-16(fp)
1000cf30:	100d883a 	mov	r6,r2
1000cf34:	00064380 	call	10006438 <setBitOfReversedStream0>
      for(y = 0; y < passh[i]; ++y)
      for(x = 0; x < passw[i]; ++x)
      {
        ibp = (8 * passstart[i]) + (y * ilinebits + x * bpp);
        obp = (ADAM7_IY[i] + y * ADAM7_DY[i]) * olinebits + (ADAM7_IX[i] + x * ADAM7_DX[i]) * bpp;
        for(b = 0; b < bpp; ++b)
1000cf38:	e0bfcd17 	ldw	r2,-204(fp)
1000cf3c:	10800044 	addi	r2,r2,1
1000cf40:	e0bfcd15 	stw	r2,-204(fp)
1000cf44:	e0ffcd17 	ldw	r3,-204(fp)
1000cf48:	e0800417 	ldw	r2,16(fp)
1000cf4c:	18bfef36 	bltu	r3,r2,1000cf0c <__alt_data_end+0xf800cf0c>
      unsigned x, y, b;
      unsigned ilinebits = bpp * passw[i];
      unsigned olinebits = bpp * w;
      size_t obp, ibp; /*bit pointers (for out and in buffer)*/
      for(y = 0; y < passh[i]; ++y)
      for(x = 0; x < passw[i]; ++x)
1000cf50:	e0bfcb17 	ldw	r2,-212(fp)
1000cf54:	10800044 	addi	r2,r2,1
1000cf58:	e0bfcb15 	stw	r2,-212(fp)
1000cf5c:	e0bfc717 	ldw	r2,-228(fp)
1000cf60:	1085883a 	add	r2,r2,r2
1000cf64:	1085883a 	add	r2,r2,r2
1000cf68:	e0ffc704 	addi	r3,fp,-228
1000cf6c:	1885883a 	add	r2,r3,r2
1000cf70:	10800d04 	addi	r2,r2,52
1000cf74:	10800017 	ldw	r2,0(r2)
1000cf78:	e0ffcb17 	ldw	r3,-212(fp)
1000cf7c:	18bfa236 	bltu	r3,r2,1000ce08 <__alt_data_end+0xf800ce08>
    {
      unsigned x, y, b;
      unsigned ilinebits = bpp * passw[i];
      unsigned olinebits = bpp * w;
      size_t obp, ibp; /*bit pointers (for out and in buffer)*/
      for(y = 0; y < passh[i]; ++y)
1000cf80:	e0bfcc17 	ldw	r2,-208(fp)
1000cf84:	10800044 	addi	r2,r2,1
1000cf88:	e0bfcc15 	stw	r2,-208(fp)
1000cf8c:	e0bfc717 	ldw	r2,-228(fp)
1000cf90:	1085883a 	add	r2,r2,r2
1000cf94:	1085883a 	add	r2,r2,r2
1000cf98:	e0ffc704 	addi	r3,fp,-228
1000cf9c:	1885883a 	add	r2,r3,r2
1000cfa0:	10801404 	addi	r2,r2,80
1000cfa4:	10800017 	ldw	r2,0(r2)
1000cfa8:	e0ffcc17 	ldw	r3,-208(fp)
1000cfac:	18bf9436 	bltu	r3,r2,1000ce00 <__alt_data_end+0xf800ce00>
      }
    }
  }
  else /*bpp < 8: Adam7 with pixels < 8 bit is a bit trickier: with bit pointers*/
  {
    for(i = 0; i != 7; ++i)
1000cfb0:	e0bfc717 	ldw	r2,-228(fp)
1000cfb4:	10800044 	addi	r2,r2,1
1000cfb8:	e0bfc715 	stw	r2,-228(fp)
1000cfbc:	e0bfc717 	ldw	r2,-228(fp)
1000cfc0:	108001d8 	cmpnei	r2,r2,7
1000cfc4:	103f7d1e 	bne	r2,zero,1000cdbc <__alt_data_end+0xf800cdbc>
          setBitOfReversedStream0(&obp, out, bit);
        }
      }
    }
  }
}
1000cfc8:	e037883a 	mov	sp,fp
1000cfcc:	dfc00317 	ldw	ra,12(sp)
1000cfd0:	df000217 	ldw	fp,8(sp)
1000cfd4:	dc400117 	ldw	r17,4(sp)
1000cfd8:	dc000017 	ldw	r16,0(sp)
1000cfdc:	dec00404 	addi	sp,sp,16
1000cfe0:	f800283a 	ret

1000cfe4 <removePaddingBits>:

static void removePaddingBits(unsigned char* out, const unsigned char* in,
                              size_t olinebits, size_t ilinebits, unsigned h)
{
1000cfe4:	defff404 	addi	sp,sp,-48
1000cfe8:	dfc00b15 	stw	ra,44(sp)
1000cfec:	df000a15 	stw	fp,40(sp)
1000cff0:	df000a04 	addi	fp,sp,40
1000cff4:	e13ffc15 	stw	r4,-16(fp)
1000cff8:	e17ffd15 	stw	r5,-12(fp)
1000cffc:	e1bffe15 	stw	r6,-8(fp)
1000d000:	e1ffff15 	stw	r7,-4(fp)
  have >= ilinebits*h bits, out must have >= olinebits*h bits, olinebits must be <= ilinebits
  also used to move bits after earlier such operations happened, e.g. in a sequence of reduced images from Adam7
  only useful if (ilinebits - olinebits) is a value in the range 1..7
  */
  unsigned y;
  size_t diff = ilinebits - olinebits;
1000d004:	e0ffff17 	ldw	r3,-4(fp)
1000d008:	e0bffe17 	ldw	r2,-8(fp)
1000d00c:	1885c83a 	sub	r2,r3,r2
1000d010:	e0bff815 	stw	r2,-32(fp)
  size_t ibp = 0, obp = 0; /*input and output bit pointers*/
1000d014:	e03ffa15 	stw	zero,-24(fp)
1000d018:	e03ffb15 	stw	zero,-20(fp)
  for(y = 0; y < h; ++y)
1000d01c:	e03ff615 	stw	zero,-40(fp)
1000d020:	00001a06 	br	1000d08c <removePaddingBits+0xa8>
  {
    size_t x;
    for(x = 0; x < olinebits; ++x)
1000d024:	e03ff715 	stw	zero,-36(fp)
1000d028:	00000e06 	br	1000d064 <removePaddingBits+0x80>
    {
      unsigned char bit = readBitFromReversedStream(&ibp, in);
1000d02c:	e0bffa04 	addi	r2,fp,-24
1000d030:	1009883a 	mov	r4,r2
1000d034:	e17ffd17 	ldw	r5,-12(fp)
1000d038:	00063400 	call	10006340 <readBitFromReversedStream>
1000d03c:	e0bff905 	stb	r2,-28(fp)
      setBitOfReversedStream(&obp, out, bit);
1000d040:	e0bff903 	ldbu	r2,-28(fp)
1000d044:	e0fffb04 	addi	r3,fp,-20
1000d048:	1809883a 	mov	r4,r3
1000d04c:	e17ffc17 	ldw	r5,-16(fp)
1000d050:	100d883a 	mov	r6,r2
1000d054:	00064d00 	call	100064d0 <setBitOfReversedStream>
  size_t diff = ilinebits - olinebits;
  size_t ibp = 0, obp = 0; /*input and output bit pointers*/
  for(y = 0; y < h; ++y)
  {
    size_t x;
    for(x = 0; x < olinebits; ++x)
1000d058:	e0bff717 	ldw	r2,-36(fp)
1000d05c:	10800044 	addi	r2,r2,1
1000d060:	e0bff715 	stw	r2,-36(fp)
1000d064:	e0fff717 	ldw	r3,-36(fp)
1000d068:	e0bffe17 	ldw	r2,-8(fp)
1000d06c:	18bfef36 	bltu	r3,r2,1000d02c <__alt_data_end+0xf800d02c>
    {
      unsigned char bit = readBitFromReversedStream(&ibp, in);
      setBitOfReversedStream(&obp, out, bit);
    }
    ibp += diff;
1000d070:	e0fffa17 	ldw	r3,-24(fp)
1000d074:	e0bff817 	ldw	r2,-32(fp)
1000d078:	1885883a 	add	r2,r3,r2
1000d07c:	e0bffa15 	stw	r2,-24(fp)
  only useful if (ilinebits - olinebits) is a value in the range 1..7
  */
  unsigned y;
  size_t diff = ilinebits - olinebits;
  size_t ibp = 0, obp = 0; /*input and output bit pointers*/
  for(y = 0; y < h; ++y)
1000d080:	e0bff617 	ldw	r2,-40(fp)
1000d084:	10800044 	addi	r2,r2,1
1000d088:	e0bff615 	stw	r2,-40(fp)
1000d08c:	e0fff617 	ldw	r3,-40(fp)
1000d090:	e0800217 	ldw	r2,8(fp)
1000d094:	18bfe336 	bltu	r3,r2,1000d024 <__alt_data_end+0xf800d024>
      unsigned char bit = readBitFromReversedStream(&ibp, in);
      setBitOfReversedStream(&obp, out, bit);
    }
    ibp += diff;
  }
}
1000d098:	e037883a 	mov	sp,fp
1000d09c:	dfc00117 	ldw	ra,4(sp)
1000d0a0:	df000017 	ldw	fp,0(sp)
1000d0a4:	dec00204 	addi	sp,sp,8
1000d0a8:	f800283a 	ret

1000d0ac <postProcessScanlines>:
/*out must be buffer big enough to contain full image, and in must contain the full decompressed data from
the IDAT chunks (with filter index bytes and possible padding bits)
return value is error*/
static unsigned postProcessScanlines(unsigned char* out, unsigned char* in,
                                     unsigned w, unsigned h, const LodePNGInfo* info_png)
{
1000d0ac:	deffc804 	addi	sp,sp,-224
1000d0b0:	dfc03715 	stw	ra,220(sp)
1000d0b4:	df003615 	stw	fp,216(sp)
1000d0b8:	dc803515 	stw	r18,212(sp)
1000d0bc:	dc403415 	stw	r17,208(sp)
1000d0c0:	dc003315 	stw	r16,204(sp)
1000d0c4:	df003304 	addi	fp,sp,204
1000d0c8:	e13ffc15 	stw	r4,-16(fp)
1000d0cc:	e17ffd15 	stw	r5,-12(fp)
1000d0d0:	e1bffe15 	stw	r6,-8(fp)
1000d0d4:	e1ffff15 	stw	r7,-4(fp)
  Steps:
  *) if no Adam7: 1) unfilter 2) remove padding bits (= posible extra bits per scanline if bpp < 8)
  *) if adam7: 1) 7x unfilter 2) 7x remove padding bits 3) Adam7_deinterlace
  NOTE: the in buffer will be overwritten with intermediate data!
  */
  unsigned bpp = lodepng_get_bpp(&info_png->color);
1000d0d8:	e0800517 	ldw	r2,20(fp)
1000d0dc:	10800304 	addi	r2,r2,12
1000d0e0:	1009883a 	mov	r4,r2
1000d0e4:	00073780 	call	10007378 <lodepng_get_bpp>
1000d0e8:	e0bfd215 	stw	r2,-184(fp)
  if(bpp == 0) return 31; /*error: invalid colortype*/
1000d0ec:	e0bfd217 	ldw	r2,-184(fp)
1000d0f0:	1000021e 	bne	r2,zero,1000d0fc <postProcessScanlines+0x50>
1000d0f4:	008007c4 	movi	r2,31
1000d0f8:	0000be06 	br	1000d3f4 <postProcessScanlines+0x348>

  if(info_png->interlace_method == 0)
1000d0fc:	e0800517 	ldw	r2,20(fp)
1000d100:	10800217 	ldw	r2,8(r2)
1000d104:	1000381e 	bne	r2,zero,1000d1e8 <postProcessScanlines+0x13c>
  {
    if(bpp < 8 && w * bpp != ((w * bpp + 7) / 8) * 8)
1000d108:	e0bfd217 	ldw	r2,-184(fp)
1000d10c:	10800228 	cmpgeui	r2,r2,8
1000d110:	1000291e 	bne	r2,zero,1000d1b8 <postProcessScanlines+0x10c>
1000d114:	e13ffe17 	ldw	r4,-8(fp)
1000d118:	e17fd217 	ldw	r5,-184(fp)
1000d11c:	00146fc0 	call	100146fc <__mulsi3>
1000d120:	1021883a 	mov	r16,r2
1000d124:	e13ffe17 	ldw	r4,-8(fp)
1000d128:	e17fd217 	ldw	r5,-184(fp)
1000d12c:	00146fc0 	call	100146fc <__mulsi3>
1000d130:	108001c4 	addi	r2,r2,7
1000d134:	1004d0fa 	srli	r2,r2,3
1000d138:	100490fa 	slli	r2,r2,3
1000d13c:	80801e26 	beq	r16,r2,1000d1b8 <postProcessScanlines+0x10c>
    {
      CERROR_TRY_RETURN(unfilter(in, in, w, h, bpp));
1000d140:	e0bfd217 	ldw	r2,-184(fp)
1000d144:	d8800015 	stw	r2,0(sp)
1000d148:	e13ffd17 	ldw	r4,-12(fp)
1000d14c:	e17ffd17 	ldw	r5,-12(fp)
1000d150:	e1bffe17 	ldw	r6,-8(fp)
1000d154:	e1ffff17 	ldw	r7,-4(fp)
1000d158:	000ca180 	call	1000ca18 <unfilter>
1000d15c:	e0bfd315 	stw	r2,-180(fp)
1000d160:	e0bfd317 	ldw	r2,-180(fp)
1000d164:	10000226 	beq	r2,zero,1000d170 <postProcessScanlines+0xc4>
1000d168:	e0bfd317 	ldw	r2,-180(fp)
1000d16c:	0000a106 	br	1000d3f4 <postProcessScanlines+0x348>
      removePaddingBits(out, in, w * bpp, ((w * bpp + 7) / 8) * 8, h);
1000d170:	e13ffe17 	ldw	r4,-8(fp)
1000d174:	e17fd217 	ldw	r5,-184(fp)
1000d178:	00146fc0 	call	100146fc <__mulsi3>
1000d17c:	1021883a 	mov	r16,r2
1000d180:	e13ffe17 	ldw	r4,-8(fp)
1000d184:	e17fd217 	ldw	r5,-184(fp)
1000d188:	00146fc0 	call	100146fc <__mulsi3>
1000d18c:	108001c4 	addi	r2,r2,7
1000d190:	1004d0fa 	srli	r2,r2,3
1000d194:	100490fa 	slli	r2,r2,3
1000d198:	e0ffff17 	ldw	r3,-4(fp)
1000d19c:	d8c00015 	stw	r3,0(sp)
1000d1a0:	e13ffc17 	ldw	r4,-16(fp)
1000d1a4:	e17ffd17 	ldw	r5,-12(fp)
1000d1a8:	800d883a 	mov	r6,r16
1000d1ac:	100f883a 	mov	r7,r2
1000d1b0:	000cfe40 	call	1000cfe4 <removePaddingBits>
1000d1b4:	00008e06 	br	1000d3f0 <postProcessScanlines+0x344>
    }
    /*we can immediately filter into the out buffer, no other steps needed*/
    else CERROR_TRY_RETURN(unfilter(out, in, w, h, bpp));
1000d1b8:	e0bfd217 	ldw	r2,-184(fp)
1000d1bc:	d8800015 	stw	r2,0(sp)
1000d1c0:	e13ffc17 	ldw	r4,-16(fp)
1000d1c4:	e17ffd17 	ldw	r5,-12(fp)
1000d1c8:	e1bffe17 	ldw	r6,-8(fp)
1000d1cc:	e1ffff17 	ldw	r7,-4(fp)
1000d1d0:	000ca180 	call	1000ca18 <unfilter>
1000d1d4:	e0bfd415 	stw	r2,-176(fp)
1000d1d8:	e0bfd417 	ldw	r2,-176(fp)
1000d1dc:	10008426 	beq	r2,zero,1000d3f0 <postProcessScanlines+0x344>
1000d1e0:	e0bfd417 	ldw	r2,-176(fp)
1000d1e4:	00008306 	br	1000d3f4 <postProcessScanlines+0x348>
  else /*interlace_method is 1 (Adam7)*/
  {
    unsigned passw[7], passh[7]; size_t filter_passstart[8], padded_passstart[8], passstart[8];
    unsigned i;

    Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
1000d1e8:	e13fd604 	addi	r4,fp,-168
1000d1ec:	e17fdd04 	addi	r5,fp,-140
1000d1f0:	e0fff404 	addi	r3,fp,-48
1000d1f4:	e0bfec04 	addi	r2,fp,-80
1000d1f8:	e1bfe404 	addi	r6,fp,-112
1000d1fc:	d9800015 	stw	r6,0(sp)
1000d200:	e1bffe17 	ldw	r6,-8(fp)
1000d204:	d9800115 	stw	r6,4(sp)
1000d208:	e1bfff17 	ldw	r6,-4(fp)
1000d20c:	d9800215 	stw	r6,8(sp)
1000d210:	e1bfd217 	ldw	r6,-184(fp)
1000d214:	d9800315 	stw	r6,12(sp)
1000d218:	180d883a 	mov	r6,r3
1000d21c:	100f883a 	mov	r7,r2
1000d220:	000bd100 	call	1000bd10 <Adam7_getpassvalues>

    for(i = 0; i != 7; ++i)
1000d224:	e03fd115 	stw	zero,-188(fp)
1000d228:	00006706 	br	1000d3c8 <postProcessScanlines+0x31c>
    {
      CERROR_TRY_RETURN(unfilter(&in[padded_passstart[i]], &in[filter_passstart[i]], passw[i], passh[i], bpp));
1000d22c:	e0bfd117 	ldw	r2,-188(fp)
1000d230:	1085883a 	add	r2,r2,r2
1000d234:	1085883a 	add	r2,r2,r2
1000d238:	e0ffd104 	addi	r3,fp,-188
1000d23c:	1885883a 	add	r2,r3,r2
1000d240:	10801b04 	addi	r2,r2,108
1000d244:	10800017 	ldw	r2,0(r2)
1000d248:	e0fffd17 	ldw	r3,-12(fp)
1000d24c:	1889883a 	add	r4,r3,r2
1000d250:	e0bfd117 	ldw	r2,-188(fp)
1000d254:	1085883a 	add	r2,r2,r2
1000d258:	1085883a 	add	r2,r2,r2
1000d25c:	e1bfd104 	addi	r6,fp,-188
1000d260:	3085883a 	add	r2,r6,r2
1000d264:	10802304 	addi	r2,r2,140
1000d268:	10800017 	ldw	r2,0(r2)
1000d26c:	e0fffd17 	ldw	r3,-12(fp)
1000d270:	188b883a 	add	r5,r3,r2
1000d274:	e0bfd117 	ldw	r2,-188(fp)
1000d278:	1085883a 	add	r2,r2,r2
1000d27c:	1085883a 	add	r2,r2,r2
1000d280:	e0ffd104 	addi	r3,fp,-188
1000d284:	1885883a 	add	r2,r3,r2
1000d288:	10800504 	addi	r2,r2,20
1000d28c:	10c00017 	ldw	r3,0(r2)
1000d290:	e0bfd117 	ldw	r2,-188(fp)
1000d294:	1085883a 	add	r2,r2,r2
1000d298:	1085883a 	add	r2,r2,r2
1000d29c:	e1bfd104 	addi	r6,fp,-188
1000d2a0:	3085883a 	add	r2,r6,r2
1000d2a4:	10800c04 	addi	r2,r2,48
1000d2a8:	10800017 	ldw	r2,0(r2)
1000d2ac:	e1bfd217 	ldw	r6,-184(fp)
1000d2b0:	d9800015 	stw	r6,0(sp)
1000d2b4:	180d883a 	mov	r6,r3
1000d2b8:	100f883a 	mov	r7,r2
1000d2bc:	000ca180 	call	1000ca18 <unfilter>
1000d2c0:	e0bfd515 	stw	r2,-172(fp)
1000d2c4:	e0bfd517 	ldw	r2,-172(fp)
1000d2c8:	10000226 	beq	r2,zero,1000d2d4 <postProcessScanlines+0x228>
1000d2cc:	e0bfd517 	ldw	r2,-172(fp)
1000d2d0:	00004806 	br	1000d3f4 <postProcessScanlines+0x348>
      /*TODO: possible efficiency improvement: if in this reduced image the bits fit nicely in 1 scanline,
      move bytes instead of bits or move not at all*/
      if(bpp < 8)
1000d2d4:	e0bfd217 	ldw	r2,-184(fp)
1000d2d8:	10800228 	cmpgeui	r2,r2,8
1000d2dc:	1000371e 	bne	r2,zero,1000d3bc <postProcessScanlines+0x310>
      {
        /*remove padding bits in scanlines; after this there still may be padding
        bits between the different reduced images: each reduced image still starts nicely at a byte*/
        removePaddingBits(&in[passstart[i]], &in[padded_passstart[i]], passw[i] * bpp,
1000d2e0:	e0bfd117 	ldw	r2,-188(fp)
1000d2e4:	1085883a 	add	r2,r2,r2
1000d2e8:	1085883a 	add	r2,r2,r2
1000d2ec:	e0ffd104 	addi	r3,fp,-188
1000d2f0:	1885883a 	add	r2,r3,r2
1000d2f4:	10801304 	addi	r2,r2,76
1000d2f8:	10800017 	ldw	r2,0(r2)
1000d2fc:	e0fffd17 	ldw	r3,-12(fp)
1000d300:	18a5883a 	add	r18,r3,r2
1000d304:	e0bfd117 	ldw	r2,-188(fp)
1000d308:	1085883a 	add	r2,r2,r2
1000d30c:	1085883a 	add	r2,r2,r2
1000d310:	e13fd104 	addi	r4,fp,-188
1000d314:	2085883a 	add	r2,r4,r2
1000d318:	10801b04 	addi	r2,r2,108
1000d31c:	10800017 	ldw	r2,0(r2)
1000d320:	e0fffd17 	ldw	r3,-12(fp)
1000d324:	18a3883a 	add	r17,r3,r2
1000d328:	e0bfd117 	ldw	r2,-188(fp)
1000d32c:	1085883a 	add	r2,r2,r2
1000d330:	1085883a 	add	r2,r2,r2
1000d334:	e1bfd104 	addi	r6,fp,-188
1000d338:	3085883a 	add	r2,r6,r2
1000d33c:	10800504 	addi	r2,r2,20
1000d340:	10800017 	ldw	r2,0(r2)
1000d344:	1009883a 	mov	r4,r2
1000d348:	e17fd217 	ldw	r5,-184(fp)
1000d34c:	00146fc0 	call	100146fc <__mulsi3>
1000d350:	1021883a 	mov	r16,r2
                          ((passw[i] * bpp + 7) / 8) * 8, passh[i]);
1000d354:	e0bfd117 	ldw	r2,-188(fp)
1000d358:	1085883a 	add	r2,r2,r2
1000d35c:	1085883a 	add	r2,r2,r2
1000d360:	e0ffd104 	addi	r3,fp,-188
1000d364:	1885883a 	add	r2,r3,r2
1000d368:	10800504 	addi	r2,r2,20
1000d36c:	10800017 	ldw	r2,0(r2)
1000d370:	1009883a 	mov	r4,r2
1000d374:	e17fd217 	ldw	r5,-184(fp)
1000d378:	00146fc0 	call	100146fc <__mulsi3>
1000d37c:	108001c4 	addi	r2,r2,7
1000d380:	1004d0fa 	srli	r2,r2,3
      move bytes instead of bits or move not at all*/
      if(bpp < 8)
      {
        /*remove padding bits in scanlines; after this there still may be padding
        bits between the different reduced images: each reduced image still starts nicely at a byte*/
        removePaddingBits(&in[passstart[i]], &in[padded_passstart[i]], passw[i] * bpp,
1000d384:	100690fa 	slli	r3,r2,3
1000d388:	e0bfd117 	ldw	r2,-188(fp)
1000d38c:	1085883a 	add	r2,r2,r2
1000d390:	1085883a 	add	r2,r2,r2
1000d394:	e13fd104 	addi	r4,fp,-188
1000d398:	2085883a 	add	r2,r4,r2
1000d39c:	10800c04 	addi	r2,r2,48
1000d3a0:	10800017 	ldw	r2,0(r2)
1000d3a4:	d8800015 	stw	r2,0(sp)
1000d3a8:	9009883a 	mov	r4,r18
1000d3ac:	880b883a 	mov	r5,r17
1000d3b0:	800d883a 	mov	r6,r16
1000d3b4:	180f883a 	mov	r7,r3
1000d3b8:	000cfe40 	call	1000cfe4 <removePaddingBits>
    unsigned passw[7], passh[7]; size_t filter_passstart[8], padded_passstart[8], passstart[8];
    unsigned i;

    Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);

    for(i = 0; i != 7; ++i)
1000d3bc:	e0bfd117 	ldw	r2,-188(fp)
1000d3c0:	10800044 	addi	r2,r2,1
1000d3c4:	e0bfd115 	stw	r2,-188(fp)
1000d3c8:	e0bfd117 	ldw	r2,-188(fp)
1000d3cc:	108001d8 	cmpnei	r2,r2,7
1000d3d0:	103f961e 	bne	r2,zero,1000d22c <__alt_data_end+0xf800d22c>
        removePaddingBits(&in[passstart[i]], &in[padded_passstart[i]], passw[i] * bpp,
                          ((passw[i] * bpp + 7) / 8) * 8, passh[i]);
      }
    }

    Adam7_deinterlace(out, in, w, h, bpp);
1000d3d4:	e0bfd217 	ldw	r2,-184(fp)
1000d3d8:	d8800015 	stw	r2,0(sp)
1000d3dc:	e13ffc17 	ldw	r4,-16(fp)
1000d3e0:	e17ffd17 	ldw	r5,-12(fp)
1000d3e4:	e1bffe17 	ldw	r6,-8(fp)
1000d3e8:	e1ffff17 	ldw	r7,-4(fp)
1000d3ec:	000cb3c0 	call	1000cb3c <Adam7_deinterlace>
  }

  return 0;
1000d3f0:	0005883a 	mov	r2,zero
}
1000d3f4:	e037883a 	mov	sp,fp
1000d3f8:	dfc00417 	ldw	ra,16(sp)
1000d3fc:	df000317 	ldw	fp,12(sp)
1000d400:	dc800217 	ldw	r18,8(sp)
1000d404:	dc400117 	ldw	r17,4(sp)
1000d408:	dc000017 	ldw	r16,0(sp)
1000d40c:	dec00504 	addi	sp,sp,20
1000d410:	f800283a 	ret

1000d414 <readChunk_PLTE>:

static unsigned readChunk_PLTE(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)
{
1000d414:	defff904 	addi	sp,sp,-28
1000d418:	dfc00615 	stw	ra,24(sp)
1000d41c:	df000515 	stw	fp,20(sp)
1000d420:	df000504 	addi	fp,sp,20
1000d424:	e13ffd15 	stw	r4,-12(fp)
1000d428:	e17ffe15 	stw	r5,-8(fp)
1000d42c:	e1bfff15 	stw	r6,-4(fp)
  unsigned pos = 0, i;
1000d430:	e03ffb15 	stw	zero,-20(fp)
  if(color->palette) lodepng_free(color->palette);
1000d434:	e0bffd17 	ldw	r2,-12(fp)
1000d438:	10800217 	ldw	r2,8(r2)
1000d43c:	10000426 	beq	r2,zero,1000d450 <readChunk_PLTE+0x3c>
1000d440:	e0bffd17 	ldw	r2,-12(fp)
1000d444:	10800217 	ldw	r2,8(r2)
1000d448:	1009883a 	mov	r4,r2
1000d44c:	000025c0 	call	1000025c <lodepng_free>
  color->palettesize = chunkLength / 3;
1000d450:	e0bfff17 	ldw	r2,-4(fp)
1000d454:	1009883a 	mov	r4,r2
1000d458:	014000c4 	movi	r5,3
1000d45c:	00146ec0 	call	100146ec <__udivsi3>
1000d460:	1007883a 	mov	r3,r2
1000d464:	e0bffd17 	ldw	r2,-12(fp)
1000d468:	10c00315 	stw	r3,12(r2)
  color->palette = (unsigned char*)lodepng_malloc(4 * color->palettesize);
1000d46c:	e0bffd17 	ldw	r2,-12(fp)
1000d470:	10800317 	ldw	r2,12(r2)
1000d474:	1085883a 	add	r2,r2,r2
1000d478:	1085883a 	add	r2,r2,r2
1000d47c:	1009883a 	mov	r4,r2
1000d480:	00001f40 	call	100001f4 <lodepng_malloc>
1000d484:	e0fffd17 	ldw	r3,-12(fp)
1000d488:	18800215 	stw	r2,8(r3)
  if(!color->palette && color->palettesize)
1000d48c:	e0bffd17 	ldw	r2,-12(fp)
1000d490:	10800217 	ldw	r2,8(r2)
1000d494:	1000071e 	bne	r2,zero,1000d4b4 <readChunk_PLTE+0xa0>
1000d498:	e0bffd17 	ldw	r2,-12(fp)
1000d49c:	10800317 	ldw	r2,12(r2)
1000d4a0:	10000426 	beq	r2,zero,1000d4b4 <readChunk_PLTE+0xa0>
  {
    color->palettesize = 0;
1000d4a4:	e0bffd17 	ldw	r2,-12(fp)
1000d4a8:	10000315 	stw	zero,12(r2)
    return 83; /*alloc fail*/
1000d4ac:	008014c4 	movi	r2,83
1000d4b0:	00004506 	br	1000d5c8 <readChunk_PLTE+0x1b4>
  }
  if(color->palettesize > 256) return 38; /*error: palette too big*/
1000d4b4:	e0bffd17 	ldw	r2,-12(fp)
1000d4b8:	10800317 	ldw	r2,12(r2)
1000d4bc:	10804070 	cmpltui	r2,r2,257
1000d4c0:	1000021e 	bne	r2,zero,1000d4cc <readChunk_PLTE+0xb8>
1000d4c4:	00800984 	movi	r2,38
1000d4c8:	00003f06 	br	1000d5c8 <readChunk_PLTE+0x1b4>

  for(i = 0; i != color->palettesize; ++i)
1000d4cc:	e03ffc15 	stw	zero,-16(fp)
1000d4d0:	00003806 	br	1000d5b4 <readChunk_PLTE+0x1a0>
  {
    color->palette[4 * i + 0] = data[pos++]; /*R*/
1000d4d4:	e0bffd17 	ldw	r2,-12(fp)
1000d4d8:	10c00217 	ldw	r3,8(r2)
1000d4dc:	e0bffc17 	ldw	r2,-16(fp)
1000d4e0:	1085883a 	add	r2,r2,r2
1000d4e4:	1085883a 	add	r2,r2,r2
1000d4e8:	1885883a 	add	r2,r3,r2
1000d4ec:	e13ffe17 	ldw	r4,-8(fp)
1000d4f0:	e0fffb17 	ldw	r3,-20(fp)
1000d4f4:	20c7883a 	add	r3,r4,r3
1000d4f8:	18c00003 	ldbu	r3,0(r3)
1000d4fc:	10c00005 	stb	r3,0(r2)
1000d500:	e0bffb17 	ldw	r2,-20(fp)
1000d504:	10800044 	addi	r2,r2,1
1000d508:	e0bffb15 	stw	r2,-20(fp)
    color->palette[4 * i + 1] = data[pos++]; /*G*/
1000d50c:	e0bffd17 	ldw	r2,-12(fp)
1000d510:	10c00217 	ldw	r3,8(r2)
1000d514:	e0bffc17 	ldw	r2,-16(fp)
1000d518:	1085883a 	add	r2,r2,r2
1000d51c:	1085883a 	add	r2,r2,r2
1000d520:	10800044 	addi	r2,r2,1
1000d524:	1885883a 	add	r2,r3,r2
1000d528:	e13ffe17 	ldw	r4,-8(fp)
1000d52c:	e0fffb17 	ldw	r3,-20(fp)
1000d530:	20c7883a 	add	r3,r4,r3
1000d534:	18c00003 	ldbu	r3,0(r3)
1000d538:	10c00005 	stb	r3,0(r2)
1000d53c:	e0bffb17 	ldw	r2,-20(fp)
1000d540:	10800044 	addi	r2,r2,1
1000d544:	e0bffb15 	stw	r2,-20(fp)
    color->palette[4 * i + 2] = data[pos++]; /*B*/
1000d548:	e0bffd17 	ldw	r2,-12(fp)
1000d54c:	10c00217 	ldw	r3,8(r2)
1000d550:	e0bffc17 	ldw	r2,-16(fp)
1000d554:	1085883a 	add	r2,r2,r2
1000d558:	1085883a 	add	r2,r2,r2
1000d55c:	10800084 	addi	r2,r2,2
1000d560:	1885883a 	add	r2,r3,r2
1000d564:	e13ffe17 	ldw	r4,-8(fp)
1000d568:	e0fffb17 	ldw	r3,-20(fp)
1000d56c:	20c7883a 	add	r3,r4,r3
1000d570:	18c00003 	ldbu	r3,0(r3)
1000d574:	10c00005 	stb	r3,0(r2)
1000d578:	e0bffb17 	ldw	r2,-20(fp)
1000d57c:	10800044 	addi	r2,r2,1
1000d580:	e0bffb15 	stw	r2,-20(fp)
    color->palette[4 * i + 3] = 255; /*alpha*/
1000d584:	e0bffd17 	ldw	r2,-12(fp)
1000d588:	10c00217 	ldw	r3,8(r2)
1000d58c:	e0bffc17 	ldw	r2,-16(fp)
1000d590:	1085883a 	add	r2,r2,r2
1000d594:	1085883a 	add	r2,r2,r2
1000d598:	108000c4 	addi	r2,r2,3
1000d59c:	1885883a 	add	r2,r3,r2
1000d5a0:	00ffffc4 	movi	r3,-1
1000d5a4:	10c00005 	stb	r3,0(r2)
    color->palettesize = 0;
    return 83; /*alloc fail*/
  }
  if(color->palettesize > 256) return 38; /*error: palette too big*/

  for(i = 0; i != color->palettesize; ++i)
1000d5a8:	e0bffc17 	ldw	r2,-16(fp)
1000d5ac:	10800044 	addi	r2,r2,1
1000d5b0:	e0bffc15 	stw	r2,-16(fp)
1000d5b4:	e0bffd17 	ldw	r2,-12(fp)
1000d5b8:	10c00317 	ldw	r3,12(r2)
1000d5bc:	e0bffc17 	ldw	r2,-16(fp)
1000d5c0:	18bfc41e 	bne	r3,r2,1000d4d4 <__alt_data_end+0xf800d4d4>
    color->palette[4 * i + 1] = data[pos++]; /*G*/
    color->palette[4 * i + 2] = data[pos++]; /*B*/
    color->palette[4 * i + 3] = 255; /*alpha*/
  }

  return 0; /* OK */
1000d5c4:	0005883a 	mov	r2,zero
}
1000d5c8:	e037883a 	mov	sp,fp
1000d5cc:	dfc00117 	ldw	ra,4(sp)
1000d5d0:	df000017 	ldw	fp,0(sp)
1000d5d4:	dec00204 	addi	sp,sp,8
1000d5d8:	f800283a 	ret

1000d5dc <readChunk_tRNS>:

static unsigned readChunk_tRNS(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)
{
1000d5dc:	defffb04 	addi	sp,sp,-20
1000d5e0:	df000415 	stw	fp,16(sp)
1000d5e4:	df000404 	addi	fp,sp,16
1000d5e8:	e13ffd15 	stw	r4,-12(fp)
1000d5ec:	e17ffe15 	stw	r5,-8(fp)
1000d5f0:	e1bfff15 	stw	r6,-4(fp)
  unsigned i;
  if(color->colortype == LCT_PALETTE)
1000d5f4:	e0bffd17 	ldw	r2,-12(fp)
1000d5f8:	10800017 	ldw	r2,0(r2)
1000d5fc:	108000d8 	cmpnei	r2,r2,3
1000d600:	10001b1e 	bne	r2,zero,1000d670 <readChunk_tRNS+0x94>
  {
    /*error: more alpha values given than there are palette entries*/
    if(chunkLength > color->palettesize) return 38;
1000d604:	e0bffd17 	ldw	r2,-12(fp)
1000d608:	10c00317 	ldw	r3,12(r2)
1000d60c:	e0bfff17 	ldw	r2,-4(fp)
1000d610:	1880022e 	bgeu	r3,r2,1000d61c <readChunk_tRNS+0x40>
1000d614:	00800984 	movi	r2,38
1000d618:	00006706 	br	1000d7b8 <readChunk_tRNS+0x1dc>

    for(i = 0; i != chunkLength; ++i) color->palette[4 * i + 3] = data[i];
1000d61c:	e03ffc15 	stw	zero,-16(fp)
1000d620:	00000f06 	br	1000d660 <readChunk_tRNS+0x84>
1000d624:	e0bffd17 	ldw	r2,-12(fp)
1000d628:	10c00217 	ldw	r3,8(r2)
1000d62c:	e0bffc17 	ldw	r2,-16(fp)
1000d630:	1085883a 	add	r2,r2,r2
1000d634:	1085883a 	add	r2,r2,r2
1000d638:	108000c4 	addi	r2,r2,3
1000d63c:	1885883a 	add	r2,r3,r2
1000d640:	e13ffe17 	ldw	r4,-8(fp)
1000d644:	e0fffc17 	ldw	r3,-16(fp)
1000d648:	20c7883a 	add	r3,r4,r3
1000d64c:	18c00003 	ldbu	r3,0(r3)
1000d650:	10c00005 	stb	r3,0(r2)
1000d654:	e0bffc17 	ldw	r2,-16(fp)
1000d658:	10800044 	addi	r2,r2,1
1000d65c:	e0bffc15 	stw	r2,-16(fp)
1000d660:	e0fffc17 	ldw	r3,-16(fp)
1000d664:	e0bfff17 	ldw	r2,-4(fp)
1000d668:	18bfee1e 	bne	r3,r2,1000d624 <__alt_data_end+0xf800d624>
1000d66c:	00005106 	br	1000d7b4 <readChunk_tRNS+0x1d8>
  }
  else if(color->colortype == LCT_GREY)
1000d670:	e0bffd17 	ldw	r2,-12(fp)
1000d674:	10800017 	ldw	r2,0(r2)
1000d678:	10001c1e 	bne	r2,zero,1000d6ec <readChunk_tRNS+0x110>
  {
    /*error: this chunk must be 2 bytes for greyscale image*/
    if(chunkLength != 2) return 30;
1000d67c:	e0bfff17 	ldw	r2,-4(fp)
1000d680:	108000a0 	cmpeqi	r2,r2,2
1000d684:	1000021e 	bne	r2,zero,1000d690 <readChunk_tRNS+0xb4>
1000d688:	00800784 	movi	r2,30
1000d68c:	00004a06 	br	1000d7b8 <readChunk_tRNS+0x1dc>

    color->key_defined = 1;
1000d690:	e0bffd17 	ldw	r2,-12(fp)
1000d694:	00c00044 	movi	r3,1
1000d698:	10c00415 	stw	r3,16(r2)
    color->key_r = color->key_g = color->key_b = 256u * data[0] + data[1];
1000d69c:	e0bffe17 	ldw	r2,-8(fp)
1000d6a0:	10800003 	ldbu	r2,0(r2)
1000d6a4:	10803fcc 	andi	r2,r2,255
1000d6a8:	1006923a 	slli	r3,r2,8
1000d6ac:	e0bffe17 	ldw	r2,-8(fp)
1000d6b0:	10800044 	addi	r2,r2,1
1000d6b4:	10800003 	ldbu	r2,0(r2)
1000d6b8:	10803fcc 	andi	r2,r2,255
1000d6bc:	1887883a 	add	r3,r3,r2
1000d6c0:	e0bffd17 	ldw	r2,-12(fp)
1000d6c4:	10c00715 	stw	r3,28(r2)
1000d6c8:	e0bffd17 	ldw	r2,-12(fp)
1000d6cc:	10c00717 	ldw	r3,28(r2)
1000d6d0:	e0bffd17 	ldw	r2,-12(fp)
1000d6d4:	10c00615 	stw	r3,24(r2)
1000d6d8:	e0bffd17 	ldw	r2,-12(fp)
1000d6dc:	10c00617 	ldw	r3,24(r2)
1000d6e0:	e0bffd17 	ldw	r2,-12(fp)
1000d6e4:	10c00515 	stw	r3,20(r2)
1000d6e8:	00003206 	br	1000d7b4 <readChunk_tRNS+0x1d8>
  }
  else if(color->colortype == LCT_RGB)
1000d6ec:	e0bffd17 	ldw	r2,-12(fp)
1000d6f0:	10800017 	ldw	r2,0(r2)
1000d6f4:	10800098 	cmpnei	r2,r2,2
1000d6f8:	10002c1e 	bne	r2,zero,1000d7ac <readChunk_tRNS+0x1d0>
  {
    /*error: this chunk must be 6 bytes for RGB image*/
    if(chunkLength != 6) return 41;
1000d6fc:	e0bfff17 	ldw	r2,-4(fp)
1000d700:	108001a0 	cmpeqi	r2,r2,6
1000d704:	1000021e 	bne	r2,zero,1000d710 <readChunk_tRNS+0x134>
1000d708:	00800a44 	movi	r2,41
1000d70c:	00002a06 	br	1000d7b8 <readChunk_tRNS+0x1dc>

    color->key_defined = 1;
1000d710:	e0bffd17 	ldw	r2,-12(fp)
1000d714:	00c00044 	movi	r3,1
1000d718:	10c00415 	stw	r3,16(r2)
    color->key_r = 256u * data[0] + data[1];
1000d71c:	e0bffe17 	ldw	r2,-8(fp)
1000d720:	10800003 	ldbu	r2,0(r2)
1000d724:	10803fcc 	andi	r2,r2,255
1000d728:	1006923a 	slli	r3,r2,8
1000d72c:	e0bffe17 	ldw	r2,-8(fp)
1000d730:	10800044 	addi	r2,r2,1
1000d734:	10800003 	ldbu	r2,0(r2)
1000d738:	10803fcc 	andi	r2,r2,255
1000d73c:	1887883a 	add	r3,r3,r2
1000d740:	e0bffd17 	ldw	r2,-12(fp)
1000d744:	10c00515 	stw	r3,20(r2)
    color->key_g = 256u * data[2] + data[3];
1000d748:	e0bffe17 	ldw	r2,-8(fp)
1000d74c:	10800084 	addi	r2,r2,2
1000d750:	10800003 	ldbu	r2,0(r2)
1000d754:	10803fcc 	andi	r2,r2,255
1000d758:	1006923a 	slli	r3,r2,8
1000d75c:	e0bffe17 	ldw	r2,-8(fp)
1000d760:	108000c4 	addi	r2,r2,3
1000d764:	10800003 	ldbu	r2,0(r2)
1000d768:	10803fcc 	andi	r2,r2,255
1000d76c:	1887883a 	add	r3,r3,r2
1000d770:	e0bffd17 	ldw	r2,-12(fp)
1000d774:	10c00615 	stw	r3,24(r2)
    color->key_b = 256u * data[4] + data[5];
1000d778:	e0bffe17 	ldw	r2,-8(fp)
1000d77c:	10800104 	addi	r2,r2,4
1000d780:	10800003 	ldbu	r2,0(r2)
1000d784:	10803fcc 	andi	r2,r2,255
1000d788:	1006923a 	slli	r3,r2,8
1000d78c:	e0bffe17 	ldw	r2,-8(fp)
1000d790:	10800144 	addi	r2,r2,5
1000d794:	10800003 	ldbu	r2,0(r2)
1000d798:	10803fcc 	andi	r2,r2,255
1000d79c:	1887883a 	add	r3,r3,r2
1000d7a0:	e0bffd17 	ldw	r2,-12(fp)
1000d7a4:	10c00715 	stw	r3,28(r2)
1000d7a8:	00000206 	br	1000d7b4 <readChunk_tRNS+0x1d8>
  }
  else return 42; /*error: tRNS chunk not allowed for other color models*/
1000d7ac:	00800a84 	movi	r2,42
1000d7b0:	00000106 	br	1000d7b8 <readChunk_tRNS+0x1dc>

  return 0; /* OK */
1000d7b4:	0005883a 	mov	r2,zero
}
1000d7b8:	e037883a 	mov	sp,fp
1000d7bc:	df000017 	ldw	fp,0(sp)
1000d7c0:	dec00104 	addi	sp,sp,4
1000d7c4:	f800283a 	ret

1000d7c8 <readChunk_bKGD>:


#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
/*background color chunk (bKGD)*/
static unsigned readChunk_bKGD(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
{
1000d7c8:	defffc04 	addi	sp,sp,-16
1000d7cc:	df000315 	stw	fp,12(sp)
1000d7d0:	df000304 	addi	fp,sp,12
1000d7d4:	e13ffd15 	stw	r4,-12(fp)
1000d7d8:	e17ffe15 	stw	r5,-8(fp)
1000d7dc:	e1bfff15 	stw	r6,-4(fp)
  if(info->color.colortype == LCT_PALETTE)
1000d7e0:	e0bffd17 	ldw	r2,-12(fp)
1000d7e4:	10800317 	ldw	r2,12(r2)
1000d7e8:	108000d8 	cmpnei	r2,r2,3
1000d7ec:	1000161e 	bne	r2,zero,1000d848 <readChunk_bKGD+0x80>
  {
    /*error: this chunk must be 1 byte for indexed color image*/
    if(chunkLength != 1) return 43;
1000d7f0:	e0bfff17 	ldw	r2,-4(fp)
1000d7f4:	10800060 	cmpeqi	r2,r2,1
1000d7f8:	1000021e 	bne	r2,zero,1000d804 <readChunk_bKGD+0x3c>
1000d7fc:	00800ac4 	movi	r2,43
1000d800:	00006806 	br	1000d9a4 <readChunk_bKGD+0x1dc>

    info->background_defined = 1;
1000d804:	e0bffd17 	ldw	r2,-12(fp)
1000d808:	00c00044 	movi	r3,1
1000d80c:	10c00b15 	stw	r3,44(r2)
    info->background_r = info->background_g = info->background_b = data[0];
1000d810:	e0bffe17 	ldw	r2,-8(fp)
1000d814:	10800003 	ldbu	r2,0(r2)
1000d818:	10c03fcc 	andi	r3,r2,255
1000d81c:	e0bffd17 	ldw	r2,-12(fp)
1000d820:	10c00e15 	stw	r3,56(r2)
1000d824:	e0bffd17 	ldw	r2,-12(fp)
1000d828:	10c00e17 	ldw	r3,56(r2)
1000d82c:	e0bffd17 	ldw	r2,-12(fp)
1000d830:	10c00d15 	stw	r3,52(r2)
1000d834:	e0bffd17 	ldw	r2,-12(fp)
1000d838:	10c00d17 	ldw	r3,52(r2)
1000d83c:	e0bffd17 	ldw	r2,-12(fp)
1000d840:	10c00c15 	stw	r3,48(r2)
1000d844:	00005606 	br	1000d9a0 <readChunk_bKGD+0x1d8>
  }
  else if(info->color.colortype == LCT_GREY || info->color.colortype == LCT_GREY_ALPHA)
1000d848:	e0bffd17 	ldw	r2,-12(fp)
1000d84c:	10800317 	ldw	r2,12(r2)
1000d850:	10000426 	beq	r2,zero,1000d864 <readChunk_bKGD+0x9c>
1000d854:	e0bffd17 	ldw	r2,-12(fp)
1000d858:	10800317 	ldw	r2,12(r2)
1000d85c:	10800118 	cmpnei	r2,r2,4
1000d860:	10001c1e 	bne	r2,zero,1000d8d4 <readChunk_bKGD+0x10c>
  {
    /*error: this chunk must be 2 bytes for greyscale image*/
    if(chunkLength != 2) return 44;
1000d864:	e0bfff17 	ldw	r2,-4(fp)
1000d868:	108000a0 	cmpeqi	r2,r2,2
1000d86c:	1000021e 	bne	r2,zero,1000d878 <readChunk_bKGD+0xb0>
1000d870:	00800b04 	movi	r2,44
1000d874:	00004b06 	br	1000d9a4 <readChunk_bKGD+0x1dc>

    info->background_defined = 1;
1000d878:	e0bffd17 	ldw	r2,-12(fp)
1000d87c:	00c00044 	movi	r3,1
1000d880:	10c00b15 	stw	r3,44(r2)
    info->background_r = info->background_g = info->background_b = 256u * data[0] + data[1];
1000d884:	e0bffe17 	ldw	r2,-8(fp)
1000d888:	10800003 	ldbu	r2,0(r2)
1000d88c:	10803fcc 	andi	r2,r2,255
1000d890:	1006923a 	slli	r3,r2,8
1000d894:	e0bffe17 	ldw	r2,-8(fp)
1000d898:	10800044 	addi	r2,r2,1
1000d89c:	10800003 	ldbu	r2,0(r2)
1000d8a0:	10803fcc 	andi	r2,r2,255
1000d8a4:	1887883a 	add	r3,r3,r2
1000d8a8:	e0bffd17 	ldw	r2,-12(fp)
1000d8ac:	10c00e15 	stw	r3,56(r2)
1000d8b0:	e0bffd17 	ldw	r2,-12(fp)
1000d8b4:	10c00e17 	ldw	r3,56(r2)
1000d8b8:	e0bffd17 	ldw	r2,-12(fp)
1000d8bc:	10c00d15 	stw	r3,52(r2)
1000d8c0:	e0bffd17 	ldw	r2,-12(fp)
1000d8c4:	10c00d17 	ldw	r3,52(r2)
1000d8c8:	e0bffd17 	ldw	r2,-12(fp)
1000d8cc:	10c00c15 	stw	r3,48(r2)
1000d8d0:	00003306 	br	1000d9a0 <readChunk_bKGD+0x1d8>
  }
  else if(info->color.colortype == LCT_RGB || info->color.colortype == LCT_RGBA)
1000d8d4:	e0bffd17 	ldw	r2,-12(fp)
1000d8d8:	10800317 	ldw	r2,12(r2)
1000d8dc:	108000a0 	cmpeqi	r2,r2,2
1000d8e0:	1000041e 	bne	r2,zero,1000d8f4 <readChunk_bKGD+0x12c>
1000d8e4:	e0bffd17 	ldw	r2,-12(fp)
1000d8e8:	10800317 	ldw	r2,12(r2)
1000d8ec:	10800198 	cmpnei	r2,r2,6
1000d8f0:	10002b1e 	bne	r2,zero,1000d9a0 <readChunk_bKGD+0x1d8>
  {
    /*error: this chunk must be 6 bytes for greyscale image*/
    if(chunkLength != 6) return 45;
1000d8f4:	e0bfff17 	ldw	r2,-4(fp)
1000d8f8:	108001a0 	cmpeqi	r2,r2,6
1000d8fc:	1000021e 	bne	r2,zero,1000d908 <readChunk_bKGD+0x140>
1000d900:	00800b44 	movi	r2,45
1000d904:	00002706 	br	1000d9a4 <readChunk_bKGD+0x1dc>

    info->background_defined = 1;
1000d908:	e0bffd17 	ldw	r2,-12(fp)
1000d90c:	00c00044 	movi	r3,1
1000d910:	10c00b15 	stw	r3,44(r2)
    info->background_r = 256u * data[0] + data[1];
1000d914:	e0bffe17 	ldw	r2,-8(fp)
1000d918:	10800003 	ldbu	r2,0(r2)
1000d91c:	10803fcc 	andi	r2,r2,255
1000d920:	1006923a 	slli	r3,r2,8
1000d924:	e0bffe17 	ldw	r2,-8(fp)
1000d928:	10800044 	addi	r2,r2,1
1000d92c:	10800003 	ldbu	r2,0(r2)
1000d930:	10803fcc 	andi	r2,r2,255
1000d934:	1887883a 	add	r3,r3,r2
1000d938:	e0bffd17 	ldw	r2,-12(fp)
1000d93c:	10c00c15 	stw	r3,48(r2)
    info->background_g = 256u * data[2] + data[3];
1000d940:	e0bffe17 	ldw	r2,-8(fp)
1000d944:	10800084 	addi	r2,r2,2
1000d948:	10800003 	ldbu	r2,0(r2)
1000d94c:	10803fcc 	andi	r2,r2,255
1000d950:	1006923a 	slli	r3,r2,8
1000d954:	e0bffe17 	ldw	r2,-8(fp)
1000d958:	108000c4 	addi	r2,r2,3
1000d95c:	10800003 	ldbu	r2,0(r2)
1000d960:	10803fcc 	andi	r2,r2,255
1000d964:	1887883a 	add	r3,r3,r2
1000d968:	e0bffd17 	ldw	r2,-12(fp)
1000d96c:	10c00d15 	stw	r3,52(r2)
    info->background_b = 256u * data[4] + data[5];
1000d970:	e0bffe17 	ldw	r2,-8(fp)
1000d974:	10800104 	addi	r2,r2,4
1000d978:	10800003 	ldbu	r2,0(r2)
1000d97c:	10803fcc 	andi	r2,r2,255
1000d980:	1006923a 	slli	r3,r2,8
1000d984:	e0bffe17 	ldw	r2,-8(fp)
1000d988:	10800144 	addi	r2,r2,5
1000d98c:	10800003 	ldbu	r2,0(r2)
1000d990:	10803fcc 	andi	r2,r2,255
1000d994:	1887883a 	add	r3,r3,r2
1000d998:	e0bffd17 	ldw	r2,-12(fp)
1000d99c:	10c00e15 	stw	r3,56(r2)
  }

  return 0; /* OK */
1000d9a0:	0005883a 	mov	r2,zero
}
1000d9a4:	e037883a 	mov	sp,fp
1000d9a8:	df000017 	ldw	fp,0(sp)
1000d9ac:	dec00104 	addi	sp,sp,4
1000d9b0:	f800283a 	ret

1000d9b4 <readChunk_tEXt>:

/*text chunk (tEXt)*/
static unsigned readChunk_tEXt(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
{
1000d9b4:	defff504 	addi	sp,sp,-44
1000d9b8:	dfc00a15 	stw	ra,40(sp)
1000d9bc:	df000915 	stw	fp,36(sp)
1000d9c0:	df000904 	addi	fp,sp,36
1000d9c4:	e13ffd15 	stw	r4,-12(fp)
1000d9c8:	e17ffe15 	stw	r5,-8(fp)
1000d9cc:	e1bfff15 	stw	r6,-4(fp)
  unsigned error = 0;
1000d9d0:	e03ff715 	stw	zero,-36(fp)
  char *key = 0, *str = 0;
1000d9d4:	e03ff815 	stw	zero,-32(fp)
1000d9d8:	e03ff915 	stw	zero,-28(fp)
  unsigned i;

  while(!error) /*not really a while loop, only used to break on error*/
1000d9dc:	e0bff717 	ldw	r2,-36(fp)
1000d9e0:	1000661e 	bne	r2,zero,1000db7c <readChunk_tEXt+0x1c8>
  {
    unsigned length, string2_begin;

    length = 0;
1000d9e4:	e03ffb15 	stw	zero,-20(fp)
    while(length < chunkLength && data[length] != 0) ++length;
1000d9e8:	00000306 	br	1000d9f8 <readChunk_tEXt+0x44>
1000d9ec:	e0bffb17 	ldw	r2,-20(fp)
1000d9f0:	10800044 	addi	r2,r2,1
1000d9f4:	e0bffb15 	stw	r2,-20(fp)
1000d9f8:	e0fffb17 	ldw	r3,-20(fp)
1000d9fc:	e0bfff17 	ldw	r2,-4(fp)
1000da00:	1880062e 	bgeu	r3,r2,1000da1c <readChunk_tEXt+0x68>
1000da04:	e0fffe17 	ldw	r3,-8(fp)
1000da08:	e0bffb17 	ldw	r2,-20(fp)
1000da0c:	1885883a 	add	r2,r3,r2
1000da10:	10800003 	ldbu	r2,0(r2)
1000da14:	10803fcc 	andi	r2,r2,255
1000da18:	103ff41e 	bne	r2,zero,1000d9ec <__alt_data_end+0xf800d9ec>
    /*even though it's not allowed by the standard, no error is thrown if
    there's no null termination char, if the text is empty*/
    if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
1000da1c:	e0bffb17 	ldw	r2,-20(fp)
1000da20:	10000326 	beq	r2,zero,1000da30 <readChunk_tEXt+0x7c>
1000da24:	e0bffb17 	ldw	r2,-20(fp)
1000da28:	10801430 	cmpltui	r2,r2,80
1000da2c:	1000031e 	bne	r2,zero,1000da3c <readChunk_tEXt+0x88>
1000da30:	00801644 	movi	r2,89
1000da34:	e0bff715 	stw	r2,-36(fp)
1000da38:	00005006 	br	1000db7c <readChunk_tEXt+0x1c8>

    key = (char*)lodepng_malloc(length + 1);
1000da3c:	e0bffb17 	ldw	r2,-20(fp)
1000da40:	10800044 	addi	r2,r2,1
1000da44:	1009883a 	mov	r4,r2
1000da48:	00001f40 	call	100001f4 <lodepng_malloc>
1000da4c:	e0bff815 	stw	r2,-32(fp)
    if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
1000da50:	e0bff817 	ldw	r2,-32(fp)
1000da54:	1000031e 	bne	r2,zero,1000da64 <readChunk_tEXt+0xb0>
1000da58:	008014c4 	movi	r2,83
1000da5c:	e0bff715 	stw	r2,-36(fp)
1000da60:	00004606 	br	1000db7c <readChunk_tEXt+0x1c8>

    key[length] = 0;
1000da64:	e0fff817 	ldw	r3,-32(fp)
1000da68:	e0bffb17 	ldw	r2,-20(fp)
1000da6c:	1885883a 	add	r2,r3,r2
1000da70:	10000005 	stb	zero,0(r2)
    for(i = 0; i != length; ++i) key[i] = (char)data[i];
1000da74:	e03ffa15 	stw	zero,-24(fp)
1000da78:	00000b06 	br	1000daa8 <readChunk_tEXt+0xf4>
1000da7c:	e0fff817 	ldw	r3,-32(fp)
1000da80:	e0bffa17 	ldw	r2,-24(fp)
1000da84:	1885883a 	add	r2,r3,r2
1000da88:	e13ffe17 	ldw	r4,-8(fp)
1000da8c:	e0fffa17 	ldw	r3,-24(fp)
1000da90:	20c7883a 	add	r3,r4,r3
1000da94:	18c00003 	ldbu	r3,0(r3)
1000da98:	10c00005 	stb	r3,0(r2)
1000da9c:	e0bffa17 	ldw	r2,-24(fp)
1000daa0:	10800044 	addi	r2,r2,1
1000daa4:	e0bffa15 	stw	r2,-24(fp)
1000daa8:	e0fffa17 	ldw	r3,-24(fp)
1000daac:	e0bffb17 	ldw	r2,-20(fp)
1000dab0:	18bff21e 	bne	r3,r2,1000da7c <__alt_data_end+0xf800da7c>

    string2_begin = length + 1; /*skip keyword null terminator*/
1000dab4:	e0bffb17 	ldw	r2,-20(fp)
1000dab8:	10800044 	addi	r2,r2,1
1000dabc:	e0bffc15 	stw	r2,-16(fp)

    length = chunkLength < string2_begin ? 0 : chunkLength - string2_begin;
1000dac0:	e0ffff17 	ldw	r3,-4(fp)
1000dac4:	e0bffc17 	ldw	r2,-16(fp)
1000dac8:	18800436 	bltu	r3,r2,1000dadc <readChunk_tEXt+0x128>
1000dacc:	e0ffff17 	ldw	r3,-4(fp)
1000dad0:	e0bffc17 	ldw	r2,-16(fp)
1000dad4:	1885c83a 	sub	r2,r3,r2
1000dad8:	00000106 	br	1000dae0 <readChunk_tEXt+0x12c>
1000dadc:	0005883a 	mov	r2,zero
1000dae0:	e0bffb15 	stw	r2,-20(fp)
    str = (char*)lodepng_malloc(length + 1);
1000dae4:	e0bffb17 	ldw	r2,-20(fp)
1000dae8:	10800044 	addi	r2,r2,1
1000daec:	1009883a 	mov	r4,r2
1000daf0:	00001f40 	call	100001f4 <lodepng_malloc>
1000daf4:	e0bff915 	stw	r2,-28(fp)
    if(!str) CERROR_BREAK(error, 83); /*alloc fail*/
1000daf8:	e0bff917 	ldw	r2,-28(fp)
1000dafc:	1000031e 	bne	r2,zero,1000db0c <readChunk_tEXt+0x158>
1000db00:	008014c4 	movi	r2,83
1000db04:	e0bff715 	stw	r2,-36(fp)
1000db08:	00001c06 	br	1000db7c <readChunk_tEXt+0x1c8>

    str[length] = 0;
1000db0c:	e0fff917 	ldw	r3,-28(fp)
1000db10:	e0bffb17 	ldw	r2,-20(fp)
1000db14:	1885883a 	add	r2,r3,r2
1000db18:	10000005 	stb	zero,0(r2)
    for(i = 0; i != length; ++i) str[i] = (char)data[string2_begin + i];
1000db1c:	e03ffa15 	stw	zero,-24(fp)
1000db20:	00000d06 	br	1000db58 <readChunk_tEXt+0x1a4>
1000db24:	e0fff917 	ldw	r3,-28(fp)
1000db28:	e0bffa17 	ldw	r2,-24(fp)
1000db2c:	1885883a 	add	r2,r3,r2
1000db30:	e13ffc17 	ldw	r4,-16(fp)
1000db34:	e0fffa17 	ldw	r3,-24(fp)
1000db38:	20c7883a 	add	r3,r4,r3
1000db3c:	e13ffe17 	ldw	r4,-8(fp)
1000db40:	20c7883a 	add	r3,r4,r3
1000db44:	18c00003 	ldbu	r3,0(r3)
1000db48:	10c00005 	stb	r3,0(r2)
1000db4c:	e0bffa17 	ldw	r2,-24(fp)
1000db50:	10800044 	addi	r2,r2,1
1000db54:	e0bffa15 	stw	r2,-24(fp)
1000db58:	e0fffa17 	ldw	r3,-24(fp)
1000db5c:	e0bffb17 	ldw	r2,-20(fp)
1000db60:	18bff01e 	bne	r3,r2,1000db24 <__alt_data_end+0xf800db24>

    error = lodepng_add_text(info, key, str);
1000db64:	e13ffd17 	ldw	r4,-12(fp)
1000db68:	e17ff817 	ldw	r5,-32(fp)
1000db6c:	e1bff917 	ldw	r6,-28(fp)
1000db70:	0007b240 	call	10007b24 <lodepng_add_text>
1000db74:	e0bff715 	stw	r2,-36(fp)

    break;
1000db78:	0001883a 	nop
  }

  lodepng_free(key);
1000db7c:	e13ff817 	ldw	r4,-32(fp)
1000db80:	000025c0 	call	1000025c <lodepng_free>
  lodepng_free(str);
1000db84:	e13ff917 	ldw	r4,-28(fp)
1000db88:	000025c0 	call	1000025c <lodepng_free>

  return error;
1000db8c:	e0bff717 	ldw	r2,-36(fp)
}
1000db90:	e037883a 	mov	sp,fp
1000db94:	dfc00117 	ldw	ra,4(sp)
1000db98:	df000017 	ldw	fp,0(sp)
1000db9c:	dec00204 	addi	sp,sp,8
1000dba0:	f800283a 	ret

1000dba4 <readChunk_zTXt>:

/*compressed text chunk (zTXt)*/
static unsigned readChunk_zTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,
                               const unsigned char* data, size_t chunkLength)
{
1000dba4:	defff104 	addi	sp,sp,-60
1000dba8:	dfc00e15 	stw	ra,56(sp)
1000dbac:	df000d15 	stw	fp,52(sp)
1000dbb0:	df000d04 	addi	fp,sp,52
1000dbb4:	e13ffc15 	stw	r4,-16(fp)
1000dbb8:	e17ffd15 	stw	r5,-12(fp)
1000dbbc:	e1bffe15 	stw	r6,-8(fp)
1000dbc0:	e1ffff15 	stw	r7,-4(fp)
  unsigned error = 0;
1000dbc4:	e03ff415 	stw	zero,-48(fp)
  unsigned i;

  unsigned length, string2_begin;
  char *key = 0;
1000dbc8:	e03ff715 	stw	zero,-36(fp)
  ucvector decoded;

  ucvector_init(&decoded);
1000dbcc:	e0bff904 	addi	r2,fp,-28
1000dbd0:	1009883a 	mov	r4,r2
1000dbd4:	00006c00 	call	100006c0 <ucvector_init>

  while(!error) /*not really a while loop, only used to break on error*/
1000dbd8:	e0bff417 	ldw	r2,-48(fp)
1000dbdc:	10006d1e 	bne	r2,zero,1000dd94 <readChunk_zTXt+0x1f0>
  {
    for(length = 0; length < chunkLength && data[length] != 0; ++length) ;
1000dbe0:	e03ff615 	stw	zero,-40(fp)
1000dbe4:	00000306 	br	1000dbf4 <readChunk_zTXt+0x50>
1000dbe8:	e0bff617 	ldw	r2,-40(fp)
1000dbec:	10800044 	addi	r2,r2,1
1000dbf0:	e0bff615 	stw	r2,-40(fp)
1000dbf4:	e0fff617 	ldw	r3,-40(fp)
1000dbf8:	e0bfff17 	ldw	r2,-4(fp)
1000dbfc:	1880062e 	bgeu	r3,r2,1000dc18 <readChunk_zTXt+0x74>
1000dc00:	e0fffe17 	ldw	r3,-8(fp)
1000dc04:	e0bff617 	ldw	r2,-40(fp)
1000dc08:	1885883a 	add	r2,r3,r2
1000dc0c:	10800003 	ldbu	r2,0(r2)
1000dc10:	10803fcc 	andi	r2,r2,255
1000dc14:	103ff41e 	bne	r2,zero,1000dbe8 <__alt_data_end+0xf800dbe8>
    if(length + 2 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/
1000dc18:	e0bff617 	ldw	r2,-40(fp)
1000dc1c:	10c00084 	addi	r3,r2,2
1000dc20:	e0bfff17 	ldw	r2,-4(fp)
1000dc24:	18800336 	bltu	r3,r2,1000dc34 <readChunk_zTXt+0x90>
1000dc28:	008012c4 	movi	r2,75
1000dc2c:	e0bff415 	stw	r2,-48(fp)
1000dc30:	00005806 	br	1000dd94 <readChunk_zTXt+0x1f0>
    if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
1000dc34:	e0bff617 	ldw	r2,-40(fp)
1000dc38:	10000326 	beq	r2,zero,1000dc48 <readChunk_zTXt+0xa4>
1000dc3c:	e0bff617 	ldw	r2,-40(fp)
1000dc40:	10801430 	cmpltui	r2,r2,80
1000dc44:	1000031e 	bne	r2,zero,1000dc54 <readChunk_zTXt+0xb0>
1000dc48:	00801644 	movi	r2,89
1000dc4c:	e0bff415 	stw	r2,-48(fp)
1000dc50:	00005006 	br	1000dd94 <readChunk_zTXt+0x1f0>

    key = (char*)lodepng_malloc(length + 1);
1000dc54:	e0bff617 	ldw	r2,-40(fp)
1000dc58:	10800044 	addi	r2,r2,1
1000dc5c:	1009883a 	mov	r4,r2
1000dc60:	00001f40 	call	100001f4 <lodepng_malloc>
1000dc64:	e0bff715 	stw	r2,-36(fp)
    if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
1000dc68:	e0bff717 	ldw	r2,-36(fp)
1000dc6c:	1000031e 	bne	r2,zero,1000dc7c <readChunk_zTXt+0xd8>
1000dc70:	008014c4 	movi	r2,83
1000dc74:	e0bff415 	stw	r2,-48(fp)
1000dc78:	00004606 	br	1000dd94 <readChunk_zTXt+0x1f0>

    key[length] = 0;
1000dc7c:	e0fff717 	ldw	r3,-36(fp)
1000dc80:	e0bff617 	ldw	r2,-40(fp)
1000dc84:	1885883a 	add	r2,r3,r2
1000dc88:	10000005 	stb	zero,0(r2)
    for(i = 0; i != length; ++i) key[i] = (char)data[i];
1000dc8c:	e03ff515 	stw	zero,-44(fp)
1000dc90:	00000b06 	br	1000dcc0 <readChunk_zTXt+0x11c>
1000dc94:	e0fff717 	ldw	r3,-36(fp)
1000dc98:	e0bff517 	ldw	r2,-44(fp)
1000dc9c:	1885883a 	add	r2,r3,r2
1000dca0:	e13ffe17 	ldw	r4,-8(fp)
1000dca4:	e0fff517 	ldw	r3,-44(fp)
1000dca8:	20c7883a 	add	r3,r4,r3
1000dcac:	18c00003 	ldbu	r3,0(r3)
1000dcb0:	10c00005 	stb	r3,0(r2)
1000dcb4:	e0bff517 	ldw	r2,-44(fp)
1000dcb8:	10800044 	addi	r2,r2,1
1000dcbc:	e0bff515 	stw	r2,-44(fp)
1000dcc0:	e0fff517 	ldw	r3,-44(fp)
1000dcc4:	e0bff617 	ldw	r2,-40(fp)
1000dcc8:	18bff21e 	bne	r3,r2,1000dc94 <__alt_data_end+0xf800dc94>

    if(data[length + 1] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/
1000dccc:	e0bff617 	ldw	r2,-40(fp)
1000dcd0:	10800044 	addi	r2,r2,1
1000dcd4:	e0fffe17 	ldw	r3,-8(fp)
1000dcd8:	1885883a 	add	r2,r3,r2
1000dcdc:	10800003 	ldbu	r2,0(r2)
1000dce0:	10803fcc 	andi	r2,r2,255
1000dce4:	10000326 	beq	r2,zero,1000dcf4 <readChunk_zTXt+0x150>
1000dce8:	00801204 	movi	r2,72
1000dcec:	e0bff415 	stw	r2,-48(fp)
1000dcf0:	00002806 	br	1000dd94 <readChunk_zTXt+0x1f0>

    string2_begin = length + 2;
1000dcf4:	e0bff617 	ldw	r2,-40(fp)
1000dcf8:	10800084 	addi	r2,r2,2
1000dcfc:	e0bff815 	stw	r2,-32(fp)
    if(string2_begin > chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/
1000dd00:	e0bff817 	ldw	r2,-32(fp)
1000dd04:	e0ffff17 	ldw	r3,-4(fp)
1000dd08:	1880032e 	bgeu	r3,r2,1000dd18 <readChunk_zTXt+0x174>
1000dd0c:	008012c4 	movi	r2,75
1000dd10:	e0bff415 	stw	r2,-48(fp)
1000dd14:	00001f06 	br	1000dd94 <readChunk_zTXt+0x1f0>

    length = chunkLength - string2_begin;
1000dd18:	e0ffff17 	ldw	r3,-4(fp)
1000dd1c:	e0bff817 	ldw	r2,-32(fp)
1000dd20:	1885c83a 	sub	r2,r3,r2
1000dd24:	e0bff615 	stw	r2,-40(fp)
    /*will fail if zlib error, e.g. if length is too small*/
    error = zlib_decompress(&decoded.data, &decoded.size,
1000dd28:	e0fffe17 	ldw	r3,-8(fp)
1000dd2c:	e0bff817 	ldw	r2,-32(fp)
1000dd30:	1885883a 	add	r2,r3,r2
1000dd34:	e13ff904 	addi	r4,fp,-28
1000dd38:	e0fff904 	addi	r3,fp,-28
1000dd3c:	18c00104 	addi	r3,r3,4
1000dd40:	e17ffd17 	ldw	r5,-12(fp)
1000dd44:	d9400015 	stw	r5,0(sp)
1000dd48:	180b883a 	mov	r5,r3
1000dd4c:	100d883a 	mov	r6,r2
1000dd50:	e1fff617 	ldw	r7,-40(fp)
1000dd54:	0005f240 	call	10005f24 <zlib_decompress>
1000dd58:	e0bff415 	stw	r2,-48(fp)
                            (unsigned char*)(&data[string2_begin]),
                            length, zlibsettings);
    if(error) break;
1000dd5c:	e0bff417 	ldw	r2,-48(fp)
1000dd60:	10000b1e 	bne	r2,zero,1000dd90 <readChunk_zTXt+0x1ec>
    ucvector_push_back(&decoded, 0);
1000dd64:	e0bff904 	addi	r2,fp,-28
1000dd68:	1009883a 	mov	r4,r2
1000dd6c:	000b883a 	mov	r5,zero
1000dd70:	00007e80 	call	100007e8 <ucvector_push_back>

    error = lodepng_add_text(info, key, (char*)decoded.data);
1000dd74:	e0bff917 	ldw	r2,-28(fp)
1000dd78:	e13ffc17 	ldw	r4,-16(fp)
1000dd7c:	e17ff717 	ldw	r5,-36(fp)
1000dd80:	100d883a 	mov	r6,r2
1000dd84:	0007b240 	call	10007b24 <lodepng_add_text>
1000dd88:	e0bff415 	stw	r2,-48(fp)

    break;
1000dd8c:	00000106 	br	1000dd94 <readChunk_zTXt+0x1f0>
    length = chunkLength - string2_begin;
    /*will fail if zlib error, e.g. if length is too small*/
    error = zlib_decompress(&decoded.data, &decoded.size,
                            (unsigned char*)(&data[string2_begin]),
                            length, zlibsettings);
    if(error) break;
1000dd90:	0001883a 	nop
    error = lodepng_add_text(info, key, (char*)decoded.data);

    break;
  }

  lodepng_free(key);
1000dd94:	e13ff717 	ldw	r4,-36(fp)
1000dd98:	000025c0 	call	1000025c <lodepng_free>
  ucvector_cleanup(&decoded);
1000dd9c:	e0bff904 	addi	r2,fp,-28
1000dda0:	1009883a 	mov	r4,r2
1000dda4:	00006680 	call	10000668 <ucvector_cleanup>

  return error;
1000dda8:	e0bff417 	ldw	r2,-48(fp)
}
1000ddac:	e037883a 	mov	sp,fp
1000ddb0:	dfc00117 	ldw	ra,4(sp)
1000ddb4:	df000017 	ldw	fp,0(sp)
1000ddb8:	dec00204 	addi	sp,sp,8
1000ddbc:	f800283a 	ret

1000ddc0 <readChunk_iTXt>:

/*international text chunk (iTXt)*/
static unsigned readChunk_iTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,
                               const unsigned char* data, size_t chunkLength)
{
1000ddc0:	deffee04 	addi	sp,sp,-72
1000ddc4:	dfc01115 	stw	ra,68(sp)
1000ddc8:	df001015 	stw	fp,64(sp)
1000ddcc:	df001004 	addi	fp,sp,64
1000ddd0:	e13ffc15 	stw	r4,-16(fp)
1000ddd4:	e17ffd15 	stw	r5,-12(fp)
1000ddd8:	e1bffe15 	stw	r6,-8(fp)
1000dddc:	e1ffff15 	stw	r7,-4(fp)
  unsigned error = 0;
1000dde0:	e03ff115 	stw	zero,-60(fp)
  unsigned i;

  unsigned length, begin, compressed;
  char *key = 0, *langtag = 0, *transkey = 0;
1000dde4:	e03ff415 	stw	zero,-48(fp)
1000dde8:	e03ff515 	stw	zero,-44(fp)
1000ddec:	e03ff615 	stw	zero,-40(fp)
  ucvector decoded;
  ucvector_init(&decoded);
1000ddf0:	e0bff904 	addi	r2,fp,-28
1000ddf4:	1009883a 	mov	r4,r2
1000ddf8:	00006c00 	call	100006c0 <ucvector_init>

  while(!error) /*not really a while loop, only used to break on error*/
1000ddfc:	e0bff117 	ldw	r2,-60(fp)
1000de00:	1001131e 	bne	r2,zero,1000e250 <readChunk_iTXt+0x490>
  {
    /*Quick check if the chunk length isn't too small. Even without check
    it'd still fail with other error checks below if it's too short. This just gives a different error code.*/
    if(chunkLength < 5) CERROR_BREAK(error, 30); /*iTXt chunk too short*/
1000de04:	e0bfff17 	ldw	r2,-4(fp)
1000de08:	10800168 	cmpgeui	r2,r2,5
1000de0c:	1000031e 	bne	r2,zero,1000de1c <readChunk_iTXt+0x5c>
1000de10:	00800784 	movi	r2,30
1000de14:	e0bff115 	stw	r2,-60(fp)
1000de18:	00010d06 	br	1000e250 <readChunk_iTXt+0x490>

    /*read the key*/
    for(length = 0; length < chunkLength && data[length] != 0; ++length) ;
1000de1c:	e03ff315 	stw	zero,-52(fp)
1000de20:	00000306 	br	1000de30 <readChunk_iTXt+0x70>
1000de24:	e0bff317 	ldw	r2,-52(fp)
1000de28:	10800044 	addi	r2,r2,1
1000de2c:	e0bff315 	stw	r2,-52(fp)
1000de30:	e0fff317 	ldw	r3,-52(fp)
1000de34:	e0bfff17 	ldw	r2,-4(fp)
1000de38:	1880062e 	bgeu	r3,r2,1000de54 <readChunk_iTXt+0x94>
1000de3c:	e0fffe17 	ldw	r3,-8(fp)
1000de40:	e0bff317 	ldw	r2,-52(fp)
1000de44:	1885883a 	add	r2,r3,r2
1000de48:	10800003 	ldbu	r2,0(r2)
1000de4c:	10803fcc 	andi	r2,r2,255
1000de50:	103ff41e 	bne	r2,zero,1000de24 <__alt_data_end+0xf800de24>
    if(length + 3 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination char, corrupt?*/
1000de54:	e0bff317 	ldw	r2,-52(fp)
1000de58:	10c000c4 	addi	r3,r2,3
1000de5c:	e0bfff17 	ldw	r2,-4(fp)
1000de60:	18800336 	bltu	r3,r2,1000de70 <readChunk_iTXt+0xb0>
1000de64:	008012c4 	movi	r2,75
1000de68:	e0bff115 	stw	r2,-60(fp)
1000de6c:	0000f806 	br	1000e250 <readChunk_iTXt+0x490>
    if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
1000de70:	e0bff317 	ldw	r2,-52(fp)
1000de74:	10000326 	beq	r2,zero,1000de84 <readChunk_iTXt+0xc4>
1000de78:	e0bff317 	ldw	r2,-52(fp)
1000de7c:	10801430 	cmpltui	r2,r2,80
1000de80:	1000031e 	bne	r2,zero,1000de90 <readChunk_iTXt+0xd0>
1000de84:	00801644 	movi	r2,89
1000de88:	e0bff115 	stw	r2,-60(fp)
1000de8c:	0000f006 	br	1000e250 <readChunk_iTXt+0x490>

    key = (char*)lodepng_malloc(length + 1);
1000de90:	e0bff317 	ldw	r2,-52(fp)
1000de94:	10800044 	addi	r2,r2,1
1000de98:	1009883a 	mov	r4,r2
1000de9c:	00001f40 	call	100001f4 <lodepng_malloc>
1000dea0:	e0bff415 	stw	r2,-48(fp)
    if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
1000dea4:	e0bff417 	ldw	r2,-48(fp)
1000dea8:	1000031e 	bne	r2,zero,1000deb8 <readChunk_iTXt+0xf8>
1000deac:	008014c4 	movi	r2,83
1000deb0:	e0bff115 	stw	r2,-60(fp)
1000deb4:	0000e606 	br	1000e250 <readChunk_iTXt+0x490>

    key[length] = 0;
1000deb8:	e0fff417 	ldw	r3,-48(fp)
1000debc:	e0bff317 	ldw	r2,-52(fp)
1000dec0:	1885883a 	add	r2,r3,r2
1000dec4:	10000005 	stb	zero,0(r2)
    for(i = 0; i != length; ++i) key[i] = (char)data[i];
1000dec8:	e03ff215 	stw	zero,-56(fp)
1000decc:	00000b06 	br	1000defc <readChunk_iTXt+0x13c>
1000ded0:	e0fff417 	ldw	r3,-48(fp)
1000ded4:	e0bff217 	ldw	r2,-56(fp)
1000ded8:	1885883a 	add	r2,r3,r2
1000dedc:	e13ffe17 	ldw	r4,-8(fp)
1000dee0:	e0fff217 	ldw	r3,-56(fp)
1000dee4:	20c7883a 	add	r3,r4,r3
1000dee8:	18c00003 	ldbu	r3,0(r3)
1000deec:	10c00005 	stb	r3,0(r2)
1000def0:	e0bff217 	ldw	r2,-56(fp)
1000def4:	10800044 	addi	r2,r2,1
1000def8:	e0bff215 	stw	r2,-56(fp)
1000defc:	e0fff217 	ldw	r3,-56(fp)
1000df00:	e0bff317 	ldw	r2,-52(fp)
1000df04:	18bff21e 	bne	r3,r2,1000ded0 <__alt_data_end+0xf800ded0>

    /*read the compression method*/
    compressed = data[length + 1];
1000df08:	e0bff317 	ldw	r2,-52(fp)
1000df0c:	10800044 	addi	r2,r2,1
1000df10:	e0fffe17 	ldw	r3,-8(fp)
1000df14:	1885883a 	add	r2,r3,r2
1000df18:	10800003 	ldbu	r2,0(r2)
1000df1c:	10803fcc 	andi	r2,r2,255
1000df20:	e0bff715 	stw	r2,-36(fp)
    if(data[length + 2] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/
1000df24:	e0bff317 	ldw	r2,-52(fp)
1000df28:	10800084 	addi	r2,r2,2
1000df2c:	e0fffe17 	ldw	r3,-8(fp)
1000df30:	1885883a 	add	r2,r3,r2
1000df34:	10800003 	ldbu	r2,0(r2)
1000df38:	10803fcc 	andi	r2,r2,255
1000df3c:	10000326 	beq	r2,zero,1000df4c <readChunk_iTXt+0x18c>
1000df40:	00801204 	movi	r2,72
1000df44:	e0bff115 	stw	r2,-60(fp)
1000df48:	0000c106 	br	1000e250 <readChunk_iTXt+0x490>

    /*even though it's not allowed by the standard, no error is thrown if
    there's no null termination char, if the text is empty for the next 3 texts*/

    /*read the langtag*/
    begin = length + 3;
1000df4c:	e0bff317 	ldw	r2,-52(fp)
1000df50:	108000c4 	addi	r2,r2,3
1000df54:	e0bff815 	stw	r2,-32(fp)
    length = 0;
1000df58:	e03ff315 	stw	zero,-52(fp)
    for(i = begin; i < chunkLength && data[i] != 0; ++i) ++length;
1000df5c:	e0bff817 	ldw	r2,-32(fp)
1000df60:	e0bff215 	stw	r2,-56(fp)
1000df64:	00000606 	br	1000df80 <readChunk_iTXt+0x1c0>
1000df68:	e0bff317 	ldw	r2,-52(fp)
1000df6c:	10800044 	addi	r2,r2,1
1000df70:	e0bff315 	stw	r2,-52(fp)
1000df74:	e0bff217 	ldw	r2,-56(fp)
1000df78:	10800044 	addi	r2,r2,1
1000df7c:	e0bff215 	stw	r2,-56(fp)
1000df80:	e0fff217 	ldw	r3,-56(fp)
1000df84:	e0bfff17 	ldw	r2,-4(fp)
1000df88:	1880062e 	bgeu	r3,r2,1000dfa4 <readChunk_iTXt+0x1e4>
1000df8c:	e0fffe17 	ldw	r3,-8(fp)
1000df90:	e0bff217 	ldw	r2,-56(fp)
1000df94:	1885883a 	add	r2,r3,r2
1000df98:	10800003 	ldbu	r2,0(r2)
1000df9c:	10803fcc 	andi	r2,r2,255
1000dfa0:	103ff11e 	bne	r2,zero,1000df68 <__alt_data_end+0xf800df68>

    langtag = (char*)lodepng_malloc(length + 1);
1000dfa4:	e0bff317 	ldw	r2,-52(fp)
1000dfa8:	10800044 	addi	r2,r2,1
1000dfac:	1009883a 	mov	r4,r2
1000dfb0:	00001f40 	call	100001f4 <lodepng_malloc>
1000dfb4:	e0bff515 	stw	r2,-44(fp)
    if(!langtag) CERROR_BREAK(error, 83); /*alloc fail*/
1000dfb8:	e0bff517 	ldw	r2,-44(fp)
1000dfbc:	1000031e 	bne	r2,zero,1000dfcc <readChunk_iTXt+0x20c>
1000dfc0:	008014c4 	movi	r2,83
1000dfc4:	e0bff115 	stw	r2,-60(fp)
1000dfc8:	0000a106 	br	1000e250 <readChunk_iTXt+0x490>

    langtag[length] = 0;
1000dfcc:	e0fff517 	ldw	r3,-44(fp)
1000dfd0:	e0bff317 	ldw	r2,-52(fp)
1000dfd4:	1885883a 	add	r2,r3,r2
1000dfd8:	10000005 	stb	zero,0(r2)
    for(i = 0; i != length; ++i) langtag[i] = (char)data[begin + i];
1000dfdc:	e03ff215 	stw	zero,-56(fp)
1000dfe0:	00000d06 	br	1000e018 <readChunk_iTXt+0x258>
1000dfe4:	e0fff517 	ldw	r3,-44(fp)
1000dfe8:	e0bff217 	ldw	r2,-56(fp)
1000dfec:	1885883a 	add	r2,r3,r2
1000dff0:	e13ff817 	ldw	r4,-32(fp)
1000dff4:	e0fff217 	ldw	r3,-56(fp)
1000dff8:	20c7883a 	add	r3,r4,r3
1000dffc:	e13ffe17 	ldw	r4,-8(fp)
1000e000:	20c7883a 	add	r3,r4,r3
1000e004:	18c00003 	ldbu	r3,0(r3)
1000e008:	10c00005 	stb	r3,0(r2)
1000e00c:	e0bff217 	ldw	r2,-56(fp)
1000e010:	10800044 	addi	r2,r2,1
1000e014:	e0bff215 	stw	r2,-56(fp)
1000e018:	e0fff217 	ldw	r3,-56(fp)
1000e01c:	e0bff317 	ldw	r2,-52(fp)
1000e020:	18bff01e 	bne	r3,r2,1000dfe4 <__alt_data_end+0xf800dfe4>

    /*read the transkey*/
    begin += length + 1;
1000e024:	e0fff317 	ldw	r3,-52(fp)
1000e028:	e0bff817 	ldw	r2,-32(fp)
1000e02c:	1885883a 	add	r2,r3,r2
1000e030:	10800044 	addi	r2,r2,1
1000e034:	e0bff815 	stw	r2,-32(fp)
    length = 0;
1000e038:	e03ff315 	stw	zero,-52(fp)
    for(i = begin; i < chunkLength && data[i] != 0; ++i) ++length;
1000e03c:	e0bff817 	ldw	r2,-32(fp)
1000e040:	e0bff215 	stw	r2,-56(fp)
1000e044:	00000606 	br	1000e060 <readChunk_iTXt+0x2a0>
1000e048:	e0bff317 	ldw	r2,-52(fp)
1000e04c:	10800044 	addi	r2,r2,1
1000e050:	e0bff315 	stw	r2,-52(fp)
1000e054:	e0bff217 	ldw	r2,-56(fp)
1000e058:	10800044 	addi	r2,r2,1
1000e05c:	e0bff215 	stw	r2,-56(fp)
1000e060:	e0fff217 	ldw	r3,-56(fp)
1000e064:	e0bfff17 	ldw	r2,-4(fp)
1000e068:	1880062e 	bgeu	r3,r2,1000e084 <readChunk_iTXt+0x2c4>
1000e06c:	e0fffe17 	ldw	r3,-8(fp)
1000e070:	e0bff217 	ldw	r2,-56(fp)
1000e074:	1885883a 	add	r2,r3,r2
1000e078:	10800003 	ldbu	r2,0(r2)
1000e07c:	10803fcc 	andi	r2,r2,255
1000e080:	103ff11e 	bne	r2,zero,1000e048 <__alt_data_end+0xf800e048>

    transkey = (char*)lodepng_malloc(length + 1);
1000e084:	e0bff317 	ldw	r2,-52(fp)
1000e088:	10800044 	addi	r2,r2,1
1000e08c:	1009883a 	mov	r4,r2
1000e090:	00001f40 	call	100001f4 <lodepng_malloc>
1000e094:	e0bff615 	stw	r2,-40(fp)
    if(!transkey) CERROR_BREAK(error, 83); /*alloc fail*/
1000e098:	e0bff617 	ldw	r2,-40(fp)
1000e09c:	1000031e 	bne	r2,zero,1000e0ac <readChunk_iTXt+0x2ec>
1000e0a0:	008014c4 	movi	r2,83
1000e0a4:	e0bff115 	stw	r2,-60(fp)
1000e0a8:	00006906 	br	1000e250 <readChunk_iTXt+0x490>

    transkey[length] = 0;
1000e0ac:	e0fff617 	ldw	r3,-40(fp)
1000e0b0:	e0bff317 	ldw	r2,-52(fp)
1000e0b4:	1885883a 	add	r2,r3,r2
1000e0b8:	10000005 	stb	zero,0(r2)
    for(i = 0; i != length; ++i) transkey[i] = (char)data[begin + i];
1000e0bc:	e03ff215 	stw	zero,-56(fp)
1000e0c0:	00000d06 	br	1000e0f8 <readChunk_iTXt+0x338>
1000e0c4:	e0fff617 	ldw	r3,-40(fp)
1000e0c8:	e0bff217 	ldw	r2,-56(fp)
1000e0cc:	1885883a 	add	r2,r3,r2
1000e0d0:	e13ff817 	ldw	r4,-32(fp)
1000e0d4:	e0fff217 	ldw	r3,-56(fp)
1000e0d8:	20c7883a 	add	r3,r4,r3
1000e0dc:	e13ffe17 	ldw	r4,-8(fp)
1000e0e0:	20c7883a 	add	r3,r4,r3
1000e0e4:	18c00003 	ldbu	r3,0(r3)
1000e0e8:	10c00005 	stb	r3,0(r2)
1000e0ec:	e0bff217 	ldw	r2,-56(fp)
1000e0f0:	10800044 	addi	r2,r2,1
1000e0f4:	e0bff215 	stw	r2,-56(fp)
1000e0f8:	e0fff217 	ldw	r3,-56(fp)
1000e0fc:	e0bff317 	ldw	r2,-52(fp)
1000e100:	18bff01e 	bne	r3,r2,1000e0c4 <__alt_data_end+0xf800e0c4>

    /*read the actual text*/
    begin += length + 1;
1000e104:	e0fff317 	ldw	r3,-52(fp)
1000e108:	e0bff817 	ldw	r2,-32(fp)
1000e10c:	1885883a 	add	r2,r3,r2
1000e110:	10800044 	addi	r2,r2,1
1000e114:	e0bff815 	stw	r2,-32(fp)

    length = chunkLength < begin ? 0 : chunkLength - begin;
1000e118:	e0ffff17 	ldw	r3,-4(fp)
1000e11c:	e0bff817 	ldw	r2,-32(fp)
1000e120:	18800436 	bltu	r3,r2,1000e134 <readChunk_iTXt+0x374>
1000e124:	e0ffff17 	ldw	r3,-4(fp)
1000e128:	e0bff817 	ldw	r2,-32(fp)
1000e12c:	1885c83a 	sub	r2,r3,r2
1000e130:	00000106 	br	1000e138 <readChunk_iTXt+0x378>
1000e134:	0005883a 	mov	r2,zero
1000e138:	e0bff315 	stw	r2,-52(fp)

    if(compressed)
1000e13c:	e0bff717 	ldw	r2,-36(fp)
1000e140:	10001926 	beq	r2,zero,1000e1a8 <readChunk_iTXt+0x3e8>
    {
      /*will fail if zlib error, e.g. if length is too small*/
      error = zlib_decompress(&decoded.data, &decoded.size,
1000e144:	e0fffe17 	ldw	r3,-8(fp)
1000e148:	e0bff817 	ldw	r2,-32(fp)
1000e14c:	1885883a 	add	r2,r3,r2
1000e150:	e13ff904 	addi	r4,fp,-28
1000e154:	e0fff904 	addi	r3,fp,-28
1000e158:	18c00104 	addi	r3,r3,4
1000e15c:	e17ffd17 	ldw	r5,-12(fp)
1000e160:	d9400015 	stw	r5,0(sp)
1000e164:	180b883a 	mov	r5,r3
1000e168:	100d883a 	mov	r6,r2
1000e16c:	e1fff317 	ldw	r7,-52(fp)
1000e170:	0005f240 	call	10005f24 <zlib_decompress>
1000e174:	e0bff115 	stw	r2,-60(fp)
                              (unsigned char*)(&data[begin]),
                              length, zlibsettings);
      if(error) break;
1000e178:	e0bff117 	ldw	r2,-60(fp)
1000e17c:	1000331e 	bne	r2,zero,1000e24c <readChunk_iTXt+0x48c>
      if(decoded.allocsize < decoded.size) decoded.allocsize = decoded.size;
1000e180:	e0fffb17 	ldw	r3,-20(fp)
1000e184:	e0bffa17 	ldw	r2,-24(fp)
1000e188:	1880022e 	bgeu	r3,r2,1000e194 <readChunk_iTXt+0x3d4>
1000e18c:	e0bffa17 	ldw	r2,-24(fp)
1000e190:	e0bffb15 	stw	r2,-20(fp)
      ucvector_push_back(&decoded, 0);
1000e194:	e0bff904 	addi	r2,fp,-28
1000e198:	1009883a 	mov	r4,r2
1000e19c:	000b883a 	mov	r5,zero
1000e1a0:	00007e80 	call	100007e8 <ucvector_push_back>
1000e1a4:	00002006 	br	1000e228 <readChunk_iTXt+0x468>
    }
    else
    {
      if(!ucvector_resize(&decoded, length + 1)) CERROR_BREAK(error, 83 /*alloc fail*/);
1000e1a8:	e0bff317 	ldw	r2,-52(fp)
1000e1ac:	10800044 	addi	r2,r2,1
1000e1b0:	e0fff904 	addi	r3,fp,-28
1000e1b4:	1809883a 	mov	r4,r3
1000e1b8:	100b883a 	mov	r5,r2
1000e1bc:	00006140 	call	10000614 <ucvector_resize>
1000e1c0:	1000031e 	bne	r2,zero,1000e1d0 <readChunk_iTXt+0x410>
1000e1c4:	008014c4 	movi	r2,83
1000e1c8:	e0bff115 	stw	r2,-60(fp)
1000e1cc:	00002006 	br	1000e250 <readChunk_iTXt+0x490>

      decoded.data[length] = 0;
1000e1d0:	e0fff917 	ldw	r3,-28(fp)
1000e1d4:	e0bff317 	ldw	r2,-52(fp)
1000e1d8:	1885883a 	add	r2,r3,r2
1000e1dc:	10000005 	stb	zero,0(r2)
      for(i = 0; i != length; ++i) decoded.data[i] = data[begin + i];
1000e1e0:	e03ff215 	stw	zero,-56(fp)
1000e1e4:	00000d06 	br	1000e21c <readChunk_iTXt+0x45c>
1000e1e8:	e0fff917 	ldw	r3,-28(fp)
1000e1ec:	e0bff217 	ldw	r2,-56(fp)
1000e1f0:	1885883a 	add	r2,r3,r2
1000e1f4:	e13ff817 	ldw	r4,-32(fp)
1000e1f8:	e0fff217 	ldw	r3,-56(fp)
1000e1fc:	20c7883a 	add	r3,r4,r3
1000e200:	e13ffe17 	ldw	r4,-8(fp)
1000e204:	20c7883a 	add	r3,r4,r3
1000e208:	18c00003 	ldbu	r3,0(r3)
1000e20c:	10c00005 	stb	r3,0(r2)
1000e210:	e0bff217 	ldw	r2,-56(fp)
1000e214:	10800044 	addi	r2,r2,1
1000e218:	e0bff215 	stw	r2,-56(fp)
1000e21c:	e0fff217 	ldw	r3,-56(fp)
1000e220:	e0bff317 	ldw	r2,-52(fp)
1000e224:	18bff01e 	bne	r3,r2,1000e1e8 <__alt_data_end+0xf800e1e8>
    }

    error = lodepng_add_itext(info, key, langtag, transkey, (char*)decoded.data);
1000e228:	e0bff917 	ldw	r2,-28(fp)
1000e22c:	d8800015 	stw	r2,0(sp)
1000e230:	e13ffc17 	ldw	r4,-16(fp)
1000e234:	e17ff417 	ldw	r5,-48(fp)
1000e238:	e1bff517 	ldw	r6,-44(fp)
1000e23c:	e1fff617 	ldw	r7,-40(fp)
1000e240:	0007f440 	call	10007f44 <lodepng_add_itext>
1000e244:	e0bff115 	stw	r2,-60(fp)

    break;
1000e248:	00000106 	br	1000e250 <readChunk_iTXt+0x490>
    {
      /*will fail if zlib error, e.g. if length is too small*/
      error = zlib_decompress(&decoded.data, &decoded.size,
                              (unsigned char*)(&data[begin]),
                              length, zlibsettings);
      if(error) break;
1000e24c:	0001883a 	nop
    error = lodepng_add_itext(info, key, langtag, transkey, (char*)decoded.data);

    break;
  }

  lodepng_free(key);
1000e250:	e13ff417 	ldw	r4,-48(fp)
1000e254:	000025c0 	call	1000025c <lodepng_free>
  lodepng_free(langtag);
1000e258:	e13ff517 	ldw	r4,-44(fp)
1000e25c:	000025c0 	call	1000025c <lodepng_free>
  lodepng_free(transkey);
1000e260:	e13ff617 	ldw	r4,-40(fp)
1000e264:	000025c0 	call	1000025c <lodepng_free>
  ucvector_cleanup(&decoded);
1000e268:	e0bff904 	addi	r2,fp,-28
1000e26c:	1009883a 	mov	r4,r2
1000e270:	00006680 	call	10000668 <ucvector_cleanup>

  return error;
1000e274:	e0bff117 	ldw	r2,-60(fp)
}
1000e278:	e037883a 	mov	sp,fp
1000e27c:	dfc00117 	ldw	ra,4(sp)
1000e280:	df000017 	ldw	fp,0(sp)
1000e284:	dec00204 	addi	sp,sp,8
1000e288:	f800283a 	ret

1000e28c <readChunk_tIME>:

static unsigned readChunk_tIME(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
{
1000e28c:	defffc04 	addi	sp,sp,-16
1000e290:	df000315 	stw	fp,12(sp)
1000e294:	df000304 	addi	fp,sp,12
1000e298:	e13ffd15 	stw	r4,-12(fp)
1000e29c:	e17ffe15 	stw	r5,-8(fp)
1000e2a0:	e1bfff15 	stw	r6,-4(fp)
  if(chunkLength != 7) return 73; /*invalid tIME chunk size*/
1000e2a4:	e0bfff17 	ldw	r2,-4(fp)
1000e2a8:	108001e0 	cmpeqi	r2,r2,7
1000e2ac:	1000021e 	bne	r2,zero,1000e2b8 <readChunk_tIME+0x2c>
1000e2b0:	00801244 	movi	r2,73
1000e2b4:	00002d06 	br	1000e36c <readChunk_tIME+0xe0>

  info->time_defined = 1;
1000e2b8:	e0bffd17 	ldw	r2,-12(fp)
1000e2bc:	00c00044 	movi	r3,1
1000e2c0:	10c01715 	stw	r3,92(r2)
  info->time.year = 256u * data[0] + data[1];
1000e2c4:	e0bffe17 	ldw	r2,-8(fp)
1000e2c8:	10800003 	ldbu	r2,0(r2)
1000e2cc:	10803fcc 	andi	r2,r2,255
1000e2d0:	1006923a 	slli	r3,r2,8
1000e2d4:	e0bffe17 	ldw	r2,-8(fp)
1000e2d8:	10800044 	addi	r2,r2,1
1000e2dc:	10800003 	ldbu	r2,0(r2)
1000e2e0:	10803fcc 	andi	r2,r2,255
1000e2e4:	1887883a 	add	r3,r3,r2
1000e2e8:	e0bffd17 	ldw	r2,-12(fp)
1000e2ec:	10c01815 	stw	r3,96(r2)
  info->time.month = data[2];
1000e2f0:	e0bffe17 	ldw	r2,-8(fp)
1000e2f4:	10800084 	addi	r2,r2,2
1000e2f8:	10800003 	ldbu	r2,0(r2)
1000e2fc:	10c03fcc 	andi	r3,r2,255
1000e300:	e0bffd17 	ldw	r2,-12(fp)
1000e304:	10c01915 	stw	r3,100(r2)
  info->time.day = data[3];
1000e308:	e0bffe17 	ldw	r2,-8(fp)
1000e30c:	108000c4 	addi	r2,r2,3
1000e310:	10800003 	ldbu	r2,0(r2)
1000e314:	10c03fcc 	andi	r3,r2,255
1000e318:	e0bffd17 	ldw	r2,-12(fp)
1000e31c:	10c01a15 	stw	r3,104(r2)
  info->time.hour = data[4];
1000e320:	e0bffe17 	ldw	r2,-8(fp)
1000e324:	10800104 	addi	r2,r2,4
1000e328:	10800003 	ldbu	r2,0(r2)
1000e32c:	10c03fcc 	andi	r3,r2,255
1000e330:	e0bffd17 	ldw	r2,-12(fp)
1000e334:	10c01b15 	stw	r3,108(r2)
  info->time.minute = data[5];
1000e338:	e0bffe17 	ldw	r2,-8(fp)
1000e33c:	10800144 	addi	r2,r2,5
1000e340:	10800003 	ldbu	r2,0(r2)
1000e344:	10c03fcc 	andi	r3,r2,255
1000e348:	e0bffd17 	ldw	r2,-12(fp)
1000e34c:	10c01c15 	stw	r3,112(r2)
  info->time.second = data[6];
1000e350:	e0bffe17 	ldw	r2,-8(fp)
1000e354:	10800184 	addi	r2,r2,6
1000e358:	10800003 	ldbu	r2,0(r2)
1000e35c:	10c03fcc 	andi	r3,r2,255
1000e360:	e0bffd17 	ldw	r2,-12(fp)
1000e364:	10c01d15 	stw	r3,116(r2)

  return 0; /* OK */
1000e368:	0005883a 	mov	r2,zero
}
1000e36c:	e037883a 	mov	sp,fp
1000e370:	df000017 	ldw	fp,0(sp)
1000e374:	dec00104 	addi	sp,sp,4
1000e378:	f800283a 	ret

1000e37c <readChunk_pHYs>:

static unsigned readChunk_pHYs(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
{
1000e37c:	defffc04 	addi	sp,sp,-16
1000e380:	df000315 	stw	fp,12(sp)
1000e384:	df000304 	addi	fp,sp,12
1000e388:	e13ffd15 	stw	r4,-12(fp)
1000e38c:	e17ffe15 	stw	r5,-8(fp)
1000e390:	e1bfff15 	stw	r6,-4(fp)
  if(chunkLength != 9) return 74; /*invalid pHYs chunk size*/
1000e394:	e0bfff17 	ldw	r2,-4(fp)
1000e398:	10800260 	cmpeqi	r2,r2,9
1000e39c:	1000021e 	bne	r2,zero,1000e3a8 <readChunk_pHYs+0x2c>
1000e3a0:	00801284 	movi	r2,74
1000e3a4:	00003906 	br	1000e48c <readChunk_pHYs+0x110>

  info->phys_defined = 1;
1000e3a8:	e0bffd17 	ldw	r2,-12(fp)
1000e3ac:	00c00044 	movi	r3,1
1000e3b0:	10c01e15 	stw	r3,120(r2)
  info->phys_x = 16777216u * data[0] + 65536u * data[1] + 256u * data[2] + data[3];
1000e3b4:	e0bffe17 	ldw	r2,-8(fp)
1000e3b8:	10800003 	ldbu	r2,0(r2)
1000e3bc:	10803fcc 	andi	r2,r2,255
1000e3c0:	1006923a 	slli	r3,r2,8
1000e3c4:	e0bffe17 	ldw	r2,-8(fp)
1000e3c8:	10800044 	addi	r2,r2,1
1000e3cc:	10800003 	ldbu	r2,0(r2)
1000e3d0:	10803fcc 	andi	r2,r2,255
1000e3d4:	1885883a 	add	r2,r3,r2
1000e3d8:	1006923a 	slli	r3,r2,8
1000e3dc:	e0bffe17 	ldw	r2,-8(fp)
1000e3e0:	10800084 	addi	r2,r2,2
1000e3e4:	10800003 	ldbu	r2,0(r2)
1000e3e8:	10803fcc 	andi	r2,r2,255
1000e3ec:	1885883a 	add	r2,r3,r2
1000e3f0:	1006923a 	slli	r3,r2,8
1000e3f4:	e0bffe17 	ldw	r2,-8(fp)
1000e3f8:	108000c4 	addi	r2,r2,3
1000e3fc:	10800003 	ldbu	r2,0(r2)
1000e400:	10803fcc 	andi	r2,r2,255
1000e404:	1887883a 	add	r3,r3,r2
1000e408:	e0bffd17 	ldw	r2,-12(fp)
1000e40c:	10c01f15 	stw	r3,124(r2)
  info->phys_y = 16777216u * data[4] + 65536u * data[5] + 256u * data[6] + data[7];
1000e410:	e0bffe17 	ldw	r2,-8(fp)
1000e414:	10800104 	addi	r2,r2,4
1000e418:	10800003 	ldbu	r2,0(r2)
1000e41c:	10803fcc 	andi	r2,r2,255
1000e420:	1006923a 	slli	r3,r2,8
1000e424:	e0bffe17 	ldw	r2,-8(fp)
1000e428:	10800144 	addi	r2,r2,5
1000e42c:	10800003 	ldbu	r2,0(r2)
1000e430:	10803fcc 	andi	r2,r2,255
1000e434:	1885883a 	add	r2,r3,r2
1000e438:	1006923a 	slli	r3,r2,8
1000e43c:	e0bffe17 	ldw	r2,-8(fp)
1000e440:	10800184 	addi	r2,r2,6
1000e444:	10800003 	ldbu	r2,0(r2)
1000e448:	10803fcc 	andi	r2,r2,255
1000e44c:	1885883a 	add	r2,r3,r2
1000e450:	1006923a 	slli	r3,r2,8
1000e454:	e0bffe17 	ldw	r2,-8(fp)
1000e458:	108001c4 	addi	r2,r2,7
1000e45c:	10800003 	ldbu	r2,0(r2)
1000e460:	10803fcc 	andi	r2,r2,255
1000e464:	1887883a 	add	r3,r3,r2
1000e468:	e0bffd17 	ldw	r2,-12(fp)
1000e46c:	10c02015 	stw	r3,128(r2)
  info->phys_unit = data[8];
1000e470:	e0bffe17 	ldw	r2,-8(fp)
1000e474:	10800204 	addi	r2,r2,8
1000e478:	10800003 	ldbu	r2,0(r2)
1000e47c:	10c03fcc 	andi	r3,r2,255
1000e480:	e0bffd17 	ldw	r2,-12(fp)
1000e484:	10c02115 	stw	r3,132(r2)

  return 0; /* OK */
1000e488:	0005883a 	mov	r2,zero
}
1000e48c:	e037883a 	mov	sp,fp
1000e490:	df000017 	ldw	fp,0(sp)
1000e494:	dec00104 	addi	sp,sp,4
1000e498:	f800283a 	ret

1000e49c <decodeGeneric>:

/*read a PNG, the result will be in the same color type as the PNG (hence "generic")*/
static void decodeGeneric(unsigned char** out, unsigned* w, unsigned* h,
                          LodePNGState* state,
                          const unsigned char* in, size_t insize)
{
1000e49c:	deffe404 	addi	sp,sp,-112
1000e4a0:	dfc01b15 	stw	ra,108(sp)
1000e4a4:	df001a15 	stw	fp,104(sp)
1000e4a8:	df001a04 	addi	fp,sp,104
1000e4ac:	e13ffc15 	stw	r4,-16(fp)
1000e4b0:	e17ffd15 	stw	r5,-12(fp)
1000e4b4:	e1bffe15 	stw	r6,-8(fp)
1000e4b8:	e1ffff15 	stw	r7,-4(fp)
  unsigned char IEND = 0;
1000e4bc:	e03fe705 	stb	zero,-100(fp)
  ucvector scanlines;
  size_t predict;
  size_t numpixels;

  /*for unknown chunk order*/
  unsigned unknown = 0;
1000e4c0:	e03feb15 	stw	zero,-84(fp)
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
  unsigned critical_pos = 1; /*1 = after IHDR, 2 = after PLTE, 3 = after IDAT*/
1000e4c4:	00800044 	movi	r2,1
1000e4c8:	e0bfec15 	stw	r2,-80(fp)
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/

  /*provide some proper output values if error will happen*/
  *out = 0;
1000e4cc:	e0bffc17 	ldw	r2,-16(fp)
1000e4d0:	10000015 	stw	zero,0(r2)

  state->error = lodepng_inspect(w, h, state, in, insize); /*reads header and resets other parameters in state->info_png*/
1000e4d4:	e0800317 	ldw	r2,12(fp)
1000e4d8:	d8800015 	stw	r2,0(sp)
1000e4dc:	e13ffd17 	ldw	r4,-12(fp)
1000e4e0:	e17ffe17 	ldw	r5,-8(fp)
1000e4e4:	e1bfff17 	ldw	r6,-4(fp)
1000e4e8:	e1c00217 	ldw	r7,8(fp)
1000e4ec:	000c1180 	call	1000c118 <lodepng_inspect>
1000e4f0:	e0ffff17 	ldw	r3,-4(fp)
1000e4f4:	18804815 	stw	r2,288(r3)
  if(state->error) return;
1000e4f8:	e0bfff17 	ldw	r2,-4(fp)
1000e4fc:	10804817 	ldw	r2,288(r2)
1000e500:	1002621e 	bne	r2,zero,1000ee8c <decodeGeneric+0x9f0>

  numpixels = *w * *h;
1000e504:	e0bffd17 	ldw	r2,-12(fp)
1000e508:	10c00017 	ldw	r3,0(r2)
1000e50c:	e0bffe17 	ldw	r2,-8(fp)
1000e510:	10800017 	ldw	r2,0(r2)
1000e514:	1809883a 	mov	r4,r3
1000e518:	100b883a 	mov	r5,r2
1000e51c:	00146fc0 	call	100146fc <__mulsi3>
1000e520:	e0bfed15 	stw	r2,-76(fp)

  /*multiplication overflow*/
  if(*h != 0 && numpixels / *h != *w) CERROR_RETURN(state->error, 92);
1000e524:	e0bffe17 	ldw	r2,-8(fp)
1000e528:	10800017 	ldw	r2,0(r2)
1000e52c:	10000d26 	beq	r2,zero,1000e564 <decodeGeneric+0xc8>
1000e530:	e0bffe17 	ldw	r2,-8(fp)
1000e534:	10800017 	ldw	r2,0(r2)
1000e538:	e13fed17 	ldw	r4,-76(fp)
1000e53c:	100b883a 	mov	r5,r2
1000e540:	00146ec0 	call	100146ec <__udivsi3>
1000e544:	1007883a 	mov	r3,r2
1000e548:	e0bffd17 	ldw	r2,-12(fp)
1000e54c:	10800017 	ldw	r2,0(r2)
1000e550:	18800426 	beq	r3,r2,1000e564 <decodeGeneric+0xc8>
1000e554:	e0bfff17 	ldw	r2,-4(fp)
1000e558:	00c01704 	movi	r3,92
1000e55c:	10c04815 	stw	r3,288(r2)
1000e560:	00024a06 	br	1000ee8c <decodeGeneric+0x9f0>
  /*multiplication overflow possible further below. Allows up to 2^31-1 pixel
  bytes with 16-bit RGBA, the rest is room for filter bytes.*/
  if(numpixels > 268435455) CERROR_RETURN(state->error, 92);
1000e564:	e0ffed17 	ldw	r3,-76(fp)
1000e568:	00840034 	movhi	r2,4096
1000e56c:	18800436 	bltu	r3,r2,1000e580 <decodeGeneric+0xe4>
1000e570:	e0bfff17 	ldw	r2,-4(fp)
1000e574:	00c01704 	movi	r3,92
1000e578:	10c04815 	stw	r3,288(r2)
1000e57c:	00024306 	br	1000ee8c <decodeGeneric+0x9f0>

  ucvector_init(&idat);
1000e580:	e0bff304 	addi	r2,fp,-52
1000e584:	1009883a 	mov	r4,r2
1000e588:	00006c00 	call	100006c0 <ucvector_init>
  chunk = &in[33]; /*first byte of the first chunk after the header*/
1000e58c:	e0800217 	ldw	r2,8(fp)
1000e590:	10800844 	addi	r2,r2,33
1000e594:	e0bfe815 	stw	r2,-96(fp)

  /*loop through the chunks, ignoring unknown chunks and stopping at IEND chunk.
  IDAT data is put at the start of the in buffer*/
  while(!IEND && !state->error)
1000e598:	00013206 	br	1000ea64 <decodeGeneric+0x5c8>
  {
    unsigned chunkLength;
    const unsigned char* data; /*the data in the chunk*/

    /*error: size of the in buffer too small to contain next chunk*/
    if((size_t)((chunk - in) + 12) > insize || chunk < in) CERROR_BREAK(state->error, 30);
1000e59c:	e0ffe817 	ldw	r3,-96(fp)
1000e5a0:	e0800217 	ldw	r2,8(fp)
1000e5a4:	1885c83a 	sub	r2,r3,r2
1000e5a8:	10800304 	addi	r2,r2,12
1000e5ac:	e0c00317 	ldw	r3,12(fp)
1000e5b0:	18800336 	bltu	r3,r2,1000e5c0 <decodeGeneric+0x124>
1000e5b4:	e0ffe817 	ldw	r3,-96(fp)
1000e5b8:	e0800217 	ldw	r2,8(fp)
1000e5bc:	1880042e 	bgeu	r3,r2,1000e5d0 <decodeGeneric+0x134>
1000e5c0:	e0bfff17 	ldw	r2,-4(fp)
1000e5c4:	00c00784 	movi	r3,30
1000e5c8:	10c04815 	stw	r3,288(r2)
1000e5cc:	00012e06 	br	1000ea88 <decodeGeneric+0x5ec>

    /*length of the data of the chunk, excluding the length bytes, chunk type and CRC bytes*/
    chunkLength = lodepng_chunk_length(chunk);
1000e5d0:	e13fe817 	ldw	r4,-96(fp)
1000e5d4:	00065bc0 	call	100065bc <lodepng_chunk_length>
1000e5d8:	e0bfee15 	stw	r2,-72(fp)
    /*error: chunk length larger than the max PNG chunk size*/
    if(chunkLength > 2147483647) CERROR_BREAK(state->error, 63);
1000e5dc:	e0bfee17 	ldw	r2,-72(fp)
1000e5e0:	1000040e 	bge	r2,zero,1000e5f4 <decodeGeneric+0x158>
1000e5e4:	e0bfff17 	ldw	r2,-4(fp)
1000e5e8:	00c00fc4 	movi	r3,63
1000e5ec:	10c04815 	stw	r3,288(r2)
1000e5f0:	00012506 	br	1000ea88 <decodeGeneric+0x5ec>

    if((size_t)((chunk - in) + chunkLength + 12) > insize || (chunk + chunkLength + 12) < in)
1000e5f4:	e0ffe817 	ldw	r3,-96(fp)
1000e5f8:	e0800217 	ldw	r2,8(fp)
1000e5fc:	1885c83a 	sub	r2,r3,r2
1000e600:	1007883a 	mov	r3,r2
1000e604:	e0bfee17 	ldw	r2,-72(fp)
1000e608:	1885883a 	add	r2,r3,r2
1000e60c:	10800304 	addi	r2,r2,12
1000e610:	e0c00317 	ldw	r3,12(fp)
1000e614:	18800636 	bltu	r3,r2,1000e630 <decodeGeneric+0x194>
1000e618:	e0bfee17 	ldw	r2,-72(fp)
1000e61c:	10800304 	addi	r2,r2,12
1000e620:	e0ffe817 	ldw	r3,-96(fp)
1000e624:	1887883a 	add	r3,r3,r2
1000e628:	e0800217 	ldw	r2,8(fp)
1000e62c:	1880042e 	bgeu	r3,r2,1000e640 <decodeGeneric+0x1a4>
    {
      CERROR_BREAK(state->error, 64); /*error: size of the in buffer too small to contain next chunk*/
1000e630:	e0bfff17 	ldw	r2,-4(fp)
1000e634:	00c01004 	movi	r3,64
1000e638:	10c04815 	stw	r3,288(r2)
1000e63c:	00011206 	br	1000ea88 <decodeGeneric+0x5ec>
    }

    data = lodepng_chunk_data_const(chunk);
1000e640:	e13fe817 	ldw	r4,-96(fp)
1000e644:	000682c0 	call	1000682c <lodepng_chunk_data_const>
1000e648:	e0bfef15 	stw	r2,-68(fp)

    /*IDAT chunk, containing compressed image data*/
    if(lodepng_chunk_type_equals(chunk, "IDAT"))
1000e64c:	e13fe817 	ldw	r4,-96(fp)
1000e650:	014400b4 	movhi	r5,4098
1000e654:	294a8904 	addi	r5,r5,10788
1000e658:	00066600 	call	10006660 <lodepng_chunk_type_equals>
1000e65c:	10803fcc 	andi	r2,r2,255
1000e660:	10002326 	beq	r2,zero,1000e6f0 <decodeGeneric+0x254>
    {
      size_t oldsize = idat.size;
1000e664:	e0bff417 	ldw	r2,-48(fp)
1000e668:	e0bff015 	stw	r2,-64(fp)
      if(!ucvector_resize(&idat, oldsize + chunkLength)) CERROR_BREAK(state->error, 83 /*alloc fail*/);
1000e66c:	e0fff017 	ldw	r3,-64(fp)
1000e670:	e0bfee17 	ldw	r2,-72(fp)
1000e674:	1885883a 	add	r2,r3,r2
1000e678:	e0fff304 	addi	r3,fp,-52
1000e67c:	1809883a 	mov	r4,r3
1000e680:	100b883a 	mov	r5,r2
1000e684:	00006140 	call	10000614 <ucvector_resize>
1000e688:	1000041e 	bne	r2,zero,1000e69c <decodeGeneric+0x200>
1000e68c:	e0bfff17 	ldw	r2,-4(fp)
1000e690:	00c014c4 	movi	r3,83
1000e694:	10c04815 	stw	r3,288(r2)
1000e698:	0000fb06 	br	1000ea88 <decodeGeneric+0x5ec>
      for(i = 0; i != chunkLength; ++i) idat.data[oldsize + i] = data[i];
1000e69c:	e03fe915 	stw	zero,-92(fp)
1000e6a0:	00000d06 	br	1000e6d8 <decodeGeneric+0x23c>
1000e6a4:	e0fff317 	ldw	r3,-52(fp)
1000e6a8:	e13ff017 	ldw	r4,-64(fp)
1000e6ac:	e0bfe917 	ldw	r2,-92(fp)
1000e6b0:	2085883a 	add	r2,r4,r2
1000e6b4:	1885883a 	add	r2,r3,r2
1000e6b8:	e13fef17 	ldw	r4,-68(fp)
1000e6bc:	e0ffe917 	ldw	r3,-92(fp)
1000e6c0:	20c7883a 	add	r3,r4,r3
1000e6c4:	18c00003 	ldbu	r3,0(r3)
1000e6c8:	10c00005 	stb	r3,0(r2)
1000e6cc:	e0bfe917 	ldw	r2,-92(fp)
1000e6d0:	10800044 	addi	r2,r2,1
1000e6d4:	e0bfe915 	stw	r2,-92(fp)
1000e6d8:	e0ffe917 	ldw	r3,-92(fp)
1000e6dc:	e0bfee17 	ldw	r2,-72(fp)
1000e6e0:	18bff01e 	bne	r3,r2,1000e6a4 <__alt_data_end+0xf800e6a4>
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
      critical_pos = 3;
1000e6e4:	008000c4 	movi	r2,3
1000e6e8:	e0bfec15 	stw	r2,-80(fp)
1000e6ec:	0000cc06 	br	1000ea20 <decodeGeneric+0x584>
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
    }
    /*IEND chunk*/
    else if(lodepng_chunk_type_equals(chunk, "IEND"))
1000e6f0:	e13fe817 	ldw	r4,-96(fp)
1000e6f4:	014400b4 	movhi	r5,4098
1000e6f8:	294a8b04 	addi	r5,r5,10796
1000e6fc:	00066600 	call	10006660 <lodepng_chunk_type_equals>
1000e700:	10803fcc 	andi	r2,r2,255
1000e704:	10000326 	beq	r2,zero,1000e714 <decodeGeneric+0x278>
    {
      IEND = 1;
1000e708:	00800044 	movi	r2,1
1000e70c:	e0bfe705 	stb	r2,-100(fp)
1000e710:	0000c306 	br	1000ea20 <decodeGeneric+0x584>
    }
    /*palette chunk (PLTE)*/
    else if(lodepng_chunk_type_equals(chunk, "PLTE"))
1000e714:	e13fe817 	ldw	r4,-96(fp)
1000e718:	014400b4 	movhi	r5,4098
1000e71c:	294a8d04 	addi	r5,r5,10804
1000e720:	00066600 	call	10006660 <lodepng_chunk_type_equals>
1000e724:	10803fcc 	andi	r2,r2,255
1000e728:	10000e26 	beq	r2,zero,1000e764 <decodeGeneric+0x2c8>
    {
      state->error = readChunk_PLTE(&state->info_png.color, data, chunkLength);
1000e72c:	e0bfff17 	ldw	r2,-4(fp)
1000e730:	10802304 	addi	r2,r2,140
1000e734:	1009883a 	mov	r4,r2
1000e738:	e17fef17 	ldw	r5,-68(fp)
1000e73c:	e1bfee17 	ldw	r6,-72(fp)
1000e740:	000d4140 	call	1000d414 <readChunk_PLTE>
1000e744:	e0ffff17 	ldw	r3,-4(fp)
1000e748:	18804815 	stw	r2,288(r3)
      if(state->error) break;
1000e74c:	e0bfff17 	ldw	r2,-4(fp)
1000e750:	10804817 	ldw	r2,288(r2)
1000e754:	1000c91e 	bne	r2,zero,1000ea7c <decodeGeneric+0x5e0>
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
      critical_pos = 2;
1000e758:	00800084 	movi	r2,2
1000e75c:	e0bfec15 	stw	r2,-80(fp)
1000e760:	0000af06 	br	1000ea20 <decodeGeneric+0x584>
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
    }
    /*palette transparency chunk (tRNS)*/
    else if(lodepng_chunk_type_equals(chunk, "tRNS"))
1000e764:	e13fe817 	ldw	r4,-96(fp)
1000e768:	014400b4 	movhi	r5,4098
1000e76c:	294a8f04 	addi	r5,r5,10812
1000e770:	00066600 	call	10006660 <lodepng_chunk_type_equals>
1000e774:	10803fcc 	andi	r2,r2,255
1000e778:	10000c26 	beq	r2,zero,1000e7ac <decodeGeneric+0x310>
    {
      state->error = readChunk_tRNS(&state->info_png.color, data, chunkLength);
1000e77c:	e0bfff17 	ldw	r2,-4(fp)
1000e780:	10802304 	addi	r2,r2,140
1000e784:	1009883a 	mov	r4,r2
1000e788:	e17fef17 	ldw	r5,-68(fp)
1000e78c:	e1bfee17 	ldw	r6,-72(fp)
1000e790:	000d5dc0 	call	1000d5dc <readChunk_tRNS>
1000e794:	e0ffff17 	ldw	r3,-4(fp)
1000e798:	18804815 	stw	r2,288(r3)
      if(state->error) break;
1000e79c:	e0bfff17 	ldw	r2,-4(fp)
1000e7a0:	10804817 	ldw	r2,288(r2)
1000e7a4:	10009e26 	beq	r2,zero,1000ea20 <decodeGeneric+0x584>
1000e7a8:	0000b706 	br	1000ea88 <decodeGeneric+0x5ec>
    }
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
    /*background color chunk (bKGD)*/
    else if(lodepng_chunk_type_equals(chunk, "bKGD"))
1000e7ac:	e13fe817 	ldw	r4,-96(fp)
1000e7b0:	014400b4 	movhi	r5,4098
1000e7b4:	294a9104 	addi	r5,r5,10820
1000e7b8:	00066600 	call	10006660 <lodepng_chunk_type_equals>
1000e7bc:	10803fcc 	andi	r2,r2,255
1000e7c0:	10000c26 	beq	r2,zero,1000e7f4 <decodeGeneric+0x358>
    {
      state->error = readChunk_bKGD(&state->info_png, data, chunkLength);
1000e7c4:	e0bfff17 	ldw	r2,-4(fp)
1000e7c8:	10802004 	addi	r2,r2,128
1000e7cc:	1009883a 	mov	r4,r2
1000e7d0:	e17fef17 	ldw	r5,-68(fp)
1000e7d4:	e1bfee17 	ldw	r6,-72(fp)
1000e7d8:	000d7c80 	call	1000d7c8 <readChunk_bKGD>
1000e7dc:	e0ffff17 	ldw	r3,-4(fp)
1000e7e0:	18804815 	stw	r2,288(r3)
      if(state->error) break;
1000e7e4:	e0bfff17 	ldw	r2,-4(fp)
1000e7e8:	10804817 	ldw	r2,288(r2)
1000e7ec:	10008c26 	beq	r2,zero,1000ea20 <decodeGeneric+0x584>
1000e7f0:	0000a506 	br	1000ea88 <decodeGeneric+0x5ec>
    }
    /*text chunk (tEXt)*/
    else if(lodepng_chunk_type_equals(chunk, "tEXt"))
1000e7f4:	e13fe817 	ldw	r4,-96(fp)
1000e7f8:	014400b4 	movhi	r5,4098
1000e7fc:	294a9304 	addi	r5,r5,10828
1000e800:	00066600 	call	10006660 <lodepng_chunk_type_equals>
1000e804:	10803fcc 	andi	r2,r2,255
1000e808:	10000f26 	beq	r2,zero,1000e848 <decodeGeneric+0x3ac>
    {
      if(state->decoder.read_text_chunks)
1000e80c:	e0bfff17 	ldw	r2,-4(fp)
1000e810:	10800617 	ldw	r2,24(r2)
1000e814:	10008226 	beq	r2,zero,1000ea20 <decodeGeneric+0x584>
      {
        state->error = readChunk_tEXt(&state->info_png, data, chunkLength);
1000e818:	e0bfff17 	ldw	r2,-4(fp)
1000e81c:	10802004 	addi	r2,r2,128
1000e820:	1009883a 	mov	r4,r2
1000e824:	e17fef17 	ldw	r5,-68(fp)
1000e828:	e1bfee17 	ldw	r6,-72(fp)
1000e82c:	000d9b40 	call	1000d9b4 <readChunk_tEXt>
1000e830:	e0ffff17 	ldw	r3,-4(fp)
1000e834:	18804815 	stw	r2,288(r3)
        if(state->error) break;
1000e838:	e0bfff17 	ldw	r2,-4(fp)
1000e83c:	10804817 	ldw	r2,288(r2)
1000e840:	10007726 	beq	r2,zero,1000ea20 <decodeGeneric+0x584>
1000e844:	00009006 	br	1000ea88 <decodeGeneric+0x5ec>
      }
    }
    /*compressed text chunk (zTXt)*/
    else if(lodepng_chunk_type_equals(chunk, "zTXt"))
1000e848:	e13fe817 	ldw	r4,-96(fp)
1000e84c:	014400b4 	movhi	r5,4098
1000e850:	294a9504 	addi	r5,r5,10836
1000e854:	00066600 	call	10006660 <lodepng_chunk_type_equals>
1000e858:	10803fcc 	andi	r2,r2,255
1000e85c:	10001126 	beq	r2,zero,1000e8a4 <decodeGeneric+0x408>
    {
      if(state->decoder.read_text_chunks)
1000e860:	e0bfff17 	ldw	r2,-4(fp)
1000e864:	10800617 	ldw	r2,24(r2)
1000e868:	10006d26 	beq	r2,zero,1000ea20 <decodeGeneric+0x584>
      {
        state->error = readChunk_zTXt(&state->info_png, &state->decoder.zlibsettings, data, chunkLength);
1000e86c:	e0bfff17 	ldw	r2,-4(fp)
1000e870:	10c02004 	addi	r3,r2,128
1000e874:	e0bfff17 	ldw	r2,-4(fp)
1000e878:	1809883a 	mov	r4,r3
1000e87c:	100b883a 	mov	r5,r2
1000e880:	e1bfef17 	ldw	r6,-68(fp)
1000e884:	e1ffee17 	ldw	r7,-72(fp)
1000e888:	000dba40 	call	1000dba4 <readChunk_zTXt>
1000e88c:	e0ffff17 	ldw	r3,-4(fp)
1000e890:	18804815 	stw	r2,288(r3)
        if(state->error) break;
1000e894:	e0bfff17 	ldw	r2,-4(fp)
1000e898:	10804817 	ldw	r2,288(r2)
1000e89c:	10006026 	beq	r2,zero,1000ea20 <decodeGeneric+0x584>
1000e8a0:	00007906 	br	1000ea88 <decodeGeneric+0x5ec>
      }
    }
    /*international text chunk (iTXt)*/
    else if(lodepng_chunk_type_equals(chunk, "iTXt"))
1000e8a4:	e13fe817 	ldw	r4,-96(fp)
1000e8a8:	014400b4 	movhi	r5,4098
1000e8ac:	294a9704 	addi	r5,r5,10844
1000e8b0:	00066600 	call	10006660 <lodepng_chunk_type_equals>
1000e8b4:	10803fcc 	andi	r2,r2,255
1000e8b8:	10001126 	beq	r2,zero,1000e900 <decodeGeneric+0x464>
    {
      if(state->decoder.read_text_chunks)
1000e8bc:	e0bfff17 	ldw	r2,-4(fp)
1000e8c0:	10800617 	ldw	r2,24(r2)
1000e8c4:	10005626 	beq	r2,zero,1000ea20 <decodeGeneric+0x584>
      {
        state->error = readChunk_iTXt(&state->info_png, &state->decoder.zlibsettings, data, chunkLength);
1000e8c8:	e0bfff17 	ldw	r2,-4(fp)
1000e8cc:	10c02004 	addi	r3,r2,128
1000e8d0:	e0bfff17 	ldw	r2,-4(fp)
1000e8d4:	1809883a 	mov	r4,r3
1000e8d8:	100b883a 	mov	r5,r2
1000e8dc:	e1bfef17 	ldw	r6,-68(fp)
1000e8e0:	e1ffee17 	ldw	r7,-72(fp)
1000e8e4:	000ddc00 	call	1000ddc0 <readChunk_iTXt>
1000e8e8:	e0ffff17 	ldw	r3,-4(fp)
1000e8ec:	18804815 	stw	r2,288(r3)
        if(state->error) break;
1000e8f0:	e0bfff17 	ldw	r2,-4(fp)
1000e8f4:	10804817 	ldw	r2,288(r2)
1000e8f8:	10004926 	beq	r2,zero,1000ea20 <decodeGeneric+0x584>
1000e8fc:	00006206 	br	1000ea88 <decodeGeneric+0x5ec>
      }
    }
    else if(lodepng_chunk_type_equals(chunk, "tIME"))
1000e900:	e13fe817 	ldw	r4,-96(fp)
1000e904:	014400b4 	movhi	r5,4098
1000e908:	294a9904 	addi	r5,r5,10852
1000e90c:	00066600 	call	10006660 <lodepng_chunk_type_equals>
1000e910:	10803fcc 	andi	r2,r2,255
1000e914:	10000c26 	beq	r2,zero,1000e948 <decodeGeneric+0x4ac>
    {
      state->error = readChunk_tIME(&state->info_png, data, chunkLength);
1000e918:	e0bfff17 	ldw	r2,-4(fp)
1000e91c:	10802004 	addi	r2,r2,128
1000e920:	1009883a 	mov	r4,r2
1000e924:	e17fef17 	ldw	r5,-68(fp)
1000e928:	e1bfee17 	ldw	r6,-72(fp)
1000e92c:	000e28c0 	call	1000e28c <readChunk_tIME>
1000e930:	e0ffff17 	ldw	r3,-4(fp)
1000e934:	18804815 	stw	r2,288(r3)
      if(state->error) break;
1000e938:	e0bfff17 	ldw	r2,-4(fp)
1000e93c:	10804817 	ldw	r2,288(r2)
1000e940:	10003726 	beq	r2,zero,1000ea20 <decodeGeneric+0x584>
1000e944:	00005006 	br	1000ea88 <decodeGeneric+0x5ec>
    }
    else if(lodepng_chunk_type_equals(chunk, "pHYs"))
1000e948:	e13fe817 	ldw	r4,-96(fp)
1000e94c:	014400b4 	movhi	r5,4098
1000e950:	294a9b04 	addi	r5,r5,10860
1000e954:	00066600 	call	10006660 <lodepng_chunk_type_equals>
1000e958:	10803fcc 	andi	r2,r2,255
1000e95c:	10000c26 	beq	r2,zero,1000e990 <decodeGeneric+0x4f4>
    {
      state->error = readChunk_pHYs(&state->info_png, data, chunkLength);
1000e960:	e0bfff17 	ldw	r2,-4(fp)
1000e964:	10802004 	addi	r2,r2,128
1000e968:	1009883a 	mov	r4,r2
1000e96c:	e17fef17 	ldw	r5,-68(fp)
1000e970:	e1bfee17 	ldw	r6,-72(fp)
1000e974:	000e37c0 	call	1000e37c <readChunk_pHYs>
1000e978:	e0ffff17 	ldw	r3,-4(fp)
1000e97c:	18804815 	stw	r2,288(r3)
      if(state->error) break;
1000e980:	e0bfff17 	ldw	r2,-4(fp)
1000e984:	10804817 	ldw	r2,288(r2)
1000e988:	10002526 	beq	r2,zero,1000ea20 <decodeGeneric+0x584>
1000e98c:	00003e06 	br	1000ea88 <decodeGeneric+0x5ec>
    }
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
    else /*it's not an implemented chunk type, so ignore it: skip over the data*/
    {
      /*error: unknown critical chunk (5th bit of first byte of chunk type is 0)*/
      if(!lodepng_chunk_ancillary(chunk)) CERROR_BREAK(state->error, 69);
1000e990:	e13fe817 	ldw	r4,-96(fp)
1000e994:	000675c0 	call	1000675c <lodepng_chunk_ancillary>
1000e998:	10803fcc 	andi	r2,r2,255
1000e99c:	1000041e 	bne	r2,zero,1000e9b0 <decodeGeneric+0x514>
1000e9a0:	e0bfff17 	ldw	r2,-4(fp)
1000e9a4:	00c01144 	movi	r3,69
1000e9a8:	10c04815 	stw	r3,288(r2)
1000e9ac:	00003606 	br	1000ea88 <decodeGeneric+0x5ec>

      unknown = 1;
1000e9b0:	00800044 	movi	r2,1
1000e9b4:	e0bfeb15 	stw	r2,-84(fp)
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
      if(state->decoder.remember_unknown_chunks)
1000e9b8:	e0bfff17 	ldw	r2,-4(fp)
1000e9bc:	10800717 	ldw	r2,28(r2)
1000e9c0:	10001726 	beq	r2,zero,1000ea20 <decodeGeneric+0x584>
      {
        state->error = lodepng_chunk_append(&state->info_png.unknown_chunks_data[critical_pos - 1],
1000e9c4:	e0bfec17 	ldw	r2,-80(fp)
1000e9c8:	10bfffc4 	addi	r2,r2,-1
1000e9cc:	10801084 	addi	r2,r2,66
1000e9d0:	1085883a 	add	r2,r2,r2
1000e9d4:	1085883a 	add	r2,r2,r2
1000e9d8:	e0ffff17 	ldw	r3,-4(fp)
1000e9dc:	1887883a 	add	r3,r3,r2
                                            &state->info_png.unknown_chunks_size[critical_pos - 1], chunk);
1000e9e0:	e0bfec17 	ldw	r2,-80(fp)
1000e9e4:	10bfffc4 	addi	r2,r2,-1

      unknown = 1;
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
      if(state->decoder.remember_unknown_chunks)
      {
        state->error = lodepng_chunk_append(&state->info_png.unknown_chunks_data[critical_pos - 1],
1000e9e8:	10801144 	addi	r2,r2,69
1000e9ec:	1085883a 	add	r2,r2,r2
1000e9f0:	1085883a 	add	r2,r2,r2
1000e9f4:	e13fff17 	ldw	r4,-4(fp)
1000e9f8:	2085883a 	add	r2,r4,r2
1000e9fc:	1809883a 	mov	r4,r3
1000ea00:	100b883a 	mov	r5,r2
1000ea04:	e1bfe817 	ldw	r6,-96(fp)
1000ea08:	00069d40 	call	100069d4 <lodepng_chunk_append>
1000ea0c:	e0ffff17 	ldw	r3,-4(fp)
1000ea10:	18804815 	stw	r2,288(r3)
                                            &state->info_png.unknown_chunks_size[critical_pos - 1], chunk);
        if(state->error) break;
1000ea14:	e0bfff17 	ldw	r2,-4(fp)
1000ea18:	10804817 	ldw	r2,288(r2)
1000ea1c:	1000191e 	bne	r2,zero,1000ea84 <decodeGeneric+0x5e8>
      }
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
    }

    if(!state->decoder.ignore_crc && !unknown) /*check CRC if wanted, only on known chunk types*/
1000ea20:	e0bfff17 	ldw	r2,-4(fp)
1000ea24:	10800417 	ldw	r2,16(r2)
1000ea28:	1000091e 	bne	r2,zero,1000ea50 <decodeGeneric+0x5b4>
1000ea2c:	e0bfeb17 	ldw	r2,-84(fp)
1000ea30:	1000071e 	bne	r2,zero,1000ea50 <decodeGeneric+0x5b4>
    {
      if(lodepng_chunk_check_crc(chunk)) CERROR_BREAK(state->error, 57); /*invalid CRC*/
1000ea34:	e13fe817 	ldw	r4,-96(fp)
1000ea38:	00068540 	call	10006854 <lodepng_chunk_check_crc>
1000ea3c:	10000426 	beq	r2,zero,1000ea50 <decodeGeneric+0x5b4>
1000ea40:	e0bfff17 	ldw	r2,-4(fp)
1000ea44:	00c00e44 	movi	r3,57
1000ea48:	10c04815 	stw	r3,288(r2)
1000ea4c:	00000e06 	br	1000ea88 <decodeGeneric+0x5ec>
    }

    if(!IEND) chunk = lodepng_chunk_next_const(chunk);
1000ea50:	e0bfe703 	ldbu	r2,-100(fp)
1000ea54:	1000031e 	bne	r2,zero,1000ea64 <decodeGeneric+0x5c8>
1000ea58:	e13fe817 	ldw	r4,-96(fp)
1000ea5c:	00069900 	call	10006990 <lodepng_chunk_next_const>
1000ea60:	e0bfe815 	stw	r2,-96(fp)
  ucvector_init(&idat);
  chunk = &in[33]; /*first byte of the first chunk after the header*/

  /*loop through the chunks, ignoring unknown chunks and stopping at IEND chunk.
  IDAT data is put at the start of the in buffer*/
  while(!IEND && !state->error)
1000ea64:	e0bfe703 	ldbu	r2,-100(fp)
1000ea68:	1000071e 	bne	r2,zero,1000ea88 <decodeGeneric+0x5ec>
1000ea6c:	e0bfff17 	ldw	r2,-4(fp)
1000ea70:	10804817 	ldw	r2,288(r2)
1000ea74:	103ec926 	beq	r2,zero,1000e59c <__alt_data_end+0xf800e59c>
1000ea78:	00000306 	br	1000ea88 <decodeGeneric+0x5ec>
    }
    /*palette chunk (PLTE)*/
    else if(lodepng_chunk_type_equals(chunk, "PLTE"))
    {
      state->error = readChunk_PLTE(&state->info_png.color, data, chunkLength);
      if(state->error) break;
1000ea7c:	0001883a 	nop
1000ea80:	00000106 	br	1000ea88 <decodeGeneric+0x5ec>
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
      if(state->decoder.remember_unknown_chunks)
      {
        state->error = lodepng_chunk_append(&state->info_png.unknown_chunks_data[critical_pos - 1],
                                            &state->info_png.unknown_chunks_size[critical_pos - 1], chunk);
        if(state->error) break;
1000ea84:	0001883a 	nop
    }

    if(!IEND) chunk = lodepng_chunk_next_const(chunk);
  }

  ucvector_init(&scanlines);
1000ea88:	e0bff604 	addi	r2,fp,-40
1000ea8c:	1009883a 	mov	r4,r2
1000ea90:	00006c00 	call	100006c0 <ucvector_init>
  /*predict output size, to allocate exact size for output buffer to avoid more dynamic allocation.
  If the decompressed size does not match the prediction, the image must be corrupt.*/
  if(state->info_png.interlace_method == 0)
1000ea94:	e0bfff17 	ldw	r2,-4(fp)
1000ea98:	10802217 	ldw	r2,136(r2)
1000ea9c:	10000e1e 	bne	r2,zero,1000ead8 <decodeGeneric+0x63c>
  {
    /*The extra *h is added because this are the filter bytes every scanline starts with*/
    predict = lodepng_get_raw_size_idat(*w, *h, &state->info_png.color) + *h;
1000eaa0:	e0bffd17 	ldw	r2,-12(fp)
1000eaa4:	11000017 	ldw	r4,0(r2)
1000eaa8:	e0bffe17 	ldw	r2,-8(fp)
1000eaac:	10c00017 	ldw	r3,0(r2)
1000eab0:	e0bfff17 	ldw	r2,-4(fp)
1000eab4:	10802304 	addi	r2,r2,140
1000eab8:	180b883a 	mov	r5,r3
1000eabc:	100d883a 	mov	r6,r2
1000eac0:	00076440 	call	10007644 <lodepng_get_raw_size_idat>
1000eac4:	e0fffe17 	ldw	r3,-8(fp)
1000eac8:	18c00017 	ldw	r3,0(r3)
1000eacc:	10c5883a 	add	r2,r2,r3
1000ead0:	e0bfea15 	stw	r2,-88(fp)
1000ead4:	00009706 	br	1000ed34 <decodeGeneric+0x898>
  }
  else
  {
    /*Adam-7 interlaced: predicted size is the sum of the 7 sub-images sizes*/
    const LodePNGColorMode* color = &state->info_png.color;
1000ead8:	e0bfff17 	ldw	r2,-4(fp)
1000eadc:	10802304 	addi	r2,r2,140
1000eae0:	e0bff115 	stw	r2,-60(fp)
    predict = 0;
1000eae4:	e03fea15 	stw	zero,-88(fp)
    predict += lodepng_get_raw_size_idat((*w + 7) / 8, (*h + 7) / 8, color) + (*h + 7) / 8;
1000eae8:	e0bffd17 	ldw	r2,-12(fp)
1000eaec:	10800017 	ldw	r2,0(r2)
1000eaf0:	108001c4 	addi	r2,r2,7
1000eaf4:	1006d0fa 	srli	r3,r2,3
1000eaf8:	e0bffe17 	ldw	r2,-8(fp)
1000eafc:	10800017 	ldw	r2,0(r2)
1000eb00:	108001c4 	addi	r2,r2,7
1000eb04:	1004d0fa 	srli	r2,r2,3
1000eb08:	1809883a 	mov	r4,r3
1000eb0c:	100b883a 	mov	r5,r2
1000eb10:	e1bff117 	ldw	r6,-60(fp)
1000eb14:	00076440 	call	10007644 <lodepng_get_raw_size_idat>
1000eb18:	e0fffe17 	ldw	r3,-8(fp)
1000eb1c:	18c00017 	ldw	r3,0(r3)
1000eb20:	18c001c4 	addi	r3,r3,7
1000eb24:	1806d0fa 	srli	r3,r3,3
1000eb28:	10c5883a 	add	r2,r2,r3
1000eb2c:	e0ffea17 	ldw	r3,-88(fp)
1000eb30:	1885883a 	add	r2,r3,r2
1000eb34:	e0bfea15 	stw	r2,-88(fp)
    if(*w > 4) predict += lodepng_get_raw_size_idat((*w + 3) / 8, (*h + 7) / 8, color) + (*h + 7) / 8;
1000eb38:	e0bffd17 	ldw	r2,-12(fp)
1000eb3c:	10800017 	ldw	r2,0(r2)
1000eb40:	10800170 	cmpltui	r2,r2,5
1000eb44:	1000141e 	bne	r2,zero,1000eb98 <decodeGeneric+0x6fc>
1000eb48:	e0bffd17 	ldw	r2,-12(fp)
1000eb4c:	10800017 	ldw	r2,0(r2)
1000eb50:	108000c4 	addi	r2,r2,3
1000eb54:	1006d0fa 	srli	r3,r2,3
1000eb58:	e0bffe17 	ldw	r2,-8(fp)
1000eb5c:	10800017 	ldw	r2,0(r2)
1000eb60:	108001c4 	addi	r2,r2,7
1000eb64:	1004d0fa 	srli	r2,r2,3
1000eb68:	1809883a 	mov	r4,r3
1000eb6c:	100b883a 	mov	r5,r2
1000eb70:	e1bff117 	ldw	r6,-60(fp)
1000eb74:	00076440 	call	10007644 <lodepng_get_raw_size_idat>
1000eb78:	e0fffe17 	ldw	r3,-8(fp)
1000eb7c:	18c00017 	ldw	r3,0(r3)
1000eb80:	18c001c4 	addi	r3,r3,7
1000eb84:	1806d0fa 	srli	r3,r3,3
1000eb88:	10c5883a 	add	r2,r2,r3
1000eb8c:	e0ffea17 	ldw	r3,-88(fp)
1000eb90:	1885883a 	add	r2,r3,r2
1000eb94:	e0bfea15 	stw	r2,-88(fp)
    predict += lodepng_get_raw_size_idat((*w + 3) / 4, (*h + 3) / 8, color) + (*h + 3) / 8;
1000eb98:	e0bffd17 	ldw	r2,-12(fp)
1000eb9c:	10800017 	ldw	r2,0(r2)
1000eba0:	108000c4 	addi	r2,r2,3
1000eba4:	1006d0ba 	srli	r3,r2,2
1000eba8:	e0bffe17 	ldw	r2,-8(fp)
1000ebac:	10800017 	ldw	r2,0(r2)
1000ebb0:	108000c4 	addi	r2,r2,3
1000ebb4:	1004d0fa 	srli	r2,r2,3
1000ebb8:	1809883a 	mov	r4,r3
1000ebbc:	100b883a 	mov	r5,r2
1000ebc0:	e1bff117 	ldw	r6,-60(fp)
1000ebc4:	00076440 	call	10007644 <lodepng_get_raw_size_idat>
1000ebc8:	e0fffe17 	ldw	r3,-8(fp)
1000ebcc:	18c00017 	ldw	r3,0(r3)
1000ebd0:	18c000c4 	addi	r3,r3,3
1000ebd4:	1806d0fa 	srli	r3,r3,3
1000ebd8:	10c5883a 	add	r2,r2,r3
1000ebdc:	e0ffea17 	ldw	r3,-88(fp)
1000ebe0:	1885883a 	add	r2,r3,r2
1000ebe4:	e0bfea15 	stw	r2,-88(fp)
    if(*w > 2) predict += lodepng_get_raw_size_idat((*w + 1) / 4, (*h + 3) / 4, color) + (*h + 3) / 4;
1000ebe8:	e0bffd17 	ldw	r2,-12(fp)
1000ebec:	10800017 	ldw	r2,0(r2)
1000ebf0:	108000f0 	cmpltui	r2,r2,3
1000ebf4:	1000141e 	bne	r2,zero,1000ec48 <decodeGeneric+0x7ac>
1000ebf8:	e0bffd17 	ldw	r2,-12(fp)
1000ebfc:	10800017 	ldw	r2,0(r2)
1000ec00:	10800044 	addi	r2,r2,1
1000ec04:	1006d0ba 	srli	r3,r2,2
1000ec08:	e0bffe17 	ldw	r2,-8(fp)
1000ec0c:	10800017 	ldw	r2,0(r2)
1000ec10:	108000c4 	addi	r2,r2,3
1000ec14:	1004d0ba 	srli	r2,r2,2
1000ec18:	1809883a 	mov	r4,r3
1000ec1c:	100b883a 	mov	r5,r2
1000ec20:	e1bff117 	ldw	r6,-60(fp)
1000ec24:	00076440 	call	10007644 <lodepng_get_raw_size_idat>
1000ec28:	e0fffe17 	ldw	r3,-8(fp)
1000ec2c:	18c00017 	ldw	r3,0(r3)
1000ec30:	18c000c4 	addi	r3,r3,3
1000ec34:	1806d0ba 	srli	r3,r3,2
1000ec38:	10c5883a 	add	r2,r2,r3
1000ec3c:	e0ffea17 	ldw	r3,-88(fp)
1000ec40:	1885883a 	add	r2,r3,r2
1000ec44:	e0bfea15 	stw	r2,-88(fp)
    predict += lodepng_get_raw_size_idat((*w + 1) / 2, (*h + 1) / 4, color) + (*h + 1) / 4;
1000ec48:	e0bffd17 	ldw	r2,-12(fp)
1000ec4c:	10800017 	ldw	r2,0(r2)
1000ec50:	10800044 	addi	r2,r2,1
1000ec54:	1006d07a 	srli	r3,r2,1
1000ec58:	e0bffe17 	ldw	r2,-8(fp)
1000ec5c:	10800017 	ldw	r2,0(r2)
1000ec60:	10800044 	addi	r2,r2,1
1000ec64:	1004d0ba 	srli	r2,r2,2
1000ec68:	1809883a 	mov	r4,r3
1000ec6c:	100b883a 	mov	r5,r2
1000ec70:	e1bff117 	ldw	r6,-60(fp)
1000ec74:	00076440 	call	10007644 <lodepng_get_raw_size_idat>
1000ec78:	e0fffe17 	ldw	r3,-8(fp)
1000ec7c:	18c00017 	ldw	r3,0(r3)
1000ec80:	18c00044 	addi	r3,r3,1
1000ec84:	1806d0ba 	srli	r3,r3,2
1000ec88:	10c5883a 	add	r2,r2,r3
1000ec8c:	e0ffea17 	ldw	r3,-88(fp)
1000ec90:	1885883a 	add	r2,r3,r2
1000ec94:	e0bfea15 	stw	r2,-88(fp)
    if(*w > 1) predict += lodepng_get_raw_size_idat((*w + 0) / 2, (*h + 1) / 2, color) + (*h + 1) / 2;
1000ec98:	e0bffd17 	ldw	r2,-12(fp)
1000ec9c:	10800017 	ldw	r2,0(r2)
1000eca0:	108000b0 	cmpltui	r2,r2,2
1000eca4:	1000131e 	bne	r2,zero,1000ecf4 <decodeGeneric+0x858>
1000eca8:	e0bffd17 	ldw	r2,-12(fp)
1000ecac:	10800017 	ldw	r2,0(r2)
1000ecb0:	1006d07a 	srli	r3,r2,1
1000ecb4:	e0bffe17 	ldw	r2,-8(fp)
1000ecb8:	10800017 	ldw	r2,0(r2)
1000ecbc:	10800044 	addi	r2,r2,1
1000ecc0:	1004d07a 	srli	r2,r2,1
1000ecc4:	1809883a 	mov	r4,r3
1000ecc8:	100b883a 	mov	r5,r2
1000eccc:	e1bff117 	ldw	r6,-60(fp)
1000ecd0:	00076440 	call	10007644 <lodepng_get_raw_size_idat>
1000ecd4:	e0fffe17 	ldw	r3,-8(fp)
1000ecd8:	18c00017 	ldw	r3,0(r3)
1000ecdc:	18c00044 	addi	r3,r3,1
1000ece0:	1806d07a 	srli	r3,r3,1
1000ece4:	10c5883a 	add	r2,r2,r3
1000ece8:	e0ffea17 	ldw	r3,-88(fp)
1000ecec:	1885883a 	add	r2,r3,r2
1000ecf0:	e0bfea15 	stw	r2,-88(fp)
    predict += lodepng_get_raw_size_idat((*w + 0) / 1, (*h + 0) / 2, color) + (*h + 0) / 2;
1000ecf4:	e0bffd17 	ldw	r2,-12(fp)
1000ecf8:	10c00017 	ldw	r3,0(r2)
1000ecfc:	e0bffe17 	ldw	r2,-8(fp)
1000ed00:	10800017 	ldw	r2,0(r2)
1000ed04:	1004d07a 	srli	r2,r2,1
1000ed08:	1809883a 	mov	r4,r3
1000ed0c:	100b883a 	mov	r5,r2
1000ed10:	e1bff117 	ldw	r6,-60(fp)
1000ed14:	00076440 	call	10007644 <lodepng_get_raw_size_idat>
1000ed18:	e0fffe17 	ldw	r3,-8(fp)
1000ed1c:	18c00017 	ldw	r3,0(r3)
1000ed20:	1806d07a 	srli	r3,r3,1
1000ed24:	10c5883a 	add	r2,r2,r3
1000ed28:	e0ffea17 	ldw	r3,-88(fp)
1000ed2c:	1885883a 	add	r2,r3,r2
1000ed30:	e0bfea15 	stw	r2,-88(fp)
  }
  if(!state->error && !ucvector_reserve(&scanlines, predict)) state->error = 83; /*alloc fail*/
1000ed34:	e0bfff17 	ldw	r2,-4(fp)
1000ed38:	10804817 	ldw	r2,288(r2)
1000ed3c:	1000081e 	bne	r2,zero,1000ed60 <decodeGeneric+0x8c4>
1000ed40:	e0bff604 	addi	r2,fp,-40
1000ed44:	1009883a 	mov	r4,r2
1000ed48:	e17fea17 	ldw	r5,-88(fp)
1000ed4c:	00005580 	call	10000558 <ucvector_reserve>
1000ed50:	1000031e 	bne	r2,zero,1000ed60 <decodeGeneric+0x8c4>
1000ed54:	e0bfff17 	ldw	r2,-4(fp)
1000ed58:	00c014c4 	movi	r3,83
1000ed5c:	10c04815 	stw	r3,288(r2)
  if(!state->error)
1000ed60:	e0bfff17 	ldw	r2,-4(fp)
1000ed64:	10804817 	ldw	r2,288(r2)
1000ed68:	1000151e 	bne	r2,zero,1000edc0 <decodeGeneric+0x924>
  {
    state->error = zlib_decompress(&scanlines.data, &scanlines.size, idat.data,
1000ed6c:	e0fff317 	ldw	r3,-52(fp)
1000ed70:	e0bff417 	ldw	r2,-48(fp)
                                   idat.size, &state->decoder.zlibsettings);
1000ed74:	e1bfff17 	ldw	r6,-4(fp)
    predict += lodepng_get_raw_size_idat((*w + 0) / 1, (*h + 0) / 2, color) + (*h + 0) / 2;
  }
  if(!state->error && !ucvector_reserve(&scanlines, predict)) state->error = 83; /*alloc fail*/
  if(!state->error)
  {
    state->error = zlib_decompress(&scanlines.data, &scanlines.size, idat.data,
1000ed78:	e13ff604 	addi	r4,fp,-40
1000ed7c:	e17ff604 	addi	r5,fp,-40
1000ed80:	29400104 	addi	r5,r5,4
1000ed84:	d9800015 	stw	r6,0(sp)
1000ed88:	180d883a 	mov	r6,r3
1000ed8c:	100f883a 	mov	r7,r2
1000ed90:	0005f240 	call	10005f24 <zlib_decompress>
1000ed94:	e0ffff17 	ldw	r3,-4(fp)
1000ed98:	18804815 	stw	r2,288(r3)
                                   idat.size, &state->decoder.zlibsettings);
    if(!state->error && scanlines.size != predict) state->error = 91; /*decompressed size doesn't match prediction*/
1000ed9c:	e0bfff17 	ldw	r2,-4(fp)
1000eda0:	10804817 	ldw	r2,288(r2)
1000eda4:	1000061e 	bne	r2,zero,1000edc0 <decodeGeneric+0x924>
1000eda8:	e0fff717 	ldw	r3,-36(fp)
1000edac:	e0bfea17 	ldw	r2,-88(fp)
1000edb0:	18800326 	beq	r3,r2,1000edc0 <decodeGeneric+0x924>
1000edb4:	e0bfff17 	ldw	r2,-4(fp)
1000edb8:	00c016c4 	movi	r3,91
1000edbc:	10c04815 	stw	r3,288(r2)
  }
  ucvector_cleanup(&idat);
1000edc0:	e0bff304 	addi	r2,fp,-52
1000edc4:	1009883a 	mov	r4,r2
1000edc8:	00006680 	call	10000668 <ucvector_cleanup>

  if(!state->error)
1000edcc:	e0bfff17 	ldw	r2,-4(fp)
1000edd0:	10804817 	ldw	r2,288(r2)
1000edd4:	10002a1e 	bne	r2,zero,1000ee80 <decodeGeneric+0x9e4>
  {
    size_t outsize = lodepng_get_raw_size(*w, *h, &state->info_png.color);
1000edd8:	e0bffd17 	ldw	r2,-12(fp)
1000eddc:	11000017 	ldw	r4,0(r2)
1000ede0:	e0bffe17 	ldw	r2,-8(fp)
1000ede4:	10c00017 	ldw	r3,0(r2)
1000ede8:	e0bfff17 	ldw	r2,-4(fp)
1000edec:	10802304 	addi	r2,r2,140
1000edf0:	180b883a 	mov	r5,r3
1000edf4:	100d883a 	mov	r6,r2
1000edf8:	00075740 	call	10007574 <lodepng_get_raw_size>
1000edfc:	e0bff215 	stw	r2,-56(fp)
    ucvector outv;
    ucvector_init(&outv);
1000ee00:	e0bff904 	addi	r2,fp,-28
1000ee04:	1009883a 	mov	r4,r2
1000ee08:	00006c00 	call	100006c0 <ucvector_init>
    if(!ucvector_resizev(&outv, outsize, 0)) state->error = 83; /*alloc fail*/
1000ee0c:	e0bff904 	addi	r2,fp,-28
1000ee10:	1009883a 	mov	r4,r2
1000ee14:	e17ff217 	ldw	r5,-56(fp)
1000ee18:	000d883a 	mov	r6,zero
1000ee1c:	00007000 	call	10000700 <ucvector_resizev>
1000ee20:	1000031e 	bne	r2,zero,1000ee30 <decodeGeneric+0x994>
1000ee24:	e0bfff17 	ldw	r2,-4(fp)
1000ee28:	00c014c4 	movi	r3,83
1000ee2c:	10c04815 	stw	r3,288(r2)
    if(!state->error) state->error = postProcessScanlines(outv.data, scanlines.data, *w, *h, &state->info_png);
1000ee30:	e0bfff17 	ldw	r2,-4(fp)
1000ee34:	10804817 	ldw	r2,288(r2)
1000ee38:	10000e1e 	bne	r2,zero,1000ee74 <decodeGeneric+0x9d8>
1000ee3c:	e13ff917 	ldw	r4,-28(fp)
1000ee40:	e17ff617 	ldw	r5,-40(fp)
1000ee44:	e0bffd17 	ldw	r2,-12(fp)
1000ee48:	10c00017 	ldw	r3,0(r2)
1000ee4c:	e0bffe17 	ldw	r2,-8(fp)
1000ee50:	10800017 	ldw	r2,0(r2)
1000ee54:	e1bfff17 	ldw	r6,-4(fp)
1000ee58:	31802004 	addi	r6,r6,128
1000ee5c:	d9800015 	stw	r6,0(sp)
1000ee60:	180d883a 	mov	r6,r3
1000ee64:	100f883a 	mov	r7,r2
1000ee68:	000d0ac0 	call	1000d0ac <postProcessScanlines>
1000ee6c:	e0ffff17 	ldw	r3,-4(fp)
1000ee70:	18804815 	stw	r2,288(r3)
    *out = outv.data;
1000ee74:	e0fff917 	ldw	r3,-28(fp)
1000ee78:	e0bffc17 	ldw	r2,-16(fp)
1000ee7c:	10c00015 	stw	r3,0(r2)
  }
  ucvector_cleanup(&scanlines);
1000ee80:	e0bff604 	addi	r2,fp,-40
1000ee84:	1009883a 	mov	r4,r2
1000ee88:	00006680 	call	10000668 <ucvector_cleanup>
}
1000ee8c:	e037883a 	mov	sp,fp
1000ee90:	dfc00117 	ldw	ra,4(sp)
1000ee94:	df000017 	ldw	fp,0(sp)
1000ee98:	dec00204 	addi	sp,sp,8
1000ee9c:	f800283a 	ret

1000eea0 <lodepng_decode>:

unsigned lodepng_decode(unsigned char** out, unsigned* w, unsigned* h,
                        LodePNGState* state,
                        const unsigned char* in, size_t insize)
{
1000eea0:	defff604 	addi	sp,sp,-40
1000eea4:	dfc00915 	stw	ra,36(sp)
1000eea8:	df000815 	stw	fp,32(sp)
1000eeac:	df000804 	addi	fp,sp,32
1000eeb0:	e13ffc15 	stw	r4,-16(fp)
1000eeb4:	e17ffd15 	stw	r5,-12(fp)
1000eeb8:	e1bffe15 	stw	r6,-8(fp)
1000eebc:	e1ffff15 	stw	r7,-4(fp)
  *out = 0;
1000eec0:	e0bffc17 	ldw	r2,-16(fp)
1000eec4:	10000015 	stw	zero,0(r2)
  decodeGeneric(out, w, h, state, in, insize);
1000eec8:	e0800217 	ldw	r2,8(fp)
1000eecc:	d8800015 	stw	r2,0(sp)
1000eed0:	e0800317 	ldw	r2,12(fp)
1000eed4:	d8800115 	stw	r2,4(sp)
1000eed8:	e13ffc17 	ldw	r4,-16(fp)
1000eedc:	e17ffd17 	ldw	r5,-12(fp)
1000eee0:	e1bffe17 	ldw	r6,-8(fp)
1000eee4:	e1ffff17 	ldw	r7,-4(fp)
1000eee8:	000e49c0 	call	1000e49c <decodeGeneric>
  if(state->error) return state->error;
1000eeec:	e0bfff17 	ldw	r2,-4(fp)
1000eef0:	10804817 	ldw	r2,288(r2)
1000eef4:	10000326 	beq	r2,zero,1000ef04 <lodepng_decode+0x64>
1000eef8:	e0bfff17 	ldw	r2,-4(fp)
1000eefc:	10804817 	ldw	r2,288(r2)
1000ef00:	00005b06 	br	1000f070 <lodepng_decode+0x1d0>
  if(!state->decoder.color_convert || lodepng_color_mode_equal(&state->info_raw, &state->info_png.color))
1000ef04:	e0bfff17 	ldw	r2,-4(fp)
1000ef08:	10800517 	ldw	r2,20(r2)
1000ef0c:	10000826 	beq	r2,zero,1000ef30 <lodepng_decode+0x90>
1000ef10:	e0bfff17 	ldw	r2,-4(fp)
1000ef14:	10c01804 	addi	r3,r2,96
1000ef18:	e0bfff17 	ldw	r2,-4(fp)
1000ef1c:	10802304 	addi	r2,r2,140
1000ef20:	1809883a 	mov	r4,r3
1000ef24:	100b883a 	mov	r5,r2
1000ef28:	00070840 	call	10007084 <lodepng_color_mode_equal>
1000ef2c:	10001226 	beq	r2,zero,1000ef78 <lodepng_decode+0xd8>
  {
    /*same color type, no copying or converting of data needed*/
    /*store the info_png color settings on the info_raw so that the info_raw still reflects what colortype
    the raw image has to the end user*/
    if(!state->decoder.color_convert)
1000ef30:	e0bfff17 	ldw	r2,-4(fp)
1000ef34:	10800517 	ldw	r2,20(r2)
1000ef38:	10004a1e 	bne	r2,zero,1000f064 <lodepng_decode+0x1c4>
    {
      state->error = lodepng_color_mode_copy(&state->info_raw, &state->info_png.color);
1000ef3c:	e0bfff17 	ldw	r2,-4(fp)
1000ef40:	10c01804 	addi	r3,r2,96
1000ef44:	e0bfff17 	ldw	r2,-4(fp)
1000ef48:	10802304 	addi	r2,r2,140
1000ef4c:	1809883a 	mov	r4,r3
1000ef50:	100b883a 	mov	r5,r2
1000ef54:	0006f700 	call	10006f70 <lodepng_color_mode_copy>
1000ef58:	e0ffff17 	ldw	r3,-4(fp)
1000ef5c:	18804815 	stw	r2,288(r3)
      if(state->error) return state->error;
1000ef60:	e0bfff17 	ldw	r2,-4(fp)
1000ef64:	10804817 	ldw	r2,288(r2)
1000ef68:	10003e26 	beq	r2,zero,1000f064 <lodepng_decode+0x1c4>
1000ef6c:	e0bfff17 	ldw	r2,-4(fp)
1000ef70:	10804817 	ldw	r2,288(r2)
1000ef74:	00003e06 	br	1000f070 <lodepng_decode+0x1d0>
    }
  }
  else
  {
    /*color conversion needed; sort of copy of the data*/
    unsigned char* data = *out;
1000ef78:	e0bffc17 	ldw	r2,-16(fp)
1000ef7c:	10800017 	ldw	r2,0(r2)
1000ef80:	e0bffa15 	stw	r2,-24(fp)
    size_t outsize;

    /*TODO: check if this works according to the statement in the documentation: "The converter can convert
    from greyscale input color type, to 8-bit greyscale or greyscale with alpha"*/
    if(!(state->info_raw.colortype == LCT_RGB || state->info_raw.colortype == LCT_RGBA)
1000ef84:	e0bfff17 	ldw	r2,-4(fp)
1000ef88:	10801817 	ldw	r2,96(r2)
1000ef8c:	108000a0 	cmpeqi	r2,r2,2
1000ef90:	10000a1e 	bne	r2,zero,1000efbc <lodepng_decode+0x11c>
1000ef94:	e0bfff17 	ldw	r2,-4(fp)
1000ef98:	10801817 	ldw	r2,96(r2)
1000ef9c:	108001a0 	cmpeqi	r2,r2,6
1000efa0:	1000061e 	bne	r2,zero,1000efbc <lodepng_decode+0x11c>
       && !(state->info_raw.bitdepth == 8))
1000efa4:	e0bfff17 	ldw	r2,-4(fp)
1000efa8:	10801917 	ldw	r2,100(r2)
1000efac:	10800220 	cmpeqi	r2,r2,8
1000efb0:	1000021e 	bne	r2,zero,1000efbc <lodepng_decode+0x11c>
    {
      return 56; /*unsupported color mode conversion*/
1000efb4:	00800e04 	movi	r2,56
1000efb8:	00002d06 	br	1000f070 <lodepng_decode+0x1d0>
    }

    outsize = lodepng_get_raw_size(*w, *h, &state->info_raw);
1000efbc:	e0bffd17 	ldw	r2,-12(fp)
1000efc0:	11000017 	ldw	r4,0(r2)
1000efc4:	e0bffe17 	ldw	r2,-8(fp)
1000efc8:	10c00017 	ldw	r3,0(r2)
1000efcc:	e0bfff17 	ldw	r2,-4(fp)
1000efd0:	10801804 	addi	r2,r2,96
1000efd4:	180b883a 	mov	r5,r3
1000efd8:	100d883a 	mov	r6,r2
1000efdc:	00075740 	call	10007574 <lodepng_get_raw_size>
1000efe0:	e0bffb15 	stw	r2,-20(fp)
    *out = (unsigned char*)lodepng_malloc(outsize);
1000efe4:	e13ffb17 	ldw	r4,-20(fp)
1000efe8:	00001f40 	call	100001f4 <lodepng_malloc>
1000efec:	e0fffc17 	ldw	r3,-16(fp)
1000eff0:	18800015 	stw	r2,0(r3)
    if(!(*out))
1000eff4:	e0bffc17 	ldw	r2,-16(fp)
1000eff8:	10800017 	ldw	r2,0(r2)
1000effc:	1000041e 	bne	r2,zero,1000f010 <lodepng_decode+0x170>
    {
      state->error = 83; /*alloc fail*/
1000f000:	e0bfff17 	ldw	r2,-4(fp)
1000f004:	00c014c4 	movi	r3,83
1000f008:	10c04815 	stw	r3,288(r2)
1000f00c:	00001206 	br	1000f058 <lodepng_decode+0x1b8>
    }
    else state->error = lodepng_convert(*out, data, &state->info_raw,
1000f010:	e0bffc17 	ldw	r2,-16(fp)
1000f014:	11000017 	ldw	r4,0(r2)
1000f018:	e0bfff17 	ldw	r2,-4(fp)
1000f01c:	10c01804 	addi	r3,r2,96
                                        &state->info_png.color, *w, *h);
1000f020:	e0bfff17 	ldw	r2,-4(fp)
1000f024:	10802304 	addi	r2,r2,140
    *out = (unsigned char*)lodepng_malloc(outsize);
    if(!(*out))
    {
      state->error = 83; /*alloc fail*/
    }
    else state->error = lodepng_convert(*out, data, &state->info_raw,
1000f028:	e17ffd17 	ldw	r5,-12(fp)
1000f02c:	29800017 	ldw	r6,0(r5)
1000f030:	e17ffe17 	ldw	r5,-8(fp)
1000f034:	29400017 	ldw	r5,0(r5)
1000f038:	d9800015 	stw	r6,0(sp)
1000f03c:	d9400115 	stw	r5,4(sp)
1000f040:	e17ffa17 	ldw	r5,-24(fp)
1000f044:	180d883a 	mov	r6,r3
1000f048:	100f883a 	mov	r7,r2
1000f04c:	000aadc0 	call	1000aadc <lodepng_convert>
1000f050:	e0ffff17 	ldw	r3,-4(fp)
1000f054:	18804815 	stw	r2,288(r3)
                                        &state->info_png.color, *w, *h);
    lodepng_free(data);
1000f058:	e13ffa17 	ldw	r4,-24(fp)
1000f05c:	000025c0 	call	1000025c <lodepng_free>
1000f060:	00000106 	br	1000f068 <lodepng_decode+0x1c8>
  if(!state->decoder.color_convert || lodepng_color_mode_equal(&state->info_raw, &state->info_png.color))
  {
    /*same color type, no copying or converting of data needed*/
    /*store the info_png color settings on the info_raw so that the info_raw still reflects what colortype
    the raw image has to the end user*/
    if(!state->decoder.color_convert)
1000f064:	0001883a 	nop
    }
    else state->error = lodepng_convert(*out, data, &state->info_raw,
                                        &state->info_png.color, *w, *h);
    lodepng_free(data);
  }
  return state->error;
1000f068:	e0bfff17 	ldw	r2,-4(fp)
1000f06c:	10804817 	ldw	r2,288(r2)
}
1000f070:	e037883a 	mov	sp,fp
1000f074:	dfc00117 	ldw	ra,4(sp)
1000f078:	df000017 	ldw	fp,0(sp)
1000f07c:	dec00204 	addi	sp,sp,8
1000f080:	f800283a 	ret

1000f084 <lodepng_decode_memory>:

unsigned lodepng_decode_memory(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in,
                               size_t insize, LodePNGColorType colortype, unsigned bitdepth)
{
1000f084:	deffae04 	addi	sp,sp,-328
1000f088:	dfc05115 	stw	ra,324(sp)
1000f08c:	df005015 	stw	fp,320(sp)
1000f090:	df005004 	addi	fp,sp,320
1000f094:	e13ffc15 	stw	r4,-16(fp)
1000f098:	e17ffd15 	stw	r5,-12(fp)
1000f09c:	e1bffe15 	stw	r6,-8(fp)
1000f0a0:	e1ffff15 	stw	r7,-4(fp)
  unsigned error;
  LodePNGState state;
  lodepng_state_init(&state);
1000f0a4:	e0bfb304 	addi	r2,fp,-308
1000f0a8:	1009883a 	mov	r4,r2
1000f0ac:	000f3780 	call	1000f378 <lodepng_state_init>
  state.info_raw.colortype = colortype;
1000f0b0:	e0800317 	ldw	r2,12(fp)
1000f0b4:	e0bfcb15 	stw	r2,-212(fp)
  state.info_raw.bitdepth = bitdepth;
1000f0b8:	e0800417 	ldw	r2,16(fp)
1000f0bc:	e0bfcc15 	stw	r2,-208(fp)
  error = lodepng_decode(out, w, h, &state, in, insize);
1000f0c0:	e0bfb304 	addi	r2,fp,-308
1000f0c4:	e0ffff17 	ldw	r3,-4(fp)
1000f0c8:	d8c00015 	stw	r3,0(sp)
1000f0cc:	e0c00217 	ldw	r3,8(fp)
1000f0d0:	d8c00115 	stw	r3,4(sp)
1000f0d4:	e13ffc17 	ldw	r4,-16(fp)
1000f0d8:	e17ffd17 	ldw	r5,-12(fp)
1000f0dc:	e1bffe17 	ldw	r6,-8(fp)
1000f0e0:	100f883a 	mov	r7,r2
1000f0e4:	000eea00 	call	1000eea0 <lodepng_decode>
1000f0e8:	e0bfb215 	stw	r2,-312(fp)
  lodepng_state_cleanup(&state);
1000f0ec:	e0bfb304 	addi	r2,fp,-308
1000f0f0:	1009883a 	mov	r4,r2
1000f0f4:	000f3e80 	call	1000f3e8 <lodepng_state_cleanup>
  return error;
1000f0f8:	e0bfb217 	ldw	r2,-312(fp)
}
1000f0fc:	e037883a 	mov	sp,fp
1000f100:	dfc00117 	ldw	ra,4(sp)
1000f104:	df000017 	ldw	fp,0(sp)
1000f108:	dec00204 	addi	sp,sp,8
1000f10c:	f800283a 	ret

1000f110 <lodepng_decode32>:

unsigned lodepng_decode32(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
{
1000f110:	defff704 	addi	sp,sp,-36
1000f114:	dfc00815 	stw	ra,32(sp)
1000f118:	df000715 	stw	fp,28(sp)
1000f11c:	df000704 	addi	fp,sp,28
1000f120:	e13ffc15 	stw	r4,-16(fp)
1000f124:	e17ffd15 	stw	r5,-12(fp)
1000f128:	e1bffe15 	stw	r6,-8(fp)
1000f12c:	e1ffff15 	stw	r7,-4(fp)
  return lodepng_decode_memory(out, w, h, in, insize, LCT_RGBA, 8);
1000f130:	e0800217 	ldw	r2,8(fp)
1000f134:	d8800015 	stw	r2,0(sp)
1000f138:	00800184 	movi	r2,6
1000f13c:	d8800115 	stw	r2,4(sp)
1000f140:	00800204 	movi	r2,8
1000f144:	d8800215 	stw	r2,8(sp)
1000f148:	e13ffc17 	ldw	r4,-16(fp)
1000f14c:	e17ffd17 	ldw	r5,-12(fp)
1000f150:	e1bffe17 	ldw	r6,-8(fp)
1000f154:	e1ffff17 	ldw	r7,-4(fp)
1000f158:	000f0840 	call	1000f084 <lodepng_decode_memory>
}
1000f15c:	e037883a 	mov	sp,fp
1000f160:	dfc00117 	ldw	ra,4(sp)
1000f164:	df000017 	ldw	fp,0(sp)
1000f168:	dec00204 	addi	sp,sp,8
1000f16c:	f800283a 	ret

1000f170 <lodepng_decode24>:

unsigned lodepng_decode24(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
{
1000f170:	defff704 	addi	sp,sp,-36
1000f174:	dfc00815 	stw	ra,32(sp)
1000f178:	df000715 	stw	fp,28(sp)
1000f17c:	df000704 	addi	fp,sp,28
1000f180:	e13ffc15 	stw	r4,-16(fp)
1000f184:	e17ffd15 	stw	r5,-12(fp)
1000f188:	e1bffe15 	stw	r6,-8(fp)
1000f18c:	e1ffff15 	stw	r7,-4(fp)
  return lodepng_decode_memory(out, w, h, in, insize, LCT_RGB, 8);
1000f190:	e0800217 	ldw	r2,8(fp)
1000f194:	d8800015 	stw	r2,0(sp)
1000f198:	00800084 	movi	r2,2
1000f19c:	d8800115 	stw	r2,4(sp)
1000f1a0:	00800204 	movi	r2,8
1000f1a4:	d8800215 	stw	r2,8(sp)
1000f1a8:	e13ffc17 	ldw	r4,-16(fp)
1000f1ac:	e17ffd17 	ldw	r5,-12(fp)
1000f1b0:	e1bffe17 	ldw	r6,-8(fp)
1000f1b4:	e1ffff17 	ldw	r7,-4(fp)
1000f1b8:	000f0840 	call	1000f084 <lodepng_decode_memory>
}
1000f1bc:	e037883a 	mov	sp,fp
1000f1c0:	dfc00117 	ldw	ra,4(sp)
1000f1c4:	df000017 	ldw	fp,0(sp)
1000f1c8:	dec00204 	addi	sp,sp,8
1000f1cc:	f800283a 	ret

1000f1d0 <lodepng_decode_file>:

#ifdef LODEPNG_COMPILE_DISK
unsigned lodepng_decode_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename,
                             LodePNGColorType colortype, unsigned bitdepth)
{
1000f1d0:	defff404 	addi	sp,sp,-48
1000f1d4:	dfc00b15 	stw	ra,44(sp)
1000f1d8:	df000a15 	stw	fp,40(sp)
1000f1dc:	df000a04 	addi	fp,sp,40
1000f1e0:	e13ffc15 	stw	r4,-16(fp)
1000f1e4:	e17ffd15 	stw	r5,-12(fp)
1000f1e8:	e1bffe15 	stw	r6,-8(fp)
1000f1ec:	e1ffff15 	stw	r7,-4(fp)
  unsigned char* buffer;
  size_t buffersize;
  unsigned error;
  error = lodepng_load_file(&buffer, &buffersize, filename);
1000f1f0:	e0fffa04 	addi	r3,fp,-24
1000f1f4:	e0bffb04 	addi	r2,fp,-20
1000f1f8:	1809883a 	mov	r4,r3
1000f1fc:	100b883a 	mov	r5,r2
1000f200:	e1bfff17 	ldw	r6,-4(fp)
1000f204:	0000b300 	call	10000b30 <lodepng_load_file>
1000f208:	e0bff915 	stw	r2,-28(fp)
  if(!error) error = lodepng_decode_memory(out, w, h, buffer, buffersize, colortype, bitdepth);
1000f20c:	e0bff917 	ldw	r2,-28(fp)
1000f210:	10000d1e 	bne	r2,zero,1000f248 <lodepng_decode_file+0x78>
1000f214:	e0bffa17 	ldw	r2,-24(fp)
1000f218:	e0fffb17 	ldw	r3,-20(fp)
1000f21c:	d8c00015 	stw	r3,0(sp)
1000f220:	e0c00217 	ldw	r3,8(fp)
1000f224:	d8c00115 	stw	r3,4(sp)
1000f228:	e0c00317 	ldw	r3,12(fp)
1000f22c:	d8c00215 	stw	r3,8(sp)
1000f230:	e13ffc17 	ldw	r4,-16(fp)
1000f234:	e17ffd17 	ldw	r5,-12(fp)
1000f238:	e1bffe17 	ldw	r6,-8(fp)
1000f23c:	100f883a 	mov	r7,r2
1000f240:	000f0840 	call	1000f084 <lodepng_decode_memory>
1000f244:	e0bff915 	stw	r2,-28(fp)
  lodepng_free(buffer);
1000f248:	e0bffa17 	ldw	r2,-24(fp)
1000f24c:	1009883a 	mov	r4,r2
1000f250:	000025c0 	call	1000025c <lodepng_free>
  return error;
1000f254:	e0bff917 	ldw	r2,-28(fp)
}
1000f258:	e037883a 	mov	sp,fp
1000f25c:	dfc00117 	ldw	ra,4(sp)
1000f260:	df000017 	ldw	fp,0(sp)
1000f264:	dec00204 	addi	sp,sp,8
1000f268:	f800283a 	ret

1000f26c <lodepng_decode32_file>:

unsigned lodepng_decode32_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
{
1000f26c:	defff804 	addi	sp,sp,-32
1000f270:	dfc00715 	stw	ra,28(sp)
1000f274:	df000615 	stw	fp,24(sp)
1000f278:	df000604 	addi	fp,sp,24
1000f27c:	e13ffc15 	stw	r4,-16(fp)
1000f280:	e17ffd15 	stw	r5,-12(fp)
1000f284:	e1bffe15 	stw	r6,-8(fp)
1000f288:	e1ffff15 	stw	r7,-4(fp)
  return lodepng_decode_file(out, w, h, filename, LCT_RGBA, 8);
1000f28c:	00800184 	movi	r2,6
1000f290:	d8800015 	stw	r2,0(sp)
1000f294:	00800204 	movi	r2,8
1000f298:	d8800115 	stw	r2,4(sp)
1000f29c:	e13ffc17 	ldw	r4,-16(fp)
1000f2a0:	e17ffd17 	ldw	r5,-12(fp)
1000f2a4:	e1bffe17 	ldw	r6,-8(fp)
1000f2a8:	e1ffff17 	ldw	r7,-4(fp)
1000f2ac:	000f1d00 	call	1000f1d0 <lodepng_decode_file>
}
1000f2b0:	e037883a 	mov	sp,fp
1000f2b4:	dfc00117 	ldw	ra,4(sp)
1000f2b8:	df000017 	ldw	fp,0(sp)
1000f2bc:	dec00204 	addi	sp,sp,8
1000f2c0:	f800283a 	ret

1000f2c4 <lodepng_decode24_file>:

unsigned lodepng_decode24_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
{
1000f2c4:	defff804 	addi	sp,sp,-32
1000f2c8:	dfc00715 	stw	ra,28(sp)
1000f2cc:	df000615 	stw	fp,24(sp)
1000f2d0:	df000604 	addi	fp,sp,24
1000f2d4:	e13ffc15 	stw	r4,-16(fp)
1000f2d8:	e17ffd15 	stw	r5,-12(fp)
1000f2dc:	e1bffe15 	stw	r6,-8(fp)
1000f2e0:	e1ffff15 	stw	r7,-4(fp)
  return lodepng_decode_file(out, w, h, filename, LCT_RGB, 8);
1000f2e4:	00800084 	movi	r2,2
1000f2e8:	d8800015 	stw	r2,0(sp)
1000f2ec:	00800204 	movi	r2,8
1000f2f0:	d8800115 	stw	r2,4(sp)
1000f2f4:	e13ffc17 	ldw	r4,-16(fp)
1000f2f8:	e17ffd17 	ldw	r5,-12(fp)
1000f2fc:	e1bffe17 	ldw	r6,-8(fp)
1000f300:	e1ffff17 	ldw	r7,-4(fp)
1000f304:	000f1d00 	call	1000f1d0 <lodepng_decode_file>
}
1000f308:	e037883a 	mov	sp,fp
1000f30c:	dfc00117 	ldw	ra,4(sp)
1000f310:	df000017 	ldw	fp,0(sp)
1000f314:	dec00204 	addi	sp,sp,8
1000f318:	f800283a 	ret

1000f31c <lodepng_decoder_settings_init>:
#endif /*LODEPNG_COMPILE_DISK*/

void lodepng_decoder_settings_init(LodePNGDecoderSettings* settings)
{
1000f31c:	defffd04 	addi	sp,sp,-12
1000f320:	dfc00215 	stw	ra,8(sp)
1000f324:	df000115 	stw	fp,4(sp)
1000f328:	df000104 	addi	fp,sp,4
1000f32c:	e13fff15 	stw	r4,-4(fp)
  settings->color_convert = 1;
1000f330:	e0bfff17 	ldw	r2,-4(fp)
1000f334:	00c00044 	movi	r3,1
1000f338:	10c00515 	stw	r3,20(r2)
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
  settings->read_text_chunks = 1;
1000f33c:	e0bfff17 	ldw	r2,-4(fp)
1000f340:	00c00044 	movi	r3,1
1000f344:	10c00615 	stw	r3,24(r2)
  settings->remember_unknown_chunks = 0;
1000f348:	e0bfff17 	ldw	r2,-4(fp)
1000f34c:	10000715 	stw	zero,28(r2)
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
  settings->ignore_crc = 0;
1000f350:	e0bfff17 	ldw	r2,-4(fp)
1000f354:	10000415 	stw	zero,16(r2)
  lodepng_decompress_settings_init(&settings->zlibsettings);
1000f358:	e0bfff17 	ldw	r2,-4(fp)
1000f35c:	1009883a 	mov	r4,r2
1000f360:	00062640 	call	10006264 <lodepng_decompress_settings_init>
}
1000f364:	e037883a 	mov	sp,fp
1000f368:	dfc00117 	ldw	ra,4(sp)
1000f36c:	df000017 	ldw	fp,0(sp)
1000f370:	dec00204 	addi	sp,sp,8
1000f374:	f800283a 	ret

1000f378 <lodepng_state_init>:
#endif /*LODEPNG_COMPILE_DECODER*/

#if defined(LODEPNG_COMPILE_DECODER) || defined(LODEPNG_COMPILE_ENCODER)

void lodepng_state_init(LodePNGState* state)
{
1000f378:	defffd04 	addi	sp,sp,-12
1000f37c:	dfc00215 	stw	ra,8(sp)
1000f380:	df000115 	stw	fp,4(sp)
1000f384:	df000104 	addi	fp,sp,4
1000f388:	e13fff15 	stw	r4,-4(fp)
#ifdef LODEPNG_COMPILE_DECODER
  lodepng_decoder_settings_init(&state->decoder);
1000f38c:	e0bfff17 	ldw	r2,-4(fp)
1000f390:	1009883a 	mov	r4,r2
1000f394:	000f31c0 	call	1000f31c <lodepng_decoder_settings_init>
#endif /*LODEPNG_COMPILE_DECODER*/
#ifdef LODEPNG_COMPILE_ENCODER
  lodepng_encoder_settings_init(&state->encoder);
1000f398:	e0bfff17 	ldw	r2,-4(fp)
1000f39c:	10800804 	addi	r2,r2,32
1000f3a0:	1009883a 	mov	r4,r2
1000f3a4:	00132c40 	call	100132c4 <lodepng_encoder_settings_init>
#endif /*LODEPNG_COMPILE_ENCODER*/
  lodepng_color_mode_init(&state->info_raw);
1000f3a8:	e0bfff17 	ldw	r2,-4(fp)
1000f3ac:	10801804 	addi	r2,r2,96
1000f3b0:	1009883a 	mov	r4,r2
1000f3b4:	0006ec80 	call	10006ec8 <lodepng_color_mode_init>
  lodepng_info_init(&state->info_png);
1000f3b8:	e0bfff17 	ldw	r2,-4(fp)
1000f3bc:	10802004 	addi	r2,r2,128
1000f3c0:	1009883a 	mov	r4,r2
1000f3c4:	00082080 	call	10008208 <lodepng_info_init>
  state->error = 1;
1000f3c8:	e0bfff17 	ldw	r2,-4(fp)
1000f3cc:	00c00044 	movi	r3,1
1000f3d0:	10c04815 	stw	r3,288(r2)
}
1000f3d4:	e037883a 	mov	sp,fp
1000f3d8:	dfc00117 	ldw	ra,4(sp)
1000f3dc:	df000017 	ldw	fp,0(sp)
1000f3e0:	dec00204 	addi	sp,sp,8
1000f3e4:	f800283a 	ret

1000f3e8 <lodepng_state_cleanup>:

void lodepng_state_cleanup(LodePNGState* state)
{
1000f3e8:	defffd04 	addi	sp,sp,-12
1000f3ec:	dfc00215 	stw	ra,8(sp)
1000f3f0:	df000115 	stw	fp,4(sp)
1000f3f4:	df000104 	addi	fp,sp,4
1000f3f8:	e13fff15 	stw	r4,-4(fp)
  lodepng_color_mode_cleanup(&state->info_raw);
1000f3fc:	e0bfff17 	ldw	r2,-4(fp)
1000f400:	10801804 	addi	r2,r2,96
1000f404:	1009883a 	mov	r4,r2
1000f408:	0006f400 	call	10006f40 <lodepng_color_mode_cleanup>
  lodepng_info_cleanup(&state->info_png);
1000f40c:	e0bfff17 	ldw	r2,-4(fp)
1000f410:	10802004 	addi	r2,r2,128
1000f414:	1009883a 	mov	r4,r2
1000f418:	00082b00 	call	100082b0 <lodepng_info_cleanup>
}
1000f41c:	e037883a 	mov	sp,fp
1000f420:	dfc00117 	ldw	ra,4(sp)
1000f424:	df000017 	ldw	fp,0(sp)
1000f428:	dec00204 	addi	sp,sp,8
1000f42c:	f800283a 	ret

1000f430 <lodepng_state_copy>:

void lodepng_state_copy(LodePNGState* dest, const LodePNGState* source)
{
1000f430:	defffc04 	addi	sp,sp,-16
1000f434:	dfc00315 	stw	ra,12(sp)
1000f438:	df000215 	stw	fp,8(sp)
1000f43c:	df000204 	addi	fp,sp,8
1000f440:	e13ffe15 	stw	r4,-8(fp)
1000f444:	e17fff15 	stw	r5,-4(fp)
  lodepng_state_cleanup(dest);
1000f448:	e13ffe17 	ldw	r4,-8(fp)
1000f44c:	000f3e80 	call	1000f3e8 <lodepng_state_cleanup>
  *dest = *source;
1000f450:	e0fffe17 	ldw	r3,-8(fp)
1000f454:	e0bfff17 	ldw	r2,-4(fp)
1000f458:	1809883a 	mov	r4,r3
1000f45c:	1007883a 	mov	r3,r2
1000f460:	00804904 	movi	r2,292
1000f464:	180b883a 	mov	r5,r3
1000f468:	100d883a 	mov	r6,r2
1000f46c:	0016dd80 	call	10016dd8 <memcpy>
  lodepng_color_mode_init(&dest->info_raw);
1000f470:	e0bffe17 	ldw	r2,-8(fp)
1000f474:	10801804 	addi	r2,r2,96
1000f478:	1009883a 	mov	r4,r2
1000f47c:	0006ec80 	call	10006ec8 <lodepng_color_mode_init>
  lodepng_info_init(&dest->info_png);
1000f480:	e0bffe17 	ldw	r2,-8(fp)
1000f484:	10802004 	addi	r2,r2,128
1000f488:	1009883a 	mov	r4,r2
1000f48c:	00082080 	call	10008208 <lodepng_info_init>
  dest->error = lodepng_color_mode_copy(&dest->info_raw, &source->info_raw); if(dest->error) return;
1000f490:	e0bffe17 	ldw	r2,-8(fp)
1000f494:	10c01804 	addi	r3,r2,96
1000f498:	e0bfff17 	ldw	r2,-4(fp)
1000f49c:	10801804 	addi	r2,r2,96
1000f4a0:	1809883a 	mov	r4,r3
1000f4a4:	100b883a 	mov	r5,r2
1000f4a8:	0006f700 	call	10006f70 <lodepng_color_mode_copy>
1000f4ac:	e0fffe17 	ldw	r3,-8(fp)
1000f4b0:	18804815 	stw	r2,288(r3)
1000f4b4:	e0bffe17 	ldw	r2,-8(fp)
1000f4b8:	10804817 	ldw	r2,288(r2)
1000f4bc:	10000a1e 	bne	r2,zero,1000f4e8 <lodepng_state_copy+0xb8>
  dest->error = lodepng_info_copy(&dest->info_png, &source->info_png); if(dest->error) return;
1000f4c0:	e0bffe17 	ldw	r2,-8(fp)
1000f4c4:	10c02004 	addi	r3,r2,128
1000f4c8:	e0bfff17 	ldw	r2,-4(fp)
1000f4cc:	10802004 	addi	r2,r2,128
1000f4d0:	1809883a 	mov	r4,r3
1000f4d4:	100b883a 	mov	r5,r2
1000f4d8:	00083000 	call	10008300 <lodepng_info_copy>
1000f4dc:	e0fffe17 	ldw	r3,-8(fp)
1000f4e0:	18804815 	stw	r2,288(r3)
1000f4e4:	00000106 	br	1000f4ec <lodepng_state_copy+0xbc>
{
  lodepng_state_cleanup(dest);
  *dest = *source;
  lodepng_color_mode_init(&dest->info_raw);
  lodepng_info_init(&dest->info_png);
  dest->error = lodepng_color_mode_copy(&dest->info_raw, &source->info_raw); if(dest->error) return;
1000f4e8:	0001883a 	nop
  dest->error = lodepng_info_copy(&dest->info_png, &source->info_png); if(dest->error) return;
}
1000f4ec:	e037883a 	mov	sp,fp
1000f4f0:	dfc00117 	ldw	ra,4(sp)
1000f4f4:	df000017 	ldw	fp,0(sp)
1000f4f8:	dec00204 	addi	sp,sp,8
1000f4fc:	f800283a 	ret

1000f500 <addChunk>:
/* / PNG Encoder                                                            / */
/* ////////////////////////////////////////////////////////////////////////// */

/*chunkName must be string of 4 characters*/
static unsigned addChunk(ucvector* out, const char* chunkName, const unsigned char* data, size_t length)
{
1000f500:	defff804 	addi	sp,sp,-32
1000f504:	dfc00715 	stw	ra,28(sp)
1000f508:	df000615 	stw	fp,24(sp)
1000f50c:	df000604 	addi	fp,sp,24
1000f510:	e13ffc15 	stw	r4,-16(fp)
1000f514:	e17ffd15 	stw	r5,-12(fp)
1000f518:	e1bffe15 	stw	r6,-8(fp)
1000f51c:	e1ffff15 	stw	r7,-4(fp)
  CERROR_TRY_RETURN(lodepng_chunk_create(&out->data, &out->size, (unsigned)length, chunkName, data));
1000f520:	e0fffc17 	ldw	r3,-16(fp)
1000f524:	e0bffc17 	ldw	r2,-16(fp)
1000f528:	10800104 	addi	r2,r2,4
1000f52c:	e13ffe17 	ldw	r4,-8(fp)
1000f530:	d9000015 	stw	r4,0(sp)
1000f534:	1809883a 	mov	r4,r3
1000f538:	100b883a 	mov	r5,r2
1000f53c:	e1bfff17 	ldw	r6,-4(fp)
1000f540:	e1fffd17 	ldw	r7,-12(fp)
1000f544:	0006aec0 	call	10006aec <lodepng_chunk_create>
1000f548:	e0bffb15 	stw	r2,-20(fp)
1000f54c:	e0bffb17 	ldw	r2,-20(fp)
1000f550:	10000226 	beq	r2,zero,1000f55c <addChunk+0x5c>
1000f554:	e0bffb17 	ldw	r2,-20(fp)
1000f558:	00000506 	br	1000f570 <addChunk+0x70>
  out->allocsize = out->size; /*fix the allocsize again*/
1000f55c:	e0bffc17 	ldw	r2,-16(fp)
1000f560:	10c00117 	ldw	r3,4(r2)
1000f564:	e0bffc17 	ldw	r2,-16(fp)
1000f568:	10c00215 	stw	r3,8(r2)
  return 0;
1000f56c:	0005883a 	mov	r2,zero
}
1000f570:	e037883a 	mov	sp,fp
1000f574:	dfc00117 	ldw	ra,4(sp)
1000f578:	df000017 	ldw	fp,0(sp)
1000f57c:	dec00204 	addi	sp,sp,8
1000f580:	f800283a 	ret

1000f584 <writeSignature>:

static void writeSignature(ucvector* out)
{
1000f584:	defffd04 	addi	sp,sp,-12
1000f588:	dfc00215 	stw	ra,8(sp)
1000f58c:	df000115 	stw	fp,4(sp)
1000f590:	df000104 	addi	fp,sp,4
1000f594:	e13fff15 	stw	r4,-4(fp)
  /*8 bytes PNG signature, aka the magic bytes*/
  ucvector_push_back(out, 137);
1000f598:	e13fff17 	ldw	r4,-4(fp)
1000f59c:	01402244 	movi	r5,137
1000f5a0:	00007e80 	call	100007e8 <ucvector_push_back>
  ucvector_push_back(out, 80);
1000f5a4:	e13fff17 	ldw	r4,-4(fp)
1000f5a8:	01401404 	movi	r5,80
1000f5ac:	00007e80 	call	100007e8 <ucvector_push_back>
  ucvector_push_back(out, 78);
1000f5b0:	e13fff17 	ldw	r4,-4(fp)
1000f5b4:	01401384 	movi	r5,78
1000f5b8:	00007e80 	call	100007e8 <ucvector_push_back>
  ucvector_push_back(out, 71);
1000f5bc:	e13fff17 	ldw	r4,-4(fp)
1000f5c0:	014011c4 	movi	r5,71
1000f5c4:	00007e80 	call	100007e8 <ucvector_push_back>
  ucvector_push_back(out, 13);
1000f5c8:	e13fff17 	ldw	r4,-4(fp)
1000f5cc:	01400344 	movi	r5,13
1000f5d0:	00007e80 	call	100007e8 <ucvector_push_back>
  ucvector_push_back(out, 10);
1000f5d4:	e13fff17 	ldw	r4,-4(fp)
1000f5d8:	01400284 	movi	r5,10
1000f5dc:	00007e80 	call	100007e8 <ucvector_push_back>
  ucvector_push_back(out, 26);
1000f5e0:	e13fff17 	ldw	r4,-4(fp)
1000f5e4:	01400684 	movi	r5,26
1000f5e8:	00007e80 	call	100007e8 <ucvector_push_back>
  ucvector_push_back(out, 10);
1000f5ec:	e13fff17 	ldw	r4,-4(fp)
1000f5f0:	01400284 	movi	r5,10
1000f5f4:	00007e80 	call	100007e8 <ucvector_push_back>
}
1000f5f8:	e037883a 	mov	sp,fp
1000f5fc:	dfc00117 	ldw	ra,4(sp)
1000f600:	df000017 	ldw	fp,0(sp)
1000f604:	dec00204 	addi	sp,sp,8
1000f608:	f800283a 	ret

1000f60c <addChunk_IHDR>:

static unsigned addChunk_IHDR(ucvector* out, unsigned w, unsigned h,
                              LodePNGColorType colortype, unsigned bitdepth, unsigned interlace_method)
{
1000f60c:	defff604 	addi	sp,sp,-40
1000f610:	dfc00915 	stw	ra,36(sp)
1000f614:	df000815 	stw	fp,32(sp)
1000f618:	df000804 	addi	fp,sp,32
1000f61c:	e13ffc15 	stw	r4,-16(fp)
1000f620:	e17ffd15 	stw	r5,-12(fp)
1000f624:	e1bffe15 	stw	r6,-8(fp)
1000f628:	e1ffff15 	stw	r7,-4(fp)
  unsigned error = 0;
1000f62c:	e03ff815 	stw	zero,-32(fp)
  ucvector header;
  ucvector_init(&header);
1000f630:	e0bff904 	addi	r2,fp,-28
1000f634:	1009883a 	mov	r4,r2
1000f638:	00006c00 	call	100006c0 <ucvector_init>

  lodepng_add32bitInt(&header, w); /*width*/
1000f63c:	e0bff904 	addi	r2,fp,-28
1000f640:	1009883a 	mov	r4,r2
1000f644:	e17ffd17 	ldw	r5,-12(fp)
1000f648:	0000ac80 	call	10000ac8 <lodepng_add32bitInt>
  lodepng_add32bitInt(&header, h); /*height*/
1000f64c:	e0bff904 	addi	r2,fp,-28
1000f650:	1009883a 	mov	r4,r2
1000f654:	e17ffe17 	ldw	r5,-8(fp)
1000f658:	0000ac80 	call	10000ac8 <lodepng_add32bitInt>
  ucvector_push_back(&header, (unsigned char)bitdepth); /*bit depth*/
1000f65c:	e0800217 	ldw	r2,8(fp)
1000f660:	10803fcc 	andi	r2,r2,255
1000f664:	e0fff904 	addi	r3,fp,-28
1000f668:	1809883a 	mov	r4,r3
1000f66c:	100b883a 	mov	r5,r2
1000f670:	00007e80 	call	100007e8 <ucvector_push_back>
  ucvector_push_back(&header, (unsigned char)colortype); /*color type*/
1000f674:	e0bfff17 	ldw	r2,-4(fp)
1000f678:	10803fcc 	andi	r2,r2,255
1000f67c:	e0fff904 	addi	r3,fp,-28
1000f680:	1809883a 	mov	r4,r3
1000f684:	100b883a 	mov	r5,r2
1000f688:	00007e80 	call	100007e8 <ucvector_push_back>
  ucvector_push_back(&header, 0); /*compression method*/
1000f68c:	e0bff904 	addi	r2,fp,-28
1000f690:	1009883a 	mov	r4,r2
1000f694:	000b883a 	mov	r5,zero
1000f698:	00007e80 	call	100007e8 <ucvector_push_back>
  ucvector_push_back(&header, 0); /*filter method*/
1000f69c:	e0bff904 	addi	r2,fp,-28
1000f6a0:	1009883a 	mov	r4,r2
1000f6a4:	000b883a 	mov	r5,zero
1000f6a8:	00007e80 	call	100007e8 <ucvector_push_back>
  ucvector_push_back(&header, interlace_method); /*interlace method*/
1000f6ac:	e0800317 	ldw	r2,12(fp)
1000f6b0:	10803fcc 	andi	r2,r2,255
1000f6b4:	e0fff904 	addi	r3,fp,-28
1000f6b8:	1809883a 	mov	r4,r3
1000f6bc:	100b883a 	mov	r5,r2
1000f6c0:	00007e80 	call	100007e8 <ucvector_push_back>

  error = addChunk(out, "IHDR", header.data, header.size);
1000f6c4:	e0fff917 	ldw	r3,-28(fp)
1000f6c8:	e0bffa17 	ldw	r2,-24(fp)
1000f6cc:	e13ffc17 	ldw	r4,-16(fp)
1000f6d0:	014400b4 	movhi	r5,4098
1000f6d4:	294a9d04 	addi	r5,r5,10868
1000f6d8:	180d883a 	mov	r6,r3
1000f6dc:	100f883a 	mov	r7,r2
1000f6e0:	000f5000 	call	1000f500 <addChunk>
1000f6e4:	e0bff815 	stw	r2,-32(fp)
  ucvector_cleanup(&header);
1000f6e8:	e0bff904 	addi	r2,fp,-28
1000f6ec:	1009883a 	mov	r4,r2
1000f6f0:	00006680 	call	10000668 <ucvector_cleanup>

  return error;
1000f6f4:	e0bff817 	ldw	r2,-32(fp)
}
1000f6f8:	e037883a 	mov	sp,fp
1000f6fc:	dfc00117 	ldw	ra,4(sp)
1000f700:	df000017 	ldw	fp,0(sp)
1000f704:	dec00204 	addi	sp,sp,8
1000f708:	f800283a 	ret

1000f70c <addChunk_PLTE>:

static unsigned addChunk_PLTE(ucvector* out, const LodePNGColorMode* info)
{
1000f70c:	defff704 	addi	sp,sp,-36
1000f710:	dfc00815 	stw	ra,32(sp)
1000f714:	df000715 	stw	fp,28(sp)
1000f718:	df000704 	addi	fp,sp,28
1000f71c:	e13ffe15 	stw	r4,-8(fp)
1000f720:	e17fff15 	stw	r5,-4(fp)
  unsigned error = 0;
1000f724:	e03ffa15 	stw	zero,-24(fp)
  size_t i;
  ucvector PLTE;
  ucvector_init(&PLTE);
1000f728:	e0bffb04 	addi	r2,fp,-20
1000f72c:	1009883a 	mov	r4,r2
1000f730:	00006c00 	call	100006c0 <ucvector_init>
  for(i = 0; i != info->palettesize * 4; ++i)
1000f734:	e03ff915 	stw	zero,-28(fp)
1000f738:	00001106 	br	1000f780 <addChunk_PLTE+0x74>
  {
    /*add all channels except alpha channel*/
    if(i % 4 != 3) ucvector_push_back(&PLTE, info->palette[i]);
1000f73c:	e0bff917 	ldw	r2,-28(fp)
1000f740:	108000cc 	andi	r2,r2,3
1000f744:	108000e0 	cmpeqi	r2,r2,3
1000f748:	10000a1e 	bne	r2,zero,1000f774 <addChunk_PLTE+0x68>
1000f74c:	e0bfff17 	ldw	r2,-4(fp)
1000f750:	10c00217 	ldw	r3,8(r2)
1000f754:	e0bff917 	ldw	r2,-28(fp)
1000f758:	1885883a 	add	r2,r3,r2
1000f75c:	10800003 	ldbu	r2,0(r2)
1000f760:	10803fcc 	andi	r2,r2,255
1000f764:	e0fffb04 	addi	r3,fp,-20
1000f768:	1809883a 	mov	r4,r3
1000f76c:	100b883a 	mov	r5,r2
1000f770:	00007e80 	call	100007e8 <ucvector_push_back>
{
  unsigned error = 0;
  size_t i;
  ucvector PLTE;
  ucvector_init(&PLTE);
  for(i = 0; i != info->palettesize * 4; ++i)
1000f774:	e0bff917 	ldw	r2,-28(fp)
1000f778:	10800044 	addi	r2,r2,1
1000f77c:	e0bff915 	stw	r2,-28(fp)
1000f780:	e0bfff17 	ldw	r2,-4(fp)
1000f784:	10800317 	ldw	r2,12(r2)
1000f788:	1085883a 	add	r2,r2,r2
1000f78c:	1085883a 	add	r2,r2,r2
1000f790:	1007883a 	mov	r3,r2
1000f794:	e0bff917 	ldw	r2,-28(fp)
1000f798:	18bfe81e 	bne	r3,r2,1000f73c <__alt_data_end+0xf800f73c>
  {
    /*add all channels except alpha channel*/
    if(i % 4 != 3) ucvector_push_back(&PLTE, info->palette[i]);
  }
  error = addChunk(out, "PLTE", PLTE.data, PLTE.size);
1000f79c:	e0fffb17 	ldw	r3,-20(fp)
1000f7a0:	e0bffc17 	ldw	r2,-16(fp)
1000f7a4:	e13ffe17 	ldw	r4,-8(fp)
1000f7a8:	014400b4 	movhi	r5,4098
1000f7ac:	294a8d04 	addi	r5,r5,10804
1000f7b0:	180d883a 	mov	r6,r3
1000f7b4:	100f883a 	mov	r7,r2
1000f7b8:	000f5000 	call	1000f500 <addChunk>
1000f7bc:	e0bffa15 	stw	r2,-24(fp)
  ucvector_cleanup(&PLTE);
1000f7c0:	e0bffb04 	addi	r2,fp,-20
1000f7c4:	1009883a 	mov	r4,r2
1000f7c8:	00006680 	call	10000668 <ucvector_cleanup>

  return error;
1000f7cc:	e0bffa17 	ldw	r2,-24(fp)
}
1000f7d0:	e037883a 	mov	sp,fp
1000f7d4:	dfc00117 	ldw	ra,4(sp)
1000f7d8:	df000017 	ldw	fp,0(sp)
1000f7dc:	dec00204 	addi	sp,sp,8
1000f7e0:	f800283a 	ret

1000f7e4 <addChunk_tRNS>:

static unsigned addChunk_tRNS(ucvector* out, const LodePNGColorMode* info)
{
1000f7e4:	defff604 	addi	sp,sp,-40
1000f7e8:	dfc00915 	stw	ra,36(sp)
1000f7ec:	df000815 	stw	fp,32(sp)
1000f7f0:	df000804 	addi	fp,sp,32
1000f7f4:	e13ffe15 	stw	r4,-8(fp)
1000f7f8:	e17fff15 	stw	r5,-4(fp)
  unsigned error = 0;
1000f7fc:	e03ffa15 	stw	zero,-24(fp)
  size_t i;
  ucvector tRNS;
  ucvector_init(&tRNS);
1000f800:	e0bffb04 	addi	r2,fp,-20
1000f804:	1009883a 	mov	r4,r2
1000f808:	00006c00 	call	100006c0 <ucvector_init>
  if(info->colortype == LCT_PALETTE)
1000f80c:	e0bfff17 	ldw	r2,-4(fp)
1000f810:	10800017 	ldw	r2,0(r2)
1000f814:	108000d8 	cmpnei	r2,r2,3
1000f818:	1000321e 	bne	r2,zero,1000f8e4 <addChunk_tRNS+0x100>
  {
    size_t amount = info->palettesize;
1000f81c:	e0bfff17 	ldw	r2,-4(fp)
1000f820:	10800317 	ldw	r2,12(r2)
1000f824:	e0bff915 	stw	r2,-28(fp)
    /*the tail of palette values that all have 255 as alpha, does not have to be encoded*/
    for(i = info->palettesize; i != 0; --i)
1000f828:	e0bfff17 	ldw	r2,-4(fp)
1000f82c:	10800317 	ldw	r2,12(r2)
1000f830:	e0bff815 	stw	r2,-32(fp)
1000f834:	00001106 	br	1000f87c <addChunk_tRNS+0x98>
    {
      if(info->palette[4 * (i - 1) + 3] == 255) --amount;
1000f838:	e0bfff17 	ldw	r2,-4(fp)
1000f83c:	10c00217 	ldw	r3,8(r2)
1000f840:	e0bff817 	ldw	r2,-32(fp)
1000f844:	1085883a 	add	r2,r2,r2
1000f848:	1085883a 	add	r2,r2,r2
1000f84c:	10bfffc4 	addi	r2,r2,-1
1000f850:	1885883a 	add	r2,r3,r2
1000f854:	10800003 	ldbu	r2,0(r2)
1000f858:	10803fcc 	andi	r2,r2,255
1000f85c:	10803fd8 	cmpnei	r2,r2,255
1000f860:	1000091e 	bne	r2,zero,1000f888 <addChunk_tRNS+0xa4>
1000f864:	e0bff917 	ldw	r2,-28(fp)
1000f868:	10bfffc4 	addi	r2,r2,-1
1000f86c:	e0bff915 	stw	r2,-28(fp)
  ucvector_init(&tRNS);
  if(info->colortype == LCT_PALETTE)
  {
    size_t amount = info->palettesize;
    /*the tail of palette values that all have 255 as alpha, does not have to be encoded*/
    for(i = info->palettesize; i != 0; --i)
1000f870:	e0bff817 	ldw	r2,-32(fp)
1000f874:	10bfffc4 	addi	r2,r2,-1
1000f878:	e0bff815 	stw	r2,-32(fp)
1000f87c:	e0bff817 	ldw	r2,-32(fp)
1000f880:	103fed1e 	bne	r2,zero,1000f838 <__alt_data_end+0xf800f838>
1000f884:	00000106 	br	1000f88c <addChunk_tRNS+0xa8>
    {
      if(info->palette[4 * (i - 1) + 3] == 255) --amount;
      else break;
1000f888:	0001883a 	nop
    }
    /*add only alpha channel*/
    for(i = 0; i != amount; ++i) ucvector_push_back(&tRNS, info->palette[4 * i + 3]);
1000f88c:	e03ff815 	stw	zero,-32(fp)
1000f890:	00001006 	br	1000f8d4 <addChunk_tRNS+0xf0>
1000f894:	e0bfff17 	ldw	r2,-4(fp)
1000f898:	10c00217 	ldw	r3,8(r2)
1000f89c:	e0bff817 	ldw	r2,-32(fp)
1000f8a0:	1085883a 	add	r2,r2,r2
1000f8a4:	1085883a 	add	r2,r2,r2
1000f8a8:	108000c4 	addi	r2,r2,3
1000f8ac:	1885883a 	add	r2,r3,r2
1000f8b0:	10800003 	ldbu	r2,0(r2)
1000f8b4:	10803fcc 	andi	r2,r2,255
1000f8b8:	e0fffb04 	addi	r3,fp,-20
1000f8bc:	1809883a 	mov	r4,r3
1000f8c0:	100b883a 	mov	r5,r2
1000f8c4:	00007e80 	call	100007e8 <ucvector_push_back>
1000f8c8:	e0bff817 	ldw	r2,-32(fp)
1000f8cc:	10800044 	addi	r2,r2,1
1000f8d0:	e0bff815 	stw	r2,-32(fp)
1000f8d4:	e0fff817 	ldw	r3,-32(fp)
1000f8d8:	e0bff917 	ldw	r2,-28(fp)
1000f8dc:	18bfed1e 	bne	r3,r2,1000f894 <__alt_data_end+0xf800f894>
1000f8e0:	00004a06 	br	1000fa0c <addChunk_tRNS+0x228>
  }
  else if(info->colortype == LCT_GREY)
1000f8e4:	e0bfff17 	ldw	r2,-4(fp)
1000f8e8:	10800017 	ldw	r2,0(r2)
1000f8ec:	1000131e 	bne	r2,zero,1000f93c <addChunk_tRNS+0x158>
  {
    if(info->key_defined)
1000f8f0:	e0bfff17 	ldw	r2,-4(fp)
1000f8f4:	10800417 	ldw	r2,16(r2)
1000f8f8:	10004426 	beq	r2,zero,1000fa0c <addChunk_tRNS+0x228>
    {
      ucvector_push_back(&tRNS, (unsigned char)(info->key_r / 256));
1000f8fc:	e0bfff17 	ldw	r2,-4(fp)
1000f900:	10800517 	ldw	r2,20(r2)
1000f904:	1004d23a 	srli	r2,r2,8
1000f908:	10803fcc 	andi	r2,r2,255
1000f90c:	e0fffb04 	addi	r3,fp,-20
1000f910:	1809883a 	mov	r4,r3
1000f914:	100b883a 	mov	r5,r2
1000f918:	00007e80 	call	100007e8 <ucvector_push_back>
      ucvector_push_back(&tRNS, (unsigned char)(info->key_r % 256));
1000f91c:	e0bfff17 	ldw	r2,-4(fp)
1000f920:	10800517 	ldw	r2,20(r2)
1000f924:	10803fcc 	andi	r2,r2,255
1000f928:	e0fffb04 	addi	r3,fp,-20
1000f92c:	1809883a 	mov	r4,r3
1000f930:	100b883a 	mov	r5,r2
1000f934:	00007e80 	call	100007e8 <ucvector_push_back>
1000f938:	00003406 	br	1000fa0c <addChunk_tRNS+0x228>
    }
  }
  else if(info->colortype == LCT_RGB)
1000f93c:	e0bfff17 	ldw	r2,-4(fp)
1000f940:	10800017 	ldw	r2,0(r2)
1000f944:	10800098 	cmpnei	r2,r2,2
1000f948:	1000301e 	bne	r2,zero,1000fa0c <addChunk_tRNS+0x228>
  {
    if(info->key_defined)
1000f94c:	e0bfff17 	ldw	r2,-4(fp)
1000f950:	10800417 	ldw	r2,16(r2)
1000f954:	10002d26 	beq	r2,zero,1000fa0c <addChunk_tRNS+0x228>
    {
      ucvector_push_back(&tRNS, (unsigned char)(info->key_r / 256));
1000f958:	e0bfff17 	ldw	r2,-4(fp)
1000f95c:	10800517 	ldw	r2,20(r2)
1000f960:	1004d23a 	srli	r2,r2,8
1000f964:	10803fcc 	andi	r2,r2,255
1000f968:	e0fffb04 	addi	r3,fp,-20
1000f96c:	1809883a 	mov	r4,r3
1000f970:	100b883a 	mov	r5,r2
1000f974:	00007e80 	call	100007e8 <ucvector_push_back>
      ucvector_push_back(&tRNS, (unsigned char)(info->key_r % 256));
1000f978:	e0bfff17 	ldw	r2,-4(fp)
1000f97c:	10800517 	ldw	r2,20(r2)
1000f980:	10803fcc 	andi	r2,r2,255
1000f984:	e0fffb04 	addi	r3,fp,-20
1000f988:	1809883a 	mov	r4,r3
1000f98c:	100b883a 	mov	r5,r2
1000f990:	00007e80 	call	100007e8 <ucvector_push_back>
      ucvector_push_back(&tRNS, (unsigned char)(info->key_g / 256));
1000f994:	e0bfff17 	ldw	r2,-4(fp)
1000f998:	10800617 	ldw	r2,24(r2)
1000f99c:	1004d23a 	srli	r2,r2,8
1000f9a0:	10803fcc 	andi	r2,r2,255
1000f9a4:	e0fffb04 	addi	r3,fp,-20
1000f9a8:	1809883a 	mov	r4,r3
1000f9ac:	100b883a 	mov	r5,r2
1000f9b0:	00007e80 	call	100007e8 <ucvector_push_back>
      ucvector_push_back(&tRNS, (unsigned char)(info->key_g % 256));
1000f9b4:	e0bfff17 	ldw	r2,-4(fp)
1000f9b8:	10800617 	ldw	r2,24(r2)
1000f9bc:	10803fcc 	andi	r2,r2,255
1000f9c0:	e0fffb04 	addi	r3,fp,-20
1000f9c4:	1809883a 	mov	r4,r3
1000f9c8:	100b883a 	mov	r5,r2
1000f9cc:	00007e80 	call	100007e8 <ucvector_push_back>
      ucvector_push_back(&tRNS, (unsigned char)(info->key_b / 256));
1000f9d0:	e0bfff17 	ldw	r2,-4(fp)
1000f9d4:	10800717 	ldw	r2,28(r2)
1000f9d8:	1004d23a 	srli	r2,r2,8
1000f9dc:	10803fcc 	andi	r2,r2,255
1000f9e0:	e0fffb04 	addi	r3,fp,-20
1000f9e4:	1809883a 	mov	r4,r3
1000f9e8:	100b883a 	mov	r5,r2
1000f9ec:	00007e80 	call	100007e8 <ucvector_push_back>
      ucvector_push_back(&tRNS, (unsigned char)(info->key_b % 256));
1000f9f0:	e0bfff17 	ldw	r2,-4(fp)
1000f9f4:	10800717 	ldw	r2,28(r2)
1000f9f8:	10803fcc 	andi	r2,r2,255
1000f9fc:	e0fffb04 	addi	r3,fp,-20
1000fa00:	1809883a 	mov	r4,r3
1000fa04:	100b883a 	mov	r5,r2
1000fa08:	00007e80 	call	100007e8 <ucvector_push_back>
    }
  }

  error = addChunk(out, "tRNS", tRNS.data, tRNS.size);
1000fa0c:	e0fffb17 	ldw	r3,-20(fp)
1000fa10:	e0bffc17 	ldw	r2,-16(fp)
1000fa14:	e13ffe17 	ldw	r4,-8(fp)
1000fa18:	014400b4 	movhi	r5,4098
1000fa1c:	294a8f04 	addi	r5,r5,10812
1000fa20:	180d883a 	mov	r6,r3
1000fa24:	100f883a 	mov	r7,r2
1000fa28:	000f5000 	call	1000f500 <addChunk>
1000fa2c:	e0bffa15 	stw	r2,-24(fp)
  ucvector_cleanup(&tRNS);
1000fa30:	e0bffb04 	addi	r2,fp,-20
1000fa34:	1009883a 	mov	r4,r2
1000fa38:	00006680 	call	10000668 <ucvector_cleanup>

  return error;
1000fa3c:	e0bffa17 	ldw	r2,-24(fp)
}
1000fa40:	e037883a 	mov	sp,fp
1000fa44:	dfc00117 	ldw	ra,4(sp)
1000fa48:	df000017 	ldw	fp,0(sp)
1000fa4c:	dec00204 	addi	sp,sp,8
1000fa50:	f800283a 	ret

1000fa54 <addChunk_IDAT>:

static unsigned addChunk_IDAT(ucvector* out, const unsigned char* data, size_t datasize,
                              LodePNGCompressSettings* zlibsettings)
{
1000fa54:	defff504 	addi	sp,sp,-44
1000fa58:	dfc00a15 	stw	ra,40(sp)
1000fa5c:	df000915 	stw	fp,36(sp)
1000fa60:	df000904 	addi	fp,sp,36
1000fa64:	e13ffc15 	stw	r4,-16(fp)
1000fa68:	e17ffd15 	stw	r5,-12(fp)
1000fa6c:	e1bffe15 	stw	r6,-8(fp)
1000fa70:	e1ffff15 	stw	r7,-4(fp)
  ucvector zlibdata;
  unsigned error = 0;
1000fa74:	e03ff815 	stw	zero,-32(fp)

  /*compress with the Zlib compressor*/
  ucvector_init(&zlibdata);
1000fa78:	e0bff904 	addi	r2,fp,-28
1000fa7c:	1009883a 	mov	r4,r2
1000fa80:	00006c00 	call	100006c0 <ucvector_init>
  error = zlib_compress(&zlibdata.data, &zlibdata.size, data, datasize, zlibsettings);
1000fa84:	e0fff904 	addi	r3,fp,-28
1000fa88:	e0bff904 	addi	r2,fp,-28
1000fa8c:	10800104 	addi	r2,r2,4
1000fa90:	e13fff17 	ldw	r4,-4(fp)
1000fa94:	d9000015 	stw	r4,0(sp)
1000fa98:	1809883a 	mov	r4,r3
1000fa9c:	100b883a 	mov	r5,r2
1000faa0:	e1bffd17 	ldw	r6,-12(fp)
1000faa4:	e1fffe17 	ldw	r7,-8(fp)
1000faa8:	00061600 	call	10006160 <zlib_compress>
1000faac:	e0bff815 	stw	r2,-32(fp)
  if(!error) error = addChunk(out, "IDAT", zlibdata.data, zlibdata.size);
1000fab0:	e0bff817 	ldw	r2,-32(fp)
1000fab4:	1000091e 	bne	r2,zero,1000fadc <addChunk_IDAT+0x88>
1000fab8:	e0fff917 	ldw	r3,-28(fp)
1000fabc:	e0bffa17 	ldw	r2,-24(fp)
1000fac0:	e13ffc17 	ldw	r4,-16(fp)
1000fac4:	014400b4 	movhi	r5,4098
1000fac8:	294a8904 	addi	r5,r5,10788
1000facc:	180d883a 	mov	r6,r3
1000fad0:	100f883a 	mov	r7,r2
1000fad4:	000f5000 	call	1000f500 <addChunk>
1000fad8:	e0bff815 	stw	r2,-32(fp)
  ucvector_cleanup(&zlibdata);
1000fadc:	e0bff904 	addi	r2,fp,-28
1000fae0:	1009883a 	mov	r4,r2
1000fae4:	00006680 	call	10000668 <ucvector_cleanup>

  return error;
1000fae8:	e0bff817 	ldw	r2,-32(fp)
}
1000faec:	e037883a 	mov	sp,fp
1000faf0:	dfc00117 	ldw	ra,4(sp)
1000faf4:	df000017 	ldw	fp,0(sp)
1000faf8:	dec00204 	addi	sp,sp,8
1000fafc:	f800283a 	ret

1000fb00 <addChunk_IEND>:

static unsigned addChunk_IEND(ucvector* out)
{
1000fb00:	defffc04 	addi	sp,sp,-16
1000fb04:	dfc00315 	stw	ra,12(sp)
1000fb08:	df000215 	stw	fp,8(sp)
1000fb0c:	df000204 	addi	fp,sp,8
1000fb10:	e13fff15 	stw	r4,-4(fp)
  unsigned error = 0;
1000fb14:	e03ffe15 	stw	zero,-8(fp)
  error = addChunk(out, "IEND", 0, 0);
1000fb18:	e13fff17 	ldw	r4,-4(fp)
1000fb1c:	014400b4 	movhi	r5,4098
1000fb20:	294a8b04 	addi	r5,r5,10796
1000fb24:	000d883a 	mov	r6,zero
1000fb28:	000f883a 	mov	r7,zero
1000fb2c:	000f5000 	call	1000f500 <addChunk>
1000fb30:	e0bffe15 	stw	r2,-8(fp)
  return error;
1000fb34:	e0bffe17 	ldw	r2,-8(fp)
}
1000fb38:	e037883a 	mov	sp,fp
1000fb3c:	dfc00117 	ldw	ra,4(sp)
1000fb40:	df000017 	ldw	fp,0(sp)
1000fb44:	dec00204 	addi	sp,sp,8
1000fb48:	f800283a 	ret

1000fb4c <addChunk_tEXt>:

#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS

static unsigned addChunk_tEXt(ucvector* out, const char* keyword, const char* textstring)
{
1000fb4c:	defff604 	addi	sp,sp,-40
1000fb50:	dfc00915 	stw	ra,36(sp)
1000fb54:	df000815 	stw	fp,32(sp)
1000fb58:	df000804 	addi	fp,sp,32
1000fb5c:	e13ffd15 	stw	r4,-12(fp)
1000fb60:	e17ffe15 	stw	r5,-8(fp)
1000fb64:	e1bfff15 	stw	r6,-4(fp)
  unsigned error = 0;
1000fb68:	e03ff915 	stw	zero,-28(fp)
  size_t i;
  ucvector text;
  ucvector_init(&text);
1000fb6c:	e0bffa04 	addi	r2,fp,-24
1000fb70:	1009883a 	mov	r4,r2
1000fb74:	00006c00 	call	100006c0 <ucvector_init>
  for(i = 0; keyword[i] != 0; ++i) ucvector_push_back(&text, (unsigned char)keyword[i]);
1000fb78:	e03ff815 	stw	zero,-32(fp)
1000fb7c:	00000c06 	br	1000fbb0 <addChunk_tEXt+0x64>
1000fb80:	e0fffe17 	ldw	r3,-8(fp)
1000fb84:	e0bff817 	ldw	r2,-32(fp)
1000fb88:	1885883a 	add	r2,r3,r2
1000fb8c:	10800003 	ldbu	r2,0(r2)
1000fb90:	10803fcc 	andi	r2,r2,255
1000fb94:	e0fffa04 	addi	r3,fp,-24
1000fb98:	1809883a 	mov	r4,r3
1000fb9c:	100b883a 	mov	r5,r2
1000fba0:	00007e80 	call	100007e8 <ucvector_push_back>
1000fba4:	e0bff817 	ldw	r2,-32(fp)
1000fba8:	10800044 	addi	r2,r2,1
1000fbac:	e0bff815 	stw	r2,-32(fp)
1000fbb0:	e0fffe17 	ldw	r3,-8(fp)
1000fbb4:	e0bff817 	ldw	r2,-32(fp)
1000fbb8:	1885883a 	add	r2,r3,r2
1000fbbc:	10800003 	ldbu	r2,0(r2)
1000fbc0:	10803fcc 	andi	r2,r2,255
1000fbc4:	1080201c 	xori	r2,r2,128
1000fbc8:	10bfe004 	addi	r2,r2,-128
1000fbcc:	103fec1e 	bne	r2,zero,1000fb80 <__alt_data_end+0xf800fb80>
  if(i < 1 || i > 79) return 89; /*error: invalid keyword size*/
1000fbd0:	e0bff817 	ldw	r2,-32(fp)
1000fbd4:	10000326 	beq	r2,zero,1000fbe4 <addChunk_tEXt+0x98>
1000fbd8:	e0bff817 	ldw	r2,-32(fp)
1000fbdc:	10801430 	cmpltui	r2,r2,80
1000fbe0:	1000021e 	bne	r2,zero,1000fbec <addChunk_tEXt+0xa0>
1000fbe4:	00801644 	movi	r2,89
1000fbe8:	00002706 	br	1000fc88 <addChunk_tEXt+0x13c>
  ucvector_push_back(&text, 0); /*0 termination char*/
1000fbec:	e0bffa04 	addi	r2,fp,-24
1000fbf0:	1009883a 	mov	r4,r2
1000fbf4:	000b883a 	mov	r5,zero
1000fbf8:	00007e80 	call	100007e8 <ucvector_push_back>
  for(i = 0; textstring[i] != 0; ++i) ucvector_push_back(&text, (unsigned char)textstring[i]);
1000fbfc:	e03ff815 	stw	zero,-32(fp)
1000fc00:	00000c06 	br	1000fc34 <addChunk_tEXt+0xe8>
1000fc04:	e0ffff17 	ldw	r3,-4(fp)
1000fc08:	e0bff817 	ldw	r2,-32(fp)
1000fc0c:	1885883a 	add	r2,r3,r2
1000fc10:	10800003 	ldbu	r2,0(r2)
1000fc14:	10803fcc 	andi	r2,r2,255
1000fc18:	e0fffa04 	addi	r3,fp,-24
1000fc1c:	1809883a 	mov	r4,r3
1000fc20:	100b883a 	mov	r5,r2
1000fc24:	00007e80 	call	100007e8 <ucvector_push_back>
1000fc28:	e0bff817 	ldw	r2,-32(fp)
1000fc2c:	10800044 	addi	r2,r2,1
1000fc30:	e0bff815 	stw	r2,-32(fp)
1000fc34:	e0ffff17 	ldw	r3,-4(fp)
1000fc38:	e0bff817 	ldw	r2,-32(fp)
1000fc3c:	1885883a 	add	r2,r3,r2
1000fc40:	10800003 	ldbu	r2,0(r2)
1000fc44:	10803fcc 	andi	r2,r2,255
1000fc48:	1080201c 	xori	r2,r2,128
1000fc4c:	10bfe004 	addi	r2,r2,-128
1000fc50:	103fec1e 	bne	r2,zero,1000fc04 <__alt_data_end+0xf800fc04>
  error = addChunk(out, "tEXt", text.data, text.size);
1000fc54:	e0fffa17 	ldw	r3,-24(fp)
1000fc58:	e0bffb17 	ldw	r2,-20(fp)
1000fc5c:	e13ffd17 	ldw	r4,-12(fp)
1000fc60:	014400b4 	movhi	r5,4098
1000fc64:	294a9304 	addi	r5,r5,10828
1000fc68:	180d883a 	mov	r6,r3
1000fc6c:	100f883a 	mov	r7,r2
1000fc70:	000f5000 	call	1000f500 <addChunk>
1000fc74:	e0bff915 	stw	r2,-28(fp)
  ucvector_cleanup(&text);
1000fc78:	e0bffa04 	addi	r2,fp,-24
1000fc7c:	1009883a 	mov	r4,r2
1000fc80:	00006680 	call	10000668 <ucvector_cleanup>

  return error;
1000fc84:	e0bff917 	ldw	r2,-28(fp)
}
1000fc88:	e037883a 	mov	sp,fp
1000fc8c:	dfc00117 	ldw	ra,4(sp)
1000fc90:	df000017 	ldw	fp,0(sp)
1000fc94:	dec00204 	addi	sp,sp,8
1000fc98:	f800283a 	ret

1000fc9c <addChunk_zTXt>:

static unsigned addChunk_zTXt(ucvector* out, const char* keyword, const char* textstring,
                              LodePNGCompressSettings* zlibsettings)
{
1000fc9c:	defff004 	addi	sp,sp,-64
1000fca0:	dfc00f15 	stw	ra,60(sp)
1000fca4:	df000e15 	stw	fp,56(sp)
1000fca8:	df000e04 	addi	fp,sp,56
1000fcac:	e13ffc15 	stw	r4,-16(fp)
1000fcb0:	e17ffd15 	stw	r5,-12(fp)
1000fcb4:	e1bffe15 	stw	r6,-8(fp)
1000fcb8:	e1ffff15 	stw	r7,-4(fp)
  unsigned error = 0;
1000fcbc:	e03ff315 	stw	zero,-52(fp)
  ucvector data, compressed;
  size_t i, textsize = strlen(textstring);
1000fcc0:	e13ffe17 	ldw	r4,-8(fp)
1000fcc4:	001841c0 	call	1001841c <strlen>
1000fcc8:	e0bff515 	stw	r2,-44(fp)

  ucvector_init(&data);
1000fccc:	e0bff604 	addi	r2,fp,-40
1000fcd0:	1009883a 	mov	r4,r2
1000fcd4:	00006c00 	call	100006c0 <ucvector_init>
  ucvector_init(&compressed);
1000fcd8:	e0bff904 	addi	r2,fp,-28
1000fcdc:	1009883a 	mov	r4,r2
1000fce0:	00006c00 	call	100006c0 <ucvector_init>
  for(i = 0; keyword[i] != 0; ++i) ucvector_push_back(&data, (unsigned char)keyword[i]);
1000fce4:	e03ff415 	stw	zero,-48(fp)
1000fce8:	00000c06 	br	1000fd1c <addChunk_zTXt+0x80>
1000fcec:	e0fffd17 	ldw	r3,-12(fp)
1000fcf0:	e0bff417 	ldw	r2,-48(fp)
1000fcf4:	1885883a 	add	r2,r3,r2
1000fcf8:	10800003 	ldbu	r2,0(r2)
1000fcfc:	10803fcc 	andi	r2,r2,255
1000fd00:	e0fff604 	addi	r3,fp,-40
1000fd04:	1809883a 	mov	r4,r3
1000fd08:	100b883a 	mov	r5,r2
1000fd0c:	00007e80 	call	100007e8 <ucvector_push_back>
1000fd10:	e0bff417 	ldw	r2,-48(fp)
1000fd14:	10800044 	addi	r2,r2,1
1000fd18:	e0bff415 	stw	r2,-48(fp)
1000fd1c:	e0fffd17 	ldw	r3,-12(fp)
1000fd20:	e0bff417 	ldw	r2,-48(fp)
1000fd24:	1885883a 	add	r2,r3,r2
1000fd28:	10800003 	ldbu	r2,0(r2)
1000fd2c:	10803fcc 	andi	r2,r2,255
1000fd30:	1080201c 	xori	r2,r2,128
1000fd34:	10bfe004 	addi	r2,r2,-128
1000fd38:	103fec1e 	bne	r2,zero,1000fcec <__alt_data_end+0xf800fcec>
  if(i < 1 || i > 79) return 89; /*error: invalid keyword size*/
1000fd3c:	e0bff417 	ldw	r2,-48(fp)
1000fd40:	10000326 	beq	r2,zero,1000fd50 <addChunk_zTXt+0xb4>
1000fd44:	e0bff417 	ldw	r2,-48(fp)
1000fd48:	10801430 	cmpltui	r2,r2,80
1000fd4c:	1000021e 	bne	r2,zero,1000fd58 <addChunk_zTXt+0xbc>
1000fd50:	00801644 	movi	r2,89
1000fd54:	00003606 	br	1000fe30 <addChunk_zTXt+0x194>
  ucvector_push_back(&data, 0); /*0 termination char*/
1000fd58:	e0bff604 	addi	r2,fp,-40
1000fd5c:	1009883a 	mov	r4,r2
1000fd60:	000b883a 	mov	r5,zero
1000fd64:	00007e80 	call	100007e8 <ucvector_push_back>
  ucvector_push_back(&data, 0); /*compression method: 0*/
1000fd68:	e0bff604 	addi	r2,fp,-40
1000fd6c:	1009883a 	mov	r4,r2
1000fd70:	000b883a 	mov	r5,zero
1000fd74:	00007e80 	call	100007e8 <ucvector_push_back>

  error = zlib_compress(&compressed.data, &compressed.size,
1000fd78:	e0fff904 	addi	r3,fp,-28
1000fd7c:	e0bff904 	addi	r2,fp,-28
1000fd80:	10800104 	addi	r2,r2,4
1000fd84:	e13fff17 	ldw	r4,-4(fp)
1000fd88:	d9000015 	stw	r4,0(sp)
1000fd8c:	1809883a 	mov	r4,r3
1000fd90:	100b883a 	mov	r5,r2
1000fd94:	e1bffe17 	ldw	r6,-8(fp)
1000fd98:	e1fff517 	ldw	r7,-44(fp)
1000fd9c:	00061600 	call	10006160 <zlib_compress>
1000fda0:	e0bff315 	stw	r2,-52(fp)
                        (unsigned char*)textstring, textsize, zlibsettings);
  if(!error)
1000fda4:	e0bff317 	ldw	r2,-52(fp)
1000fda8:	10001a1e 	bne	r2,zero,1000fe14 <addChunk_zTXt+0x178>
  {
    for(i = 0; i != compressed.size; ++i) ucvector_push_back(&data, compressed.data[i]);
1000fdac:	e03ff415 	stw	zero,-48(fp)
1000fdb0:	00000c06 	br	1000fde4 <addChunk_zTXt+0x148>
1000fdb4:	e0fff917 	ldw	r3,-28(fp)
1000fdb8:	e0bff417 	ldw	r2,-48(fp)
1000fdbc:	1885883a 	add	r2,r3,r2
1000fdc0:	10800003 	ldbu	r2,0(r2)
1000fdc4:	10803fcc 	andi	r2,r2,255
1000fdc8:	e0fff604 	addi	r3,fp,-40
1000fdcc:	1809883a 	mov	r4,r3
1000fdd0:	100b883a 	mov	r5,r2
1000fdd4:	00007e80 	call	100007e8 <ucvector_push_back>
1000fdd8:	e0bff417 	ldw	r2,-48(fp)
1000fddc:	10800044 	addi	r2,r2,1
1000fde0:	e0bff415 	stw	r2,-48(fp)
1000fde4:	e0fffa17 	ldw	r3,-24(fp)
1000fde8:	e0bff417 	ldw	r2,-48(fp)
1000fdec:	18bff11e 	bne	r3,r2,1000fdb4 <__alt_data_end+0xf800fdb4>
    error = addChunk(out, "zTXt", data.data, data.size);
1000fdf0:	e0fff617 	ldw	r3,-40(fp)
1000fdf4:	e0bff717 	ldw	r2,-36(fp)
1000fdf8:	e13ffc17 	ldw	r4,-16(fp)
1000fdfc:	014400b4 	movhi	r5,4098
1000fe00:	294a9504 	addi	r5,r5,10836
1000fe04:	180d883a 	mov	r6,r3
1000fe08:	100f883a 	mov	r7,r2
1000fe0c:	000f5000 	call	1000f500 <addChunk>
1000fe10:	e0bff315 	stw	r2,-52(fp)
  }

  ucvector_cleanup(&compressed);
1000fe14:	e0bff904 	addi	r2,fp,-28
1000fe18:	1009883a 	mov	r4,r2
1000fe1c:	00006680 	call	10000668 <ucvector_cleanup>
  ucvector_cleanup(&data);
1000fe20:	e0bff604 	addi	r2,fp,-40
1000fe24:	1009883a 	mov	r4,r2
1000fe28:	00006680 	call	10000668 <ucvector_cleanup>
  return error;
1000fe2c:	e0bff317 	ldw	r2,-52(fp)
}
1000fe30:	e037883a 	mov	sp,fp
1000fe34:	dfc00117 	ldw	ra,4(sp)
1000fe38:	df000017 	ldw	fp,0(sp)
1000fe3c:	dec00204 	addi	sp,sp,8
1000fe40:	f800283a 	ret

1000fe44 <addChunk_iTXt>:

static unsigned addChunk_iTXt(ucvector* out, unsigned compressed, const char* keyword, const char* langtag,
                              const char* transkey, const char* textstring, LodePNGCompressSettings* zlibsettings)
{
1000fe44:	defff004 	addi	sp,sp,-64
1000fe48:	dfc00f15 	stw	ra,60(sp)
1000fe4c:	df000e15 	stw	fp,56(sp)
1000fe50:	df000e04 	addi	fp,sp,56
1000fe54:	e13ffc15 	stw	r4,-16(fp)
1000fe58:	e17ffd15 	stw	r5,-12(fp)
1000fe5c:	e1bffe15 	stw	r6,-8(fp)
1000fe60:	e1ffff15 	stw	r7,-4(fp)
  unsigned error = 0;
1000fe64:	e03ff315 	stw	zero,-52(fp)
  ucvector data;
  size_t i, textsize = strlen(textstring);
1000fe68:	e1000317 	ldw	r4,12(fp)
1000fe6c:	001841c0 	call	1001841c <strlen>
1000fe70:	e0bff515 	stw	r2,-44(fp)

  ucvector_init(&data);
1000fe74:	e0bff604 	addi	r2,fp,-40
1000fe78:	1009883a 	mov	r4,r2
1000fe7c:	00006c00 	call	100006c0 <ucvector_init>

  for(i = 0; keyword[i] != 0; ++i) ucvector_push_back(&data, (unsigned char)keyword[i]);
1000fe80:	e03ff415 	stw	zero,-48(fp)
1000fe84:	00000c06 	br	1000feb8 <addChunk_iTXt+0x74>
1000fe88:	e0fffe17 	ldw	r3,-8(fp)
1000fe8c:	e0bff417 	ldw	r2,-48(fp)
1000fe90:	1885883a 	add	r2,r3,r2
1000fe94:	10800003 	ldbu	r2,0(r2)
1000fe98:	10803fcc 	andi	r2,r2,255
1000fe9c:	e0fff604 	addi	r3,fp,-40
1000fea0:	1809883a 	mov	r4,r3
1000fea4:	100b883a 	mov	r5,r2
1000fea8:	00007e80 	call	100007e8 <ucvector_push_back>
1000feac:	e0bff417 	ldw	r2,-48(fp)
1000feb0:	10800044 	addi	r2,r2,1
1000feb4:	e0bff415 	stw	r2,-48(fp)
1000feb8:	e0fffe17 	ldw	r3,-8(fp)
1000febc:	e0bff417 	ldw	r2,-48(fp)
1000fec0:	1885883a 	add	r2,r3,r2
1000fec4:	10800003 	ldbu	r2,0(r2)
1000fec8:	10803fcc 	andi	r2,r2,255
1000fecc:	1080201c 	xori	r2,r2,128
1000fed0:	10bfe004 	addi	r2,r2,-128
1000fed4:	103fec1e 	bne	r2,zero,1000fe88 <__alt_data_end+0xf800fe88>
  if(i < 1 || i > 79) return 89; /*error: invalid keyword size*/
1000fed8:	e0bff417 	ldw	r2,-48(fp)
1000fedc:	10000326 	beq	r2,zero,1000feec <addChunk_iTXt+0xa8>
1000fee0:	e0bff417 	ldw	r2,-48(fp)
1000fee4:	10801430 	cmpltui	r2,r2,80
1000fee8:	1000021e 	bne	r2,zero,1000fef4 <addChunk_iTXt+0xb0>
1000feec:	00801644 	movi	r2,89
1000fef0:	00008f06 	br	10010130 <addChunk_iTXt+0x2ec>
  ucvector_push_back(&data, 0); /*null termination char*/
1000fef4:	e0bff604 	addi	r2,fp,-40
1000fef8:	1009883a 	mov	r4,r2
1000fefc:	000b883a 	mov	r5,zero
1000ff00:	00007e80 	call	100007e8 <ucvector_push_back>
  ucvector_push_back(&data, compressed ? 1 : 0); /*compression flag*/
1000ff04:	e0bffd17 	ldw	r2,-12(fp)
1000ff08:	1004c03a 	cmpne	r2,r2,zero
1000ff0c:	10803fcc 	andi	r2,r2,255
1000ff10:	e0fff604 	addi	r3,fp,-40
1000ff14:	1809883a 	mov	r4,r3
1000ff18:	100b883a 	mov	r5,r2
1000ff1c:	00007e80 	call	100007e8 <ucvector_push_back>
  ucvector_push_back(&data, 0); /*compression method*/
1000ff20:	e0bff604 	addi	r2,fp,-40
1000ff24:	1009883a 	mov	r4,r2
1000ff28:	000b883a 	mov	r5,zero
1000ff2c:	00007e80 	call	100007e8 <ucvector_push_back>
  for(i = 0; langtag[i] != 0; ++i) ucvector_push_back(&data, (unsigned char)langtag[i]);
1000ff30:	e03ff415 	stw	zero,-48(fp)
1000ff34:	00000c06 	br	1000ff68 <addChunk_iTXt+0x124>
1000ff38:	e0ffff17 	ldw	r3,-4(fp)
1000ff3c:	e0bff417 	ldw	r2,-48(fp)
1000ff40:	1885883a 	add	r2,r3,r2
1000ff44:	10800003 	ldbu	r2,0(r2)
1000ff48:	10803fcc 	andi	r2,r2,255
1000ff4c:	e0fff604 	addi	r3,fp,-40
1000ff50:	1809883a 	mov	r4,r3
1000ff54:	100b883a 	mov	r5,r2
1000ff58:	00007e80 	call	100007e8 <ucvector_push_back>
1000ff5c:	e0bff417 	ldw	r2,-48(fp)
1000ff60:	10800044 	addi	r2,r2,1
1000ff64:	e0bff415 	stw	r2,-48(fp)
1000ff68:	e0ffff17 	ldw	r3,-4(fp)
1000ff6c:	e0bff417 	ldw	r2,-48(fp)
1000ff70:	1885883a 	add	r2,r3,r2
1000ff74:	10800003 	ldbu	r2,0(r2)
1000ff78:	10803fcc 	andi	r2,r2,255
1000ff7c:	1080201c 	xori	r2,r2,128
1000ff80:	10bfe004 	addi	r2,r2,-128
1000ff84:	103fec1e 	bne	r2,zero,1000ff38 <__alt_data_end+0xf800ff38>
  ucvector_push_back(&data, 0); /*null termination char*/
1000ff88:	e0bff604 	addi	r2,fp,-40
1000ff8c:	1009883a 	mov	r4,r2
1000ff90:	000b883a 	mov	r5,zero
1000ff94:	00007e80 	call	100007e8 <ucvector_push_back>
  for(i = 0; transkey[i] != 0; ++i) ucvector_push_back(&data, (unsigned char)transkey[i]);
1000ff98:	e03ff415 	stw	zero,-48(fp)
1000ff9c:	00000c06 	br	1000ffd0 <addChunk_iTXt+0x18c>
1000ffa0:	e0c00217 	ldw	r3,8(fp)
1000ffa4:	e0bff417 	ldw	r2,-48(fp)
1000ffa8:	1885883a 	add	r2,r3,r2
1000ffac:	10800003 	ldbu	r2,0(r2)
1000ffb0:	10803fcc 	andi	r2,r2,255
1000ffb4:	e0fff604 	addi	r3,fp,-40
1000ffb8:	1809883a 	mov	r4,r3
1000ffbc:	100b883a 	mov	r5,r2
1000ffc0:	00007e80 	call	100007e8 <ucvector_push_back>
1000ffc4:	e0bff417 	ldw	r2,-48(fp)
1000ffc8:	10800044 	addi	r2,r2,1
1000ffcc:	e0bff415 	stw	r2,-48(fp)
1000ffd0:	e0c00217 	ldw	r3,8(fp)
1000ffd4:	e0bff417 	ldw	r2,-48(fp)
1000ffd8:	1885883a 	add	r2,r3,r2
1000ffdc:	10800003 	ldbu	r2,0(r2)
1000ffe0:	10803fcc 	andi	r2,r2,255
1000ffe4:	1080201c 	xori	r2,r2,128
1000ffe8:	10bfe004 	addi	r2,r2,-128
1000ffec:	103fec1e 	bne	r2,zero,1000ffa0 <__alt_data_end+0xf800ffa0>
  ucvector_push_back(&data, 0); /*null termination char*/
1000fff0:	e0bff604 	addi	r2,fp,-40
1000fff4:	1009883a 	mov	r4,r2
1000fff8:	000b883a 	mov	r5,zero
1000fffc:	00007e80 	call	100007e8 <ucvector_push_back>

  if(compressed)
10010000:	e0bffd17 	ldw	r2,-12(fp)
10010004:	10002526 	beq	r2,zero,1001009c <addChunk_iTXt+0x258>
  {
    ucvector compressed_data;
    ucvector_init(&compressed_data);
10010008:	e0bff904 	addi	r2,fp,-28
1001000c:	1009883a 	mov	r4,r2
10010010:	00006c00 	call	100006c0 <ucvector_init>
    error = zlib_compress(&compressed_data.data, &compressed_data.size,
10010014:	e0fff904 	addi	r3,fp,-28
10010018:	e0bff904 	addi	r2,fp,-28
1001001c:	10800104 	addi	r2,r2,4
10010020:	e1000417 	ldw	r4,16(fp)
10010024:	d9000015 	stw	r4,0(sp)
10010028:	1809883a 	mov	r4,r3
1001002c:	100b883a 	mov	r5,r2
10010030:	e1800317 	ldw	r6,12(fp)
10010034:	e1fff517 	ldw	r7,-44(fp)
10010038:	00061600 	call	10006160 <zlib_compress>
1001003c:	e0bff315 	stw	r2,-52(fp)
                          (unsigned char*)textstring, textsize, zlibsettings);
    if(!error)
10010040:	e0bff317 	ldw	r2,-52(fp)
10010044:	1000111e 	bne	r2,zero,1001008c <addChunk_iTXt+0x248>
    {
      for(i = 0; i != compressed_data.size; ++i) ucvector_push_back(&data, compressed_data.data[i]);
10010048:	e03ff415 	stw	zero,-48(fp)
1001004c:	00000c06 	br	10010080 <addChunk_iTXt+0x23c>
10010050:	e0fff917 	ldw	r3,-28(fp)
10010054:	e0bff417 	ldw	r2,-48(fp)
10010058:	1885883a 	add	r2,r3,r2
1001005c:	10800003 	ldbu	r2,0(r2)
10010060:	10803fcc 	andi	r2,r2,255
10010064:	e0fff604 	addi	r3,fp,-40
10010068:	1809883a 	mov	r4,r3
1001006c:	100b883a 	mov	r5,r2
10010070:	00007e80 	call	100007e8 <ucvector_push_back>
10010074:	e0bff417 	ldw	r2,-48(fp)
10010078:	10800044 	addi	r2,r2,1
1001007c:	e0bff415 	stw	r2,-48(fp)
10010080:	e0fffa17 	ldw	r3,-24(fp)
10010084:	e0bff417 	ldw	r2,-48(fp)
10010088:	18bff11e 	bne	r3,r2,10010050 <__alt_data_end+0xf8010050>
    }
    ucvector_cleanup(&compressed_data);
1001008c:	e0bff904 	addi	r2,fp,-28
10010090:	1009883a 	mov	r4,r2
10010094:	00006680 	call	10000668 <ucvector_cleanup>
10010098:	00001606 	br	100100f4 <addChunk_iTXt+0x2b0>
  }
  else /*not compressed*/
  {
    for(i = 0; textstring[i] != 0; ++i) ucvector_push_back(&data, (unsigned char)textstring[i]);
1001009c:	e03ff415 	stw	zero,-48(fp)
100100a0:	00000c06 	br	100100d4 <addChunk_iTXt+0x290>
100100a4:	e0c00317 	ldw	r3,12(fp)
100100a8:	e0bff417 	ldw	r2,-48(fp)
100100ac:	1885883a 	add	r2,r3,r2
100100b0:	10800003 	ldbu	r2,0(r2)
100100b4:	10803fcc 	andi	r2,r2,255
100100b8:	e0fff604 	addi	r3,fp,-40
100100bc:	1809883a 	mov	r4,r3
100100c0:	100b883a 	mov	r5,r2
100100c4:	00007e80 	call	100007e8 <ucvector_push_back>
100100c8:	e0bff417 	ldw	r2,-48(fp)
100100cc:	10800044 	addi	r2,r2,1
100100d0:	e0bff415 	stw	r2,-48(fp)
100100d4:	e0c00317 	ldw	r3,12(fp)
100100d8:	e0bff417 	ldw	r2,-48(fp)
100100dc:	1885883a 	add	r2,r3,r2
100100e0:	10800003 	ldbu	r2,0(r2)
100100e4:	10803fcc 	andi	r2,r2,255
100100e8:	1080201c 	xori	r2,r2,128
100100ec:	10bfe004 	addi	r2,r2,-128
100100f0:	103fec1e 	bne	r2,zero,100100a4 <__alt_data_end+0xf80100a4>
  }

  if(!error) error = addChunk(out, "iTXt", data.data, data.size);
100100f4:	e0bff317 	ldw	r2,-52(fp)
100100f8:	1000091e 	bne	r2,zero,10010120 <addChunk_iTXt+0x2dc>
100100fc:	e0fff617 	ldw	r3,-40(fp)
10010100:	e0bff717 	ldw	r2,-36(fp)
10010104:	e13ffc17 	ldw	r4,-16(fp)
10010108:	014400b4 	movhi	r5,4098
1001010c:	294a9704 	addi	r5,r5,10844
10010110:	180d883a 	mov	r6,r3
10010114:	100f883a 	mov	r7,r2
10010118:	000f5000 	call	1000f500 <addChunk>
1001011c:	e0bff315 	stw	r2,-52(fp)
  ucvector_cleanup(&data);
10010120:	e0bff604 	addi	r2,fp,-40
10010124:	1009883a 	mov	r4,r2
10010128:	00006680 	call	10000668 <ucvector_cleanup>
  return error;
1001012c:	e0bff317 	ldw	r2,-52(fp)
}
10010130:	e037883a 	mov	sp,fp
10010134:	dfc00117 	ldw	ra,4(sp)
10010138:	df000017 	ldw	fp,0(sp)
1001013c:	dec00204 	addi	sp,sp,8
10010140:	f800283a 	ret

10010144 <addChunk_bKGD>:

static unsigned addChunk_bKGD(ucvector* out, const LodePNGInfo* info)
{
10010144:	defff804 	addi	sp,sp,-32
10010148:	dfc00715 	stw	ra,28(sp)
1001014c:	df000615 	stw	fp,24(sp)
10010150:	df000604 	addi	fp,sp,24
10010154:	e13ffe15 	stw	r4,-8(fp)
10010158:	e17fff15 	stw	r5,-4(fp)
  unsigned error = 0;
1001015c:	e03ffa15 	stw	zero,-24(fp)
  ucvector bKGD;
  ucvector_init(&bKGD);
10010160:	e0bffb04 	addi	r2,fp,-20
10010164:	1009883a 	mov	r4,r2
10010168:	00006c00 	call	100006c0 <ucvector_init>
  if(info->color.colortype == LCT_GREY || info->color.colortype == LCT_GREY_ALPHA)
1001016c:	e0bfff17 	ldw	r2,-4(fp)
10010170:	10800317 	ldw	r2,12(r2)
10010174:	10000426 	beq	r2,zero,10010188 <addChunk_bKGD+0x44>
10010178:	e0bfff17 	ldw	r2,-4(fp)
1001017c:	10800317 	ldw	r2,12(r2)
10010180:	10800118 	cmpnei	r2,r2,4
10010184:	1000101e 	bne	r2,zero,100101c8 <addChunk_bKGD+0x84>
  {
    ucvector_push_back(&bKGD, (unsigned char)(info->background_r / 256));
10010188:	e0bfff17 	ldw	r2,-4(fp)
1001018c:	10800c17 	ldw	r2,48(r2)
10010190:	1004d23a 	srli	r2,r2,8
10010194:	10803fcc 	andi	r2,r2,255
10010198:	e0fffb04 	addi	r3,fp,-20
1001019c:	1809883a 	mov	r4,r3
100101a0:	100b883a 	mov	r5,r2
100101a4:	00007e80 	call	100007e8 <ucvector_push_back>
    ucvector_push_back(&bKGD, (unsigned char)(info->background_r % 256));
100101a8:	e0bfff17 	ldw	r2,-4(fp)
100101ac:	10800c17 	ldw	r2,48(r2)
100101b0:	10803fcc 	andi	r2,r2,255
100101b4:	e0fffb04 	addi	r3,fp,-20
100101b8:	1809883a 	mov	r4,r3
100101bc:	100b883a 	mov	r5,r2
100101c0:	00007e80 	call	100007e8 <ucvector_push_back>
100101c4:	00004106 	br	100102cc <addChunk_bKGD+0x188>
  }
  else if(info->color.colortype == LCT_RGB || info->color.colortype == LCT_RGBA)
100101c8:	e0bfff17 	ldw	r2,-4(fp)
100101cc:	10800317 	ldw	r2,12(r2)
100101d0:	108000a0 	cmpeqi	r2,r2,2
100101d4:	1000041e 	bne	r2,zero,100101e8 <addChunk_bKGD+0xa4>
100101d8:	e0bfff17 	ldw	r2,-4(fp)
100101dc:	10800317 	ldw	r2,12(r2)
100101e0:	10800198 	cmpnei	r2,r2,6
100101e4:	10002e1e 	bne	r2,zero,100102a0 <addChunk_bKGD+0x15c>
  {
    ucvector_push_back(&bKGD, (unsigned char)(info->background_r / 256));
100101e8:	e0bfff17 	ldw	r2,-4(fp)
100101ec:	10800c17 	ldw	r2,48(r2)
100101f0:	1004d23a 	srli	r2,r2,8
100101f4:	10803fcc 	andi	r2,r2,255
100101f8:	e0fffb04 	addi	r3,fp,-20
100101fc:	1809883a 	mov	r4,r3
10010200:	100b883a 	mov	r5,r2
10010204:	00007e80 	call	100007e8 <ucvector_push_back>
    ucvector_push_back(&bKGD, (unsigned char)(info->background_r % 256));
10010208:	e0bfff17 	ldw	r2,-4(fp)
1001020c:	10800c17 	ldw	r2,48(r2)
10010210:	10803fcc 	andi	r2,r2,255
10010214:	e0fffb04 	addi	r3,fp,-20
10010218:	1809883a 	mov	r4,r3
1001021c:	100b883a 	mov	r5,r2
10010220:	00007e80 	call	100007e8 <ucvector_push_back>
    ucvector_push_back(&bKGD, (unsigned char)(info->background_g / 256));
10010224:	e0bfff17 	ldw	r2,-4(fp)
10010228:	10800d17 	ldw	r2,52(r2)
1001022c:	1004d23a 	srli	r2,r2,8
10010230:	10803fcc 	andi	r2,r2,255
10010234:	e0fffb04 	addi	r3,fp,-20
10010238:	1809883a 	mov	r4,r3
1001023c:	100b883a 	mov	r5,r2
10010240:	00007e80 	call	100007e8 <ucvector_push_back>
    ucvector_push_back(&bKGD, (unsigned char)(info->background_g % 256));
10010244:	e0bfff17 	ldw	r2,-4(fp)
10010248:	10800d17 	ldw	r2,52(r2)
1001024c:	10803fcc 	andi	r2,r2,255
10010250:	e0fffb04 	addi	r3,fp,-20
10010254:	1809883a 	mov	r4,r3
10010258:	100b883a 	mov	r5,r2
1001025c:	00007e80 	call	100007e8 <ucvector_push_back>
    ucvector_push_back(&bKGD, (unsigned char)(info->background_b / 256));
10010260:	e0bfff17 	ldw	r2,-4(fp)
10010264:	10800e17 	ldw	r2,56(r2)
10010268:	1004d23a 	srli	r2,r2,8
1001026c:	10803fcc 	andi	r2,r2,255
10010270:	e0fffb04 	addi	r3,fp,-20
10010274:	1809883a 	mov	r4,r3
10010278:	100b883a 	mov	r5,r2
1001027c:	00007e80 	call	100007e8 <ucvector_push_back>
    ucvector_push_back(&bKGD, (unsigned char)(info->background_b % 256));
10010280:	e0bfff17 	ldw	r2,-4(fp)
10010284:	10800e17 	ldw	r2,56(r2)
10010288:	10803fcc 	andi	r2,r2,255
1001028c:	e0fffb04 	addi	r3,fp,-20
10010290:	1809883a 	mov	r4,r3
10010294:	100b883a 	mov	r5,r2
10010298:	00007e80 	call	100007e8 <ucvector_push_back>
1001029c:	00000b06 	br	100102cc <addChunk_bKGD+0x188>
  }
  else if(info->color.colortype == LCT_PALETTE)
100102a0:	e0bfff17 	ldw	r2,-4(fp)
100102a4:	10800317 	ldw	r2,12(r2)
100102a8:	108000d8 	cmpnei	r2,r2,3
100102ac:	1000071e 	bne	r2,zero,100102cc <addChunk_bKGD+0x188>
  {
    ucvector_push_back(&bKGD, (unsigned char)(info->background_r % 256)); /*palette index*/
100102b0:	e0bfff17 	ldw	r2,-4(fp)
100102b4:	10800c17 	ldw	r2,48(r2)
100102b8:	10803fcc 	andi	r2,r2,255
100102bc:	e0fffb04 	addi	r3,fp,-20
100102c0:	1809883a 	mov	r4,r3
100102c4:	100b883a 	mov	r5,r2
100102c8:	00007e80 	call	100007e8 <ucvector_push_back>
  }

  error = addChunk(out, "bKGD", bKGD.data, bKGD.size);
100102cc:	e0fffb17 	ldw	r3,-20(fp)
100102d0:	e0bffc17 	ldw	r2,-16(fp)
100102d4:	e13ffe17 	ldw	r4,-8(fp)
100102d8:	014400b4 	movhi	r5,4098
100102dc:	294a9104 	addi	r5,r5,10820
100102e0:	180d883a 	mov	r6,r3
100102e4:	100f883a 	mov	r7,r2
100102e8:	000f5000 	call	1000f500 <addChunk>
100102ec:	e0bffa15 	stw	r2,-24(fp)
  ucvector_cleanup(&bKGD);
100102f0:	e0bffb04 	addi	r2,fp,-20
100102f4:	1009883a 	mov	r4,r2
100102f8:	00006680 	call	10000668 <ucvector_cleanup>

  return error;
100102fc:	e0bffa17 	ldw	r2,-24(fp)
}
10010300:	e037883a 	mov	sp,fp
10010304:	dfc00117 	ldw	ra,4(sp)
10010308:	df000017 	ldw	fp,0(sp)
1001030c:	dec00204 	addi	sp,sp,8
10010310:	f800283a 	ret

10010314 <addChunk_tIME>:

static unsigned addChunk_tIME(ucvector* out, const LodePNGTime* time)
{
10010314:	defffa04 	addi	sp,sp,-24
10010318:	dfc00515 	stw	ra,20(sp)
1001031c:	df000415 	stw	fp,16(sp)
10010320:	df000404 	addi	fp,sp,16
10010324:	e13ffe15 	stw	r4,-8(fp)
10010328:	e17fff15 	stw	r5,-4(fp)
  unsigned error = 0;
1001032c:	e03ffc15 	stw	zero,-16(fp)
  unsigned char* data = (unsigned char*)lodepng_malloc(7);
10010330:	010001c4 	movi	r4,7
10010334:	00001f40 	call	100001f4 <lodepng_malloc>
10010338:	e0bffd15 	stw	r2,-12(fp)
  if(!data) return 83; /*alloc fail*/
1001033c:	e0bffd17 	ldw	r2,-12(fp)
10010340:	1000021e 	bne	r2,zero,1001034c <addChunk_tIME+0x38>
10010344:	008014c4 	movi	r2,83
10010348:	00002e06 	br	10010404 <addChunk_tIME+0xf0>
  data[0] = (unsigned char)(time->year / 256);
1001034c:	e0bfff17 	ldw	r2,-4(fp)
10010350:	10800017 	ldw	r2,0(r2)
10010354:	1004d23a 	srli	r2,r2,8
10010358:	1007883a 	mov	r3,r2
1001035c:	e0bffd17 	ldw	r2,-12(fp)
10010360:	10c00005 	stb	r3,0(r2)
  data[1] = (unsigned char)(time->year % 256);
10010364:	e0bffd17 	ldw	r2,-12(fp)
10010368:	10800044 	addi	r2,r2,1
1001036c:	e0ffff17 	ldw	r3,-4(fp)
10010370:	18c00017 	ldw	r3,0(r3)
10010374:	10c00005 	stb	r3,0(r2)
  data[2] = (unsigned char)time->month;
10010378:	e0bffd17 	ldw	r2,-12(fp)
1001037c:	10800084 	addi	r2,r2,2
10010380:	e0ffff17 	ldw	r3,-4(fp)
10010384:	18c00117 	ldw	r3,4(r3)
10010388:	10c00005 	stb	r3,0(r2)
  data[3] = (unsigned char)time->day;
1001038c:	e0bffd17 	ldw	r2,-12(fp)
10010390:	108000c4 	addi	r2,r2,3
10010394:	e0ffff17 	ldw	r3,-4(fp)
10010398:	18c00217 	ldw	r3,8(r3)
1001039c:	10c00005 	stb	r3,0(r2)
  data[4] = (unsigned char)time->hour;
100103a0:	e0bffd17 	ldw	r2,-12(fp)
100103a4:	10800104 	addi	r2,r2,4
100103a8:	e0ffff17 	ldw	r3,-4(fp)
100103ac:	18c00317 	ldw	r3,12(r3)
100103b0:	10c00005 	stb	r3,0(r2)
  data[5] = (unsigned char)time->minute;
100103b4:	e0bffd17 	ldw	r2,-12(fp)
100103b8:	10800144 	addi	r2,r2,5
100103bc:	e0ffff17 	ldw	r3,-4(fp)
100103c0:	18c00417 	ldw	r3,16(r3)
100103c4:	10c00005 	stb	r3,0(r2)
  data[6] = (unsigned char)time->second;
100103c8:	e0bffd17 	ldw	r2,-12(fp)
100103cc:	10800184 	addi	r2,r2,6
100103d0:	e0ffff17 	ldw	r3,-4(fp)
100103d4:	18c00517 	ldw	r3,20(r3)
100103d8:	10c00005 	stb	r3,0(r2)
  error = addChunk(out, "tIME", data, 7);
100103dc:	e13ffe17 	ldw	r4,-8(fp)
100103e0:	014400b4 	movhi	r5,4098
100103e4:	294a9904 	addi	r5,r5,10852
100103e8:	e1bffd17 	ldw	r6,-12(fp)
100103ec:	01c001c4 	movi	r7,7
100103f0:	000f5000 	call	1000f500 <addChunk>
100103f4:	e0bffc15 	stw	r2,-16(fp)
  lodepng_free(data);
100103f8:	e13ffd17 	ldw	r4,-12(fp)
100103fc:	000025c0 	call	1000025c <lodepng_free>
  return error;
10010400:	e0bffc17 	ldw	r2,-16(fp)
}
10010404:	e037883a 	mov	sp,fp
10010408:	dfc00117 	ldw	ra,4(sp)
1001040c:	df000017 	ldw	fp,0(sp)
10010410:	dec00204 	addi	sp,sp,8
10010414:	f800283a 	ret

10010418 <addChunk_pHYs>:

static unsigned addChunk_pHYs(ucvector* out, const LodePNGInfo* info)
{
10010418:	defff804 	addi	sp,sp,-32
1001041c:	dfc00715 	stw	ra,28(sp)
10010420:	df000615 	stw	fp,24(sp)
10010424:	df000604 	addi	fp,sp,24
10010428:	e13ffe15 	stw	r4,-8(fp)
1001042c:	e17fff15 	stw	r5,-4(fp)
  unsigned error = 0;
10010430:	e03ffa15 	stw	zero,-24(fp)
  ucvector data;
  ucvector_init(&data);
10010434:	e0bffb04 	addi	r2,fp,-20
10010438:	1009883a 	mov	r4,r2
1001043c:	00006c00 	call	100006c0 <ucvector_init>

  lodepng_add32bitInt(&data, info->phys_x);
10010440:	e0bfff17 	ldw	r2,-4(fp)
10010444:	10801f17 	ldw	r2,124(r2)
10010448:	e0fffb04 	addi	r3,fp,-20
1001044c:	1809883a 	mov	r4,r3
10010450:	100b883a 	mov	r5,r2
10010454:	0000ac80 	call	10000ac8 <lodepng_add32bitInt>
  lodepng_add32bitInt(&data, info->phys_y);
10010458:	e0bfff17 	ldw	r2,-4(fp)
1001045c:	10802017 	ldw	r2,128(r2)
10010460:	e0fffb04 	addi	r3,fp,-20
10010464:	1809883a 	mov	r4,r3
10010468:	100b883a 	mov	r5,r2
1001046c:	0000ac80 	call	10000ac8 <lodepng_add32bitInt>
  ucvector_push_back(&data, info->phys_unit);
10010470:	e0bfff17 	ldw	r2,-4(fp)
10010474:	10802117 	ldw	r2,132(r2)
10010478:	10803fcc 	andi	r2,r2,255
1001047c:	e0fffb04 	addi	r3,fp,-20
10010480:	1809883a 	mov	r4,r3
10010484:	100b883a 	mov	r5,r2
10010488:	00007e80 	call	100007e8 <ucvector_push_back>

  error = addChunk(out, "pHYs", data.data, data.size);
1001048c:	e0fffb17 	ldw	r3,-20(fp)
10010490:	e0bffc17 	ldw	r2,-16(fp)
10010494:	e13ffe17 	ldw	r4,-8(fp)
10010498:	014400b4 	movhi	r5,4098
1001049c:	294a9b04 	addi	r5,r5,10860
100104a0:	180d883a 	mov	r6,r3
100104a4:	100f883a 	mov	r7,r2
100104a8:	000f5000 	call	1000f500 <addChunk>
100104ac:	e0bffa15 	stw	r2,-24(fp)
  ucvector_cleanup(&data);
100104b0:	e0bffb04 	addi	r2,fp,-20
100104b4:	1009883a 	mov	r4,r2
100104b8:	00006680 	call	10000668 <ucvector_cleanup>

  return error;
100104bc:	e0bffa17 	ldw	r2,-24(fp)
}
100104c0:	e037883a 	mov	sp,fp
100104c4:	dfc00117 	ldw	ra,4(sp)
100104c8:	df000017 	ldw	fp,0(sp)
100104cc:	dec00204 	addi	sp,sp,8
100104d0:	f800283a 	ret

100104d4 <filterScanline>:

#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/

static void filterScanline(unsigned char* out, const unsigned char* scanline, const unsigned char* prevline,
                           size_t length, size_t bytewidth, unsigned char filterType)
{
100104d4:	defff604 	addi	sp,sp,-40
100104d8:	dfc00915 	stw	ra,36(sp)
100104dc:	df000815 	stw	fp,32(sp)
100104e0:	dc400715 	stw	r17,28(sp)
100104e4:	dc000615 	stw	r16,24(sp)
100104e8:	df000604 	addi	fp,sp,24
100104ec:	e13ffb15 	stw	r4,-20(fp)
100104f0:	e17ffc15 	stw	r5,-16(fp)
100104f4:	e1bffd15 	stw	r6,-12(fp)
100104f8:	e1fffe15 	stw	r7,-8(fp)
100104fc:	e0800517 	ldw	r2,20(fp)
10010500:	e0bfff05 	stb	r2,-4(fp)
  size_t i;
  switch(filterType)
10010504:	e0bfff03 	ldbu	r2,-4(fp)
10010508:	10c00168 	cmpgeui	r3,r2,5
1001050c:	1801421e 	bne	r3,zero,10010a18 <filterScanline+0x544>
10010510:	1085883a 	add	r2,r2,r2
10010514:	1087883a 	add	r3,r2,r2
10010518:	00840074 	movhi	r2,4097
1001051c:	10814b04 	addi	r2,r2,1324
10010520:	1885883a 	add	r2,r3,r2
10010524:	10800017 	ldw	r2,0(r2)
10010528:	1000683a 	jmp	r2
1001052c:	10010540 	call	11001054 <_gp+0xfd34a8>
10010530:	10010584 	addi	zero,r2,1046
10010534:	10010628 	cmpgeui	zero,r2,1048
10010538:	100106d0 	cmplti	zero,r2,1051
1001053c:	10010870 	cmpltui	zero,r2,1057
  {
    case 0: /*None*/
      for(i = 0; i != length; ++i) out[i] = scanline[i];
10010540:	e03ffa15 	stw	zero,-24(fp)
10010544:	00000b06 	br	10010574 <filterScanline+0xa0>
10010548:	e0fffb17 	ldw	r3,-20(fp)
1001054c:	e0bffa17 	ldw	r2,-24(fp)
10010550:	1885883a 	add	r2,r3,r2
10010554:	e13ffc17 	ldw	r4,-16(fp)
10010558:	e0fffa17 	ldw	r3,-24(fp)
1001055c:	20c7883a 	add	r3,r4,r3
10010560:	18c00003 	ldbu	r3,0(r3)
10010564:	10c00005 	stb	r3,0(r2)
10010568:	e0bffa17 	ldw	r2,-24(fp)
1001056c:	10800044 	addi	r2,r2,1
10010570:	e0bffa15 	stw	r2,-24(fp)
10010574:	e0fffa17 	ldw	r3,-24(fp)
10010578:	e0bffe17 	ldw	r2,-8(fp)
1001057c:	18bff21e 	bne	r3,r2,10010548 <__alt_data_end+0xf8010548>
      break;
10010580:	00012606 	br	10010a1c <filterScanline+0x548>
    case 1: /*Sub*/
      for(i = 0; i != bytewidth; ++i) out[i] = scanline[i];
10010584:	e03ffa15 	stw	zero,-24(fp)
10010588:	00000b06 	br	100105b8 <filterScanline+0xe4>
1001058c:	e0fffb17 	ldw	r3,-20(fp)
10010590:	e0bffa17 	ldw	r2,-24(fp)
10010594:	1885883a 	add	r2,r3,r2
10010598:	e13ffc17 	ldw	r4,-16(fp)
1001059c:	e0fffa17 	ldw	r3,-24(fp)
100105a0:	20c7883a 	add	r3,r4,r3
100105a4:	18c00003 	ldbu	r3,0(r3)
100105a8:	10c00005 	stb	r3,0(r2)
100105ac:	e0bffa17 	ldw	r2,-24(fp)
100105b0:	10800044 	addi	r2,r2,1
100105b4:	e0bffa15 	stw	r2,-24(fp)
100105b8:	e0fffa17 	ldw	r3,-24(fp)
100105bc:	e0800417 	ldw	r2,16(fp)
100105c0:	18bff21e 	bne	r3,r2,1001058c <__alt_data_end+0xf801058c>
      for(i = bytewidth; i < length; ++i) out[i] = scanline[i] - scanline[i - bytewidth];
100105c4:	e0800417 	ldw	r2,16(fp)
100105c8:	e0bffa15 	stw	r2,-24(fp)
100105cc:	00001206 	br	10010618 <filterScanline+0x144>
100105d0:	e0fffb17 	ldw	r3,-20(fp)
100105d4:	e0bffa17 	ldw	r2,-24(fp)
100105d8:	1885883a 	add	r2,r3,r2
100105dc:	e13ffc17 	ldw	r4,-16(fp)
100105e0:	e0fffa17 	ldw	r3,-24(fp)
100105e4:	20c7883a 	add	r3,r4,r3
100105e8:	19000003 	ldbu	r4,0(r3)
100105ec:	e17ffa17 	ldw	r5,-24(fp)
100105f0:	e0c00417 	ldw	r3,16(fp)
100105f4:	28c7c83a 	sub	r3,r5,r3
100105f8:	e17ffc17 	ldw	r5,-16(fp)
100105fc:	28c7883a 	add	r3,r5,r3
10010600:	18c00003 	ldbu	r3,0(r3)
10010604:	20c7c83a 	sub	r3,r4,r3
10010608:	10c00005 	stb	r3,0(r2)
1001060c:	e0bffa17 	ldw	r2,-24(fp)
10010610:	10800044 	addi	r2,r2,1
10010614:	e0bffa15 	stw	r2,-24(fp)
10010618:	e0fffa17 	ldw	r3,-24(fp)
1001061c:	e0bffe17 	ldw	r2,-8(fp)
10010620:	18bfeb36 	bltu	r3,r2,100105d0 <__alt_data_end+0xf80105d0>
      break;
10010624:	0000fd06 	br	10010a1c <filterScanline+0x548>
    case 2: /*Up*/
      if(prevline)
10010628:	e0bffd17 	ldw	r2,-12(fp)
1001062c:	10001626 	beq	r2,zero,10010688 <filterScanline+0x1b4>
      {
        for(i = 0; i != length; ++i) out[i] = scanline[i] - prevline[i];
10010630:	e03ffa15 	stw	zero,-24(fp)
10010634:	00001006 	br	10010678 <filterScanline+0x1a4>
10010638:	e0fffb17 	ldw	r3,-20(fp)
1001063c:	e0bffa17 	ldw	r2,-24(fp)
10010640:	1885883a 	add	r2,r3,r2
10010644:	e13ffc17 	ldw	r4,-16(fp)
10010648:	e0fffa17 	ldw	r3,-24(fp)
1001064c:	20c7883a 	add	r3,r4,r3
10010650:	19000003 	ldbu	r4,0(r3)
10010654:	e17ffd17 	ldw	r5,-12(fp)
10010658:	e0fffa17 	ldw	r3,-24(fp)
1001065c:	28c7883a 	add	r3,r5,r3
10010660:	18c00003 	ldbu	r3,0(r3)
10010664:	20c7c83a 	sub	r3,r4,r3
10010668:	10c00005 	stb	r3,0(r2)
1001066c:	e0bffa17 	ldw	r2,-24(fp)
10010670:	10800044 	addi	r2,r2,1
10010674:	e0bffa15 	stw	r2,-24(fp)
10010678:	e0fffa17 	ldw	r3,-24(fp)
1001067c:	e0bffe17 	ldw	r2,-8(fp)
10010680:	18bfed1e 	bne	r3,r2,10010638 <__alt_data_end+0xf8010638>
10010684:	00001106 	br	100106cc <filterScanline+0x1f8>
      }
      else
      {
        for(i = 0; i != length; ++i) out[i] = scanline[i];
10010688:	e03ffa15 	stw	zero,-24(fp)
1001068c:	00000b06 	br	100106bc <filterScanline+0x1e8>
10010690:	e0fffb17 	ldw	r3,-20(fp)
10010694:	e0bffa17 	ldw	r2,-24(fp)
10010698:	1885883a 	add	r2,r3,r2
1001069c:	e13ffc17 	ldw	r4,-16(fp)
100106a0:	e0fffa17 	ldw	r3,-24(fp)
100106a4:	20c7883a 	add	r3,r4,r3
100106a8:	18c00003 	ldbu	r3,0(r3)
100106ac:	10c00005 	stb	r3,0(r2)
100106b0:	e0bffa17 	ldw	r2,-24(fp)
100106b4:	10800044 	addi	r2,r2,1
100106b8:	e0bffa15 	stw	r2,-24(fp)
100106bc:	e0fffa17 	ldw	r3,-24(fp)
100106c0:	e0bffe17 	ldw	r2,-8(fp)
100106c4:	18bff21e 	bne	r3,r2,10010690 <__alt_data_end+0xf8010690>
      }
      break;
100106c8:	0000d406 	br	10010a1c <filterScanline+0x548>
100106cc:	0000d306 	br	10010a1c <filterScanline+0x548>
    case 3: /*Average*/
      if(prevline)
100106d0:	e0bffd17 	ldw	r2,-12(fp)
100106d4:	10003a26 	beq	r2,zero,100107c0 <filterScanline+0x2ec>
      {
        for(i = 0; i != bytewidth; ++i) out[i] = scanline[i] - prevline[i] / 2;
100106d8:	e03ffa15 	stw	zero,-24(fp)
100106dc:	00001206 	br	10010728 <filterScanline+0x254>
100106e0:	e0fffb17 	ldw	r3,-20(fp)
100106e4:	e0bffa17 	ldw	r2,-24(fp)
100106e8:	1885883a 	add	r2,r3,r2
100106ec:	e13ffc17 	ldw	r4,-16(fp)
100106f0:	e0fffa17 	ldw	r3,-24(fp)
100106f4:	20c7883a 	add	r3,r4,r3
100106f8:	19000003 	ldbu	r4,0(r3)
100106fc:	e17ffd17 	ldw	r5,-12(fp)
10010700:	e0fffa17 	ldw	r3,-24(fp)
10010704:	28c7883a 	add	r3,r5,r3
10010708:	18c00003 	ldbu	r3,0(r3)
1001070c:	18c03fcc 	andi	r3,r3,255
10010710:	1806d07a 	srli	r3,r3,1
10010714:	20c7c83a 	sub	r3,r4,r3
10010718:	10c00005 	stb	r3,0(r2)
1001071c:	e0bffa17 	ldw	r2,-24(fp)
10010720:	10800044 	addi	r2,r2,1
10010724:	e0bffa15 	stw	r2,-24(fp)
10010728:	e0fffa17 	ldw	r3,-24(fp)
1001072c:	e0800417 	ldw	r2,16(fp)
10010730:	18bfeb1e 	bne	r3,r2,100106e0 <__alt_data_end+0xf80106e0>
        for(i = bytewidth; i < length; ++i) out[i] = scanline[i] - ((scanline[i - bytewidth] + prevline[i]) / 2);
10010734:	e0800417 	ldw	r2,16(fp)
10010738:	e0bffa15 	stw	r2,-24(fp)
1001073c:	00001c06 	br	100107b0 <filterScanline+0x2dc>
10010740:	e0fffb17 	ldw	r3,-20(fp)
10010744:	e0bffa17 	ldw	r2,-24(fp)
10010748:	1887883a 	add	r3,r3,r2
1001074c:	e13ffc17 	ldw	r4,-16(fp)
10010750:	e0bffa17 	ldw	r2,-24(fp)
10010754:	2085883a 	add	r2,r4,r2
10010758:	11000003 	ldbu	r4,0(r2)
1001075c:	e17ffa17 	ldw	r5,-24(fp)
10010760:	e0800417 	ldw	r2,16(fp)
10010764:	2885c83a 	sub	r2,r5,r2
10010768:	e17ffc17 	ldw	r5,-16(fp)
1001076c:	2885883a 	add	r2,r5,r2
10010770:	10800003 	ldbu	r2,0(r2)
10010774:	11403fcc 	andi	r5,r2,255
10010778:	e1bffd17 	ldw	r6,-12(fp)
1001077c:	e0bffa17 	ldw	r2,-24(fp)
10010780:	3085883a 	add	r2,r6,r2
10010784:	10800003 	ldbu	r2,0(r2)
10010788:	10803fcc 	andi	r2,r2,255
1001078c:	2885883a 	add	r2,r5,r2
10010790:	100ad7fa 	srli	r5,r2,31
10010794:	2885883a 	add	r2,r5,r2
10010798:	1005d07a 	srai	r2,r2,1
1001079c:	2085c83a 	sub	r2,r4,r2
100107a0:	18800005 	stb	r2,0(r3)
100107a4:	e0bffa17 	ldw	r2,-24(fp)
100107a8:	10800044 	addi	r2,r2,1
100107ac:	e0bffa15 	stw	r2,-24(fp)
100107b0:	e0fffa17 	ldw	r3,-24(fp)
100107b4:	e0bffe17 	ldw	r2,-8(fp)
100107b8:	18bfe136 	bltu	r3,r2,10010740 <__alt_data_end+0xf8010740>
100107bc:	00002b06 	br	1001086c <filterScanline+0x398>
      }
      else
      {
        for(i = 0; i != bytewidth; ++i) out[i] = scanline[i];
100107c0:	e03ffa15 	stw	zero,-24(fp)
100107c4:	00000b06 	br	100107f4 <filterScanline+0x320>
100107c8:	e0fffb17 	ldw	r3,-20(fp)
100107cc:	e0bffa17 	ldw	r2,-24(fp)
100107d0:	1885883a 	add	r2,r3,r2
100107d4:	e13ffc17 	ldw	r4,-16(fp)
100107d8:	e0fffa17 	ldw	r3,-24(fp)
100107dc:	20c7883a 	add	r3,r4,r3
100107e0:	18c00003 	ldbu	r3,0(r3)
100107e4:	10c00005 	stb	r3,0(r2)
100107e8:	e0bffa17 	ldw	r2,-24(fp)
100107ec:	10800044 	addi	r2,r2,1
100107f0:	e0bffa15 	stw	r2,-24(fp)
100107f4:	e0fffa17 	ldw	r3,-24(fp)
100107f8:	e0800417 	ldw	r2,16(fp)
100107fc:	18bff21e 	bne	r3,r2,100107c8 <__alt_data_end+0xf80107c8>
        for(i = bytewidth; i < length; ++i) out[i] = scanline[i] - scanline[i - bytewidth] / 2;
10010800:	e0800417 	ldw	r2,16(fp)
10010804:	e0bffa15 	stw	r2,-24(fp)
10010808:	00001406 	br	1001085c <filterScanline+0x388>
1001080c:	e0fffb17 	ldw	r3,-20(fp)
10010810:	e0bffa17 	ldw	r2,-24(fp)
10010814:	1885883a 	add	r2,r3,r2
10010818:	e13ffc17 	ldw	r4,-16(fp)
1001081c:	e0fffa17 	ldw	r3,-24(fp)
10010820:	20c7883a 	add	r3,r4,r3
10010824:	19000003 	ldbu	r4,0(r3)
10010828:	e17ffa17 	ldw	r5,-24(fp)
1001082c:	e0c00417 	ldw	r3,16(fp)
10010830:	28c7c83a 	sub	r3,r5,r3
10010834:	e17ffc17 	ldw	r5,-16(fp)
10010838:	28c7883a 	add	r3,r5,r3
1001083c:	18c00003 	ldbu	r3,0(r3)
10010840:	18c03fcc 	andi	r3,r3,255
10010844:	1806d07a 	srli	r3,r3,1
10010848:	20c7c83a 	sub	r3,r4,r3
1001084c:	10c00005 	stb	r3,0(r2)
10010850:	e0bffa17 	ldw	r2,-24(fp)
10010854:	10800044 	addi	r2,r2,1
10010858:	e0bffa15 	stw	r2,-24(fp)
1001085c:	e0fffa17 	ldw	r3,-24(fp)
10010860:	e0bffe17 	ldw	r2,-8(fp)
10010864:	18bfe936 	bltu	r3,r2,1001080c <__alt_data_end+0xf801080c>
      }
      break;
10010868:	00006c06 	br	10010a1c <filterScanline+0x548>
1001086c:	00006b06 	br	10010a1c <filterScanline+0x548>
    case 4: /*Paeth*/
      if(prevline)
10010870:	e0bffd17 	ldw	r2,-12(fp)
10010874:	10003e26 	beq	r2,zero,10010970 <filterScanline+0x49c>
      {
        /*paethPredictor(0, prevline[i], 0) is always prevline[i]*/
        for(i = 0; i != bytewidth; ++i) out[i] = (scanline[i] - prevline[i]);
10010878:	e03ffa15 	stw	zero,-24(fp)
1001087c:	00001006 	br	100108c0 <filterScanline+0x3ec>
10010880:	e0fffb17 	ldw	r3,-20(fp)
10010884:	e0bffa17 	ldw	r2,-24(fp)
10010888:	1885883a 	add	r2,r3,r2
1001088c:	e13ffc17 	ldw	r4,-16(fp)
10010890:	e0fffa17 	ldw	r3,-24(fp)
10010894:	20c7883a 	add	r3,r4,r3
10010898:	19000003 	ldbu	r4,0(r3)
1001089c:	e17ffd17 	ldw	r5,-12(fp)
100108a0:	e0fffa17 	ldw	r3,-24(fp)
100108a4:	28c7883a 	add	r3,r5,r3
100108a8:	18c00003 	ldbu	r3,0(r3)
100108ac:	20c7c83a 	sub	r3,r4,r3
100108b0:	10c00005 	stb	r3,0(r2)
100108b4:	e0bffa17 	ldw	r2,-24(fp)
100108b8:	10800044 	addi	r2,r2,1
100108bc:	e0bffa15 	stw	r2,-24(fp)
100108c0:	e0fffa17 	ldw	r3,-24(fp)
100108c4:	e0800417 	ldw	r2,16(fp)
100108c8:	18bfed1e 	bne	r3,r2,10010880 <__alt_data_end+0xf8010880>
        for(i = bytewidth; i < length; ++i)
100108cc:	e0800417 	ldw	r2,16(fp)
100108d0:	e0bffa15 	stw	r2,-24(fp)
100108d4:	00002206 	br	10010960 <filterScanline+0x48c>
        {
          out[i] = (scanline[i] - paethPredictor(scanline[i - bytewidth], prevline[i], prevline[i - bytewidth]));
100108d8:	e0fffb17 	ldw	r3,-20(fp)
100108dc:	e0bffa17 	ldw	r2,-24(fp)
100108e0:	18a1883a 	add	r16,r3,r2
100108e4:	e0fffc17 	ldw	r3,-16(fp)
100108e8:	e0bffa17 	ldw	r2,-24(fp)
100108ec:	1885883a 	add	r2,r3,r2
100108f0:	14400003 	ldbu	r17,0(r2)
100108f4:	e0fffa17 	ldw	r3,-24(fp)
100108f8:	e0800417 	ldw	r2,16(fp)
100108fc:	1885c83a 	sub	r2,r3,r2
10010900:	e0fffc17 	ldw	r3,-16(fp)
10010904:	1885883a 	add	r2,r3,r2
10010908:	10800003 	ldbu	r2,0(r2)
1001090c:	11003fcc 	andi	r4,r2,255
10010910:	e0fffd17 	ldw	r3,-12(fp)
10010914:	e0bffa17 	ldw	r2,-24(fp)
10010918:	1885883a 	add	r2,r3,r2
1001091c:	10800003 	ldbu	r2,0(r2)
10010920:	10c03fcc 	andi	r3,r2,255
10010924:	e17ffa17 	ldw	r5,-24(fp)
10010928:	e0800417 	ldw	r2,16(fp)
1001092c:	2885c83a 	sub	r2,r5,r2
10010930:	e17ffd17 	ldw	r5,-12(fp)
10010934:	2885883a 	add	r2,r5,r2
10010938:	10800003 	ldbu	r2,0(r2)
1001093c:	10803fcc 	andi	r2,r2,255
10010940:	180b883a 	mov	r5,r3
10010944:	100d883a 	mov	r6,r2
10010948:	000bc500 	call	1000bc50 <paethPredictor>
1001094c:	8885c83a 	sub	r2,r17,r2
10010950:	80800005 	stb	r2,0(r16)
    case 4: /*Paeth*/
      if(prevline)
      {
        /*paethPredictor(0, prevline[i], 0) is always prevline[i]*/
        for(i = 0; i != bytewidth; ++i) out[i] = (scanline[i] - prevline[i]);
        for(i = bytewidth; i < length; ++i)
10010954:	e0bffa17 	ldw	r2,-24(fp)
10010958:	10800044 	addi	r2,r2,1
1001095c:	e0bffa15 	stw	r2,-24(fp)
10010960:	e0fffa17 	ldw	r3,-24(fp)
10010964:	e0bffe17 	ldw	r2,-8(fp)
10010968:	18bfdb36 	bltu	r3,r2,100108d8 <__alt_data_end+0xf80108d8>
1001096c:	00002906 	br	10010a14 <filterScanline+0x540>
          out[i] = (scanline[i] - paethPredictor(scanline[i - bytewidth], prevline[i], prevline[i - bytewidth]));
        }
      }
      else
      {
        for(i = 0; i != bytewidth; ++i) out[i] = scanline[i];
10010970:	e03ffa15 	stw	zero,-24(fp)
10010974:	00000b06 	br	100109a4 <filterScanline+0x4d0>
10010978:	e0fffb17 	ldw	r3,-20(fp)
1001097c:	e0bffa17 	ldw	r2,-24(fp)
10010980:	1885883a 	add	r2,r3,r2
10010984:	e13ffc17 	ldw	r4,-16(fp)
10010988:	e0fffa17 	ldw	r3,-24(fp)
1001098c:	20c7883a 	add	r3,r4,r3
10010990:	18c00003 	ldbu	r3,0(r3)
10010994:	10c00005 	stb	r3,0(r2)
10010998:	e0bffa17 	ldw	r2,-24(fp)
1001099c:	10800044 	addi	r2,r2,1
100109a0:	e0bffa15 	stw	r2,-24(fp)
100109a4:	e0fffa17 	ldw	r3,-24(fp)
100109a8:	e0800417 	ldw	r2,16(fp)
100109ac:	18bff21e 	bne	r3,r2,10010978 <__alt_data_end+0xf8010978>
        /*paethPredictor(scanline[i - bytewidth], 0, 0) is always scanline[i - bytewidth]*/
        for(i = bytewidth; i < length; ++i) out[i] = (scanline[i] - scanline[i - bytewidth]);
100109b0:	e0800417 	ldw	r2,16(fp)
100109b4:	e0bffa15 	stw	r2,-24(fp)
100109b8:	00001206 	br	10010a04 <filterScanline+0x530>
100109bc:	e0fffb17 	ldw	r3,-20(fp)
100109c0:	e0bffa17 	ldw	r2,-24(fp)
100109c4:	1885883a 	add	r2,r3,r2
100109c8:	e13ffc17 	ldw	r4,-16(fp)
100109cc:	e0fffa17 	ldw	r3,-24(fp)
100109d0:	20c7883a 	add	r3,r4,r3
100109d4:	19000003 	ldbu	r4,0(r3)
100109d8:	e17ffa17 	ldw	r5,-24(fp)
100109dc:	e0c00417 	ldw	r3,16(fp)
100109e0:	28c7c83a 	sub	r3,r5,r3
100109e4:	e17ffc17 	ldw	r5,-16(fp)
100109e8:	28c7883a 	add	r3,r5,r3
100109ec:	18c00003 	ldbu	r3,0(r3)
100109f0:	20c7c83a 	sub	r3,r4,r3
100109f4:	10c00005 	stb	r3,0(r2)
100109f8:	e0bffa17 	ldw	r2,-24(fp)
100109fc:	10800044 	addi	r2,r2,1
10010a00:	e0bffa15 	stw	r2,-24(fp)
10010a04:	e0fffa17 	ldw	r3,-24(fp)
10010a08:	e0bffe17 	ldw	r2,-8(fp)
10010a0c:	18bfeb36 	bltu	r3,r2,100109bc <__alt_data_end+0xf80109bc>
      }
      break;
10010a10:	00000206 	br	10010a1c <filterScanline+0x548>
10010a14:	00000106 	br	10010a1c <filterScanline+0x548>
    default: return; /*unexisting filter type given*/
10010a18:	0001883a 	nop
  }
}
10010a1c:	e037883a 	mov	sp,fp
10010a20:	dfc00317 	ldw	ra,12(sp)
10010a24:	df000217 	ldw	fp,8(sp)
10010a28:	dc400117 	ldw	r17,4(sp)
10010a2c:	dc000017 	ldw	r16,0(sp)
10010a30:	dec00404 	addi	sp,sp,16
10010a34:	f800283a 	ret

10010a38 <flog2>:

/* log2 approximation. A slight bit faster than std::log. */
static float flog2(float f)
{
10010a38:	defffb04 	addi	sp,sp,-20
10010a3c:	dfc00415 	stw	ra,16(sp)
10010a40:	df000315 	stw	fp,12(sp)
10010a44:	dc000215 	stw	r16,8(sp)
10010a48:	df000204 	addi	fp,sp,8
10010a4c:	e13fff15 	stw	r4,-4(fp)
  float result = 0;
10010a50:	e03ffe15 	stw	zero,-8(fp)
  while(f > 32) { result += 4; f /= 16; }
10010a54:	00000a06 	br	10010a80 <flog2+0x48>
10010a58:	e13ffe17 	ldw	r4,-8(fp)
10010a5c:	01502034 	movhi	r5,16512
10010a60:	00140d80 	call	100140d8 <__addsf3>
10010a64:	1007883a 	mov	r3,r2
10010a68:	e0fffe15 	stw	r3,-8(fp)
10010a6c:	e13fff17 	ldw	r4,-4(fp)
10010a70:	01506034 	movhi	r5,16768
10010a74:	001430c0 	call	1001430c <__divsf3>
10010a78:	1007883a 	mov	r3,r2
10010a7c:	e0ffff15 	stw	r3,-4(fp)
10010a80:	e13fff17 	ldw	r4,-4(fp)
10010a84:	01508034 	movhi	r5,16896
10010a88:	00144480 	call	10014448 <__gtsf2>
10010a8c:	00bff216 	blt	zero,r2,10010a58 <__alt_data_end+0xf8010a58>
  while(f > 2) { ++result; f /= 2; }
10010a90:	00000a06 	br	10010abc <flog2+0x84>
10010a94:	e13ffe17 	ldw	r4,-8(fp)
10010a98:	014fe034 	movhi	r5,16256
10010a9c:	00140d80 	call	100140d8 <__addsf3>
10010aa0:	1007883a 	mov	r3,r2
10010aa4:	e0fffe15 	stw	r3,-8(fp)
10010aa8:	e13fff17 	ldw	r4,-4(fp)
10010aac:	01500034 	movhi	r5,16384
10010ab0:	001430c0 	call	1001430c <__divsf3>
10010ab4:	1007883a 	mov	r3,r2
10010ab8:	e0ffff15 	stw	r3,-4(fp)
10010abc:	e13fff17 	ldw	r4,-4(fp)
10010ac0:	01500034 	movhi	r5,16384
10010ac4:	00144480 	call	10014448 <__gtsf2>
10010ac8:	00bff216 	blt	zero,r2,10010a94 <__alt_data_end+0xf8010a94>
  return result + 1.442695f * (f * f * f / 3 - 3 * f * f / 2 + 3 * f - 1.83333f);
10010acc:	e13fff17 	ldw	r4,-4(fp)
10010ad0:	e17fff17 	ldw	r5,-4(fp)
10010ad4:	001417c0 	call	1001417c <__mulsf3>
10010ad8:	1007883a 	mov	r3,r2
10010adc:	1805883a 	mov	r2,r3
10010ae0:	1009883a 	mov	r4,r2
10010ae4:	e17fff17 	ldw	r5,-4(fp)
10010ae8:	001417c0 	call	1001417c <__mulsf3>
10010aec:	1007883a 	mov	r3,r2
10010af0:	1805883a 	mov	r2,r3
10010af4:	1009883a 	mov	r4,r2
10010af8:	01501034 	movhi	r5,16448
10010afc:	001430c0 	call	1001430c <__divsf3>
10010b00:	1007883a 	mov	r3,r2
10010b04:	1821883a 	mov	r16,r3
10010b08:	e13fff17 	ldw	r4,-4(fp)
10010b0c:	01501034 	movhi	r5,16448
10010b10:	001417c0 	call	1001417c <__mulsf3>
10010b14:	1007883a 	mov	r3,r2
10010b18:	1805883a 	mov	r2,r3
10010b1c:	1009883a 	mov	r4,r2
10010b20:	e17fff17 	ldw	r5,-4(fp)
10010b24:	001417c0 	call	1001417c <__mulsf3>
10010b28:	1007883a 	mov	r3,r2
10010b2c:	1805883a 	mov	r2,r3
10010b30:	1009883a 	mov	r4,r2
10010b34:	01500034 	movhi	r5,16384
10010b38:	001430c0 	call	1001430c <__divsf3>
10010b3c:	1007883a 	mov	r3,r2
10010b40:	1805883a 	mov	r2,r3
10010b44:	8009883a 	mov	r4,r16
10010b48:	100b883a 	mov	r5,r2
10010b4c:	00141240 	call	10014124 <__subsf3>
10010b50:	1007883a 	mov	r3,r2
10010b54:	1821883a 	mov	r16,r3
10010b58:	e13fff17 	ldw	r4,-4(fp)
10010b5c:	01501034 	movhi	r5,16448
10010b60:	001417c0 	call	1001417c <__mulsf3>
10010b64:	1007883a 	mov	r3,r2
10010b68:	1805883a 	mov	r2,r3
10010b6c:	8009883a 	mov	r4,r16
10010b70:	100b883a 	mov	r5,r2
10010b74:	00140d80 	call	100140d8 <__addsf3>
10010b78:	1007883a 	mov	r3,r2
10010b7c:	1805883a 	mov	r2,r3
10010b80:	1009883a 	mov	r4,r2
10010b84:	014ffaf4 	movhi	r5,16363
10010b88:	296aa3c4 	addi	r5,r5,-21873
10010b8c:	00141240 	call	10014124 <__subsf3>
10010b90:	1007883a 	mov	r3,r2
10010b94:	1805883a 	mov	r2,r3
10010b98:	1009883a 	mov	r4,r2
10010b9c:	014fee74 	movhi	r5,16313
10010ba0:	296a8ec4 	addi	r5,r5,-21957
10010ba4:	001417c0 	call	1001417c <__mulsf3>
10010ba8:	1007883a 	mov	r3,r2
10010bac:	1805883a 	mov	r2,r3
10010bb0:	1009883a 	mov	r4,r2
10010bb4:	e17ffe17 	ldw	r5,-8(fp)
10010bb8:	00140d80 	call	100140d8 <__addsf3>
10010bbc:	1009883a 	mov	r4,r2
10010bc0:	2007883a 	mov	r3,r4
10010bc4:	1805883a 	mov	r2,r3
}
10010bc8:	e037883a 	mov	sp,fp
10010bcc:	dfc00217 	ldw	ra,8(sp)
10010bd0:	df000117 	ldw	fp,4(sp)
10010bd4:	dc000017 	ldw	r16,0(sp)
10010bd8:	dec00304 	addi	sp,sp,12
10010bdc:	f800283a 	ret

10010be0 <filter>:

static unsigned filter(unsigned char* out, const unsigned char* in, unsigned w, unsigned h,
                       const LodePNGColorMode* info, const LodePNGEncoderSettings* settings)
{
10010be0:	defebf04 	addi	sp,sp,-1284
10010be4:	dfc14015 	stw	ra,1280(sp)
10010be8:	df013f15 	stw	fp,1276(sp)
10010bec:	dc413e15 	stw	r17,1272(sp)
10010bf0:	dc013d15 	stw	r16,1268(sp)
10010bf4:	df013d04 	addi	fp,sp,1268
10010bf8:	e13ffc15 	stw	r4,-16(fp)
10010bfc:	e17ffd15 	stw	r5,-12(fp)
10010c00:	e1bffe15 	stw	r6,-8(fp)
10010c04:	e1ffff15 	stw	r7,-4(fp)
  For PNG filter method 0
  out must be a buffer with as size: h + (w * h * bpp + 7) / 8, because there are
  the scanlines with 1 extra byte per scanline
  */

  unsigned bpp = lodepng_get_bpp(info);
10010c08:	e1000417 	ldw	r4,16(fp)
10010c0c:	00073780 	call	10007378 <lodepng_get_bpp>
10010c10:	e0bed115 	stw	r2,-1212(fp)
  /*the width of a scanline in bytes, not including the filter type*/
  size_t linebytes = (w * bpp + 7) / 8;
10010c14:	e13ffe17 	ldw	r4,-8(fp)
10010c18:	e17ed117 	ldw	r5,-1212(fp)
10010c1c:	00146fc0 	call	100146fc <__mulsi3>
10010c20:	108001c4 	addi	r2,r2,7
10010c24:	1004d0fa 	srli	r2,r2,3
10010c28:	e0bed215 	stw	r2,-1208(fp)
  /*bytewidth is used for filtering, is 1 when bpp < 8, number of bytes per pixel otherwise*/
  size_t bytewidth = (bpp + 7) / 8;
10010c2c:	e0bed117 	ldw	r2,-1212(fp)
10010c30:	108001c4 	addi	r2,r2,7
10010c34:	1004d0fa 	srli	r2,r2,3
10010c38:	e0bed315 	stw	r2,-1204(fp)
  const unsigned char* prevline = 0;
10010c3c:	e03ec515 	stw	zero,-1260(fp)
  unsigned x, y;
  unsigned error = 0;
10010c40:	e03ed415 	stw	zero,-1200(fp)
  LodePNGFilterStrategy strategy = settings->filter_strategy;
10010c44:	e0800517 	ldw	r2,20(fp)
10010c48:	10800b17 	ldw	r2,44(r2)
10010c4c:	e0bec815 	stw	r2,-1248(fp)

  If filter_palette_zero is true and filter_strategy is not LFS_MINSUM, the above heuristic is followed,
  but for "the other case", whatever strategy filter_strategy is set to instead of the minimum sum
  heuristic is used.
  */
  if(settings->filter_palette_zero &&
10010c50:	e0800517 	ldw	r2,20(fp)
10010c54:	10800a17 	ldw	r2,40(r2)
10010c58:	10000926 	beq	r2,zero,10010c80 <filter+0xa0>
     (info->colortype == LCT_PALETTE || info->bitdepth < 8)) strategy = LFS_ZERO;
10010c5c:	e0800417 	ldw	r2,16(fp)
10010c60:	10800017 	ldw	r2,0(r2)

  If filter_palette_zero is true and filter_strategy is not LFS_MINSUM, the above heuristic is followed,
  but for "the other case", whatever strategy filter_strategy is set to instead of the minimum sum
  heuristic is used.
  */
  if(settings->filter_palette_zero &&
10010c64:	108000e0 	cmpeqi	r2,r2,3
10010c68:	1000041e 	bne	r2,zero,10010c7c <filter+0x9c>
     (info->colortype == LCT_PALETTE || info->bitdepth < 8)) strategy = LFS_ZERO;
10010c6c:	e0800417 	ldw	r2,16(fp)
10010c70:	10800117 	ldw	r2,4(r2)
10010c74:	10800228 	cmpgeui	r2,r2,8
10010c78:	1000011e 	bne	r2,zero,10010c80 <filter+0xa0>
10010c7c:	e03ec815 	stw	zero,-1248(fp)

  if(bpp == 0) return 31; /*error: invalid color type*/
10010c80:	e0bed117 	ldw	r2,-1212(fp)
10010c84:	1000021e 	bne	r2,zero,10010c90 <filter+0xb0>
10010c88:	008007c4 	movi	r2,31
10010c8c:	00035906 	br	100119f4 <filter+0xe14>

  if(strategy == LFS_ZERO)
10010c90:	e0bec817 	ldw	r2,-1248(fp)
10010c94:	10002a1e 	bne	r2,zero,10010d40 <filter+0x160>
  {
    for(y = 0; y != h; ++y)
10010c98:	e03ec715 	stw	zero,-1252(fp)
10010c9c:	00002406 	br	10010d30 <filter+0x150>
    {
      size_t outindex = (1 + linebytes) * y; /*the extra filterbyte added to each row*/
10010ca0:	e0bed217 	ldw	r2,-1208(fp)
10010ca4:	10800044 	addi	r2,r2,1
10010ca8:	1009883a 	mov	r4,r2
10010cac:	e17ec717 	ldw	r5,-1252(fp)
10010cb0:	00146fc0 	call	100146fc <__mulsi3>
10010cb4:	e0bed515 	stw	r2,-1196(fp)
      size_t inindex = linebytes * y;
10010cb8:	e13ed217 	ldw	r4,-1208(fp)
10010cbc:	e17ec717 	ldw	r5,-1252(fp)
10010cc0:	00146fc0 	call	100146fc <__mulsi3>
10010cc4:	e0bed615 	stw	r2,-1192(fp)
      out[outindex] = 0; /*filter type byte*/
10010cc8:	e0fffc17 	ldw	r3,-16(fp)
10010ccc:	e0bed517 	ldw	r2,-1196(fp)
10010cd0:	1885883a 	add	r2,r3,r2
10010cd4:	10000005 	stb	zero,0(r2)
      filterScanline(&out[outindex + 1], &in[inindex], prevline, linebytes, bytewidth, 0);
10010cd8:	e0bed517 	ldw	r2,-1196(fp)
10010cdc:	10800044 	addi	r2,r2,1
10010ce0:	e0fffc17 	ldw	r3,-16(fp)
10010ce4:	1887883a 	add	r3,r3,r2
10010ce8:	e13ffd17 	ldw	r4,-12(fp)
10010cec:	e0bed617 	ldw	r2,-1192(fp)
10010cf0:	2085883a 	add	r2,r4,r2
10010cf4:	e13ed317 	ldw	r4,-1204(fp)
10010cf8:	d9000015 	stw	r4,0(sp)
10010cfc:	d8000115 	stw	zero,4(sp)
10010d00:	1809883a 	mov	r4,r3
10010d04:	100b883a 	mov	r5,r2
10010d08:	e1bec517 	ldw	r6,-1260(fp)
10010d0c:	e1fed217 	ldw	r7,-1208(fp)
10010d10:	00104d40 	call	100104d4 <filterScanline>
      prevline = &in[inindex];
10010d14:	e0fffd17 	ldw	r3,-12(fp)
10010d18:	e0bed617 	ldw	r2,-1192(fp)
10010d1c:	1885883a 	add	r2,r3,r2
10010d20:	e0bec515 	stw	r2,-1260(fp)

  if(bpp == 0) return 31; /*error: invalid color type*/

  if(strategy == LFS_ZERO)
  {
    for(y = 0; y != h; ++y)
10010d24:	e0bec717 	ldw	r2,-1252(fp)
10010d28:	10800044 	addi	r2,r2,1
10010d2c:	e0bec715 	stw	r2,-1252(fp)
10010d30:	e0fec717 	ldw	r3,-1252(fp)
10010d34:	e0bfff17 	ldw	r2,-4(fp)
10010d38:	18bfd91e 	bne	r3,r2,10010ca0 <__alt_data_end+0xf8010ca0>
10010d3c:	00032c06 	br	100119f0 <filter+0xe10>
      out[outindex] = 0; /*filter type byte*/
      filterScanline(&out[outindex + 1], &in[inindex], prevline, linebytes, bytewidth, 0);
      prevline = &in[inindex];
    }
  }
  else if(strategy == LFS_MINSUM)
10010d40:	e0bec817 	ldw	r2,-1248(fp)
10010d44:	10800058 	cmpnei	r2,r2,1
10010d48:	1000f41e 	bne	r2,zero,1001111c <filter+0x53c>
  {
    /*adaptive filtering*/
    size_t sum[5];
    ucvector attempt[5]; /*five filtering attempts, one for each filter type*/
    size_t smallest = 0;
10010d4c:	e03ec915 	stw	zero,-1244(fp)
    unsigned char type, bestType = 0;
10010d50:	e03eca45 	stb	zero,-1239(fp)

    for(type = 0; type != 5; ++type)
10010d54:	e03eca05 	stb	zero,-1240(fp)
10010d58:	00001706 	br	10010db8 <filter+0x1d8>
    {
      ucvector_init(&attempt[type]);
10010d5c:	e0beca03 	ldbu	r2,-1240(fp)
10010d60:	e43eed04 	addi	r16,fp,-1100
10010d64:	1009883a 	mov	r4,r2
10010d68:	01400304 	movi	r5,12
10010d6c:	00146fc0 	call	100146fc <__mulsi3>
10010d70:	8085883a 	add	r2,r16,r2
10010d74:	1009883a 	mov	r4,r2
10010d78:	00006c00 	call	100006c0 <ucvector_init>
      if(!ucvector_resize(&attempt[type], linebytes)) return 83; /*alloc fail*/
10010d7c:	e0beca03 	ldbu	r2,-1240(fp)
10010d80:	e43eed04 	addi	r16,fp,-1100
10010d84:	1009883a 	mov	r4,r2
10010d88:	01400304 	movi	r5,12
10010d8c:	00146fc0 	call	100146fc <__mulsi3>
10010d90:	8085883a 	add	r2,r16,r2
10010d94:	1009883a 	mov	r4,r2
10010d98:	e17ed217 	ldw	r5,-1208(fp)
10010d9c:	00006140 	call	10000614 <ucvector_resize>
10010da0:	1000021e 	bne	r2,zero,10010dac <filter+0x1cc>
10010da4:	008014c4 	movi	r2,83
10010da8:	00031206 	br	100119f4 <filter+0xe14>
    size_t sum[5];
    ucvector attempt[5]; /*five filtering attempts, one for each filter type*/
    size_t smallest = 0;
    unsigned char type, bestType = 0;

    for(type = 0; type != 5; ++type)
10010dac:	e0beca03 	ldbu	r2,-1240(fp)
10010db0:	10800044 	addi	r2,r2,1
10010db4:	e0beca05 	stb	r2,-1240(fp)
10010db8:	e0beca03 	ldbu	r2,-1240(fp)
10010dbc:	10800158 	cmpnei	r2,r2,5
10010dc0:	103fe61e 	bne	r2,zero,10010d5c <__alt_data_end+0xf8010d5c>
    {
      ucvector_init(&attempt[type]);
      if(!ucvector_resize(&attempt[type], linebytes)) return 83; /*alloc fail*/
    }

    if(!error)
10010dc4:	e0bed417 	ldw	r2,-1200(fp)
10010dc8:	1000c31e 	bne	r2,zero,100110d8 <filter+0x4f8>
    {
      for(y = 0; y != h; ++y)
10010dcc:	e03ec715 	stw	zero,-1252(fp)
10010dd0:	0000be06 	br	100110cc <filter+0x4ec>
      {
        /*try the 5 filter types*/
        for(type = 0; type != 5; ++type)
10010dd4:	e03eca05 	stb	zero,-1240(fp)
10010dd8:	00008806 	br	10010ffc <filter+0x41c>
        {
          filterScanline(attempt[type].data, &in[y * linebytes], prevline, linebytes, bytewidth, type);
10010ddc:	e0beca03 	ldbu	r2,-1240(fp)
10010de0:	1009883a 	mov	r4,r2
10010de4:	01400304 	movi	r5,12
10010de8:	00146fc0 	call	100146fc <__mulsi3>
10010dec:	e0fec504 	addi	r3,fp,-1260
10010df0:	1885883a 	add	r2,r3,r2
10010df4:	10802804 	addi	r2,r2,160
10010df8:	14000017 	ldw	r16,0(r2)
10010dfc:	e13ec717 	ldw	r4,-1252(fp)
10010e00:	e17ed217 	ldw	r5,-1208(fp)
10010e04:	00146fc0 	call	100146fc <__mulsi3>
10010e08:	e0fffd17 	ldw	r3,-12(fp)
10010e0c:	1885883a 	add	r2,r3,r2
10010e10:	e0feca03 	ldbu	r3,-1240(fp)
10010e14:	e13ed317 	ldw	r4,-1204(fp)
10010e18:	d9000015 	stw	r4,0(sp)
10010e1c:	d8c00115 	stw	r3,4(sp)
10010e20:	8009883a 	mov	r4,r16
10010e24:	100b883a 	mov	r5,r2
10010e28:	e1bec517 	ldw	r6,-1260(fp)
10010e2c:	e1fed217 	ldw	r7,-1208(fp)
10010e30:	00104d40 	call	100104d4 <filterScanline>

          /*calculate the sum of the result*/
          sum[type] = 0;
10010e34:	e0beca03 	ldbu	r2,-1240(fp)
10010e38:	1085883a 	add	r2,r2,r2
10010e3c:	1085883a 	add	r2,r2,r2
10010e40:	e13ec504 	addi	r4,fp,-1260
10010e44:	2085883a 	add	r2,r4,r2
10010e48:	10801804 	addi	r2,r2,96
10010e4c:	10000015 	stw	zero,0(r2)
          if(type == 0)
10010e50:	e0beca03 	ldbu	r2,-1240(fp)
10010e54:	1000241e 	bne	r2,zero,10010ee8 <filter+0x308>
          {
            for(x = 0; x != linebytes; ++x) sum[type] += (unsigned char)(attempt[type].data[x]);
10010e58:	e03ec615 	stw	zero,-1256(fp)
10010e5c:	00001e06 	br	10010ed8 <filter+0x2f8>
10010e60:	e43eca03 	ldbu	r16,-1240(fp)
10010e64:	e0beca03 	ldbu	r2,-1240(fp)
10010e68:	1085883a 	add	r2,r2,r2
10010e6c:	1085883a 	add	r2,r2,r2
10010e70:	e0fec504 	addi	r3,fp,-1260
10010e74:	1885883a 	add	r2,r3,r2
10010e78:	10801804 	addi	r2,r2,96
10010e7c:	14400017 	ldw	r17,0(r2)
10010e80:	e0beca03 	ldbu	r2,-1240(fp)
10010e84:	1009883a 	mov	r4,r2
10010e88:	01400304 	movi	r5,12
10010e8c:	00146fc0 	call	100146fc <__mulsi3>
10010e90:	e13ec504 	addi	r4,fp,-1260
10010e94:	2085883a 	add	r2,r4,r2
10010e98:	10802804 	addi	r2,r2,160
10010e9c:	10c00017 	ldw	r3,0(r2)
10010ea0:	e0bec617 	ldw	r2,-1256(fp)
10010ea4:	1885883a 	add	r2,r3,r2
10010ea8:	10800003 	ldbu	r2,0(r2)
10010eac:	10803fcc 	andi	r2,r2,255
10010eb0:	8887883a 	add	r3,r17,r2
10010eb4:	8405883a 	add	r2,r16,r16
10010eb8:	1085883a 	add	r2,r2,r2
10010ebc:	e13ec504 	addi	r4,fp,-1260
10010ec0:	2085883a 	add	r2,r4,r2
10010ec4:	10801804 	addi	r2,r2,96
10010ec8:	10c00015 	stw	r3,0(r2)
10010ecc:	e0bec617 	ldw	r2,-1256(fp)
10010ed0:	10800044 	addi	r2,r2,1
10010ed4:	e0bec615 	stw	r2,-1256(fp)
10010ed8:	e0fec617 	ldw	r3,-1256(fp)
10010edc:	e0bed217 	ldw	r2,-1208(fp)
10010ee0:	18bfdf1e 	bne	r3,r2,10010e60 <__alt_data_end+0xf8010e60>
10010ee4:	00002d06 	br	10010f9c <filter+0x3bc>
          }
          else
          {
            for(x = 0; x != linebytes; ++x)
10010ee8:	e03ec615 	stw	zero,-1256(fp)
10010eec:	00002806 	br	10010f90 <filter+0x3b0>
            {
              /*For differences, each byte should be treated as signed, values above 127 are negative
              (converted to signed char). Filtertype 0 isn't a difference though, so use unsigned there.
              This means filtertype 0 is almost never chosen, but that is justified.*/
              unsigned char s = attempt[type].data[x];
10010ef0:	e0beca03 	ldbu	r2,-1240(fp)
10010ef4:	1009883a 	mov	r4,r2
10010ef8:	01400304 	movi	r5,12
10010efc:	00146fc0 	call	100146fc <__mulsi3>
10010f00:	e0fec504 	addi	r3,fp,-1260
10010f04:	1885883a 	add	r2,r3,r2
10010f08:	10802804 	addi	r2,r2,160
10010f0c:	10c00017 	ldw	r3,0(r2)
10010f10:	e0bec617 	ldw	r2,-1256(fp)
10010f14:	1885883a 	add	r2,r3,r2
10010f18:	10800003 	ldbu	r2,0(r2)
10010f1c:	e0bed705 	stb	r2,-1188(fp)
              sum[type] += s < 128 ? s : (255U - s);
10010f20:	e0beca03 	ldbu	r2,-1240(fp)
10010f24:	e0feca03 	ldbu	r3,-1240(fp)
10010f28:	18c7883a 	add	r3,r3,r3
10010f2c:	18c7883a 	add	r3,r3,r3
10010f30:	e13ec504 	addi	r4,fp,-1260
10010f34:	20c7883a 	add	r3,r4,r3
10010f38:	18c01804 	addi	r3,r3,96
10010f3c:	19000017 	ldw	r4,0(r3)
10010f40:	e0fed703 	ldbu	r3,-1188(fp)
10010f44:	18c03fcc 	andi	r3,r3,255
10010f48:	18c0201c 	xori	r3,r3,128
10010f4c:	18ffe004 	addi	r3,r3,-128
10010f50:	18000216 	blt	r3,zero,10010f5c <filter+0x37c>
10010f54:	e0fed703 	ldbu	r3,-1188(fp)
10010f58:	00000306 	br	10010f68 <filter+0x388>
10010f5c:	e0fed703 	ldbu	r3,-1188(fp)
10010f60:	01403fc4 	movi	r5,255
10010f64:	28c7c83a 	sub	r3,r5,r3
10010f68:	20c7883a 	add	r3,r4,r3
10010f6c:	1085883a 	add	r2,r2,r2
10010f70:	1085883a 	add	r2,r2,r2
10010f74:	e13ec504 	addi	r4,fp,-1260
10010f78:	2085883a 	add	r2,r4,r2
10010f7c:	10801804 	addi	r2,r2,96
10010f80:	10c00015 	stw	r3,0(r2)
          {
            for(x = 0; x != linebytes; ++x) sum[type] += (unsigned char)(attempt[type].data[x]);
          }
          else
          {
            for(x = 0; x != linebytes; ++x)
10010f84:	e0bec617 	ldw	r2,-1256(fp)
10010f88:	10800044 	addi	r2,r2,1
10010f8c:	e0bec615 	stw	r2,-1256(fp)
10010f90:	e0fec617 	ldw	r3,-1256(fp)
10010f94:	e0bed217 	ldw	r2,-1208(fp)
10010f98:	18bfd51e 	bne	r3,r2,10010ef0 <__alt_data_end+0xf8010ef0>
              sum[type] += s < 128 ? s : (255U - s);
            }
          }

          /*check if this is smallest sum (or if type == 0 it's the first case so always store the values)*/
          if(type == 0 || sum[type] < smallest)
10010f9c:	e0beca03 	ldbu	r2,-1240(fp)
10010fa0:	10000926 	beq	r2,zero,10010fc8 <filter+0x3e8>
10010fa4:	e0beca03 	ldbu	r2,-1240(fp)
10010fa8:	1085883a 	add	r2,r2,r2
10010fac:	1085883a 	add	r2,r2,r2
10010fb0:	e0fec504 	addi	r3,fp,-1260
10010fb4:	1885883a 	add	r2,r3,r2
10010fb8:	10801804 	addi	r2,r2,96
10010fbc:	10c00017 	ldw	r3,0(r2)
10010fc0:	e0bec917 	ldw	r2,-1244(fp)
10010fc4:	18800a2e 	bgeu	r3,r2,10010ff0 <filter+0x410>
          {
            bestType = type;
10010fc8:	e0beca03 	ldbu	r2,-1240(fp)
10010fcc:	e0beca45 	stb	r2,-1239(fp)
            smallest = sum[type];
10010fd0:	e0beca03 	ldbu	r2,-1240(fp)
10010fd4:	1085883a 	add	r2,r2,r2
10010fd8:	1085883a 	add	r2,r2,r2
10010fdc:	e13ec504 	addi	r4,fp,-1260
10010fe0:	2085883a 	add	r2,r4,r2
10010fe4:	10801804 	addi	r2,r2,96
10010fe8:	10800017 	ldw	r2,0(r2)
10010fec:	e0bec915 	stw	r2,-1244(fp)
    if(!error)
    {
      for(y = 0; y != h; ++y)
      {
        /*try the 5 filter types*/
        for(type = 0; type != 5; ++type)
10010ff0:	e0beca03 	ldbu	r2,-1240(fp)
10010ff4:	10800044 	addi	r2,r2,1
10010ff8:	e0beca05 	stb	r2,-1240(fp)
10010ffc:	e0beca03 	ldbu	r2,-1240(fp)
10011000:	10800158 	cmpnei	r2,r2,5
10011004:	103f751e 	bne	r2,zero,10010ddc <__alt_data_end+0xf8010ddc>
            bestType = type;
            smallest = sum[type];
          }
        }

        prevline = &in[y * linebytes];
10011008:	e13ec717 	ldw	r4,-1252(fp)
1001100c:	e17ed217 	ldw	r5,-1208(fp)
10011010:	00146fc0 	call	100146fc <__mulsi3>
10011014:	e0fffd17 	ldw	r3,-12(fp)
10011018:	1885883a 	add	r2,r3,r2
1001101c:	e0bec515 	stw	r2,-1260(fp)

        /*now fill the out values*/
        out[y * (linebytes + 1)] = bestType; /*the first byte of a scanline will be the filter type*/
10011020:	e0bed217 	ldw	r2,-1208(fp)
10011024:	10800044 	addi	r2,r2,1
10011028:	1009883a 	mov	r4,r2
1001102c:	e17ec717 	ldw	r5,-1252(fp)
10011030:	00146fc0 	call	100146fc <__mulsi3>
10011034:	e0fffc17 	ldw	r3,-16(fp)
10011038:	1885883a 	add	r2,r3,r2
1001103c:	e0feca43 	ldbu	r3,-1239(fp)
10011040:	10c00005 	stb	r3,0(r2)
        for(x = 0; x != linebytes; ++x) out[y * (linebytes + 1) + 1 + x] = attempt[bestType].data[x];
10011044:	e03ec615 	stw	zero,-1256(fp)
10011048:	00001a06 	br	100110b4 <filter+0x4d4>
1001104c:	e0bed217 	ldw	r2,-1208(fp)
10011050:	10800044 	addi	r2,r2,1
10011054:	1009883a 	mov	r4,r2
10011058:	e17ec717 	ldw	r5,-1252(fp)
1001105c:	00146fc0 	call	100146fc <__mulsi3>
10011060:	1007883a 	mov	r3,r2
10011064:	e0bec617 	ldw	r2,-1256(fp)
10011068:	1885883a 	add	r2,r3,r2
1001106c:	10800044 	addi	r2,r2,1
10011070:	e0fffc17 	ldw	r3,-16(fp)
10011074:	18a1883a 	add	r16,r3,r2
10011078:	e0beca43 	ldbu	r2,-1239(fp)
1001107c:	1009883a 	mov	r4,r2
10011080:	01400304 	movi	r5,12
10011084:	00146fc0 	call	100146fc <__mulsi3>
10011088:	e0fec504 	addi	r3,fp,-1260
1001108c:	1885883a 	add	r2,r3,r2
10011090:	10802804 	addi	r2,r2,160
10011094:	10c00017 	ldw	r3,0(r2)
10011098:	e0bec617 	ldw	r2,-1256(fp)
1001109c:	1885883a 	add	r2,r3,r2
100110a0:	10800003 	ldbu	r2,0(r2)
100110a4:	80800005 	stb	r2,0(r16)
100110a8:	e0bec617 	ldw	r2,-1256(fp)
100110ac:	10800044 	addi	r2,r2,1
100110b0:	e0bec615 	stw	r2,-1256(fp)
100110b4:	e0fec617 	ldw	r3,-1256(fp)
100110b8:	e0bed217 	ldw	r2,-1208(fp)
100110bc:	18bfe31e 	bne	r3,r2,1001104c <__alt_data_end+0xf801104c>
      if(!ucvector_resize(&attempt[type], linebytes)) return 83; /*alloc fail*/
    }

    if(!error)
    {
      for(y = 0; y != h; ++y)
100110c0:	e0bec717 	ldw	r2,-1252(fp)
100110c4:	10800044 	addi	r2,r2,1
100110c8:	e0bec715 	stw	r2,-1252(fp)
100110cc:	e0fec717 	ldw	r3,-1252(fp)
100110d0:	e0bfff17 	ldw	r2,-4(fp)
100110d4:	18bf3f1e 	bne	r3,r2,10010dd4 <__alt_data_end+0xf8010dd4>
        out[y * (linebytes + 1)] = bestType; /*the first byte of a scanline will be the filter type*/
        for(x = 0; x != linebytes; ++x) out[y * (linebytes + 1) + 1 + x] = attempt[bestType].data[x];
      }
    }

    for(type = 0; type != 5; ++type) ucvector_cleanup(&attempt[type]);
100110d8:	e03eca05 	stb	zero,-1240(fp)
100110dc:	00000b06 	br	1001110c <filter+0x52c>
100110e0:	e0beca03 	ldbu	r2,-1240(fp)
100110e4:	e43eed04 	addi	r16,fp,-1100
100110e8:	1009883a 	mov	r4,r2
100110ec:	01400304 	movi	r5,12
100110f0:	00146fc0 	call	100146fc <__mulsi3>
100110f4:	8085883a 	add	r2,r16,r2
100110f8:	1009883a 	mov	r4,r2
100110fc:	00006680 	call	10000668 <ucvector_cleanup>
10011100:	e0beca03 	ldbu	r2,-1240(fp)
10011104:	10800044 	addi	r2,r2,1
10011108:	e0beca05 	stb	r2,-1240(fp)
1001110c:	e0beca03 	ldbu	r2,-1240(fp)
10011110:	10800158 	cmpnei	r2,r2,5
10011114:	103ff21e 	bne	r2,zero,100110e0 <__alt_data_end+0xf80110e0>
10011118:	00023506 	br	100119f0 <filter+0xe10>
  }
  else if(strategy == LFS_ENTROPY)
1001111c:	e0bec817 	ldw	r2,-1248(fp)
10011120:	10800098 	cmpnei	r2,r2,2
10011124:	1001241e 	bne	r2,zero,100115b8 <filter+0x9d8>
  {
    float sum[5];
    ucvector attempt[5]; /*five filtering attempts, one for each filter type*/
    float smallest = 0;
10011128:	e03ecb15 	stw	zero,-1236(fp)
    unsigned type, bestType = 0;
1001112c:	e03ecd15 	stw	zero,-1228(fp)
    unsigned count[256];

    for(type = 0; type != 5; ++type)
10011130:	e03ecc15 	stw	zero,-1232(fp)
10011134:	00001506 	br	1001118c <filter+0x5ac>
    {
      ucvector_init(&attempt[type]);
10011138:	e43fed04 	addi	r16,fp,-76
1001113c:	e13ecc17 	ldw	r4,-1232(fp)
10011140:	01400304 	movi	r5,12
10011144:	00146fc0 	call	100146fc <__mulsi3>
10011148:	8085883a 	add	r2,r16,r2
1001114c:	1009883a 	mov	r4,r2
10011150:	00006c00 	call	100006c0 <ucvector_init>
      if(!ucvector_resize(&attempt[type], linebytes)) return 83; /*alloc fail*/
10011154:	e43fed04 	addi	r16,fp,-76
10011158:	e13ecc17 	ldw	r4,-1232(fp)
1001115c:	01400304 	movi	r5,12
10011160:	00146fc0 	call	100146fc <__mulsi3>
10011164:	8085883a 	add	r2,r16,r2
10011168:	1009883a 	mov	r4,r2
1001116c:	e17ed217 	ldw	r5,-1208(fp)
10011170:	00006140 	call	10000614 <ucvector_resize>
10011174:	1000021e 	bne	r2,zero,10011180 <filter+0x5a0>
10011178:	008014c4 	movi	r2,83
1001117c:	00021d06 	br	100119f4 <filter+0xe14>
    ucvector attempt[5]; /*five filtering attempts, one for each filter type*/
    float smallest = 0;
    unsigned type, bestType = 0;
    unsigned count[256];

    for(type = 0; type != 5; ++type)
10011180:	e0becc17 	ldw	r2,-1232(fp)
10011184:	10800044 	addi	r2,r2,1
10011188:	e0becc15 	stw	r2,-1232(fp)
1001118c:	e0becc17 	ldw	r2,-1232(fp)
10011190:	10800158 	cmpnei	r2,r2,5
10011194:	103fe81e 	bne	r2,zero,10011138 <__alt_data_end+0xf8011138>
    {
      ucvector_init(&attempt[type]);
      if(!ucvector_resize(&attempt[type], linebytes)) return 83; /*alloc fail*/
    }

    for(y = 0; y != h; ++y)
10011198:	e03ec715 	stw	zero,-1252(fp)
1001119c:	0000f306 	br	1001156c <filter+0x98c>
    {
      /*try the 5 filter types*/
      for(type = 0; type != 5; ++type)
100111a0:	e03ecc15 	stw	zero,-1232(fp)
100111a4:	0000bd06 	br	1001149c <filter+0x8bc>
      {
        filterScanline(attempt[type].data, &in[y * linebytes], prevline, linebytes, bytewidth, type);
100111a8:	e0becc17 	ldw	r2,-1232(fp)
100111ac:	1009883a 	mov	r4,r2
100111b0:	01400304 	movi	r5,12
100111b4:	00146fc0 	call	100146fc <__mulsi3>
100111b8:	e13ec504 	addi	r4,fp,-1260
100111bc:	2085883a 	add	r2,r4,r2
100111c0:	10812804 	addi	r2,r2,1184
100111c4:	14000017 	ldw	r16,0(r2)
100111c8:	e13ec717 	ldw	r4,-1252(fp)
100111cc:	e17ed217 	ldw	r5,-1208(fp)
100111d0:	00146fc0 	call	100146fc <__mulsi3>
100111d4:	e0fffd17 	ldw	r3,-12(fp)
100111d8:	1885883a 	add	r2,r3,r2
100111dc:	e0fecc17 	ldw	r3,-1232(fp)
100111e0:	18c03fcc 	andi	r3,r3,255
100111e4:	e13ed317 	ldw	r4,-1204(fp)
100111e8:	d9000015 	stw	r4,0(sp)
100111ec:	d8c00115 	stw	r3,4(sp)
100111f0:	8009883a 	mov	r4,r16
100111f4:	100b883a 	mov	r5,r2
100111f8:	e1bec517 	ldw	r6,-1260(fp)
100111fc:	e1fed217 	ldw	r7,-1208(fp)
10011200:	00104d40 	call	100104d4 <filterScanline>
        for(x = 0; x != 256; ++x) count[x] = 0;
10011204:	e03ec615 	stw	zero,-1256(fp)
10011208:	00000a06 	br	10011234 <filter+0x654>
1001120c:	e0bec617 	ldw	r2,-1256(fp)
10011210:	1085883a 	add	r2,r2,r2
10011214:	1085883a 	add	r2,r2,r2
10011218:	e0fec504 	addi	r3,fp,-1260
1001121c:	1885883a 	add	r2,r3,r2
10011220:	10802804 	addi	r2,r2,160
10011224:	10000015 	stw	zero,0(r2)
10011228:	e0bec617 	ldw	r2,-1256(fp)
1001122c:	10800044 	addi	r2,r2,1
10011230:	e0bec615 	stw	r2,-1256(fp)
10011234:	e0bec617 	ldw	r2,-1256(fp)
10011238:	10804018 	cmpnei	r2,r2,256
1001123c:	103ff31e 	bne	r2,zero,1001120c <__alt_data_end+0xf801120c>
        for(x = 0; x != linebytes; ++x) ++count[attempt[type].data[x]];
10011240:	e03ec615 	stw	zero,-1256(fp)
10011244:	00001c06 	br	100112b8 <filter+0x6d8>
10011248:	e0becc17 	ldw	r2,-1232(fp)
1001124c:	1009883a 	mov	r4,r2
10011250:	01400304 	movi	r5,12
10011254:	00146fc0 	call	100146fc <__mulsi3>
10011258:	e13ec504 	addi	r4,fp,-1260
1001125c:	2085883a 	add	r2,r4,r2
10011260:	10812804 	addi	r2,r2,1184
10011264:	10c00017 	ldw	r3,0(r2)
10011268:	e0bec617 	ldw	r2,-1256(fp)
1001126c:	1885883a 	add	r2,r3,r2
10011270:	10800003 	ldbu	r2,0(r2)
10011274:	10803fcc 	andi	r2,r2,255
10011278:	1087883a 	add	r3,r2,r2
1001127c:	18c7883a 	add	r3,r3,r3
10011280:	e13ec504 	addi	r4,fp,-1260
10011284:	20c7883a 	add	r3,r4,r3
10011288:	18c02804 	addi	r3,r3,160
1001128c:	18c00017 	ldw	r3,0(r3)
10011290:	18c00044 	addi	r3,r3,1
10011294:	1085883a 	add	r2,r2,r2
10011298:	1085883a 	add	r2,r2,r2
1001129c:	e13ec504 	addi	r4,fp,-1260
100112a0:	2085883a 	add	r2,r4,r2
100112a4:	10802804 	addi	r2,r2,160
100112a8:	10c00015 	stw	r3,0(r2)
100112ac:	e0bec617 	ldw	r2,-1256(fp)
100112b0:	10800044 	addi	r2,r2,1
100112b4:	e0bec615 	stw	r2,-1256(fp)
100112b8:	e0fec617 	ldw	r3,-1256(fp)
100112bc:	e0bed217 	ldw	r2,-1208(fp)
100112c0:	18bfe11e 	bne	r3,r2,10011248 <__alt_data_end+0xf8011248>
        ++count[type]; /*the filter type itself is part of the scanline*/
100112c4:	e0becc17 	ldw	r2,-1232(fp)
100112c8:	1085883a 	add	r2,r2,r2
100112cc:	1085883a 	add	r2,r2,r2
100112d0:	e0fec504 	addi	r3,fp,-1260
100112d4:	1885883a 	add	r2,r3,r2
100112d8:	10802804 	addi	r2,r2,160
100112dc:	10800017 	ldw	r2,0(r2)
100112e0:	10c00044 	addi	r3,r2,1
100112e4:	e0becc17 	ldw	r2,-1232(fp)
100112e8:	1085883a 	add	r2,r2,r2
100112ec:	1085883a 	add	r2,r2,r2
100112f0:	e13ec504 	addi	r4,fp,-1260
100112f4:	2085883a 	add	r2,r4,r2
100112f8:	10802804 	addi	r2,r2,160
100112fc:	10c00015 	stw	r3,0(r2)
        sum[type] = 0;
10011300:	e0becc17 	ldw	r2,-1232(fp)
10011304:	1085883a 	add	r2,r2,r2
10011308:	1085883a 	add	r2,r2,r2
1001130c:	e0fec504 	addi	r3,fp,-1260
10011310:	1885883a 	add	r2,r3,r2
10011314:	10801d04 	addi	r2,r2,116
10011318:	10000015 	stw	zero,0(r2)
        for(x = 0; x != 256; ++x)
1001131c:	e03ec615 	stw	zero,-1256(fp)
10011320:	00004106 	br	10011428 <filter+0x848>
        {
          float p = count[x] / (float)(linebytes + 1);
10011324:	e0bec617 	ldw	r2,-1256(fp)
10011328:	1085883a 	add	r2,r2,r2
1001132c:	1085883a 	add	r2,r2,r2
10011330:	e13ec504 	addi	r4,fp,-1260
10011334:	2085883a 	add	r2,r4,r2
10011338:	10802804 	addi	r2,r2,160
1001133c:	10800017 	ldw	r2,0(r2)
10011340:	1009883a 	mov	r4,r2
10011344:	00144f80 	call	100144f8 <__floatunsisf>
10011348:	1021883a 	mov	r16,r2
1001134c:	e0bed217 	ldw	r2,-1208(fp)
10011350:	10800044 	addi	r2,r2,1
10011354:	1009883a 	mov	r4,r2
10011358:	00144f80 	call	100144f8 <__floatunsisf>
1001135c:	1007883a 	mov	r3,r2
10011360:	8009883a 	mov	r4,r16
10011364:	180b883a 	mov	r5,r3
10011368:	001430c0 	call	1001430c <__divsf3>
1001136c:	1007883a 	mov	r3,r2
10011370:	e0fed815 	stw	r3,-1184(fp)
          sum[type] += count[x] == 0 ? 0 : flog2(1 / p) * p;
10011374:	e0becc17 	ldw	r2,-1232(fp)
10011378:	1085883a 	add	r2,r2,r2
1001137c:	1085883a 	add	r2,r2,r2
10011380:	e0fec504 	addi	r3,fp,-1260
10011384:	1885883a 	add	r2,r3,r2
10011388:	10801d04 	addi	r2,r2,116
1001138c:	14000017 	ldw	r16,0(r2)
10011390:	e0bec617 	ldw	r2,-1256(fp)
10011394:	1085883a 	add	r2,r2,r2
10011398:	1085883a 	add	r2,r2,r2
1001139c:	e13ec504 	addi	r4,fp,-1260
100113a0:	2085883a 	add	r2,r4,r2
100113a4:	10802804 	addi	r2,r2,160
100113a8:	10800017 	ldw	r2,0(r2)
100113ac:	10000e26 	beq	r2,zero,100113e8 <filter+0x808>
100113b0:	010fe034 	movhi	r4,16256
100113b4:	e17ed817 	ldw	r5,-1184(fp)
100113b8:	001430c0 	call	1001430c <__divsf3>
100113bc:	1007883a 	mov	r3,r2
100113c0:	1805883a 	mov	r2,r3
100113c4:	1009883a 	mov	r4,r2
100113c8:	0010a380 	call	10010a38 <flog2>
100113cc:	1007883a 	mov	r3,r2
100113d0:	1809883a 	mov	r4,r3
100113d4:	e17ed817 	ldw	r5,-1184(fp)
100113d8:	001417c0 	call	1001417c <__mulsf3>
100113dc:	1007883a 	mov	r3,r2
100113e0:	1805883a 	mov	r2,r3
100113e4:	00000106 	br	100113ec <filter+0x80c>
100113e8:	0005883a 	mov	r2,zero
100113ec:	8009883a 	mov	r4,r16
100113f0:	100b883a 	mov	r5,r2
100113f4:	00140d80 	call	100140d8 <__addsf3>
100113f8:	1009883a 	mov	r4,r2
100113fc:	2007883a 	mov	r3,r4
10011400:	e0becc17 	ldw	r2,-1232(fp)
10011404:	1085883a 	add	r2,r2,r2
10011408:	1085883a 	add	r2,r2,r2
1001140c:	e13ec504 	addi	r4,fp,-1260
10011410:	2085883a 	add	r2,r4,r2
10011414:	10801d04 	addi	r2,r2,116
10011418:	10c00015 	stw	r3,0(r2)
        filterScanline(attempt[type].data, &in[y * linebytes], prevline, linebytes, bytewidth, type);
        for(x = 0; x != 256; ++x) count[x] = 0;
        for(x = 0; x != linebytes; ++x) ++count[attempt[type].data[x]];
        ++count[type]; /*the filter type itself is part of the scanline*/
        sum[type] = 0;
        for(x = 0; x != 256; ++x)
1001141c:	e0bec617 	ldw	r2,-1256(fp)
10011420:	10800044 	addi	r2,r2,1
10011424:	e0bec615 	stw	r2,-1256(fp)
10011428:	e0bec617 	ldw	r2,-1256(fp)
1001142c:	10804018 	cmpnei	r2,r2,256
10011430:	103fbc1e 	bne	r2,zero,10011324 <__alt_data_end+0xf8011324>
        {
          float p = count[x] / (float)(linebytes + 1);
          sum[type] += count[x] == 0 ? 0 : flog2(1 / p) * p;
        }
        /*check if this is smallest sum (or if type == 0 it's the first case so always store the values)*/
        if(type == 0 || sum[type] < smallest)
10011434:	e0becc17 	ldw	r2,-1232(fp)
10011438:	10000b26 	beq	r2,zero,10011468 <filter+0x888>
1001143c:	e0becc17 	ldw	r2,-1232(fp)
10011440:	1085883a 	add	r2,r2,r2
10011444:	1085883a 	add	r2,r2,r2
10011448:	e0fec504 	addi	r3,fp,-1260
1001144c:	1885883a 	add	r2,r3,r2
10011450:	10c01d04 	addi	r3,r2,116
10011454:	18800017 	ldw	r2,0(r3)
10011458:	1009883a 	mov	r4,r2
1001145c:	e17ecb17 	ldw	r5,-1236(fp)
10011460:	00144a40 	call	100144a4 <__ltsf2>
10011464:	10000a0e 	bge	r2,zero,10011490 <filter+0x8b0>
        {
          bestType = type;
10011468:	e0becc17 	ldw	r2,-1232(fp)
1001146c:	e0becd15 	stw	r2,-1228(fp)
          smallest = sum[type];
10011470:	e0becc17 	ldw	r2,-1232(fp)
10011474:	1085883a 	add	r2,r2,r2
10011478:	1085883a 	add	r2,r2,r2
1001147c:	e13ec504 	addi	r4,fp,-1260
10011480:	2085883a 	add	r2,r4,r2
10011484:	10801d04 	addi	r2,r2,116
10011488:	10800017 	ldw	r2,0(r2)
1001148c:	e0becb15 	stw	r2,-1236(fp)
    }

    for(y = 0; y != h; ++y)
    {
      /*try the 5 filter types*/
      for(type = 0; type != 5; ++type)
10011490:	e0becc17 	ldw	r2,-1232(fp)
10011494:	10800044 	addi	r2,r2,1
10011498:	e0becc15 	stw	r2,-1232(fp)
1001149c:	e0becc17 	ldw	r2,-1232(fp)
100114a0:	10800158 	cmpnei	r2,r2,5
100114a4:	103f401e 	bne	r2,zero,100111a8 <__alt_data_end+0xf80111a8>
          bestType = type;
          smallest = sum[type];
        }
      }

      prevline = &in[y * linebytes];
100114a8:	e13ec717 	ldw	r4,-1252(fp)
100114ac:	e17ed217 	ldw	r5,-1208(fp)
100114b0:	00146fc0 	call	100146fc <__mulsi3>
100114b4:	e0fffd17 	ldw	r3,-12(fp)
100114b8:	1885883a 	add	r2,r3,r2
100114bc:	e0bec515 	stw	r2,-1260(fp)

      /*now fill the out values*/
      out[y * (linebytes + 1)] = bestType; /*the first byte of a scanline will be the filter type*/
100114c0:	e0bed217 	ldw	r2,-1208(fp)
100114c4:	10800044 	addi	r2,r2,1
100114c8:	1009883a 	mov	r4,r2
100114cc:	e17ec717 	ldw	r5,-1252(fp)
100114d0:	00146fc0 	call	100146fc <__mulsi3>
100114d4:	e0fffc17 	ldw	r3,-16(fp)
100114d8:	1885883a 	add	r2,r3,r2
100114dc:	e0fecd17 	ldw	r3,-1228(fp)
100114e0:	10c00005 	stb	r3,0(r2)
      for(x = 0; x != linebytes; ++x) out[y * (linebytes + 1) + 1 + x] = attempt[bestType].data[x];
100114e4:	e03ec615 	stw	zero,-1256(fp)
100114e8:	00001a06 	br	10011554 <filter+0x974>
100114ec:	e0bed217 	ldw	r2,-1208(fp)
100114f0:	10800044 	addi	r2,r2,1
100114f4:	1009883a 	mov	r4,r2
100114f8:	e17ec717 	ldw	r5,-1252(fp)
100114fc:	00146fc0 	call	100146fc <__mulsi3>
10011500:	1007883a 	mov	r3,r2
10011504:	e0bec617 	ldw	r2,-1256(fp)
10011508:	1885883a 	add	r2,r3,r2
1001150c:	10800044 	addi	r2,r2,1
10011510:	e0fffc17 	ldw	r3,-16(fp)
10011514:	18a1883a 	add	r16,r3,r2
10011518:	e0becd17 	ldw	r2,-1228(fp)
1001151c:	1009883a 	mov	r4,r2
10011520:	01400304 	movi	r5,12
10011524:	00146fc0 	call	100146fc <__mulsi3>
10011528:	e0fec504 	addi	r3,fp,-1260
1001152c:	1885883a 	add	r2,r3,r2
10011530:	10812804 	addi	r2,r2,1184
10011534:	10c00017 	ldw	r3,0(r2)
10011538:	e0bec617 	ldw	r2,-1256(fp)
1001153c:	1885883a 	add	r2,r3,r2
10011540:	10800003 	ldbu	r2,0(r2)
10011544:	80800005 	stb	r2,0(r16)
10011548:	e0bec617 	ldw	r2,-1256(fp)
1001154c:	10800044 	addi	r2,r2,1
10011550:	e0bec615 	stw	r2,-1256(fp)
10011554:	e0fec617 	ldw	r3,-1256(fp)
10011558:	e0bed217 	ldw	r2,-1208(fp)
1001155c:	18bfe31e 	bne	r3,r2,100114ec <__alt_data_end+0xf80114ec>
    {
      ucvector_init(&attempt[type]);
      if(!ucvector_resize(&attempt[type], linebytes)) return 83; /*alloc fail*/
    }

    for(y = 0; y != h; ++y)
10011560:	e0bec717 	ldw	r2,-1252(fp)
10011564:	10800044 	addi	r2,r2,1
10011568:	e0bec715 	stw	r2,-1252(fp)
1001156c:	e0fec717 	ldw	r3,-1252(fp)
10011570:	e0bfff17 	ldw	r2,-4(fp)
10011574:	18bf0a1e 	bne	r3,r2,100111a0 <__alt_data_end+0xf80111a0>
      /*now fill the out values*/
      out[y * (linebytes + 1)] = bestType; /*the first byte of a scanline will be the filter type*/
      for(x = 0; x != linebytes; ++x) out[y * (linebytes + 1) + 1 + x] = attempt[bestType].data[x];
    }

    for(type = 0; type != 5; ++type) ucvector_cleanup(&attempt[type]);
10011578:	e03ecc15 	stw	zero,-1232(fp)
1001157c:	00000a06 	br	100115a8 <filter+0x9c8>
10011580:	e43fed04 	addi	r16,fp,-76
10011584:	e13ecc17 	ldw	r4,-1232(fp)
10011588:	01400304 	movi	r5,12
1001158c:	00146fc0 	call	100146fc <__mulsi3>
10011590:	8085883a 	add	r2,r16,r2
10011594:	1009883a 	mov	r4,r2
10011598:	00006680 	call	10000668 <ucvector_cleanup>
1001159c:	e0becc17 	ldw	r2,-1232(fp)
100115a0:	10800044 	addi	r2,r2,1
100115a4:	e0becc15 	stw	r2,-1232(fp)
100115a8:	e0becc17 	ldw	r2,-1232(fp)
100115ac:	10800158 	cmpnei	r2,r2,5
100115b0:	103ff31e 	bne	r2,zero,10011580 <__alt_data_end+0xf8011580>
100115b4:	00010e06 	br	100119f0 <filter+0xe10>
  }
  else if(strategy == LFS_PREDEFINED)
100115b8:	e0bec817 	ldw	r2,-1248(fp)
100115bc:	10800118 	cmpnei	r2,r2,4
100115c0:	1000321e 	bne	r2,zero,1001168c <filter+0xaac>
  {
    for(y = 0; y != h; ++y)
100115c4:	e03ec715 	stw	zero,-1252(fp)
100115c8:	00002c06 	br	1001167c <filter+0xa9c>
    {
      size_t outindex = (1 + linebytes) * y; /*the extra filterbyte added to each row*/
100115cc:	e0bed217 	ldw	r2,-1208(fp)
100115d0:	10800044 	addi	r2,r2,1
100115d4:	1009883a 	mov	r4,r2
100115d8:	e17ec717 	ldw	r5,-1252(fp)
100115dc:	00146fc0 	call	100146fc <__mulsi3>
100115e0:	e0bed915 	stw	r2,-1180(fp)
      size_t inindex = linebytes * y;
100115e4:	e13ed217 	ldw	r4,-1208(fp)
100115e8:	e17ec717 	ldw	r5,-1252(fp)
100115ec:	00146fc0 	call	100146fc <__mulsi3>
100115f0:	e0beda15 	stw	r2,-1176(fp)
      unsigned char type = settings->predefined_filters[y];
100115f4:	e0800517 	ldw	r2,20(fp)
100115f8:	10c00c17 	ldw	r3,48(r2)
100115fc:	e0bec717 	ldw	r2,-1252(fp)
10011600:	1885883a 	add	r2,r3,r2
10011604:	10800003 	ldbu	r2,0(r2)
10011608:	e0bedb05 	stb	r2,-1172(fp)
      out[outindex] = type; /*filter type byte*/
1001160c:	e0fffc17 	ldw	r3,-16(fp)
10011610:	e0bed917 	ldw	r2,-1180(fp)
10011614:	1885883a 	add	r2,r3,r2
10011618:	e0fedb03 	ldbu	r3,-1172(fp)
1001161c:	10c00005 	stb	r3,0(r2)
      filterScanline(&out[outindex + 1], &in[inindex], prevline, linebytes, bytewidth, type);
10011620:	e0bed917 	ldw	r2,-1180(fp)
10011624:	10800044 	addi	r2,r2,1
10011628:	e0fffc17 	ldw	r3,-16(fp)
1001162c:	1887883a 	add	r3,r3,r2
10011630:	e13ffd17 	ldw	r4,-12(fp)
10011634:	e0beda17 	ldw	r2,-1176(fp)
10011638:	2085883a 	add	r2,r4,r2
1001163c:	e13edb03 	ldbu	r4,-1172(fp)
10011640:	e17ed317 	ldw	r5,-1204(fp)
10011644:	d9400015 	stw	r5,0(sp)
10011648:	d9000115 	stw	r4,4(sp)
1001164c:	1809883a 	mov	r4,r3
10011650:	100b883a 	mov	r5,r2
10011654:	e1bec517 	ldw	r6,-1260(fp)
10011658:	e1fed217 	ldw	r7,-1208(fp)
1001165c:	00104d40 	call	100104d4 <filterScanline>
      prevline = &in[inindex];
10011660:	e0fffd17 	ldw	r3,-12(fp)
10011664:	e0beda17 	ldw	r2,-1176(fp)
10011668:	1885883a 	add	r2,r3,r2
1001166c:	e0bec515 	stw	r2,-1260(fp)

    for(type = 0; type != 5; ++type) ucvector_cleanup(&attempt[type]);
  }
  else if(strategy == LFS_PREDEFINED)
  {
    for(y = 0; y != h; ++y)
10011670:	e0bec717 	ldw	r2,-1252(fp)
10011674:	10800044 	addi	r2,r2,1
10011678:	e0bec715 	stw	r2,-1252(fp)
1001167c:	e0fec717 	ldw	r3,-1252(fp)
10011680:	e0bfff17 	ldw	r2,-4(fp)
10011684:	18bfd11e 	bne	r3,r2,100115cc <__alt_data_end+0xf80115cc>
10011688:	0000d906 	br	100119f0 <filter+0xe10>
      out[outindex] = type; /*filter type byte*/
      filterScanline(&out[outindex + 1], &in[inindex], prevline, linebytes, bytewidth, type);
      prevline = &in[inindex];
    }
  }
  else if(strategy == LFS_BRUTE_FORCE)
1001168c:	e0bec817 	ldw	r2,-1248(fp)
10011690:	108000d8 	cmpnei	r2,r2,3
10011694:	1000d41e 	bne	r2,zero,100119e8 <filter+0xe08>
    /*brute force filter chooser.
    deflate the scanline after every filter attempt to see which one deflates best.
    This is very slow and gives only slightly smaller, sometimes even larger, result*/
    size_t size[5];
    ucvector attempt[5]; /*five filtering attempts, one for each filter type*/
    size_t smallest = 0;
10011698:	e03ece15 	stw	zero,-1224(fp)
    unsigned type = 0, bestType = 0;
1001169c:	e03ecf15 	stw	zero,-1220(fp)
100116a0:	e03ed015 	stw	zero,-1216(fp)
    unsigned char* dummy;
    LodePNGCompressSettings zlibsettings = settings->zlibsettings;
100116a4:	e0800517 	ldw	r2,20(fp)
100116a8:	10c00017 	ldw	r3,0(r2)
100116ac:	e0ffed15 	stw	r3,-76(fp)
100116b0:	10c00117 	ldw	r3,4(r2)
100116b4:	e0ffee15 	stw	r3,-72(fp)
100116b8:	10c00217 	ldw	r3,8(r2)
100116bc:	e0ffef15 	stw	r3,-68(fp)
100116c0:	10c00317 	ldw	r3,12(r2)
100116c4:	e0fff015 	stw	r3,-64(fp)
100116c8:	10c00417 	ldw	r3,16(r2)
100116cc:	e0fff115 	stw	r3,-60(fp)
100116d0:	10c00517 	ldw	r3,20(r2)
100116d4:	e0fff215 	stw	r3,-56(fp)
100116d8:	10c00617 	ldw	r3,24(r2)
100116dc:	e0fff315 	stw	r3,-52(fp)
100116e0:	10c00717 	ldw	r3,28(r2)
100116e4:	e0fff415 	stw	r3,-48(fp)
100116e8:	10800817 	ldw	r2,32(r2)
100116ec:	e0bff515 	stw	r2,-44(fp)
    /*use fixed tree on the attempts so that the tree is not adapted to the filtertype on purpose,
    to simulate the true case where the tree is the same for the whole image. Sometimes it gives
    better result with dynamic tree anyway. Using the fixed tree sometimes gives worse, but in rare
    cases better compression. It does make this a bit less slow, so it's worth doing this.*/
    zlibsettings.btype = 1;
100116f0:	00800044 	movi	r2,1
100116f4:	e0bfed15 	stw	r2,-76(fp)
    /*a custom encoder likely doesn't read the btype setting and is optimized for complete PNG
    images only, so disable it*/
    zlibsettings.custom_zlib = 0;
100116f8:	e03ff315 	stw	zero,-52(fp)
    zlibsettings.custom_deflate = 0;
100116fc:	e03ff415 	stw	zero,-48(fp)
    for(type = 0; type != 5; ++type)
10011700:	e03ecf15 	stw	zero,-1220(fp)
10011704:	00001206 	br	10011750 <filter+0xb70>
    {
      ucvector_init(&attempt[type]);
10011708:	e43eed04 	addi	r16,fp,-1100
1001170c:	e13ecf17 	ldw	r4,-1220(fp)
10011710:	01400304 	movi	r5,12
10011714:	00146fc0 	call	100146fc <__mulsi3>
10011718:	8085883a 	add	r2,r16,r2
1001171c:	1009883a 	mov	r4,r2
10011720:	00006c00 	call	100006c0 <ucvector_init>
      ucvector_resize(&attempt[type], linebytes); /*todo: give error if resize failed*/
10011724:	e43eed04 	addi	r16,fp,-1100
10011728:	e13ecf17 	ldw	r4,-1220(fp)
1001172c:	01400304 	movi	r5,12
10011730:	00146fc0 	call	100146fc <__mulsi3>
10011734:	8085883a 	add	r2,r16,r2
10011738:	1009883a 	mov	r4,r2
1001173c:	e17ed217 	ldw	r5,-1208(fp)
10011740:	00006140 	call	10000614 <ucvector_resize>
    zlibsettings.btype = 1;
    /*a custom encoder likely doesn't read the btype setting and is optimized for complete PNG
    images only, so disable it*/
    zlibsettings.custom_zlib = 0;
    zlibsettings.custom_deflate = 0;
    for(type = 0; type != 5; ++type)
10011744:	e0becf17 	ldw	r2,-1220(fp)
10011748:	10800044 	addi	r2,r2,1
1001174c:	e0becf15 	stw	r2,-1220(fp)
10011750:	e0becf17 	ldw	r2,-1220(fp)
10011754:	10800158 	cmpnei	r2,r2,5
10011758:	103feb1e 	bne	r2,zero,10011708 <__alt_data_end+0xf8011708>
    {
      ucvector_init(&attempt[type]);
      ucvector_resize(&attempt[type], linebytes); /*todo: give error if resize failed*/
    }
    for(y = 0; y != h; ++y) /*try the 5 filter types*/
1001175c:	e03ec715 	stw	zero,-1252(fp)
10011760:	00008e06 	br	1001199c <filter+0xdbc>
    {
      for(type = 0; type != 5; ++type)
10011764:	e03ecf15 	stw	zero,-1220(fp)
10011768:	00005806 	br	100118cc <filter+0xcec>
      {
        unsigned testsize = attempt[type].size;
1001176c:	e0becf17 	ldw	r2,-1220(fp)
10011770:	1009883a 	mov	r4,r2
10011774:	01400304 	movi	r5,12
10011778:	00146fc0 	call	100146fc <__mulsi3>
1001177c:	e13ec504 	addi	r4,fp,-1260
10011780:	2085883a 	add	r2,r4,r2
10011784:	10802904 	addi	r2,r2,164
10011788:	10800017 	ldw	r2,0(r2)
1001178c:	e0bedc15 	stw	r2,-1168(fp)
        /*if(testsize > 8) testsize /= 8;*/ /*it already works good enough by testing a part of the row*/

        filterScanline(attempt[type].data, &in[y * linebytes], prevline, linebytes, bytewidth, type);
10011790:	e0becf17 	ldw	r2,-1220(fp)
10011794:	1009883a 	mov	r4,r2
10011798:	01400304 	movi	r5,12
1001179c:	00146fc0 	call	100146fc <__mulsi3>
100117a0:	e0fec504 	addi	r3,fp,-1260
100117a4:	1885883a 	add	r2,r3,r2
100117a8:	10802804 	addi	r2,r2,160
100117ac:	14000017 	ldw	r16,0(r2)
100117b0:	e13ec717 	ldw	r4,-1252(fp)
100117b4:	e17ed217 	ldw	r5,-1208(fp)
100117b8:	00146fc0 	call	100146fc <__mulsi3>
100117bc:	e0fffd17 	ldw	r3,-12(fp)
100117c0:	1885883a 	add	r2,r3,r2
100117c4:	e0fecf17 	ldw	r3,-1220(fp)
100117c8:	18c03fcc 	andi	r3,r3,255
100117cc:	e13ed317 	ldw	r4,-1204(fp)
100117d0:	d9000015 	stw	r4,0(sp)
100117d4:	d8c00115 	stw	r3,4(sp)
100117d8:	8009883a 	mov	r4,r16
100117dc:	100b883a 	mov	r5,r2
100117e0:	e1bec517 	ldw	r6,-1260(fp)
100117e4:	e1fed217 	ldw	r7,-1208(fp)
100117e8:	00104d40 	call	100104d4 <filterScanline>
        size[type] = 0;
100117ec:	e0becf17 	ldw	r2,-1220(fp)
100117f0:	1085883a 	add	r2,r2,r2
100117f4:	1085883a 	add	r2,r2,r2
100117f8:	e13ec504 	addi	r4,fp,-1260
100117fc:	2085883a 	add	r2,r4,r2
10011800:	10802204 	addi	r2,r2,136
10011804:	10000015 	stw	zero,0(r2)
        dummy = 0;
10011808:	e03eec15 	stw	zero,-1104(fp)
        zlib_compress(&dummy, &size[type], attempt[type].data, testsize, &zlibsettings);
1001180c:	e0fee704 	addi	r3,fp,-1124
10011810:	e0becf17 	ldw	r2,-1220(fp)
10011814:	1085883a 	add	r2,r2,r2
10011818:	1085883a 	add	r2,r2,r2
1001181c:	18a1883a 	add	r16,r3,r2
10011820:	e0becf17 	ldw	r2,-1220(fp)
10011824:	1009883a 	mov	r4,r2
10011828:	01400304 	movi	r5,12
1001182c:	00146fc0 	call	100146fc <__mulsi3>
10011830:	e0fec504 	addi	r3,fp,-1260
10011834:	1885883a 	add	r2,r3,r2
10011838:	10802804 	addi	r2,r2,160
1001183c:	10800017 	ldw	r2,0(r2)
10011840:	e0feec04 	addi	r3,fp,-1104
10011844:	e13fed04 	addi	r4,fp,-76
10011848:	d9000015 	stw	r4,0(sp)
1001184c:	1809883a 	mov	r4,r3
10011850:	800b883a 	mov	r5,r16
10011854:	100d883a 	mov	r6,r2
10011858:	e1fedc17 	ldw	r7,-1168(fp)
1001185c:	00061600 	call	10006160 <zlib_compress>
        lodepng_free(dummy);
10011860:	e0beec17 	ldw	r2,-1104(fp)
10011864:	1009883a 	mov	r4,r2
10011868:	000025c0 	call	1000025c <lodepng_free>
        /*check if this is smallest size (or if type == 0 it's the first case so always store the values)*/
        if(type == 0 || size[type] < smallest)
1001186c:	e0becf17 	ldw	r2,-1220(fp)
10011870:	10000926 	beq	r2,zero,10011898 <filter+0xcb8>
10011874:	e0becf17 	ldw	r2,-1220(fp)
10011878:	1085883a 	add	r2,r2,r2
1001187c:	1085883a 	add	r2,r2,r2
10011880:	e13ec504 	addi	r4,fp,-1260
10011884:	2085883a 	add	r2,r4,r2
10011888:	10802204 	addi	r2,r2,136
1001188c:	10c00017 	ldw	r3,0(r2)
10011890:	e0bece17 	ldw	r2,-1224(fp)
10011894:	18800a2e 	bgeu	r3,r2,100118c0 <filter+0xce0>
        {
          bestType = type;
10011898:	e0becf17 	ldw	r2,-1220(fp)
1001189c:	e0bed015 	stw	r2,-1216(fp)
          smallest = size[type];
100118a0:	e0becf17 	ldw	r2,-1220(fp)
100118a4:	1085883a 	add	r2,r2,r2
100118a8:	1085883a 	add	r2,r2,r2
100118ac:	e0fec504 	addi	r3,fp,-1260
100118b0:	1885883a 	add	r2,r3,r2
100118b4:	10802204 	addi	r2,r2,136
100118b8:	10800017 	ldw	r2,0(r2)
100118bc:	e0bece15 	stw	r2,-1224(fp)
      ucvector_init(&attempt[type]);
      ucvector_resize(&attempt[type], linebytes); /*todo: give error if resize failed*/
    }
    for(y = 0; y != h; ++y) /*try the 5 filter types*/
    {
      for(type = 0; type != 5; ++type)
100118c0:	e0becf17 	ldw	r2,-1220(fp)
100118c4:	10800044 	addi	r2,r2,1
100118c8:	e0becf15 	stw	r2,-1220(fp)
100118cc:	e0becf17 	ldw	r2,-1220(fp)
100118d0:	10800158 	cmpnei	r2,r2,5
100118d4:	103fa51e 	bne	r2,zero,1001176c <__alt_data_end+0xf801176c>
        {
          bestType = type;
          smallest = size[type];
        }
      }
      prevline = &in[y * linebytes];
100118d8:	e13ec717 	ldw	r4,-1252(fp)
100118dc:	e17ed217 	ldw	r5,-1208(fp)
100118e0:	00146fc0 	call	100146fc <__mulsi3>
100118e4:	e0fffd17 	ldw	r3,-12(fp)
100118e8:	1885883a 	add	r2,r3,r2
100118ec:	e0bec515 	stw	r2,-1260(fp)
      out[y * (linebytes + 1)] = bestType; /*the first byte of a scanline will be the filter type*/
100118f0:	e0bed217 	ldw	r2,-1208(fp)
100118f4:	10800044 	addi	r2,r2,1
100118f8:	1009883a 	mov	r4,r2
100118fc:	e17ec717 	ldw	r5,-1252(fp)
10011900:	00146fc0 	call	100146fc <__mulsi3>
10011904:	e0fffc17 	ldw	r3,-16(fp)
10011908:	1885883a 	add	r2,r3,r2
1001190c:	e0fed017 	ldw	r3,-1216(fp)
10011910:	10c00005 	stb	r3,0(r2)
      for(x = 0; x != linebytes; ++x) out[y * (linebytes + 1) + 1 + x] = attempt[bestType].data[x];
10011914:	e03ec615 	stw	zero,-1256(fp)
10011918:	00001a06 	br	10011984 <filter+0xda4>
1001191c:	e0bed217 	ldw	r2,-1208(fp)
10011920:	10800044 	addi	r2,r2,1
10011924:	1009883a 	mov	r4,r2
10011928:	e17ec717 	ldw	r5,-1252(fp)
1001192c:	00146fc0 	call	100146fc <__mulsi3>
10011930:	1007883a 	mov	r3,r2
10011934:	e0bec617 	ldw	r2,-1256(fp)
10011938:	1885883a 	add	r2,r3,r2
1001193c:	10800044 	addi	r2,r2,1
10011940:	e0fffc17 	ldw	r3,-16(fp)
10011944:	18a1883a 	add	r16,r3,r2
10011948:	e0bed017 	ldw	r2,-1216(fp)
1001194c:	1009883a 	mov	r4,r2
10011950:	01400304 	movi	r5,12
10011954:	00146fc0 	call	100146fc <__mulsi3>
10011958:	e13ec504 	addi	r4,fp,-1260
1001195c:	2085883a 	add	r2,r4,r2
10011960:	10802804 	addi	r2,r2,160
10011964:	10c00017 	ldw	r3,0(r2)
10011968:	e0bec617 	ldw	r2,-1256(fp)
1001196c:	1885883a 	add	r2,r3,r2
10011970:	10800003 	ldbu	r2,0(r2)
10011974:	80800005 	stb	r2,0(r16)
10011978:	e0bec617 	ldw	r2,-1256(fp)
1001197c:	10800044 	addi	r2,r2,1
10011980:	e0bec615 	stw	r2,-1256(fp)
10011984:	e0fec617 	ldw	r3,-1256(fp)
10011988:	e0bed217 	ldw	r2,-1208(fp)
1001198c:	18bfe31e 	bne	r3,r2,1001191c <__alt_data_end+0xf801191c>
    for(type = 0; type != 5; ++type)
    {
      ucvector_init(&attempt[type]);
      ucvector_resize(&attempt[type], linebytes); /*todo: give error if resize failed*/
    }
    for(y = 0; y != h; ++y) /*try the 5 filter types*/
10011990:	e0bec717 	ldw	r2,-1252(fp)
10011994:	10800044 	addi	r2,r2,1
10011998:	e0bec715 	stw	r2,-1252(fp)
1001199c:	e0fec717 	ldw	r3,-1252(fp)
100119a0:	e0bfff17 	ldw	r2,-4(fp)
100119a4:	18bf6f1e 	bne	r3,r2,10011764 <__alt_data_end+0xf8011764>
      }
      prevline = &in[y * linebytes];
      out[y * (linebytes + 1)] = bestType; /*the first byte of a scanline will be the filter type*/
      for(x = 0; x != linebytes; ++x) out[y * (linebytes + 1) + 1 + x] = attempt[bestType].data[x];
    }
    for(type = 0; type != 5; ++type) ucvector_cleanup(&attempt[type]);
100119a8:	e03ecf15 	stw	zero,-1220(fp)
100119ac:	00000a06 	br	100119d8 <filter+0xdf8>
100119b0:	e43eed04 	addi	r16,fp,-1100
100119b4:	e13ecf17 	ldw	r4,-1220(fp)
100119b8:	01400304 	movi	r5,12
100119bc:	00146fc0 	call	100146fc <__mulsi3>
100119c0:	8085883a 	add	r2,r16,r2
100119c4:	1009883a 	mov	r4,r2
100119c8:	00006680 	call	10000668 <ucvector_cleanup>
100119cc:	e0becf17 	ldw	r2,-1220(fp)
100119d0:	10800044 	addi	r2,r2,1
100119d4:	e0becf15 	stw	r2,-1220(fp)
100119d8:	e0becf17 	ldw	r2,-1220(fp)
100119dc:	10800158 	cmpnei	r2,r2,5
100119e0:	103ff31e 	bne	r2,zero,100119b0 <__alt_data_end+0xf80119b0>
100119e4:	00000206 	br	100119f0 <filter+0xe10>
  }
  else return 88; /* unknown filter strategy */
100119e8:	00801604 	movi	r2,88
100119ec:	00000106 	br	100119f4 <filter+0xe14>

  return error;
100119f0:	e0bed417 	ldw	r2,-1200(fp)
}
100119f4:	e037883a 	mov	sp,fp
100119f8:	dfc00317 	ldw	ra,12(sp)
100119fc:	df000217 	ldw	fp,8(sp)
10011a00:	dc400117 	ldw	r17,4(sp)
10011a04:	dc000017 	ldw	r16,0(sp)
10011a08:	dec00404 	addi	sp,sp,16
10011a0c:	f800283a 	ret

10011a10 <addPaddingBits>:

static void addPaddingBits(unsigned char* out, const unsigned char* in,
                           size_t olinebits, size_t ilinebits, unsigned h)
{
10011a10:	defff404 	addi	sp,sp,-48
10011a14:	dfc00b15 	stw	ra,44(sp)
10011a18:	df000a15 	stw	fp,40(sp)
10011a1c:	df000a04 	addi	fp,sp,40
10011a20:	e13ffc15 	stw	r4,-16(fp)
10011a24:	e17ffd15 	stw	r5,-12(fp)
10011a28:	e1bffe15 	stw	r6,-8(fp)
10011a2c:	e1ffff15 	stw	r7,-4(fp)
  /*The opposite of the removePaddingBits function
  olinebits must be >= ilinebits*/
  unsigned y;
  size_t diff = olinebits - ilinebits;
10011a30:	e0fffe17 	ldw	r3,-8(fp)
10011a34:	e0bfff17 	ldw	r2,-4(fp)
10011a38:	1885c83a 	sub	r2,r3,r2
10011a3c:	e0bff815 	stw	r2,-32(fp)
  size_t obp = 0, ibp = 0; /*bit pointers*/
10011a40:	e03ffa15 	stw	zero,-24(fp)
10011a44:	e03ffb15 	stw	zero,-20(fp)
  for(y = 0; y != h; ++y)
10011a48:	e03ff615 	stw	zero,-40(fp)
10011a4c:	00002306 	br	10011adc <addPaddingBits+0xcc>
  {
    size_t x;
    for(x = 0; x < ilinebits; ++x)
10011a50:	e03ff715 	stw	zero,-36(fp)
10011a54:	00000e06 	br	10011a90 <addPaddingBits+0x80>
    {
      unsigned char bit = readBitFromReversedStream(&ibp, in);
10011a58:	e0bffb04 	addi	r2,fp,-20
10011a5c:	1009883a 	mov	r4,r2
10011a60:	e17ffd17 	ldw	r5,-12(fp)
10011a64:	00063400 	call	10006340 <readBitFromReversedStream>
10011a68:	e0bff905 	stb	r2,-28(fp)
      setBitOfReversedStream(&obp, out, bit);
10011a6c:	e0bff903 	ldbu	r2,-28(fp)
10011a70:	e0fffa04 	addi	r3,fp,-24
10011a74:	1809883a 	mov	r4,r3
10011a78:	e17ffc17 	ldw	r5,-16(fp)
10011a7c:	100d883a 	mov	r6,r2
10011a80:	00064d00 	call	100064d0 <setBitOfReversedStream>
  size_t diff = olinebits - ilinebits;
  size_t obp = 0, ibp = 0; /*bit pointers*/
  for(y = 0; y != h; ++y)
  {
    size_t x;
    for(x = 0; x < ilinebits; ++x)
10011a84:	e0bff717 	ldw	r2,-36(fp)
10011a88:	10800044 	addi	r2,r2,1
10011a8c:	e0bff715 	stw	r2,-36(fp)
10011a90:	e0fff717 	ldw	r3,-36(fp)
10011a94:	e0bfff17 	ldw	r2,-4(fp)
10011a98:	18bfef36 	bltu	r3,r2,10011a58 <__alt_data_end+0xf8011a58>
      unsigned char bit = readBitFromReversedStream(&ibp, in);
      setBitOfReversedStream(&obp, out, bit);
    }
    /*obp += diff; --> no, fill in some value in the padding bits too, to avoid
    "Use of uninitialised value of size ###" warning from valgrind*/
    for(x = 0; x != diff; ++x) setBitOfReversedStream(&obp, out, 0);
10011a9c:	e03ff715 	stw	zero,-36(fp)
10011aa0:	00000806 	br	10011ac4 <addPaddingBits+0xb4>
10011aa4:	e0bffa04 	addi	r2,fp,-24
10011aa8:	1009883a 	mov	r4,r2
10011aac:	e17ffc17 	ldw	r5,-16(fp)
10011ab0:	000d883a 	mov	r6,zero
10011ab4:	00064d00 	call	100064d0 <setBitOfReversedStream>
10011ab8:	e0bff717 	ldw	r2,-36(fp)
10011abc:	10800044 	addi	r2,r2,1
10011ac0:	e0bff715 	stw	r2,-36(fp)
10011ac4:	e0fff717 	ldw	r3,-36(fp)
10011ac8:	e0bff817 	ldw	r2,-32(fp)
10011acc:	18bff51e 	bne	r3,r2,10011aa4 <__alt_data_end+0xf8011aa4>
  /*The opposite of the removePaddingBits function
  olinebits must be >= ilinebits*/
  unsigned y;
  size_t diff = olinebits - ilinebits;
  size_t obp = 0, ibp = 0; /*bit pointers*/
  for(y = 0; y != h; ++y)
10011ad0:	e0bff617 	ldw	r2,-40(fp)
10011ad4:	10800044 	addi	r2,r2,1
10011ad8:	e0bff615 	stw	r2,-40(fp)
10011adc:	e0fff617 	ldw	r3,-40(fp)
10011ae0:	e0800217 	ldw	r2,8(fp)
10011ae4:	18bfda1e 	bne	r3,r2,10011a50 <__alt_data_end+0xf8011a50>
    }
    /*obp += diff; --> no, fill in some value in the padding bits too, to avoid
    "Use of uninitialised value of size ###" warning from valgrind*/
    for(x = 0; x != diff; ++x) setBitOfReversedStream(&obp, out, 0);
  }
}
10011ae8:	e037883a 	mov	sp,fp
10011aec:	dfc00117 	ldw	ra,4(sp)
10011af0:	df000017 	ldw	fp,0(sp)
10011af4:	dec00204 	addi	sp,sp,8
10011af8:	f800283a 	ret

10011afc <Adam7_interlace>:
in has the following size in bits: w * h * bpp.
out is possibly bigger due to padding bits between reduced images
NOTE: comments about padding bits are only relevant if bpp < 8
*/
static void Adam7_interlace(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
{
10011afc:	deffbf04 	addi	sp,sp,-260
10011b00:	dfc04015 	stw	ra,256(sp)
10011b04:	df003f15 	stw	fp,252(sp)
10011b08:	dc403e15 	stw	r17,248(sp)
10011b0c:	dc003d15 	stw	r16,244(sp)
10011b10:	df003d04 	addi	fp,sp,244
10011b14:	e13ffc15 	stw	r4,-16(fp)
10011b18:	e17ffd15 	stw	r5,-12(fp)
10011b1c:	e1bffe15 	stw	r6,-8(fp)
10011b20:	e1ffff15 	stw	r7,-4(fp)
  unsigned passw[7], passh[7];
  size_t filter_passstart[8], padded_passstart[8], passstart[8];
  unsigned i;

  Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
10011b24:	e13fd404 	addi	r4,fp,-176
10011b28:	e17fdb04 	addi	r5,fp,-148
10011b2c:	e0ffe204 	addi	r3,fp,-120
10011b30:	e0bfea04 	addi	r2,fp,-88
10011b34:	e1bff204 	addi	r6,fp,-56
10011b38:	d9800015 	stw	r6,0(sp)
10011b3c:	e1bffe17 	ldw	r6,-8(fp)
10011b40:	d9800115 	stw	r6,4(sp)
10011b44:	e1bfff17 	ldw	r6,-4(fp)
10011b48:	d9800215 	stw	r6,8(sp)
10011b4c:	e1800417 	ldw	r6,16(fp)
10011b50:	d9800315 	stw	r6,12(sp)
10011b54:	180d883a 	mov	r6,r3
10011b58:	100f883a 	mov	r7,r2
10011b5c:	000bd100 	call	1000bd10 <Adam7_getpassvalues>

  if(bpp >= 8)
10011b60:	e0800417 	ldw	r2,16(fp)
10011b64:	10800230 	cmpltui	r2,r2,8
10011b68:	1000821e 	bne	r2,zero,10011d74 <Adam7_interlace+0x278>
  {
    for(i = 0; i != 7; ++i)
10011b6c:	e03fc715 	stw	zero,-228(fp)
10011b70:	00007c06 	br	10011d64 <Adam7_interlace+0x268>
    {
      unsigned x, y, b;
      size_t bytewidth = bpp / 8;
10011b74:	e0800417 	ldw	r2,16(fp)
10011b78:	1004d0fa 	srli	r2,r2,3
10011b7c:	e0bfce15 	stw	r2,-200(fp)
      for(y = 0; y < passh[i]; ++y)
10011b80:	e03fc915 	stw	zero,-220(fp)
10011b84:	00006b06 	br	10011d34 <Adam7_interlace+0x238>
      for(x = 0; x < passw[i]; ++x)
10011b88:	e03fc815 	stw	zero,-224(fp)
10011b8c:	00005d06 	br	10011d04 <Adam7_interlace+0x208>
      {
        size_t pixelinstart = ((ADAM7_IY[i] + y * ADAM7_DY[i]) * w + ADAM7_IX[i] + x * ADAM7_DX[i]) * bytewidth;
10011b90:	00c400b4 	movhi	r3,4098
10011b94:	18ca7404 	addi	r3,r3,10704
10011b98:	e0bfc717 	ldw	r2,-228(fp)
10011b9c:	1085883a 	add	r2,r2,r2
10011ba0:	1085883a 	add	r2,r2,r2
10011ba4:	1885883a 	add	r2,r3,r2
10011ba8:	14000017 	ldw	r16,0(r2)
10011bac:	00c400b4 	movhi	r3,4098
10011bb0:	18ca8204 	addi	r3,r3,10760
10011bb4:	e0bfc717 	ldw	r2,-228(fp)
10011bb8:	1085883a 	add	r2,r2,r2
10011bbc:	1085883a 	add	r2,r2,r2
10011bc0:	1885883a 	add	r2,r3,r2
10011bc4:	10800017 	ldw	r2,0(r2)
10011bc8:	1009883a 	mov	r4,r2
10011bcc:	e17fc917 	ldw	r5,-220(fp)
10011bd0:	00146fc0 	call	100146fc <__mulsi3>
10011bd4:	8085883a 	add	r2,r16,r2
10011bd8:	1009883a 	mov	r4,r2
10011bdc:	e17ffe17 	ldw	r5,-8(fp)
10011be0:	00146fc0 	call	100146fc <__mulsi3>
10011be4:	1021883a 	mov	r16,r2
10011be8:	00c400b4 	movhi	r3,4098
10011bec:	18ca7b04 	addi	r3,r3,10732
10011bf0:	e0bfc717 	ldw	r2,-228(fp)
10011bf4:	1085883a 	add	r2,r2,r2
10011bf8:	1085883a 	add	r2,r2,r2
10011bfc:	1885883a 	add	r2,r3,r2
10011c00:	10800017 	ldw	r2,0(r2)
10011c04:	1009883a 	mov	r4,r2
10011c08:	e17fc817 	ldw	r5,-224(fp)
10011c0c:	00146fc0 	call	100146fc <__mulsi3>
10011c10:	8087883a 	add	r3,r16,r2
10011c14:	010400b4 	movhi	r4,4098
10011c18:	210a6d04 	addi	r4,r4,10676
10011c1c:	e0bfc717 	ldw	r2,-228(fp)
10011c20:	1085883a 	add	r2,r2,r2
10011c24:	1085883a 	add	r2,r2,r2
10011c28:	2085883a 	add	r2,r4,r2
10011c2c:	10800017 	ldw	r2,0(r2)
10011c30:	1885883a 	add	r2,r3,r2
10011c34:	1009883a 	mov	r4,r2
10011c38:	e17fce17 	ldw	r5,-200(fp)
10011c3c:	00146fc0 	call	100146fc <__mulsi3>
10011c40:	e0bfcf15 	stw	r2,-196(fp)
        size_t pixeloutstart = passstart[i] + (y * passw[i] + x) * bytewidth;
10011c44:	e0bfc717 	ldw	r2,-228(fp)
10011c48:	1085883a 	add	r2,r2,r2
10011c4c:	1085883a 	add	r2,r2,r2
10011c50:	e0ffc704 	addi	r3,fp,-228
10011c54:	1885883a 	add	r2,r3,r2
10011c58:	10802b04 	addi	r2,r2,172
10011c5c:	14000017 	ldw	r16,0(r2)
10011c60:	e0bfc717 	ldw	r2,-228(fp)
10011c64:	1085883a 	add	r2,r2,r2
10011c68:	1085883a 	add	r2,r2,r2
10011c6c:	e0ffc704 	addi	r3,fp,-228
10011c70:	1885883a 	add	r2,r3,r2
10011c74:	10800d04 	addi	r2,r2,52
10011c78:	10800017 	ldw	r2,0(r2)
10011c7c:	1009883a 	mov	r4,r2
10011c80:	e17fc917 	ldw	r5,-220(fp)
10011c84:	00146fc0 	call	100146fc <__mulsi3>
10011c88:	1007883a 	mov	r3,r2
10011c8c:	e0bfc817 	ldw	r2,-224(fp)
10011c90:	1885883a 	add	r2,r3,r2
10011c94:	1009883a 	mov	r4,r2
10011c98:	e17fce17 	ldw	r5,-200(fp)
10011c9c:	00146fc0 	call	100146fc <__mulsi3>
10011ca0:	8085883a 	add	r2,r16,r2
10011ca4:	e0bfd015 	stw	r2,-192(fp)
        for(b = 0; b < bytewidth; ++b)
10011ca8:	e03fca15 	stw	zero,-216(fp)
10011cac:	00000f06 	br	10011cec <Adam7_interlace+0x1f0>
        {
          out[pixeloutstart + b] = in[pixelinstart + b];
10011cb0:	e0ffd017 	ldw	r3,-192(fp)
10011cb4:	e0bfca17 	ldw	r2,-216(fp)
10011cb8:	1885883a 	add	r2,r3,r2
10011cbc:	e0fffc17 	ldw	r3,-16(fp)
10011cc0:	1885883a 	add	r2,r3,r2
10011cc4:	e13fcf17 	ldw	r4,-196(fp)
10011cc8:	e0ffca17 	ldw	r3,-216(fp)
10011ccc:	20c7883a 	add	r3,r4,r3
10011cd0:	e13ffd17 	ldw	r4,-12(fp)
10011cd4:	20c7883a 	add	r3,r4,r3
10011cd8:	18c00003 	ldbu	r3,0(r3)
10011cdc:	10c00005 	stb	r3,0(r2)
      for(y = 0; y < passh[i]; ++y)
      for(x = 0; x < passw[i]; ++x)
      {
        size_t pixelinstart = ((ADAM7_IY[i] + y * ADAM7_DY[i]) * w + ADAM7_IX[i] + x * ADAM7_DX[i]) * bytewidth;
        size_t pixeloutstart = passstart[i] + (y * passw[i] + x) * bytewidth;
        for(b = 0; b < bytewidth; ++b)
10011ce0:	e0bfca17 	ldw	r2,-216(fp)
10011ce4:	10800044 	addi	r2,r2,1
10011ce8:	e0bfca15 	stw	r2,-216(fp)
10011cec:	e0ffca17 	ldw	r3,-216(fp)
10011cf0:	e0bfce17 	ldw	r2,-200(fp)
10011cf4:	18bfee36 	bltu	r3,r2,10011cb0 <__alt_data_end+0xf8011cb0>
    for(i = 0; i != 7; ++i)
    {
      unsigned x, y, b;
      size_t bytewidth = bpp / 8;
      for(y = 0; y < passh[i]; ++y)
      for(x = 0; x < passw[i]; ++x)
10011cf8:	e0bfc817 	ldw	r2,-224(fp)
10011cfc:	10800044 	addi	r2,r2,1
10011d00:	e0bfc815 	stw	r2,-224(fp)
10011d04:	e0bfc717 	ldw	r2,-228(fp)
10011d08:	1085883a 	add	r2,r2,r2
10011d0c:	1085883a 	add	r2,r2,r2
10011d10:	e0ffc704 	addi	r3,fp,-228
10011d14:	1885883a 	add	r2,r3,r2
10011d18:	10800d04 	addi	r2,r2,52
10011d1c:	10800017 	ldw	r2,0(r2)
10011d20:	e0ffc817 	ldw	r3,-224(fp)
10011d24:	18bf9a36 	bltu	r3,r2,10011b90 <__alt_data_end+0xf8011b90>
  {
    for(i = 0; i != 7; ++i)
    {
      unsigned x, y, b;
      size_t bytewidth = bpp / 8;
      for(y = 0; y < passh[i]; ++y)
10011d28:	e0bfc917 	ldw	r2,-220(fp)
10011d2c:	10800044 	addi	r2,r2,1
10011d30:	e0bfc915 	stw	r2,-220(fp)
10011d34:	e0bfc717 	ldw	r2,-228(fp)
10011d38:	1085883a 	add	r2,r2,r2
10011d3c:	1085883a 	add	r2,r2,r2
10011d40:	e0ffc704 	addi	r3,fp,-228
10011d44:	1885883a 	add	r2,r3,r2
10011d48:	10801404 	addi	r2,r2,80
10011d4c:	10800017 	ldw	r2,0(r2)
10011d50:	e0ffc917 	ldw	r3,-220(fp)
10011d54:	18bf8c36 	bltu	r3,r2,10011b88 <__alt_data_end+0xf8011b88>

  Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);

  if(bpp >= 8)
  {
    for(i = 0; i != 7; ++i)
10011d58:	e0bfc717 	ldw	r2,-228(fp)
10011d5c:	10800044 	addi	r2,r2,1
10011d60:	e0bfc715 	stw	r2,-228(fp)
10011d64:	e0bfc717 	ldw	r2,-228(fp)
10011d68:	108001d8 	cmpnei	r2,r2,7
10011d6c:	103f811e 	bne	r2,zero,10011b74 <__alt_data_end+0xf8011b74>
10011d70:	00008506 	br	10011f88 <Adam7_interlace+0x48c>
      }
    }
  }
  else /*bpp < 8: Adam7 with pixels < 8 bit is a bit trickier: with bit pointers*/
  {
    for(i = 0; i != 7; ++i)
10011d74:	e03fc715 	stw	zero,-228(fp)
10011d78:	00008006 	br	10011f7c <Adam7_interlace+0x480>
    {
      unsigned x, y, b;
      unsigned ilinebits = bpp * passw[i];
10011d7c:	e0bfc717 	ldw	r2,-228(fp)
10011d80:	1085883a 	add	r2,r2,r2
10011d84:	1085883a 	add	r2,r2,r2
10011d88:	e0ffc704 	addi	r3,fp,-228
10011d8c:	1885883a 	add	r2,r3,r2
10011d90:	10800d04 	addi	r2,r2,52
10011d94:	10800017 	ldw	r2,0(r2)
10011d98:	1009883a 	mov	r4,r2
10011d9c:	e1400417 	ldw	r5,16(fp)
10011da0:	00146fc0 	call	100146fc <__mulsi3>
10011da4:	e0bfd115 	stw	r2,-188(fp)
      unsigned olinebits = bpp * w;
10011da8:	e1000417 	ldw	r4,16(fp)
10011dac:	e17ffe17 	ldw	r5,-8(fp)
10011db0:	00146fc0 	call	100146fc <__mulsi3>
10011db4:	e0bfd215 	stw	r2,-184(fp)
      size_t obp, ibp; /*bit pointers (for out and in buffer)*/
      for(y = 0; y < passh[i]; ++y)
10011db8:	e03fcc15 	stw	zero,-208(fp)
10011dbc:	00006306 	br	10011f4c <Adam7_interlace+0x450>
      for(x = 0; x < passw[i]; ++x)
10011dc0:	e03fcb15 	stw	zero,-212(fp)
10011dc4:	00005506 	br	10011f1c <Adam7_interlace+0x420>
      {
        ibp = (ADAM7_IY[i] + y * ADAM7_DY[i]) * olinebits + (ADAM7_IX[i] + x * ADAM7_DX[i]) * bpp;
10011dc8:	00c400b4 	movhi	r3,4098
10011dcc:	18ca7404 	addi	r3,r3,10704
10011dd0:	e0bfc717 	ldw	r2,-228(fp)
10011dd4:	1085883a 	add	r2,r2,r2
10011dd8:	1085883a 	add	r2,r2,r2
10011ddc:	1885883a 	add	r2,r3,r2
10011de0:	14000017 	ldw	r16,0(r2)
10011de4:	00c400b4 	movhi	r3,4098
10011de8:	18ca8204 	addi	r3,r3,10760
10011dec:	e0bfc717 	ldw	r2,-228(fp)
10011df0:	1085883a 	add	r2,r2,r2
10011df4:	1085883a 	add	r2,r2,r2
10011df8:	1885883a 	add	r2,r3,r2
10011dfc:	10800017 	ldw	r2,0(r2)
10011e00:	1009883a 	mov	r4,r2
10011e04:	e17fcc17 	ldw	r5,-208(fp)
10011e08:	00146fc0 	call	100146fc <__mulsi3>
10011e0c:	8085883a 	add	r2,r16,r2
10011e10:	1009883a 	mov	r4,r2
10011e14:	e17fd217 	ldw	r5,-184(fp)
10011e18:	00146fc0 	call	100146fc <__mulsi3>
10011e1c:	1021883a 	mov	r16,r2
10011e20:	00c400b4 	movhi	r3,4098
10011e24:	18ca6d04 	addi	r3,r3,10676
10011e28:	e0bfc717 	ldw	r2,-228(fp)
10011e2c:	1085883a 	add	r2,r2,r2
10011e30:	1085883a 	add	r2,r2,r2
10011e34:	1885883a 	add	r2,r3,r2
10011e38:	14400017 	ldw	r17,0(r2)
10011e3c:	00c400b4 	movhi	r3,4098
10011e40:	18ca7b04 	addi	r3,r3,10732
10011e44:	e0bfc717 	ldw	r2,-228(fp)
10011e48:	1085883a 	add	r2,r2,r2
10011e4c:	1085883a 	add	r2,r2,r2
10011e50:	1885883a 	add	r2,r3,r2
10011e54:	10800017 	ldw	r2,0(r2)
10011e58:	1009883a 	mov	r4,r2
10011e5c:	e17fcb17 	ldw	r5,-212(fp)
10011e60:	00146fc0 	call	100146fc <__mulsi3>
10011e64:	8885883a 	add	r2,r17,r2
10011e68:	1009883a 	mov	r4,r2
10011e6c:	e1400417 	ldw	r5,16(fp)
10011e70:	00146fc0 	call	100146fc <__mulsi3>
10011e74:	8085883a 	add	r2,r16,r2
10011e78:	e0bffb15 	stw	r2,-20(fp)
        obp = (8 * passstart[i]) + (y * ilinebits + x * bpp);
10011e7c:	e0bfc717 	ldw	r2,-228(fp)
10011e80:	1085883a 	add	r2,r2,r2
10011e84:	1085883a 	add	r2,r2,r2
10011e88:	e0ffc704 	addi	r3,fp,-228
10011e8c:	1885883a 	add	r2,r3,r2
10011e90:	10802b04 	addi	r2,r2,172
10011e94:	10800017 	ldw	r2,0(r2)
10011e98:	102090fa 	slli	r16,r2,3
10011e9c:	e13fcc17 	ldw	r4,-208(fp)
10011ea0:	e17fd117 	ldw	r5,-188(fp)
10011ea4:	00146fc0 	call	100146fc <__mulsi3>
10011ea8:	1023883a 	mov	r17,r2
10011eac:	e13fcb17 	ldw	r4,-212(fp)
10011eb0:	e1400417 	ldw	r5,16(fp)
10011eb4:	00146fc0 	call	100146fc <__mulsi3>
10011eb8:	8885883a 	add	r2,r17,r2
10011ebc:	8085883a 	add	r2,r16,r2
10011ec0:	e0bffa15 	stw	r2,-24(fp)
        for(b = 0; b < bpp; ++b)
10011ec4:	e03fcd15 	stw	zero,-204(fp)
10011ec8:	00000e06 	br	10011f04 <Adam7_interlace+0x408>
        {
          unsigned char bit = readBitFromReversedStream(&ibp, in);
10011ecc:	e0bffb04 	addi	r2,fp,-20
10011ed0:	1009883a 	mov	r4,r2
10011ed4:	e17ffd17 	ldw	r5,-12(fp)
10011ed8:	00063400 	call	10006340 <readBitFromReversedStream>
10011edc:	e0bfd305 	stb	r2,-180(fp)
          setBitOfReversedStream(&obp, out, bit);
10011ee0:	e0bfd303 	ldbu	r2,-180(fp)
10011ee4:	e0fffa04 	addi	r3,fp,-24
10011ee8:	1809883a 	mov	r4,r3
10011eec:	e17ffc17 	ldw	r5,-16(fp)
10011ef0:	100d883a 	mov	r6,r2
10011ef4:	00064d00 	call	100064d0 <setBitOfReversedStream>
      for(y = 0; y < passh[i]; ++y)
      for(x = 0; x < passw[i]; ++x)
      {
        ibp = (ADAM7_IY[i] + y * ADAM7_DY[i]) * olinebits + (ADAM7_IX[i] + x * ADAM7_DX[i]) * bpp;
        obp = (8 * passstart[i]) + (y * ilinebits + x * bpp);
        for(b = 0; b < bpp; ++b)
10011ef8:	e0bfcd17 	ldw	r2,-204(fp)
10011efc:	10800044 	addi	r2,r2,1
10011f00:	e0bfcd15 	stw	r2,-204(fp)
10011f04:	e0ffcd17 	ldw	r3,-204(fp)
10011f08:	e0800417 	ldw	r2,16(fp)
10011f0c:	18bfef36 	bltu	r3,r2,10011ecc <__alt_data_end+0xf8011ecc>
      unsigned x, y, b;
      unsigned ilinebits = bpp * passw[i];
      unsigned olinebits = bpp * w;
      size_t obp, ibp; /*bit pointers (for out and in buffer)*/
      for(y = 0; y < passh[i]; ++y)
      for(x = 0; x < passw[i]; ++x)
10011f10:	e0bfcb17 	ldw	r2,-212(fp)
10011f14:	10800044 	addi	r2,r2,1
10011f18:	e0bfcb15 	stw	r2,-212(fp)
10011f1c:	e0bfc717 	ldw	r2,-228(fp)
10011f20:	1085883a 	add	r2,r2,r2
10011f24:	1085883a 	add	r2,r2,r2
10011f28:	e0ffc704 	addi	r3,fp,-228
10011f2c:	1885883a 	add	r2,r3,r2
10011f30:	10800d04 	addi	r2,r2,52
10011f34:	10800017 	ldw	r2,0(r2)
10011f38:	e0ffcb17 	ldw	r3,-212(fp)
10011f3c:	18bfa236 	bltu	r3,r2,10011dc8 <__alt_data_end+0xf8011dc8>
    {
      unsigned x, y, b;
      unsigned ilinebits = bpp * passw[i];
      unsigned olinebits = bpp * w;
      size_t obp, ibp; /*bit pointers (for out and in buffer)*/
      for(y = 0; y < passh[i]; ++y)
10011f40:	e0bfcc17 	ldw	r2,-208(fp)
10011f44:	10800044 	addi	r2,r2,1
10011f48:	e0bfcc15 	stw	r2,-208(fp)
10011f4c:	e0bfc717 	ldw	r2,-228(fp)
10011f50:	1085883a 	add	r2,r2,r2
10011f54:	1085883a 	add	r2,r2,r2
10011f58:	e0ffc704 	addi	r3,fp,-228
10011f5c:	1885883a 	add	r2,r3,r2
10011f60:	10801404 	addi	r2,r2,80
10011f64:	10800017 	ldw	r2,0(r2)
10011f68:	e0ffcc17 	ldw	r3,-208(fp)
10011f6c:	18bf9436 	bltu	r3,r2,10011dc0 <__alt_data_end+0xf8011dc0>
      }
    }
  }
  else /*bpp < 8: Adam7 with pixels < 8 bit is a bit trickier: with bit pointers*/
  {
    for(i = 0; i != 7; ++i)
10011f70:	e0bfc717 	ldw	r2,-228(fp)
10011f74:	10800044 	addi	r2,r2,1
10011f78:	e0bfc715 	stw	r2,-228(fp)
10011f7c:	e0bfc717 	ldw	r2,-228(fp)
10011f80:	108001d8 	cmpnei	r2,r2,7
10011f84:	103f7d1e 	bne	r2,zero,10011d7c <__alt_data_end+0xf8011d7c>
          setBitOfReversedStream(&obp, out, bit);
        }
      }
    }
  }
}
10011f88:	e037883a 	mov	sp,fp
10011f8c:	dfc00317 	ldw	ra,12(sp)
10011f90:	df000217 	ldw	fp,8(sp)
10011f94:	dc400117 	ldw	r17,4(sp)
10011f98:	dc000017 	ldw	r16,0(sp)
10011f9c:	dec00404 	addi	sp,sp,16
10011fa0:	f800283a 	ret

10011fa4 <preProcessScanlines>:
/*out must be buffer big enough to contain uncompressed IDAT chunk data, and in must contain the full image.
return value is error**/
static unsigned preProcessScanlines(unsigned char** out, size_t* outsize, const unsigned char* in,
                                    unsigned w, unsigned h,
                                    const LodePNGInfo* info_png, const LodePNGEncoderSettings* settings)
{
10011fa4:	deffc804 	addi	sp,sp,-224
10011fa8:	dfc03715 	stw	ra,220(sp)
10011fac:	df003615 	stw	fp,216(sp)
10011fb0:	dc403515 	stw	r17,212(sp)
10011fb4:	dc003415 	stw	r16,208(sp)
10011fb8:	df003404 	addi	fp,sp,208
10011fbc:	e13ffc15 	stw	r4,-16(fp)
10011fc0:	e17ffd15 	stw	r5,-12(fp)
10011fc4:	e1bffe15 	stw	r6,-8(fp)
10011fc8:	e1ffff15 	stw	r7,-4(fp)
  /*
  This function converts the pure 2D image with the PNG's colortype, into filtered-padded-interlaced data. Steps:
  *) if no Adam7: 1) add padding bits (= posible extra bits per scanline if bpp < 8) 2) filter
  *) if adam7: 1) Adam7_interlace 2) 7x add padding bits 3) 7x filter
  */
  unsigned bpp = lodepng_get_bpp(&info_png->color);
10011fcc:	e0800517 	ldw	r2,20(fp)
10011fd0:	10800304 	addi	r2,r2,12
10011fd4:	1009883a 	mov	r4,r2
10011fd8:	00073780 	call	10007378 <lodepng_get_bpp>
10011fdc:	e0bfd215 	stw	r2,-184(fp)
  unsigned error = 0;
10011fe0:	e03fd015 	stw	zero,-192(fp)

  if(info_png->interlace_method == 0)
10011fe4:	e0800517 	ldw	r2,20(fp)
10011fe8:	10800217 	ldw	r2,8(r2)
10011fec:	10006a1e 	bne	r2,zero,10012198 <preProcessScanlines+0x1f4>
  {
    *outsize = h + (h * ((w * bpp + 7) / 8)); /*image size plus an extra byte per scanline + possible padding bits*/
10011ff0:	e13fff17 	ldw	r4,-4(fp)
10011ff4:	e17fd217 	ldw	r5,-184(fp)
10011ff8:	00146fc0 	call	100146fc <__mulsi3>
10011ffc:	108001c4 	addi	r2,r2,7
10012000:	1004d0fa 	srli	r2,r2,3
10012004:	10800044 	addi	r2,r2,1
10012008:	1009883a 	mov	r4,r2
1001200c:	e1400417 	ldw	r5,16(fp)
10012010:	00146fc0 	call	100146fc <__mulsi3>
10012014:	1007883a 	mov	r3,r2
10012018:	e0bffd17 	ldw	r2,-12(fp)
1001201c:	10c00015 	stw	r3,0(r2)
    *out = (unsigned char*)lodepng_malloc(*outsize);
10012020:	e0bffd17 	ldw	r2,-12(fp)
10012024:	10800017 	ldw	r2,0(r2)
10012028:	1009883a 	mov	r4,r2
1001202c:	00001f40 	call	100001f4 <lodepng_malloc>
10012030:	e0fffc17 	ldw	r3,-16(fp)
10012034:	18800015 	stw	r2,0(r3)
    if(!(*out) && (*outsize)) error = 83; /*alloc fail*/
10012038:	e0bffc17 	ldw	r2,-16(fp)
1001203c:	10800017 	ldw	r2,0(r2)
10012040:	1000051e 	bne	r2,zero,10012058 <preProcessScanlines+0xb4>
10012044:	e0bffd17 	ldw	r2,-12(fp)
10012048:	10800017 	ldw	r2,0(r2)
1001204c:	10000226 	beq	r2,zero,10012058 <preProcessScanlines+0xb4>
10012050:	008014c4 	movi	r2,83
10012054:	e0bfd015 	stw	r2,-192(fp)

    if(!error)
10012058:	e0bfd017 	ldw	r2,-192(fp)
1001205c:	1001251e 	bne	r2,zero,100124f4 <preProcessScanlines+0x550>
    {
      /*non multiple of 8 bits per scanline, padding bits needed per scanline*/
      if(bpp < 8 && w * bpp != ((w * bpp + 7) / 8) * 8)
10012060:	e0bfd217 	ldw	r2,-184(fp)
10012064:	10800228 	cmpgeui	r2,r2,8
10012068:	10003d1e 	bne	r2,zero,10012160 <preProcessScanlines+0x1bc>
1001206c:	e13fff17 	ldw	r4,-4(fp)
10012070:	e17fd217 	ldw	r5,-184(fp)
10012074:	00146fc0 	call	100146fc <__mulsi3>
10012078:	1021883a 	mov	r16,r2
1001207c:	e13fff17 	ldw	r4,-4(fp)
10012080:	e17fd217 	ldw	r5,-184(fp)
10012084:	00146fc0 	call	100146fc <__mulsi3>
10012088:	108001c4 	addi	r2,r2,7
1001208c:	1004d0fa 	srli	r2,r2,3
10012090:	100490fa 	slli	r2,r2,3
10012094:	80803226 	beq	r16,r2,10012160 <preProcessScanlines+0x1bc>
      {
        unsigned char* padded = (unsigned char*)lodepng_malloc(h * ((w * bpp + 7) / 8));
10012098:	e13fff17 	ldw	r4,-4(fp)
1001209c:	e17fd217 	ldw	r5,-184(fp)
100120a0:	00146fc0 	call	100146fc <__mulsi3>
100120a4:	108001c4 	addi	r2,r2,7
100120a8:	1004d0fa 	srli	r2,r2,3
100120ac:	1009883a 	mov	r4,r2
100120b0:	e1400417 	ldw	r5,16(fp)
100120b4:	00146fc0 	call	100146fc <__mulsi3>
100120b8:	1009883a 	mov	r4,r2
100120bc:	00001f40 	call	100001f4 <lodepng_malloc>
100120c0:	e0bfd315 	stw	r2,-180(fp)
        if(!padded) error = 83; /*alloc fail*/
100120c4:	e0bfd317 	ldw	r2,-180(fp)
100120c8:	1000021e 	bne	r2,zero,100120d4 <preProcessScanlines+0x130>
100120cc:	008014c4 	movi	r2,83
100120d0:	e0bfd015 	stw	r2,-192(fp)
        if(!error)
100120d4:	e0bfd017 	ldw	r2,-192(fp)
100120d8:	10001d1e 	bne	r2,zero,10012150 <preProcessScanlines+0x1ac>
        {
          addPaddingBits(padded, in, ((w * bpp + 7) / 8) * 8, w * bpp, h);
100120dc:	e13fff17 	ldw	r4,-4(fp)
100120e0:	e17fd217 	ldw	r5,-184(fp)
100120e4:	00146fc0 	call	100146fc <__mulsi3>
100120e8:	108001c4 	addi	r2,r2,7
100120ec:	1004d0fa 	srli	r2,r2,3
100120f0:	102090fa 	slli	r16,r2,3
100120f4:	e13fff17 	ldw	r4,-4(fp)
100120f8:	e17fd217 	ldw	r5,-184(fp)
100120fc:	00146fc0 	call	100146fc <__mulsi3>
10012100:	e0c00417 	ldw	r3,16(fp)
10012104:	d8c00015 	stw	r3,0(sp)
10012108:	e13fd317 	ldw	r4,-180(fp)
1001210c:	e17ffe17 	ldw	r5,-8(fp)
10012110:	800d883a 	mov	r6,r16
10012114:	100f883a 	mov	r7,r2
10012118:	0011a100 	call	10011a10 <addPaddingBits>
          error = filter(*out, padded, w, h, &info_png->color, settings);
1001211c:	e0bffc17 	ldw	r2,-16(fp)
10012120:	10800017 	ldw	r2,0(r2)
10012124:	e0c00517 	ldw	r3,20(fp)
10012128:	18c00304 	addi	r3,r3,12
1001212c:	d8c00015 	stw	r3,0(sp)
10012130:	e0c00617 	ldw	r3,24(fp)
10012134:	d8c00115 	stw	r3,4(sp)
10012138:	1009883a 	mov	r4,r2
1001213c:	e17fd317 	ldw	r5,-180(fp)
10012140:	e1bfff17 	ldw	r6,-4(fp)
10012144:	e1c00417 	ldw	r7,16(fp)
10012148:	0010be00 	call	10010be0 <filter>
1001214c:	e0bfd015 	stw	r2,-192(fp)
        }
        lodepng_free(padded);
10012150:	e13fd317 	ldw	r4,-180(fp)
10012154:	000025c0 	call	1000025c <lodepng_free>

    if(!error)
    {
      /*non multiple of 8 bits per scanline, padding bits needed per scanline*/
      if(bpp < 8 && w * bpp != ((w * bpp + 7) / 8) * 8)
      {
10012158:	0001883a 	nop
1001215c:	0000e606 	br	100124f8 <preProcessScanlines+0x554>
        lodepng_free(padded);
      }
      else
      {
        /*we can immediately filter into the out buffer, no other steps needed*/
        error = filter(*out, in, w, h, &info_png->color, settings);
10012160:	e0bffc17 	ldw	r2,-16(fp)
10012164:	10800017 	ldw	r2,0(r2)
10012168:	e0c00517 	ldw	r3,20(fp)
1001216c:	18c00304 	addi	r3,r3,12
10012170:	d8c00015 	stw	r3,0(sp)
10012174:	e0c00617 	ldw	r3,24(fp)
10012178:	d8c00115 	stw	r3,4(sp)
1001217c:	1009883a 	mov	r4,r2
10012180:	e17ffe17 	ldw	r5,-8(fp)
10012184:	e1bfff17 	ldw	r6,-4(fp)
10012188:	e1c00417 	ldw	r7,16(fp)
1001218c:	0010be00 	call	10010be0 <filter>
10012190:	e0bfd015 	stw	r2,-192(fp)
10012194:	0000d706 	br	100124f4 <preProcessScanlines+0x550>
  {
    unsigned passw[7], passh[7];
    size_t filter_passstart[8], padded_passstart[8], passstart[8];
    unsigned char* adam7;

    Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
10012198:	e13fd604 	addi	r4,fp,-168
1001219c:	e17fdd04 	addi	r5,fp,-140
100121a0:	e0fff404 	addi	r3,fp,-48
100121a4:	e0bfec04 	addi	r2,fp,-80
100121a8:	e1bfe404 	addi	r6,fp,-112
100121ac:	d9800015 	stw	r6,0(sp)
100121b0:	e1bfff17 	ldw	r6,-4(fp)
100121b4:	d9800115 	stw	r6,4(sp)
100121b8:	e1800417 	ldw	r6,16(fp)
100121bc:	d9800215 	stw	r6,8(sp)
100121c0:	e1bfd217 	ldw	r6,-184(fp)
100121c4:	d9800315 	stw	r6,12(sp)
100121c8:	180d883a 	mov	r6,r3
100121cc:	100f883a 	mov	r7,r2
100121d0:	000bd100 	call	1000bd10 <Adam7_getpassvalues>

    *outsize = filter_passstart[7]; /*image size plus an extra byte per scanline + possible padding bits*/
100121d4:	e0fffb17 	ldw	r3,-20(fp)
100121d8:	e0bffd17 	ldw	r2,-12(fp)
100121dc:	10c00015 	stw	r3,0(r2)
    *out = (unsigned char*)lodepng_malloc(*outsize);
100121e0:	e0bffd17 	ldw	r2,-12(fp)
100121e4:	10800017 	ldw	r2,0(r2)
100121e8:	1009883a 	mov	r4,r2
100121ec:	00001f40 	call	100001f4 <lodepng_malloc>
100121f0:	e0fffc17 	ldw	r3,-16(fp)
100121f4:	18800015 	stw	r2,0(r3)
    if(!(*out)) error = 83; /*alloc fail*/
100121f8:	e0bffc17 	ldw	r2,-16(fp)
100121fc:	10800017 	ldw	r2,0(r2)
10012200:	1000021e 	bne	r2,zero,1001220c <preProcessScanlines+0x268>
10012204:	008014c4 	movi	r2,83
10012208:	e0bfd015 	stw	r2,-192(fp)

    adam7 = (unsigned char*)lodepng_malloc(passstart[7]);
1001220c:	e0bfeb17 	ldw	r2,-84(fp)
10012210:	1009883a 	mov	r4,r2
10012214:	00001f40 	call	100001f4 <lodepng_malloc>
10012218:	e0bfd415 	stw	r2,-176(fp)
    if(!adam7 && passstart[7]) error = 83; /*alloc fail*/
1001221c:	e0bfd417 	ldw	r2,-176(fp)
10012220:	1000041e 	bne	r2,zero,10012234 <preProcessScanlines+0x290>
10012224:	e0bfeb17 	ldw	r2,-84(fp)
10012228:	10000226 	beq	r2,zero,10012234 <preProcessScanlines+0x290>
1001222c:	008014c4 	movi	r2,83
10012230:	e0bfd015 	stw	r2,-192(fp)

    if(!error)
10012234:	e0bfd017 	ldw	r2,-192(fp)
10012238:	1000ab1e 	bne	r2,zero,100124e8 <preProcessScanlines+0x544>
    {
      unsigned i;

      Adam7_interlace(adam7, in, w, h, bpp);
1001223c:	e0bfd217 	ldw	r2,-184(fp)
10012240:	d8800015 	stw	r2,0(sp)
10012244:	e13fd417 	ldw	r4,-176(fp)
10012248:	e17ffe17 	ldw	r5,-8(fp)
1001224c:	e1bfff17 	ldw	r6,-4(fp)
10012250:	e1c00417 	ldw	r7,16(fp)
10012254:	0011afc0 	call	10011afc <Adam7_interlace>
      for(i = 0; i != 7; ++i)
10012258:	e03fd115 	stw	zero,-188(fp)
1001225c:	00009d06 	br	100124d4 <preProcessScanlines+0x530>
      {
        if(bpp < 8)
10012260:	e0bfd217 	ldw	r2,-184(fp)
10012264:	10800228 	cmpgeui	r2,r2,8
10012268:	10006b1e 	bne	r2,zero,10012418 <preProcessScanlines+0x474>
        {
          unsigned char* padded = (unsigned char*)lodepng_malloc(padded_passstart[i + 1] - padded_passstart[i]);
1001226c:	e0bfd117 	ldw	r2,-188(fp)
10012270:	10800044 	addi	r2,r2,1
10012274:	1085883a 	add	r2,r2,r2
10012278:	1085883a 	add	r2,r2,r2
1001227c:	e0ffd004 	addi	r3,fp,-192
10012280:	1885883a 	add	r2,r3,r2
10012284:	10801c04 	addi	r2,r2,112
10012288:	10c00017 	ldw	r3,0(r2)
1001228c:	e0bfd117 	ldw	r2,-188(fp)
10012290:	1085883a 	add	r2,r2,r2
10012294:	1085883a 	add	r2,r2,r2
10012298:	e13fd004 	addi	r4,fp,-192
1001229c:	2085883a 	add	r2,r4,r2
100122a0:	10801c04 	addi	r2,r2,112
100122a4:	10800017 	ldw	r2,0(r2)
100122a8:	1885c83a 	sub	r2,r3,r2
100122ac:	1009883a 	mov	r4,r2
100122b0:	00001f40 	call	100001f4 <lodepng_malloc>
100122b4:	e0bfd515 	stw	r2,-172(fp)
          if(!padded) ERROR_BREAK(83); /*alloc fail*/
100122b8:	e0bfd517 	ldw	r2,-172(fp)
100122bc:	1000031e 	bne	r2,zero,100122cc <preProcessScanlines+0x328>
100122c0:	008014c4 	movi	r2,83
100122c4:	e0bfd015 	stw	r2,-192(fp)
100122c8:	00008706 	br	100124e8 <preProcessScanlines+0x544>
          addPaddingBits(padded, &adam7[passstart[i]],
100122cc:	e0bfd117 	ldw	r2,-188(fp)
100122d0:	1085883a 	add	r2,r2,r2
100122d4:	1085883a 	add	r2,r2,r2
100122d8:	e17fd004 	addi	r5,fp,-192
100122dc:	2885883a 	add	r2,r5,r2
100122e0:	10801404 	addi	r2,r2,80
100122e4:	10800017 	ldw	r2,0(r2)
100122e8:	e0ffd417 	ldw	r3,-176(fp)
100122ec:	18a3883a 	add	r17,r3,r2
                         ((passw[i] * bpp + 7) / 8) * 8, passw[i] * bpp, passh[i]);
100122f0:	e0bfd117 	ldw	r2,-188(fp)
100122f4:	1085883a 	add	r2,r2,r2
100122f8:	1085883a 	add	r2,r2,r2
100122fc:	e1bfd004 	addi	r6,fp,-192
10012300:	3085883a 	add	r2,r6,r2
10012304:	10800604 	addi	r2,r2,24
10012308:	10800017 	ldw	r2,0(r2)
1001230c:	1009883a 	mov	r4,r2
10012310:	e17fd217 	ldw	r5,-184(fp)
10012314:	00146fc0 	call	100146fc <__mulsi3>
10012318:	108001c4 	addi	r2,r2,7
1001231c:	1004d0fa 	srli	r2,r2,3
      {
        if(bpp < 8)
        {
          unsigned char* padded = (unsigned char*)lodepng_malloc(padded_passstart[i + 1] - padded_passstart[i]);
          if(!padded) ERROR_BREAK(83); /*alloc fail*/
          addPaddingBits(padded, &adam7[passstart[i]],
10012320:	102090fa 	slli	r16,r2,3
                         ((passw[i] * bpp + 7) / 8) * 8, passw[i] * bpp, passh[i]);
10012324:	e0bfd117 	ldw	r2,-188(fp)
10012328:	1085883a 	add	r2,r2,r2
1001232c:	1085883a 	add	r2,r2,r2
10012330:	e0ffd004 	addi	r3,fp,-192
10012334:	1885883a 	add	r2,r3,r2
10012338:	10800604 	addi	r2,r2,24
1001233c:	10800017 	ldw	r2,0(r2)
      {
        if(bpp < 8)
        {
          unsigned char* padded = (unsigned char*)lodepng_malloc(padded_passstart[i + 1] - padded_passstart[i]);
          if(!padded) ERROR_BREAK(83); /*alloc fail*/
          addPaddingBits(padded, &adam7[passstart[i]],
10012340:	1009883a 	mov	r4,r2
10012344:	e17fd217 	ldw	r5,-184(fp)
10012348:	00146fc0 	call	100146fc <__mulsi3>
1001234c:	1007883a 	mov	r3,r2
10012350:	e0bfd117 	ldw	r2,-188(fp)
10012354:	1085883a 	add	r2,r2,r2
10012358:	1085883a 	add	r2,r2,r2
1001235c:	e13fd004 	addi	r4,fp,-192
10012360:	2085883a 	add	r2,r4,r2
10012364:	10800d04 	addi	r2,r2,52
10012368:	10800017 	ldw	r2,0(r2)
1001236c:	d8800015 	stw	r2,0(sp)
10012370:	e13fd517 	ldw	r4,-172(fp)
10012374:	880b883a 	mov	r5,r17
10012378:	800d883a 	mov	r6,r16
1001237c:	180f883a 	mov	r7,r3
10012380:	0011a100 	call	10011a10 <addPaddingBits>
                         ((passw[i] * bpp + 7) / 8) * 8, passw[i] * bpp, passh[i]);
          error = filter(&(*out)[filter_passstart[i]], padded,
10012384:	e0bffc17 	ldw	r2,-16(fp)
10012388:	10c00017 	ldw	r3,0(r2)
1001238c:	e0bfd117 	ldw	r2,-188(fp)
10012390:	1085883a 	add	r2,r2,r2
10012394:	1085883a 	add	r2,r2,r2
10012398:	e17fd004 	addi	r5,fp,-192
1001239c:	2885883a 	add	r2,r5,r2
100123a0:	10802404 	addi	r2,r2,144
100123a4:	10800017 	ldw	r2,0(r2)
100123a8:	1889883a 	add	r4,r3,r2
100123ac:	e0bfd117 	ldw	r2,-188(fp)
100123b0:	1085883a 	add	r2,r2,r2
100123b4:	1085883a 	add	r2,r2,r2
100123b8:	e1bfd004 	addi	r6,fp,-192
100123bc:	3085883a 	add	r2,r6,r2
100123c0:	10800604 	addi	r2,r2,24
100123c4:	10c00017 	ldw	r3,0(r2)
100123c8:	e0bfd117 	ldw	r2,-188(fp)
100123cc:	1085883a 	add	r2,r2,r2
100123d0:	1085883a 	add	r2,r2,r2
100123d4:	e17fd004 	addi	r5,fp,-192
100123d8:	2885883a 	add	r2,r5,r2
100123dc:	10800d04 	addi	r2,r2,52
100123e0:	10800017 	ldw	r2,0(r2)
100123e4:	e1400517 	ldw	r5,20(fp)
100123e8:	29400304 	addi	r5,r5,12
100123ec:	d9400015 	stw	r5,0(sp)
100123f0:	e1400617 	ldw	r5,24(fp)
100123f4:	d9400115 	stw	r5,4(sp)
100123f8:	e17fd517 	ldw	r5,-172(fp)
100123fc:	180d883a 	mov	r6,r3
10012400:	100f883a 	mov	r7,r2
10012404:	0010be00 	call	10010be0 <filter>
10012408:	e0bfd015 	stw	r2,-192(fp)
                         passw[i], passh[i], &info_png->color, settings);
          lodepng_free(padded);
1001240c:	e13fd517 	ldw	r4,-172(fp)
10012410:	000025c0 	call	1000025c <lodepng_free>
10012414:	00002a06 	br	100124c0 <preProcessScanlines+0x51c>
        }
        else
        {
          error = filter(&(*out)[filter_passstart[i]], &adam7[padded_passstart[i]],
10012418:	e0bffc17 	ldw	r2,-16(fp)
1001241c:	10c00017 	ldw	r3,0(r2)
10012420:	e0bfd117 	ldw	r2,-188(fp)
10012424:	1085883a 	add	r2,r2,r2
10012428:	1085883a 	add	r2,r2,r2
1001242c:	e1bfd004 	addi	r6,fp,-192
10012430:	3085883a 	add	r2,r6,r2
10012434:	10802404 	addi	r2,r2,144
10012438:	10800017 	ldw	r2,0(r2)
1001243c:	1889883a 	add	r4,r3,r2
10012440:	e0bfd117 	ldw	r2,-188(fp)
10012444:	1085883a 	add	r2,r2,r2
10012448:	1085883a 	add	r2,r2,r2
1001244c:	e0ffd004 	addi	r3,fp,-192
10012450:	1885883a 	add	r2,r3,r2
10012454:	10801c04 	addi	r2,r2,112
10012458:	10800017 	ldw	r2,0(r2)
1001245c:	e0ffd417 	ldw	r3,-176(fp)
10012460:	188b883a 	add	r5,r3,r2
10012464:	e0bfd117 	ldw	r2,-188(fp)
10012468:	1085883a 	add	r2,r2,r2
1001246c:	1085883a 	add	r2,r2,r2
10012470:	e1bfd004 	addi	r6,fp,-192
10012474:	3085883a 	add	r2,r6,r2
10012478:	10800604 	addi	r2,r2,24
1001247c:	10c00017 	ldw	r3,0(r2)
10012480:	e0bfd117 	ldw	r2,-188(fp)
10012484:	1085883a 	add	r2,r2,r2
10012488:	1085883a 	add	r2,r2,r2
1001248c:	e1bfd004 	addi	r6,fp,-192
10012490:	3085883a 	add	r2,r6,r2
10012494:	10800d04 	addi	r2,r2,52
10012498:	10800017 	ldw	r2,0(r2)
1001249c:	e1800517 	ldw	r6,20(fp)
100124a0:	31800304 	addi	r6,r6,12
100124a4:	d9800015 	stw	r6,0(sp)
100124a8:	e1800617 	ldw	r6,24(fp)
100124ac:	d9800115 	stw	r6,4(sp)
100124b0:	180d883a 	mov	r6,r3
100124b4:	100f883a 	mov	r7,r2
100124b8:	0010be00 	call	10010be0 <filter>
100124bc:	e0bfd015 	stw	r2,-192(fp)
                         passw[i], passh[i], &info_png->color, settings);
        }

        if(error) break;
100124c0:	e0bfd017 	ldw	r2,-192(fp)
100124c4:	1000071e 	bne	r2,zero,100124e4 <preProcessScanlines+0x540>
    if(!error)
    {
      unsigned i;

      Adam7_interlace(adam7, in, w, h, bpp);
      for(i = 0; i != 7; ++i)
100124c8:	e0bfd117 	ldw	r2,-188(fp)
100124cc:	10800044 	addi	r2,r2,1
100124d0:	e0bfd115 	stw	r2,-188(fp)
100124d4:	e0bfd117 	ldw	r2,-188(fp)
100124d8:	108001d8 	cmpnei	r2,r2,7
100124dc:	103f601e 	bne	r2,zero,10012260 <__alt_data_end+0xf8012260>
100124e0:	00000106 	br	100124e8 <preProcessScanlines+0x544>
        {
          error = filter(&(*out)[filter_passstart[i]], &adam7[padded_passstart[i]],
                         passw[i], passh[i], &info_png->color, settings);
        }

        if(error) break;
100124e4:	0001883a 	nop
      }
    }

    lodepng_free(adam7);
100124e8:	e13fd417 	ldw	r4,-176(fp)
100124ec:	000025c0 	call	1000025c <lodepng_free>
100124f0:	00000106 	br	100124f8 <preProcessScanlines+0x554>
        lodepng_free(padded);
      }
      else
      {
        /*we can immediately filter into the out buffer, no other steps needed*/
        error = filter(*out, in, w, h, &info_png->color, settings);
100124f4:	0001883a 	nop
    }

    lodepng_free(adam7);
  }

  return error;
100124f8:	e0bfd017 	ldw	r2,-192(fp)
}
100124fc:	e037883a 	mov	sp,fp
10012500:	dfc00317 	ldw	ra,12(sp)
10012504:	df000217 	ldw	fp,8(sp)
10012508:	dc400117 	ldw	r17,4(sp)
1001250c:	dc000017 	ldw	r16,0(sp)
10012510:	dec00404 	addi	sp,sp,16
10012514:	f800283a 	ret

10012518 <getPaletteTranslucency>:
returns 0 if the palette is opaque,
returns 1 if the palette has a single color with alpha 0 ==> color key
returns 2 if the palette is semi-translucent.
*/
static unsigned getPaletteTranslucency(const unsigned char* palette, size_t palettesize)
{
10012518:	defff804 	addi	sp,sp,-32
1001251c:	df000715 	stw	fp,28(sp)
10012520:	df000704 	addi	fp,sp,28
10012524:	e13ffe15 	stw	r4,-8(fp)
10012528:	e17fff15 	stw	r5,-4(fp)
  size_t i;
  unsigned key = 0;
1001252c:	e03ffa15 	stw	zero,-24(fp)
  unsigned r = 0, g = 0, b = 0; /*the value of the color with alpha 0, so long as color keying is possible*/
10012530:	e03ffb15 	stw	zero,-20(fp)
10012534:	e03ffc15 	stw	zero,-16(fp)
10012538:	e03ffd15 	stw	zero,-12(fp)
  for(i = 0; i != palettesize; ++i)
1001253c:	e03ff915 	stw	zero,-28(fp)
10012540:	00005a06 	br	100126ac <getPaletteTranslucency+0x194>
  {
    if(!key && palette[4 * i + 3] == 0)
10012544:	e0bffa17 	ldw	r2,-24(fp)
10012548:	1000281e 	bne	r2,zero,100125ec <getPaletteTranslucency+0xd4>
1001254c:	e0bff917 	ldw	r2,-28(fp)
10012550:	1085883a 	add	r2,r2,r2
10012554:	1085883a 	add	r2,r2,r2
10012558:	108000c4 	addi	r2,r2,3
1001255c:	e0fffe17 	ldw	r3,-8(fp)
10012560:	1885883a 	add	r2,r3,r2
10012564:	10800003 	ldbu	r2,0(r2)
10012568:	10803fcc 	andi	r2,r2,255
1001256c:	10001f1e 	bne	r2,zero,100125ec <getPaletteTranslucency+0xd4>
    {
      r = palette[4 * i + 0]; g = palette[4 * i + 1]; b = palette[4 * i + 2];
10012570:	e0bff917 	ldw	r2,-28(fp)
10012574:	1085883a 	add	r2,r2,r2
10012578:	1085883a 	add	r2,r2,r2
1001257c:	e0fffe17 	ldw	r3,-8(fp)
10012580:	1885883a 	add	r2,r3,r2
10012584:	10800003 	ldbu	r2,0(r2)
10012588:	10803fcc 	andi	r2,r2,255
1001258c:	e0bffb15 	stw	r2,-20(fp)
10012590:	e0bff917 	ldw	r2,-28(fp)
10012594:	1085883a 	add	r2,r2,r2
10012598:	1085883a 	add	r2,r2,r2
1001259c:	10800044 	addi	r2,r2,1
100125a0:	e0fffe17 	ldw	r3,-8(fp)
100125a4:	1885883a 	add	r2,r3,r2
100125a8:	10800003 	ldbu	r2,0(r2)
100125ac:	10803fcc 	andi	r2,r2,255
100125b0:	e0bffc15 	stw	r2,-16(fp)
100125b4:	e0bff917 	ldw	r2,-28(fp)
100125b8:	1085883a 	add	r2,r2,r2
100125bc:	1085883a 	add	r2,r2,r2
100125c0:	10800084 	addi	r2,r2,2
100125c4:	e0fffe17 	ldw	r3,-8(fp)
100125c8:	1885883a 	add	r2,r3,r2
100125cc:	10800003 	ldbu	r2,0(r2)
100125d0:	10803fcc 	andi	r2,r2,255
100125d4:	e0bffd15 	stw	r2,-12(fp)
      key = 1;
100125d8:	00800044 	movi	r2,1
100125dc:	e0bffa15 	stw	r2,-24(fp)
      i = (size_t)(-1); /*restart from beginning, to detect earlier opaque colors with key's value*/
100125e0:	00bfffc4 	movi	r2,-1
100125e4:	e0bff915 	stw	r2,-28(fp)
100125e8:	00002d06 	br	100126a0 <getPaletteTranslucency+0x188>
    }
    else if(palette[4 * i + 3] != 255) return 2;
100125ec:	e0bff917 	ldw	r2,-28(fp)
100125f0:	1085883a 	add	r2,r2,r2
100125f4:	1085883a 	add	r2,r2,r2
100125f8:	108000c4 	addi	r2,r2,3
100125fc:	e0fffe17 	ldw	r3,-8(fp)
10012600:	1885883a 	add	r2,r3,r2
10012604:	10800003 	ldbu	r2,0(r2)
10012608:	10803fcc 	andi	r2,r2,255
1001260c:	10803fe0 	cmpeqi	r2,r2,255
10012610:	1000021e 	bne	r2,zero,1001261c <getPaletteTranslucency+0x104>
10012614:	00800084 	movi	r2,2
10012618:	00002806 	br	100126bc <getPaletteTranslucency+0x1a4>
    /*when key, no opaque RGB may have key's RGB*/
    else if(key && r == palette[i * 4 + 0] && g == palette[i * 4 + 1] && b == palette[i * 4 + 2]) return 2;
1001261c:	e0bffa17 	ldw	r2,-24(fp)
10012620:	10001f26 	beq	r2,zero,100126a0 <getPaletteTranslucency+0x188>
10012624:	e0bff917 	ldw	r2,-28(fp)
10012628:	1085883a 	add	r2,r2,r2
1001262c:	1085883a 	add	r2,r2,r2
10012630:	e0fffe17 	ldw	r3,-8(fp)
10012634:	1885883a 	add	r2,r3,r2
10012638:	10800003 	ldbu	r2,0(r2)
1001263c:	10c03fcc 	andi	r3,r2,255
10012640:	e0bffb17 	ldw	r2,-20(fp)
10012644:	1880161e 	bne	r3,r2,100126a0 <getPaletteTranslucency+0x188>
10012648:	e0bff917 	ldw	r2,-28(fp)
1001264c:	1085883a 	add	r2,r2,r2
10012650:	1085883a 	add	r2,r2,r2
10012654:	10800044 	addi	r2,r2,1
10012658:	e0fffe17 	ldw	r3,-8(fp)
1001265c:	1885883a 	add	r2,r3,r2
10012660:	10800003 	ldbu	r2,0(r2)
10012664:	10c03fcc 	andi	r3,r2,255
10012668:	e0bffc17 	ldw	r2,-16(fp)
1001266c:	18800c1e 	bne	r3,r2,100126a0 <getPaletteTranslucency+0x188>
10012670:	e0bff917 	ldw	r2,-28(fp)
10012674:	1085883a 	add	r2,r2,r2
10012678:	1085883a 	add	r2,r2,r2
1001267c:	10800084 	addi	r2,r2,2
10012680:	e0fffe17 	ldw	r3,-8(fp)
10012684:	1885883a 	add	r2,r3,r2
10012688:	10800003 	ldbu	r2,0(r2)
1001268c:	10c03fcc 	andi	r3,r2,255
10012690:	e0bffd17 	ldw	r2,-12(fp)
10012694:	1880021e 	bne	r3,r2,100126a0 <getPaletteTranslucency+0x188>
10012698:	00800084 	movi	r2,2
1001269c:	00000706 	br	100126bc <getPaletteTranslucency+0x1a4>
static unsigned getPaletteTranslucency(const unsigned char* palette, size_t palettesize)
{
  size_t i;
  unsigned key = 0;
  unsigned r = 0, g = 0, b = 0; /*the value of the color with alpha 0, so long as color keying is possible*/
  for(i = 0; i != palettesize; ++i)
100126a0:	e0bff917 	ldw	r2,-28(fp)
100126a4:	10800044 	addi	r2,r2,1
100126a8:	e0bff915 	stw	r2,-28(fp)
100126ac:	e0fff917 	ldw	r3,-28(fp)
100126b0:	e0bfff17 	ldw	r2,-4(fp)
100126b4:	18bfa31e 	bne	r3,r2,10012544 <__alt_data_end+0xf8012544>
    }
    else if(palette[4 * i + 3] != 255) return 2;
    /*when key, no opaque RGB may have key's RGB*/
    else if(key && r == palette[i * 4 + 0] && g == palette[i * 4 + 1] && b == palette[i * 4 + 2]) return 2;
  }
  return key;
100126b8:	e0bffa17 	ldw	r2,-24(fp)
}
100126bc:	e037883a 	mov	sp,fp
100126c0:	df000017 	ldw	fp,0(sp)
100126c4:	dec00104 	addi	sp,sp,4
100126c8:	f800283a 	ret

100126cc <addUnknownChunks>:

#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
static unsigned addUnknownChunks(ucvector* out, unsigned char* data, size_t datasize)
{
100126cc:	defff904 	addi	sp,sp,-28
100126d0:	dfc00615 	stw	ra,24(sp)
100126d4:	df000515 	stw	fp,20(sp)
100126d8:	df000504 	addi	fp,sp,20
100126dc:	e13ffd15 	stw	r4,-12(fp)
100126e0:	e17ffe15 	stw	r5,-8(fp)
100126e4:	e1bfff15 	stw	r6,-4(fp)
  unsigned char* inchunk = data;
100126e8:	e0bffe17 	ldw	r2,-8(fp)
100126ec:	e0bffb15 	stw	r2,-20(fp)
  while((size_t)(inchunk - data) < datasize)
100126f0:	00001306 	br	10012740 <addUnknownChunks+0x74>
  {
    CERROR_TRY_RETURN(lodepng_chunk_append(&out->data, &out->size, inchunk));
100126f4:	e0fffd17 	ldw	r3,-12(fp)
100126f8:	e0bffd17 	ldw	r2,-12(fp)
100126fc:	10800104 	addi	r2,r2,4
10012700:	1809883a 	mov	r4,r3
10012704:	100b883a 	mov	r5,r2
10012708:	e1bffb17 	ldw	r6,-20(fp)
1001270c:	00069d40 	call	100069d4 <lodepng_chunk_append>
10012710:	e0bffc15 	stw	r2,-16(fp)
10012714:	e0bffc17 	ldw	r2,-16(fp)
10012718:	10000226 	beq	r2,zero,10012724 <addUnknownChunks+0x58>
1001271c:	e0bffc17 	ldw	r2,-16(fp)
10012720:	00000e06 	br	1001275c <addUnknownChunks+0x90>
    out->allocsize = out->size; /*fix the allocsize again*/
10012724:	e0bffd17 	ldw	r2,-12(fp)
10012728:	10c00117 	ldw	r3,4(r2)
1001272c:	e0bffd17 	ldw	r2,-12(fp)
10012730:	10c00215 	stw	r3,8(r2)
    inchunk = lodepng_chunk_next(inchunk);
10012734:	e13ffb17 	ldw	r4,-20(fp)
10012738:	000694c0 	call	1000694c <lodepng_chunk_next>
1001273c:	e0bffb15 	stw	r2,-20(fp)

#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
static unsigned addUnknownChunks(ucvector* out, unsigned char* data, size_t datasize)
{
  unsigned char* inchunk = data;
  while((size_t)(inchunk - data) < datasize)
10012740:	e0fffb17 	ldw	r3,-20(fp)
10012744:	e0bffe17 	ldw	r2,-8(fp)
10012748:	1885c83a 	sub	r2,r3,r2
1001274c:	1007883a 	mov	r3,r2
10012750:	e0bfff17 	ldw	r2,-4(fp)
10012754:	18bfe736 	bltu	r3,r2,100126f4 <__alt_data_end+0xf80126f4>
  {
    CERROR_TRY_RETURN(lodepng_chunk_append(&out->data, &out->size, inchunk));
    out->allocsize = out->size; /*fix the allocsize again*/
    inchunk = lodepng_chunk_next(inchunk);
  }
  return 0;
10012758:	0005883a 	mov	r2,zero
}
1001275c:	e037883a 	mov	sp,fp
10012760:	dfc00117 	ldw	ra,4(sp)
10012764:	df000017 	ldw	fp,0(sp)
10012768:	dec00204 	addi	sp,sp,8
1001276c:	f800283a 	ret

10012770 <lodepng_encode>:
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/

unsigned lodepng_encode(unsigned char** out, size_t* outsize,
                        const unsigned char* image, unsigned w, unsigned h,
                        LodePNGState* state)
{
10012770:	deffc504 	addi	sp,sp,-236
10012774:	dfc03a15 	stw	ra,232(sp)
10012778:	df003915 	stw	fp,228(sp)
1001277c:	dc003815 	stw	r16,224(sp)
10012780:	df003804 	addi	fp,sp,224
10012784:	e13ffc15 	stw	r4,-16(fp)
10012788:	e17ffd15 	stw	r5,-12(fp)
1001278c:	e1bffe15 	stw	r6,-8(fp)
10012790:	e1ffff15 	stw	r7,-4(fp)
  LodePNGInfo info;
  ucvector outv;
  unsigned char* data = 0; /*uncompressed version of the IDAT chunk data*/
10012794:	e03ffa15 	stw	zero,-24(fp)
  size_t datasize = 0;
10012798:	e03ffb15 	stw	zero,-20(fp)

  /*provide some proper output values if error will happen*/
  *out = 0;
1001279c:	e0bffc17 	ldw	r2,-16(fp)
100127a0:	10000015 	stw	zero,0(r2)
  *outsize = 0;
100127a4:	e0bffd17 	ldw	r2,-12(fp)
100127a8:	10000015 	stw	zero,0(r2)
  state->error = 0;
100127ac:	e0800417 	ldw	r2,16(fp)
100127b0:	10004815 	stw	zero,288(r2)

  lodepng_info_init(&info);
100127b4:	e0bfcf04 	addi	r2,fp,-196
100127b8:	1009883a 	mov	r4,r2
100127bc:	00082080 	call	10008208 <lodepng_info_init>
  lodepng_info_copy(&info, &state->info_png);
100127c0:	e0800417 	ldw	r2,16(fp)
100127c4:	10802004 	addi	r2,r2,128
100127c8:	e0ffcf04 	addi	r3,fp,-196
100127cc:	1809883a 	mov	r4,r3
100127d0:	100b883a 	mov	r5,r2
100127d4:	00083000 	call	10008300 <lodepng_info_copy>

  if((info.color.colortype == LCT_PALETTE || state->encoder.force_palette)
100127d8:	e0bfd217 	ldw	r2,-184(fp)
100127dc:	108000e0 	cmpeqi	r2,r2,3
100127e0:	1000031e 	bne	r2,zero,100127f0 <lodepng_encode+0x80>
100127e4:	e0800417 	ldw	r2,16(fp)
100127e8:	10801517 	ldw	r2,84(r2)
100127ec:	10000b26 	beq	r2,zero,1001281c <lodepng_encode+0xac>
      && (info.color.palettesize == 0 || info.color.palettesize > 256))
100127f0:	e0bfd517 	ldw	r2,-172(fp)
100127f4:	10000326 	beq	r2,zero,10012804 <lodepng_encode+0x94>
100127f8:	e0bfd517 	ldw	r2,-172(fp)
100127fc:	10804070 	cmpltui	r2,r2,257
10012800:	1000061e 	bne	r2,zero,1001281c <lodepng_encode+0xac>
  {
    state->error = 68; /*invalid palette size, it is only allowed to be 1-256*/
10012804:	e0800417 	ldw	r2,16(fp)
10012808:	00c01104 	movi	r3,68
1001280c:	10c04815 	stw	r3,288(r2)
    return state->error;
10012810:	e0800417 	ldw	r2,16(fp)
10012814:	10804817 	ldw	r2,288(r2)
10012818:	0001f906 	br	10013000 <lodepng_encode+0x890>
  }

  if(state->encoder.auto_convert)
1001281c:	e0800417 	ldw	r2,16(fp)
10012820:	10801117 	ldw	r2,68(r2)
10012824:	10000c26 	beq	r2,zero,10012858 <lodepng_encode+0xe8>
  {
    state->error = lodepng_auto_choose_color(&info.color, image, w, h, &state->info_raw);
10012828:	e0800417 	ldw	r2,16(fp)
1001282c:	10c01804 	addi	r3,r2,96
10012830:	e0bfcf04 	addi	r2,fp,-196
10012834:	10800304 	addi	r2,r2,12
10012838:	d8c00015 	stw	r3,0(sp)
1001283c:	1009883a 	mov	r4,r2
10012840:	e17ffe17 	ldw	r5,-8(fp)
10012844:	e1bfff17 	ldw	r6,-4(fp)
10012848:	e1c00317 	ldw	r7,12(fp)
1001284c:	000b89c0 	call	1000b89c <lodepng_auto_choose_color>
10012850:	e0c00417 	ldw	r3,16(fp)
10012854:	18804815 	stw	r2,288(r3)
  }
  if(state->error) return state->error;
10012858:	e0800417 	ldw	r2,16(fp)
1001285c:	10804817 	ldw	r2,288(r2)
10012860:	10000326 	beq	r2,zero,10012870 <lodepng_encode+0x100>
10012864:	e0800417 	ldw	r2,16(fp)
10012868:	10804817 	ldw	r2,288(r2)
1001286c:	0001e406 	br	10013000 <lodepng_encode+0x890>

  if(state->encoder.zlibsettings.btype > 2)
10012870:	e0800417 	ldw	r2,16(fp)
10012874:	10800817 	ldw	r2,32(r2)
10012878:	108000f0 	cmpltui	r2,r2,3
1001287c:	1000051e 	bne	r2,zero,10012894 <lodepng_encode+0x124>
  {
    CERROR_RETURN_ERROR(state->error, 61); /*error: unexisting btype*/
10012880:	e0800417 	ldw	r2,16(fp)
10012884:	00c00f44 	movi	r3,61
10012888:	10c04815 	stw	r3,288(r2)
1001288c:	00800f44 	movi	r2,61
10012890:	0001db06 	br	10013000 <lodepng_encode+0x890>
  }
  if(state->info_png.interlace_method > 1)
10012894:	e0800417 	ldw	r2,16(fp)
10012898:	10802217 	ldw	r2,136(r2)
1001289c:	108000b0 	cmpltui	r2,r2,2
100128a0:	1000051e 	bne	r2,zero,100128b8 <lodepng_encode+0x148>
  {
    CERROR_RETURN_ERROR(state->error, 71); /*error: unexisting interlace mode*/
100128a4:	e0800417 	ldw	r2,16(fp)
100128a8:	00c011c4 	movi	r3,71
100128ac:	10c04815 	stw	r3,288(r2)
100128b0:	008011c4 	movi	r2,71
100128b4:	0001d206 	br	10013000 <lodepng_encode+0x890>
  }

  state->error = checkColorValidity(info.color.colortype, info.color.bitdepth);
100128b8:	e0ffd217 	ldw	r3,-184(fp)
100128bc:	e0bfd317 	ldw	r2,-180(fp)
100128c0:	1809883a 	mov	r4,r3
100128c4:	100b883a 	mov	r5,r2
100128c8:	0006c7c0 	call	10006c7c <checkColorValidity>
100128cc:	e0c00417 	ldw	r3,16(fp)
100128d0:	18804815 	stw	r2,288(r3)
  if(state->error) return state->error; /*error: unexisting color type given*/
100128d4:	e0800417 	ldw	r2,16(fp)
100128d8:	10804817 	ldw	r2,288(r2)
100128dc:	10000326 	beq	r2,zero,100128ec <lodepng_encode+0x17c>
100128e0:	e0800417 	ldw	r2,16(fp)
100128e4:	10804817 	ldw	r2,288(r2)
100128e8:	0001c506 	br	10013000 <lodepng_encode+0x890>
  state->error = checkColorValidity(state->info_raw.colortype, state->info_raw.bitdepth);
100128ec:	e0800417 	ldw	r2,16(fp)
100128f0:	10c01817 	ldw	r3,96(r2)
100128f4:	e0800417 	ldw	r2,16(fp)
100128f8:	10801917 	ldw	r2,100(r2)
100128fc:	1809883a 	mov	r4,r3
10012900:	100b883a 	mov	r5,r2
10012904:	0006c7c0 	call	10006c7c <checkColorValidity>
10012908:	e0c00417 	ldw	r3,16(fp)
1001290c:	18804815 	stw	r2,288(r3)
  if(state->error) return state->error; /*error: unexisting color type given*/
10012910:	e0800417 	ldw	r2,16(fp)
10012914:	10804817 	ldw	r2,288(r2)
10012918:	10000326 	beq	r2,zero,10012928 <lodepng_encode+0x1b8>
1001291c:	e0800417 	ldw	r2,16(fp)
10012920:	10804817 	ldw	r2,288(r2)
10012924:	0001b606 	br	10013000 <lodepng_encode+0x890>

  if(!lodepng_color_mode_equal(&state->info_raw, &info.color))
10012928:	e0800417 	ldw	r2,16(fp)
1001292c:	10c01804 	addi	r3,r2,96
10012930:	e0bfcf04 	addi	r2,fp,-196
10012934:	10800304 	addi	r2,r2,12
10012938:	1809883a 	mov	r4,r3
1001293c:	100b883a 	mov	r5,r2
10012940:	00070840 	call	10007084 <lodepng_color_mode_equal>
10012944:	10003e1e 	bne	r2,zero,10012a40 <lodepng_encode+0x2d0>
  {
    unsigned char* converted;
    size_t size = (w * h * lodepng_get_bpp(&info.color) + 7) / 8;
10012948:	e13fff17 	ldw	r4,-4(fp)
1001294c:	e1400317 	ldw	r5,12(fp)
10012950:	00146fc0 	call	100146fc <__mulsi3>
10012954:	1021883a 	mov	r16,r2
10012958:	e0bfcf04 	addi	r2,fp,-196
1001295c:	10800304 	addi	r2,r2,12
10012960:	1009883a 	mov	r4,r2
10012964:	00073780 	call	10007378 <lodepng_get_bpp>
10012968:	8009883a 	mov	r4,r16
1001296c:	100b883a 	mov	r5,r2
10012970:	00146fc0 	call	100146fc <__mulsi3>
10012974:	108001c4 	addi	r2,r2,7
10012978:	1004d0fa 	srli	r2,r2,3
1001297c:	e0bfcd15 	stw	r2,-204(fp)

    converted = (unsigned char*)lodepng_malloc(size);
10012980:	e13fcd17 	ldw	r4,-204(fp)
10012984:	00001f40 	call	100001f4 <lodepng_malloc>
10012988:	e0bfce15 	stw	r2,-200(fp)
    if(!converted && size) state->error = 83; /*alloc fail*/
1001298c:	e0bfce17 	ldw	r2,-200(fp)
10012990:	1000051e 	bne	r2,zero,100129a8 <lodepng_encode+0x238>
10012994:	e0bfcd17 	ldw	r2,-204(fp)
10012998:	10000326 	beq	r2,zero,100129a8 <lodepng_encode+0x238>
1001299c:	e0800417 	ldw	r2,16(fp)
100129a0:	00c014c4 	movi	r3,83
100129a4:	10c04815 	stw	r3,288(r2)
    if(!state->error)
100129a8:	e0800417 	ldw	r2,16(fp)
100129ac:	10804817 	ldw	r2,288(r2)
100129b0:	10000f1e 	bne	r2,zero,100129f0 <lodepng_encode+0x280>
    {
      state->error = lodepng_convert(converted, image, &info.color, &state->info_raw, w, h);
100129b4:	e0800417 	ldw	r2,16(fp)
100129b8:	10801804 	addi	r2,r2,96
100129bc:	e0ffcf04 	addi	r3,fp,-196
100129c0:	18c00304 	addi	r3,r3,12
100129c4:	e13fff17 	ldw	r4,-4(fp)
100129c8:	d9000015 	stw	r4,0(sp)
100129cc:	e1000317 	ldw	r4,12(fp)
100129d0:	d9000115 	stw	r4,4(sp)
100129d4:	e13fce17 	ldw	r4,-200(fp)
100129d8:	e17ffe17 	ldw	r5,-8(fp)
100129dc:	180d883a 	mov	r6,r3
100129e0:	100f883a 	mov	r7,r2
100129e4:	000aadc0 	call	1000aadc <lodepng_convert>
100129e8:	e0c00417 	ldw	r3,16(fp)
100129ec:	18804815 	stw	r2,288(r3)
    }
    if(!state->error) preProcessScanlines(&data, &datasize, converted, w, h, &info, &state->encoder);
100129f0:	e0800417 	ldw	r2,16(fp)
100129f4:	10804817 	ldw	r2,288(r2)
100129f8:	10000e1e 	bne	r2,zero,10012a34 <lodepng_encode+0x2c4>
100129fc:	e0800417 	ldw	r2,16(fp)
10012a00:	11000804 	addi	r4,r2,32
10012a04:	e0fffa04 	addi	r3,fp,-24
10012a08:	e0bffb04 	addi	r2,fp,-20
10012a0c:	e1400317 	ldw	r5,12(fp)
10012a10:	d9400015 	stw	r5,0(sp)
10012a14:	e17fcf04 	addi	r5,fp,-196
10012a18:	d9400115 	stw	r5,4(sp)
10012a1c:	d9000215 	stw	r4,8(sp)
10012a20:	1809883a 	mov	r4,r3
10012a24:	100b883a 	mov	r5,r2
10012a28:	e1bfce17 	ldw	r6,-200(fp)
10012a2c:	e1ffff17 	ldw	r7,-4(fp)
10012a30:	0011fa40 	call	10011fa4 <preProcessScanlines>
    lodepng_free(converted);
10012a34:	e13fce17 	ldw	r4,-200(fp)
10012a38:	000025c0 	call	1000025c <lodepng_free>
10012a3c:	00000e06 	br	10012a78 <lodepng_encode+0x308>
  }
  else preProcessScanlines(&data, &datasize, image, w, h, &info, &state->encoder);
10012a40:	e0800417 	ldw	r2,16(fp)
10012a44:	11000804 	addi	r4,r2,32
10012a48:	e0fffa04 	addi	r3,fp,-24
10012a4c:	e0bffb04 	addi	r2,fp,-20
10012a50:	e1400317 	ldw	r5,12(fp)
10012a54:	d9400015 	stw	r5,0(sp)
10012a58:	e17fcf04 	addi	r5,fp,-196
10012a5c:	d9400115 	stw	r5,4(sp)
10012a60:	d9000215 	stw	r4,8(sp)
10012a64:	1809883a 	mov	r4,r3
10012a68:	100b883a 	mov	r5,r2
10012a6c:	e1bffe17 	ldw	r6,-8(fp)
10012a70:	e1ffff17 	ldw	r7,-4(fp)
10012a74:	0011fa40 	call	10011fa4 <preProcessScanlines>

  ucvector_init(&outv);
10012a78:	e0bff704 	addi	r2,fp,-36
10012a7c:	1009883a 	mov	r4,r2
10012a80:	00006c00 	call	100006c0 <ucvector_init>
  while(!state->error) /*while only executed once, to break on error*/
10012a84:	0001883a 	nop
10012a88:	e0800417 	ldw	r2,16(fp)
10012a8c:	10804817 	ldw	r2,288(r2)
10012a90:	10014d1e 	bne	r2,zero,10012fc8 <lodepng_encode+0x858>
  {
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
    size_t i;
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
    /*write signature and chunks*/
    writeSignature(&outv);
10012a94:	e0bff704 	addi	r2,fp,-36
10012a98:	1009883a 	mov	r4,r2
10012a9c:	000f5840 	call	1000f584 <writeSignature>
    /*IHDR*/
    addChunk_IHDR(&outv, w, h, info.color.colortype, info.color.bitdepth, info.interlace_method);
10012aa0:	e0bfd217 	ldw	r2,-184(fp)
10012aa4:	e17fd317 	ldw	r5,-180(fp)
10012aa8:	e13fd117 	ldw	r4,-188(fp)
10012aac:	e0fff704 	addi	r3,fp,-36
10012ab0:	d9400015 	stw	r5,0(sp)
10012ab4:	d9000115 	stw	r4,4(sp)
10012ab8:	1809883a 	mov	r4,r3
10012abc:	e17fff17 	ldw	r5,-4(fp)
10012ac0:	e1800317 	ldw	r6,12(fp)
10012ac4:	100f883a 	mov	r7,r2
10012ac8:	000f60c0 	call	1000f60c <addChunk_IHDR>
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
    /*unknown chunks between IHDR and PLTE*/
    if(info.unknown_chunks_data[0])
10012acc:	e0bff117 	ldw	r2,-60(fp)
10012ad0:	10000b26 	beq	r2,zero,10012b00 <lodepng_encode+0x390>
    {
      state->error = addUnknownChunks(&outv, info.unknown_chunks_data[0], info.unknown_chunks_size[0]);
10012ad4:	e0fff117 	ldw	r3,-60(fp)
10012ad8:	e0bff417 	ldw	r2,-48(fp)
10012adc:	e13ff704 	addi	r4,fp,-36
10012ae0:	180b883a 	mov	r5,r3
10012ae4:	100d883a 	mov	r6,r2
10012ae8:	00126cc0 	call	100126cc <addUnknownChunks>
10012aec:	e0c00417 	ldw	r3,16(fp)
10012af0:	18804815 	stw	r2,288(r3)
      if(state->error) break;
10012af4:	e0800417 	ldw	r2,16(fp)
10012af8:	10804817 	ldw	r2,288(r2)
10012afc:	10012b1e 	bne	r2,zero,10012fac <lodepng_encode+0x83c>
    }
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
    /*PLTE*/
    if(info.color.colortype == LCT_PALETTE)
10012b00:	e0bfd217 	ldw	r2,-184(fp)
10012b04:	108000d8 	cmpnei	r2,r2,3
10012b08:	1000061e 	bne	r2,zero,10012b24 <lodepng_encode+0x3b4>
    {
      addChunk_PLTE(&outv, &info.color);
10012b0c:	e0fff704 	addi	r3,fp,-36
10012b10:	e0bfcf04 	addi	r2,fp,-196
10012b14:	10800304 	addi	r2,r2,12
10012b18:	1809883a 	mov	r4,r3
10012b1c:	100b883a 	mov	r5,r2
10012b20:	000f70c0 	call	1000f70c <addChunk_PLTE>
    }
    if(state->encoder.force_palette && (info.color.colortype == LCT_RGB || info.color.colortype == LCT_RGBA))
10012b24:	e0800417 	ldw	r2,16(fp)
10012b28:	10801517 	ldw	r2,84(r2)
10012b2c:	10000c26 	beq	r2,zero,10012b60 <lodepng_encode+0x3f0>
10012b30:	e0bfd217 	ldw	r2,-184(fp)
10012b34:	108000a0 	cmpeqi	r2,r2,2
10012b38:	1000031e 	bne	r2,zero,10012b48 <lodepng_encode+0x3d8>
10012b3c:	e0bfd217 	ldw	r2,-184(fp)
10012b40:	10800198 	cmpnei	r2,r2,6
10012b44:	1000061e 	bne	r2,zero,10012b60 <lodepng_encode+0x3f0>
    {
      addChunk_PLTE(&outv, &info.color);
10012b48:	e0fff704 	addi	r3,fp,-36
10012b4c:	e0bfcf04 	addi	r2,fp,-196
10012b50:	10800304 	addi	r2,r2,12
10012b54:	1809883a 	mov	r4,r3
10012b58:	100b883a 	mov	r5,r2
10012b5c:	000f70c0 	call	1000f70c <addChunk_PLTE>
    }
    /*tRNS*/
    if(info.color.colortype == LCT_PALETTE && getPaletteTranslucency(info.color.palette, info.color.palettesize) != 0)
10012b60:	e0bfd217 	ldw	r2,-184(fp)
10012b64:	108000d8 	cmpnei	r2,r2,3
10012b68:	10000c1e 	bne	r2,zero,10012b9c <lodepng_encode+0x42c>
10012b6c:	e0ffd417 	ldw	r3,-176(fp)
10012b70:	e0bfd517 	ldw	r2,-172(fp)
10012b74:	1809883a 	mov	r4,r3
10012b78:	100b883a 	mov	r5,r2
10012b7c:	00125180 	call	10012518 <getPaletteTranslucency>
10012b80:	10000626 	beq	r2,zero,10012b9c <lodepng_encode+0x42c>
    {
      addChunk_tRNS(&outv, &info.color);
10012b84:	e0fff704 	addi	r3,fp,-36
10012b88:	e0bfcf04 	addi	r2,fp,-196
10012b8c:	10800304 	addi	r2,r2,12
10012b90:	1809883a 	mov	r4,r3
10012b94:	100b883a 	mov	r5,r2
10012b98:	000f7e40 	call	1000f7e4 <addChunk_tRNS>
    }
    if((info.color.colortype == LCT_GREY || info.color.colortype == LCT_RGB) && info.color.key_defined)
10012b9c:	e0bfd217 	ldw	r2,-184(fp)
10012ba0:	10000326 	beq	r2,zero,10012bb0 <lodepng_encode+0x440>
10012ba4:	e0bfd217 	ldw	r2,-184(fp)
10012ba8:	10800098 	cmpnei	r2,r2,2
10012bac:	1000081e 	bne	r2,zero,10012bd0 <lodepng_encode+0x460>
10012bb0:	e0bfd617 	ldw	r2,-168(fp)
10012bb4:	10000626 	beq	r2,zero,10012bd0 <lodepng_encode+0x460>
    {
      addChunk_tRNS(&outv, &info.color);
10012bb8:	e0fff704 	addi	r3,fp,-36
10012bbc:	e0bfcf04 	addi	r2,fp,-196
10012bc0:	10800304 	addi	r2,r2,12
10012bc4:	1809883a 	mov	r4,r3
10012bc8:	100b883a 	mov	r5,r2
10012bcc:	000f7e40 	call	1000f7e4 <addChunk_tRNS>
    }
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
    /*bKGD (must come between PLTE and the IDAt chunks*/
    if(info.background_defined) addChunk_bKGD(&outv, &info);
10012bd0:	e0bfda17 	ldw	r2,-152(fp)
10012bd4:	10000526 	beq	r2,zero,10012bec <lodepng_encode+0x47c>
10012bd8:	e0fff704 	addi	r3,fp,-36
10012bdc:	e0bfcf04 	addi	r2,fp,-196
10012be0:	1809883a 	mov	r4,r3
10012be4:	100b883a 	mov	r5,r2
10012be8:	00101440 	call	10010144 <addChunk_bKGD>
    /*pHYs (must come before the IDAT chunks)*/
    if(info.phys_defined) addChunk_pHYs(&outv, &info);
10012bec:	e0bfed17 	ldw	r2,-76(fp)
10012bf0:	10000526 	beq	r2,zero,10012c08 <lodepng_encode+0x498>
10012bf4:	e0fff704 	addi	r3,fp,-36
10012bf8:	e0bfcf04 	addi	r2,fp,-196
10012bfc:	1809883a 	mov	r4,r3
10012c00:	100b883a 	mov	r5,r2
10012c04:	00104180 	call	10010418 <addChunk_pHYs>

    /*unknown chunks between PLTE and IDAT*/
    if(info.unknown_chunks_data[1])
10012c08:	e0bff217 	ldw	r2,-56(fp)
10012c0c:	10000b26 	beq	r2,zero,10012c3c <lodepng_encode+0x4cc>
    {
      state->error = addUnknownChunks(&outv, info.unknown_chunks_data[1], info.unknown_chunks_size[1]);
10012c10:	e0fff217 	ldw	r3,-56(fp)
10012c14:	e0bff517 	ldw	r2,-44(fp)
10012c18:	e13ff704 	addi	r4,fp,-36
10012c1c:	180b883a 	mov	r5,r3
10012c20:	100d883a 	mov	r6,r2
10012c24:	00126cc0 	call	100126cc <addUnknownChunks>
10012c28:	e0c00417 	ldw	r3,16(fp)
10012c2c:	18804815 	stw	r2,288(r3)
      if(state->error) break;
10012c30:	e0800417 	ldw	r2,16(fp)
10012c34:	10804817 	ldw	r2,288(r2)
10012c38:	1000de1e 	bne	r2,zero,10012fb4 <lodepng_encode+0x844>
    }
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
    /*IDAT (multiple IDAT chunks must be consecutive)*/
    state->error = addChunk_IDAT(&outv, data, datasize, &state->encoder.zlibsettings);
10012c3c:	e17ffa17 	ldw	r5,-24(fp)
10012c40:	e0fffb17 	ldw	r3,-20(fp)
10012c44:	e0800417 	ldw	r2,16(fp)
10012c48:	10800804 	addi	r2,r2,32
10012c4c:	e13ff704 	addi	r4,fp,-36
10012c50:	180d883a 	mov	r6,r3
10012c54:	100f883a 	mov	r7,r2
10012c58:	000fa540 	call	1000fa54 <addChunk_IDAT>
10012c5c:	e0c00417 	ldw	r3,16(fp)
10012c60:	18804815 	stw	r2,288(r3)
    if(state->error) break;
10012c64:	e0800417 	ldw	r2,16(fp)
10012c68:	10804817 	ldw	r2,288(r2)
10012c6c:	1000d31e 	bne	r2,zero,10012fbc <lodepng_encode+0x84c>
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
    /*tIME*/
    if(info.time_defined) addChunk_tIME(&outv, &info.time);
10012c70:	e0bfe617 	ldw	r2,-104(fp)
10012c74:	10000626 	beq	r2,zero,10012c90 <lodepng_encode+0x520>
10012c78:	e0fff704 	addi	r3,fp,-36
10012c7c:	e0bfcf04 	addi	r2,fp,-196
10012c80:	10801804 	addi	r2,r2,96
10012c84:	1809883a 	mov	r4,r3
10012c88:	100b883a 	mov	r5,r2
10012c8c:	00103140 	call	10010314 <addChunk_tIME>
    /*tEXt and/or zTXt*/
    for(i = 0; i != info.text_num; ++i)
10012c90:	e03fcb15 	stw	zero,-212(fp)
10012c94:	00004606 	br	10012db0 <lodepng_encode+0x640>
    {
      if(strlen(info.text_keys[i]) > 79)
10012c98:	e0ffdf17 	ldw	r3,-132(fp)
10012c9c:	e0bfcb17 	ldw	r2,-212(fp)
10012ca0:	1085883a 	add	r2,r2,r2
10012ca4:	1085883a 	add	r2,r2,r2
10012ca8:	1885883a 	add	r2,r3,r2
10012cac:	10800017 	ldw	r2,0(r2)
10012cb0:	1009883a 	mov	r4,r2
10012cb4:	001841c0 	call	1001841c <strlen>
10012cb8:	10801430 	cmpltui	r2,r2,80
10012cbc:	1000041e 	bne	r2,zero,10012cd0 <lodepng_encode+0x560>
      {
        state->error = 66; /*text chunk too large*/
10012cc0:	e0800417 	ldw	r2,16(fp)
10012cc4:	00c01084 	movi	r3,66
10012cc8:	10c04815 	stw	r3,288(r2)
        break;
10012ccc:	00003b06 	br	10012dbc <lodepng_encode+0x64c>
      }
      if(strlen(info.text_keys[i]) < 1)
10012cd0:	e0ffdf17 	ldw	r3,-132(fp)
10012cd4:	e0bfcb17 	ldw	r2,-212(fp)
10012cd8:	1085883a 	add	r2,r2,r2
10012cdc:	1085883a 	add	r2,r2,r2
10012ce0:	1885883a 	add	r2,r3,r2
10012ce4:	10800017 	ldw	r2,0(r2)
10012ce8:	10800003 	ldbu	r2,0(r2)
10012cec:	10803fcc 	andi	r2,r2,255
10012cf0:	1080201c 	xori	r2,r2,128
10012cf4:	10bfe004 	addi	r2,r2,-128
10012cf8:	1000041e 	bne	r2,zero,10012d0c <lodepng_encode+0x59c>
      {
        state->error = 67; /*text chunk too small*/
10012cfc:	e0800417 	ldw	r2,16(fp)
10012d00:	00c010c4 	movi	r3,67
10012d04:	10c04815 	stw	r3,288(r2)
        break;
10012d08:	00002c06 	br	10012dbc <lodepng_encode+0x64c>
      }
      if(state->encoder.text_compression)
10012d0c:	e0800417 	ldw	r2,16(fp)
10012d10:	10801717 	ldw	r2,92(r2)
10012d14:	10001326 	beq	r2,zero,10012d64 <lodepng_encode+0x5f4>
      {
        addChunk_zTXt(&outv, info.text_keys[i], info.text_strings[i], &state->encoder.zlibsettings);
10012d18:	e0ffdf17 	ldw	r3,-132(fp)
10012d1c:	e0bfcb17 	ldw	r2,-212(fp)
10012d20:	1085883a 	add	r2,r2,r2
10012d24:	1085883a 	add	r2,r2,r2
10012d28:	1885883a 	add	r2,r3,r2
10012d2c:	11400017 	ldw	r5,0(r2)
10012d30:	e0ffe017 	ldw	r3,-128(fp)
10012d34:	e0bfcb17 	ldw	r2,-212(fp)
10012d38:	1085883a 	add	r2,r2,r2
10012d3c:	1085883a 	add	r2,r2,r2
10012d40:	1885883a 	add	r2,r3,r2
10012d44:	10c00017 	ldw	r3,0(r2)
10012d48:	e0800417 	ldw	r2,16(fp)
10012d4c:	10800804 	addi	r2,r2,32
10012d50:	e13ff704 	addi	r4,fp,-36
10012d54:	180d883a 	mov	r6,r3
10012d58:	100f883a 	mov	r7,r2
10012d5c:	000fc9c0 	call	1000fc9c <addChunk_zTXt>
10012d60:	00001006 	br	10012da4 <lodepng_encode+0x634>
      }
      else
      {
        addChunk_tEXt(&outv, info.text_keys[i], info.text_strings[i]);
10012d64:	e0ffdf17 	ldw	r3,-132(fp)
10012d68:	e0bfcb17 	ldw	r2,-212(fp)
10012d6c:	1085883a 	add	r2,r2,r2
10012d70:	1085883a 	add	r2,r2,r2
10012d74:	1885883a 	add	r2,r3,r2
10012d78:	10c00017 	ldw	r3,0(r2)
10012d7c:	e13fe017 	ldw	r4,-128(fp)
10012d80:	e0bfcb17 	ldw	r2,-212(fp)
10012d84:	1085883a 	add	r2,r2,r2
10012d88:	1085883a 	add	r2,r2,r2
10012d8c:	2085883a 	add	r2,r4,r2
10012d90:	10800017 	ldw	r2,0(r2)
10012d94:	e13ff704 	addi	r4,fp,-36
10012d98:	180b883a 	mov	r5,r3
10012d9c:	100d883a 	mov	r6,r2
10012da0:	000fb4c0 	call	1000fb4c <addChunk_tEXt>
    if(state->error) break;
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
    /*tIME*/
    if(info.time_defined) addChunk_tIME(&outv, &info.time);
    /*tEXt and/or zTXt*/
    for(i = 0; i != info.text_num; ++i)
10012da4:	e0bfcb17 	ldw	r2,-212(fp)
10012da8:	10800044 	addi	r2,r2,1
10012dac:	e0bfcb15 	stw	r2,-212(fp)
10012db0:	e0ffde17 	ldw	r3,-136(fp)
10012db4:	e0bfcb17 	ldw	r2,-212(fp)
10012db8:	18bfb71e 	bne	r3,r2,10012c98 <__alt_data_end+0xf8012c98>
      {
        addChunk_tEXt(&outv, info.text_keys[i], info.text_strings[i]);
      }
    }
    /*LodePNG version id in text chunk*/
    if(state->encoder.add_id)
10012dbc:	e0800417 	ldw	r2,16(fp)
10012dc0:	10801617 	ldw	r2,88(r2)
10012dc4:	10002026 	beq	r2,zero,10012e48 <lodepng_encode+0x6d8>
    {
      unsigned alread_added_id_text = 0;
10012dc8:	e03fcc15 	stw	zero,-208(fp)
      for(i = 0; i != info.text_num; ++i)
10012dcc:	e03fcb15 	stw	zero,-212(fp)
10012dd0:	00001106 	br	10012e18 <lodepng_encode+0x6a8>
      {
        if(!strcmp(info.text_keys[i], "LodePNG"))
10012dd4:	e0ffdf17 	ldw	r3,-132(fp)
10012dd8:	e0bfcb17 	ldw	r2,-212(fp)
10012ddc:	1085883a 	add	r2,r2,r2
10012de0:	1085883a 	add	r2,r2,r2
10012de4:	1885883a 	add	r2,r3,r2
10012de8:	10800017 	ldw	r2,0(r2)
10012dec:	1009883a 	mov	r4,r2
10012df0:	014400b4 	movhi	r5,4098
10012df4:	294a9f04 	addi	r5,r5,10876
10012df8:	00183780 	call	10018378 <strcmp>
10012dfc:	1000031e 	bne	r2,zero,10012e0c <lodepng_encode+0x69c>
        {
          alread_added_id_text = 1;
10012e00:	00800044 	movi	r2,1
10012e04:	e0bfcc15 	stw	r2,-208(fp)
          break;
10012e08:	00000606 	br	10012e24 <lodepng_encode+0x6b4>
    }
    /*LodePNG version id in text chunk*/
    if(state->encoder.add_id)
    {
      unsigned alread_added_id_text = 0;
      for(i = 0; i != info.text_num; ++i)
10012e0c:	e0bfcb17 	ldw	r2,-212(fp)
10012e10:	10800044 	addi	r2,r2,1
10012e14:	e0bfcb15 	stw	r2,-212(fp)
10012e18:	e0ffde17 	ldw	r3,-136(fp)
10012e1c:	e0bfcb17 	ldw	r2,-212(fp)
10012e20:	18bfec1e 	bne	r3,r2,10012dd4 <__alt_data_end+0xf8012dd4>
        {
          alread_added_id_text = 1;
          break;
        }
      }
      if(alread_added_id_text == 0)
10012e24:	e0bfcc17 	ldw	r2,-208(fp)
10012e28:	1000071e 	bne	r2,zero,10012e48 <lodepng_encode+0x6d8>
      {
        addChunk_tEXt(&outv, "LodePNG", LODEPNG_VERSION_STRING); /*it's shorter as tEXt than as zTXt chunk*/
10012e2c:	d0a00017 	ldw	r2,-32768(gp)
10012e30:	e0fff704 	addi	r3,fp,-36
10012e34:	1809883a 	mov	r4,r3
10012e38:	014400b4 	movhi	r5,4098
10012e3c:	294a9f04 	addi	r5,r5,10876
10012e40:	100d883a 	mov	r6,r2
10012e44:	000fb4c0 	call	1000fb4c <addChunk_tEXt>
      }
    }
    /*iTXt*/
    for(i = 0; i != info.itext_num; ++i)
10012e48:	e03fcb15 	stw	zero,-212(fp)
10012e4c:	00004306 	br	10012f5c <lodepng_encode+0x7ec>
    {
      if(strlen(info.itext_keys[i]) > 79)
10012e50:	e0ffe217 	ldw	r3,-120(fp)
10012e54:	e0bfcb17 	ldw	r2,-212(fp)
10012e58:	1085883a 	add	r2,r2,r2
10012e5c:	1085883a 	add	r2,r2,r2
10012e60:	1885883a 	add	r2,r3,r2
10012e64:	10800017 	ldw	r2,0(r2)
10012e68:	1009883a 	mov	r4,r2
10012e6c:	001841c0 	call	1001841c <strlen>
10012e70:	10801430 	cmpltui	r2,r2,80
10012e74:	1000041e 	bne	r2,zero,10012e88 <lodepng_encode+0x718>
      {
        state->error = 66; /*text chunk too large*/
10012e78:	e0800417 	ldw	r2,16(fp)
10012e7c:	00c01084 	movi	r3,66
10012e80:	10c04815 	stw	r3,288(r2)
        break;
10012e84:	00003806 	br	10012f68 <lodepng_encode+0x7f8>
      }
      if(strlen(info.itext_keys[i]) < 1)
10012e88:	e0ffe217 	ldw	r3,-120(fp)
10012e8c:	e0bfcb17 	ldw	r2,-212(fp)
10012e90:	1085883a 	add	r2,r2,r2
10012e94:	1085883a 	add	r2,r2,r2
10012e98:	1885883a 	add	r2,r3,r2
10012e9c:	10800017 	ldw	r2,0(r2)
10012ea0:	10800003 	ldbu	r2,0(r2)
10012ea4:	10803fcc 	andi	r2,r2,255
10012ea8:	1080201c 	xori	r2,r2,128
10012eac:	10bfe004 	addi	r2,r2,-128
10012eb0:	1000041e 	bne	r2,zero,10012ec4 <lodepng_encode+0x754>
      {
        state->error = 67; /*text chunk too small*/
10012eb4:	e0800417 	ldw	r2,16(fp)
10012eb8:	00c010c4 	movi	r3,67
10012ebc:	10c04815 	stw	r3,288(r2)
        break;
10012ec0:	00002906 	br	10012f68 <lodepng_encode+0x7f8>
      }
      addChunk_iTXt(&outv, state->encoder.text_compression,
10012ec4:	e0800417 	ldw	r2,16(fp)
10012ec8:	11401717 	ldw	r5,92(r2)
                    info.itext_keys[i], info.itext_langtags[i], info.itext_transkeys[i], info.itext_strings[i],
10012ecc:	e0ffe217 	ldw	r3,-120(fp)
10012ed0:	e0bfcb17 	ldw	r2,-212(fp)
10012ed4:	1085883a 	add	r2,r2,r2
10012ed8:	1085883a 	add	r2,r2,r2
10012edc:	1885883a 	add	r2,r3,r2
      if(strlen(info.itext_keys[i]) < 1)
      {
        state->error = 67; /*text chunk too small*/
        break;
      }
      addChunk_iTXt(&outv, state->encoder.text_compression,
10012ee0:	11800017 	ldw	r6,0(r2)
                    info.itext_keys[i], info.itext_langtags[i], info.itext_transkeys[i], info.itext_strings[i],
10012ee4:	e0ffe317 	ldw	r3,-116(fp)
10012ee8:	e0bfcb17 	ldw	r2,-212(fp)
10012eec:	1085883a 	add	r2,r2,r2
10012ef0:	1085883a 	add	r2,r2,r2
10012ef4:	1885883a 	add	r2,r3,r2
      if(strlen(info.itext_keys[i]) < 1)
      {
        state->error = 67; /*text chunk too small*/
        break;
      }
      addChunk_iTXt(&outv, state->encoder.text_compression,
10012ef8:	10c00017 	ldw	r3,0(r2)
                    info.itext_keys[i], info.itext_langtags[i], info.itext_transkeys[i], info.itext_strings[i],
10012efc:	e13fe417 	ldw	r4,-112(fp)
10012f00:	e0bfcb17 	ldw	r2,-212(fp)
10012f04:	1085883a 	add	r2,r2,r2
10012f08:	1085883a 	add	r2,r2,r2
10012f0c:	2085883a 	add	r2,r4,r2
      if(strlen(info.itext_keys[i]) < 1)
      {
        state->error = 67; /*text chunk too small*/
        break;
      }
      addChunk_iTXt(&outv, state->encoder.text_compression,
10012f10:	12000017 	ldw	r8,0(r2)
                    info.itext_keys[i], info.itext_langtags[i], info.itext_transkeys[i], info.itext_strings[i],
10012f14:	e13fe517 	ldw	r4,-108(fp)
10012f18:	e0bfcb17 	ldw	r2,-212(fp)
10012f1c:	1085883a 	add	r2,r2,r2
10012f20:	1085883a 	add	r2,r2,r2
10012f24:	2085883a 	add	r2,r4,r2
      if(strlen(info.itext_keys[i]) < 1)
      {
        state->error = 67; /*text chunk too small*/
        break;
      }
      addChunk_iTXt(&outv, state->encoder.text_compression,
10012f28:	11c00017 	ldw	r7,0(r2)
10012f2c:	e0800417 	ldw	r2,16(fp)
10012f30:	11000804 	addi	r4,r2,32
10012f34:	e0bff704 	addi	r2,fp,-36
10012f38:	da000015 	stw	r8,0(sp)
10012f3c:	d9c00115 	stw	r7,4(sp)
10012f40:	d9000215 	stw	r4,8(sp)
10012f44:	1009883a 	mov	r4,r2
10012f48:	180f883a 	mov	r7,r3
10012f4c:	000fe440 	call	1000fe44 <addChunk_iTXt>
      {
        addChunk_tEXt(&outv, "LodePNG", LODEPNG_VERSION_STRING); /*it's shorter as tEXt than as zTXt chunk*/
      }
    }
    /*iTXt*/
    for(i = 0; i != info.itext_num; ++i)
10012f50:	e0bfcb17 	ldw	r2,-212(fp)
10012f54:	10800044 	addi	r2,r2,1
10012f58:	e0bfcb15 	stw	r2,-212(fp)
10012f5c:	e0ffe117 	ldw	r3,-124(fp)
10012f60:	e0bfcb17 	ldw	r2,-212(fp)
10012f64:	18bfba1e 	bne	r3,r2,10012e50 <__alt_data_end+0xf8012e50>
                    info.itext_keys[i], info.itext_langtags[i], info.itext_transkeys[i], info.itext_strings[i],
                    &state->encoder.zlibsettings);
    }

    /*unknown chunks between IDAT and IEND*/
    if(info.unknown_chunks_data[2])
10012f68:	e0bff317 	ldw	r2,-52(fp)
10012f6c:	10000b26 	beq	r2,zero,10012f9c <lodepng_encode+0x82c>
    {
      state->error = addUnknownChunks(&outv, info.unknown_chunks_data[2], info.unknown_chunks_size[2]);
10012f70:	e0fff317 	ldw	r3,-52(fp)
10012f74:	e0bff617 	ldw	r2,-40(fp)
10012f78:	e13ff704 	addi	r4,fp,-36
10012f7c:	180b883a 	mov	r5,r3
10012f80:	100d883a 	mov	r6,r2
10012f84:	00126cc0 	call	100126cc <addUnknownChunks>
10012f88:	e0c00417 	ldw	r3,16(fp)
10012f8c:	18804815 	stw	r2,288(r3)
      if(state->error) break;
10012f90:	e0800417 	ldw	r2,16(fp)
10012f94:	10804817 	ldw	r2,288(r2)
10012f98:	10000a1e 	bne	r2,zero,10012fc4 <lodepng_encode+0x854>
    }
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
    addChunk_IEND(&outv);
10012f9c:	e0bff704 	addi	r2,fp,-36
10012fa0:	1009883a 	mov	r4,r2
10012fa4:	000fb000 	call	1000fb00 <addChunk_IEND>

    break; /*this isn't really a while loop; no error happened so break out now!*/
10012fa8:	00000706 	br	10012fc8 <lodepng_encode+0x858>
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
    /*unknown chunks between IHDR and PLTE*/
    if(info.unknown_chunks_data[0])
    {
      state->error = addUnknownChunks(&outv, info.unknown_chunks_data[0], info.unknown_chunks_size[0]);
      if(state->error) break;
10012fac:	0001883a 	nop
10012fb0:	00000506 	br	10012fc8 <lodepng_encode+0x858>

    /*unknown chunks between PLTE and IDAT*/
    if(info.unknown_chunks_data[1])
    {
      state->error = addUnknownChunks(&outv, info.unknown_chunks_data[1], info.unknown_chunks_size[1]);
      if(state->error) break;
10012fb4:	0001883a 	nop
10012fb8:	00000306 	br	10012fc8 <lodepng_encode+0x858>
    }
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
    /*IDAT (multiple IDAT chunks must be consecutive)*/
    state->error = addChunk_IDAT(&outv, data, datasize, &state->encoder.zlibsettings);
    if(state->error) break;
10012fbc:	0001883a 	nop
10012fc0:	00000106 	br	10012fc8 <lodepng_encode+0x858>

    /*unknown chunks between IDAT and IEND*/
    if(info.unknown_chunks_data[2])
    {
      state->error = addUnknownChunks(&outv, info.unknown_chunks_data[2], info.unknown_chunks_size[2]);
      if(state->error) break;
10012fc4:	0001883a 	nop
    addChunk_IEND(&outv);

    break; /*this isn't really a while loop; no error happened so break out now!*/
  }

  lodepng_info_cleanup(&info);
10012fc8:	e0bfcf04 	addi	r2,fp,-196
10012fcc:	1009883a 	mov	r4,r2
10012fd0:	00082b00 	call	100082b0 <lodepng_info_cleanup>
  lodepng_free(data);
10012fd4:	e0bffa17 	ldw	r2,-24(fp)
10012fd8:	1009883a 	mov	r4,r2
10012fdc:	000025c0 	call	1000025c <lodepng_free>
  /*instead of cleaning the vector up, give it to the output*/
  *out = outv.data;
10012fe0:	e0fff717 	ldw	r3,-36(fp)
10012fe4:	e0bffc17 	ldw	r2,-16(fp)
10012fe8:	10c00015 	stw	r3,0(r2)
  *outsize = outv.size;
10012fec:	e0fff817 	ldw	r3,-32(fp)
10012ff0:	e0bffd17 	ldw	r2,-12(fp)
10012ff4:	10c00015 	stw	r3,0(r2)

  return state->error;
10012ff8:	e0800417 	ldw	r2,16(fp)
10012ffc:	10804817 	ldw	r2,288(r2)
}
10013000:	e037883a 	mov	sp,fp
10013004:	dfc00217 	ldw	ra,8(sp)
10013008:	df000117 	ldw	fp,4(sp)
1001300c:	dc000017 	ldw	r16,0(sp)
10013010:	dec00304 	addi	sp,sp,12
10013014:	f800283a 	ret

10013018 <lodepng_encode_memory>:

unsigned lodepng_encode_memory(unsigned char** out, size_t* outsize, const unsigned char* image,
                               unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth)
{
10013018:	deffae04 	addi	sp,sp,-328
1001301c:	dfc05115 	stw	ra,324(sp)
10013020:	df005015 	stw	fp,320(sp)
10013024:	df005004 	addi	fp,sp,320
10013028:	e13ffc15 	stw	r4,-16(fp)
1001302c:	e17ffd15 	stw	r5,-12(fp)
10013030:	e1bffe15 	stw	r6,-8(fp)
10013034:	e1ffff15 	stw	r7,-4(fp)
  unsigned error;
  LodePNGState state;
  lodepng_state_init(&state);
10013038:	e0bfb304 	addi	r2,fp,-308
1001303c:	1009883a 	mov	r4,r2
10013040:	000f3780 	call	1000f378 <lodepng_state_init>
  state.info_raw.colortype = colortype;
10013044:	e0800317 	ldw	r2,12(fp)
10013048:	e0bfcb15 	stw	r2,-212(fp)
  state.info_raw.bitdepth = bitdepth;
1001304c:	e0800417 	ldw	r2,16(fp)
10013050:	e0bfcc15 	stw	r2,-208(fp)
  state.info_png.color.colortype = colortype;
10013054:	e0800317 	ldw	r2,12(fp)
10013058:	e0bfd615 	stw	r2,-168(fp)
  state.info_png.color.bitdepth = bitdepth;
1001305c:	e0800417 	ldw	r2,16(fp)
10013060:	e0bfd715 	stw	r2,-164(fp)
  lodepng_encode(out, outsize, image, w, h, &state);
10013064:	e0800217 	ldw	r2,8(fp)
10013068:	d8800015 	stw	r2,0(sp)
1001306c:	e0bfb304 	addi	r2,fp,-308
10013070:	d8800115 	stw	r2,4(sp)
10013074:	e13ffc17 	ldw	r4,-16(fp)
10013078:	e17ffd17 	ldw	r5,-12(fp)
1001307c:	e1bffe17 	ldw	r6,-8(fp)
10013080:	e1ffff17 	ldw	r7,-4(fp)
10013084:	00127700 	call	10012770 <lodepng_encode>
  error = state.error;
10013088:	e0bffb17 	ldw	r2,-20(fp)
1001308c:	e0bfb215 	stw	r2,-312(fp)
  lodepng_state_cleanup(&state);
10013090:	e0bfb304 	addi	r2,fp,-308
10013094:	1009883a 	mov	r4,r2
10013098:	000f3e80 	call	1000f3e8 <lodepng_state_cleanup>
  return error;
1001309c:	e0bfb217 	ldw	r2,-312(fp)
}
100130a0:	e037883a 	mov	sp,fp
100130a4:	dfc00117 	ldw	ra,4(sp)
100130a8:	df000017 	ldw	fp,0(sp)
100130ac:	dec00204 	addi	sp,sp,8
100130b0:	f800283a 	ret

100130b4 <lodepng_encode32>:

unsigned lodepng_encode32(unsigned char** out, size_t* outsize, const unsigned char* image, unsigned w, unsigned h)
{
100130b4:	defff704 	addi	sp,sp,-36
100130b8:	dfc00815 	stw	ra,32(sp)
100130bc:	df000715 	stw	fp,28(sp)
100130c0:	df000704 	addi	fp,sp,28
100130c4:	e13ffc15 	stw	r4,-16(fp)
100130c8:	e17ffd15 	stw	r5,-12(fp)
100130cc:	e1bffe15 	stw	r6,-8(fp)
100130d0:	e1ffff15 	stw	r7,-4(fp)
  return lodepng_encode_memory(out, outsize, image, w, h, LCT_RGBA, 8);
100130d4:	e0800217 	ldw	r2,8(fp)
100130d8:	d8800015 	stw	r2,0(sp)
100130dc:	00800184 	movi	r2,6
100130e0:	d8800115 	stw	r2,4(sp)
100130e4:	00800204 	movi	r2,8
100130e8:	d8800215 	stw	r2,8(sp)
100130ec:	e13ffc17 	ldw	r4,-16(fp)
100130f0:	e17ffd17 	ldw	r5,-12(fp)
100130f4:	e1bffe17 	ldw	r6,-8(fp)
100130f8:	e1ffff17 	ldw	r7,-4(fp)
100130fc:	00130180 	call	10013018 <lodepng_encode_memory>
}
10013100:	e037883a 	mov	sp,fp
10013104:	dfc00117 	ldw	ra,4(sp)
10013108:	df000017 	ldw	fp,0(sp)
1001310c:	dec00204 	addi	sp,sp,8
10013110:	f800283a 	ret

10013114 <lodepng_encode24>:

unsigned lodepng_encode24(unsigned char** out, size_t* outsize, const unsigned char* image, unsigned w, unsigned h)
{
10013114:	defff704 	addi	sp,sp,-36
10013118:	dfc00815 	stw	ra,32(sp)
1001311c:	df000715 	stw	fp,28(sp)
10013120:	df000704 	addi	fp,sp,28
10013124:	e13ffc15 	stw	r4,-16(fp)
10013128:	e17ffd15 	stw	r5,-12(fp)
1001312c:	e1bffe15 	stw	r6,-8(fp)
10013130:	e1ffff15 	stw	r7,-4(fp)
  return lodepng_encode_memory(out, outsize, image, w, h, LCT_RGB, 8);
10013134:	e0800217 	ldw	r2,8(fp)
10013138:	d8800015 	stw	r2,0(sp)
1001313c:	00800084 	movi	r2,2
10013140:	d8800115 	stw	r2,4(sp)
10013144:	00800204 	movi	r2,8
10013148:	d8800215 	stw	r2,8(sp)
1001314c:	e13ffc17 	ldw	r4,-16(fp)
10013150:	e17ffd17 	ldw	r5,-12(fp)
10013154:	e1bffe17 	ldw	r6,-8(fp)
10013158:	e1ffff17 	ldw	r7,-4(fp)
1001315c:	00130180 	call	10013018 <lodepng_encode_memory>
}
10013160:	e037883a 	mov	sp,fp
10013164:	dfc00117 	ldw	ra,4(sp)
10013168:	df000017 	ldw	fp,0(sp)
1001316c:	dec00204 	addi	sp,sp,8
10013170:	f800283a 	ret

10013174 <lodepng_encode_file>:

#ifdef LODEPNG_COMPILE_DISK
unsigned lodepng_encode_file(const char* filename, const unsigned char* image, unsigned w, unsigned h,
                             LodePNGColorType colortype, unsigned bitdepth)
{
10013174:	defff404 	addi	sp,sp,-48
10013178:	dfc00b15 	stw	ra,44(sp)
1001317c:	df000a15 	stw	fp,40(sp)
10013180:	df000a04 	addi	fp,sp,40
10013184:	e13ffc15 	stw	r4,-16(fp)
10013188:	e17ffd15 	stw	r5,-12(fp)
1001318c:	e1bffe15 	stw	r6,-8(fp)
10013190:	e1ffff15 	stw	r7,-4(fp)
  unsigned char* buffer;
  size_t buffersize;
  unsigned error = lodepng_encode_memory(&buffer, &buffersize, image, w, h, colortype, bitdepth);
10013194:	e0fffa04 	addi	r3,fp,-24
10013198:	e0bffb04 	addi	r2,fp,-20
1001319c:	e13fff17 	ldw	r4,-4(fp)
100131a0:	d9000015 	stw	r4,0(sp)
100131a4:	e1000217 	ldw	r4,8(fp)
100131a8:	d9000115 	stw	r4,4(sp)
100131ac:	e1000317 	ldw	r4,12(fp)
100131b0:	d9000215 	stw	r4,8(sp)
100131b4:	1809883a 	mov	r4,r3
100131b8:	100b883a 	mov	r5,r2
100131bc:	e1bffd17 	ldw	r6,-12(fp)
100131c0:	e1fffe17 	ldw	r7,-8(fp)
100131c4:	00130180 	call	10013018 <lodepng_encode_memory>
100131c8:	e0bff915 	stw	r2,-28(fp)
  if(!error) error = lodepng_save_file(buffer, buffersize, filename);
100131cc:	e0bff917 	ldw	r2,-28(fp)
100131d0:	1000071e 	bne	r2,zero,100131f0 <lodepng_encode_file+0x7c>
100131d4:	e0fffa17 	ldw	r3,-24(fp)
100131d8:	e0bffb17 	ldw	r2,-20(fp)
100131dc:	1809883a 	mov	r4,r3
100131e0:	100b883a 	mov	r5,r2
100131e4:	e1bffc17 	ldw	r6,-16(fp)
100131e8:	0000c380 	call	10000c38 <lodepng_save_file>
100131ec:	e0bff915 	stw	r2,-28(fp)
  lodepng_free(buffer);
100131f0:	e0bffa17 	ldw	r2,-24(fp)
100131f4:	1009883a 	mov	r4,r2
100131f8:	000025c0 	call	1000025c <lodepng_free>
  return error;
100131fc:	e0bff917 	ldw	r2,-28(fp)
}
10013200:	e037883a 	mov	sp,fp
10013204:	dfc00117 	ldw	ra,4(sp)
10013208:	df000017 	ldw	fp,0(sp)
1001320c:	dec00204 	addi	sp,sp,8
10013210:	f800283a 	ret

10013214 <lodepng_encode32_file>:

unsigned lodepng_encode32_file(const char* filename, const unsigned char* image, unsigned w, unsigned h)
{
10013214:	defff804 	addi	sp,sp,-32
10013218:	dfc00715 	stw	ra,28(sp)
1001321c:	df000615 	stw	fp,24(sp)
10013220:	df000604 	addi	fp,sp,24
10013224:	e13ffc15 	stw	r4,-16(fp)
10013228:	e17ffd15 	stw	r5,-12(fp)
1001322c:	e1bffe15 	stw	r6,-8(fp)
10013230:	e1ffff15 	stw	r7,-4(fp)
  return lodepng_encode_file(filename, image, w, h, LCT_RGBA, 8);
10013234:	00800184 	movi	r2,6
10013238:	d8800015 	stw	r2,0(sp)
1001323c:	00800204 	movi	r2,8
10013240:	d8800115 	stw	r2,4(sp)
10013244:	e13ffc17 	ldw	r4,-16(fp)
10013248:	e17ffd17 	ldw	r5,-12(fp)
1001324c:	e1bffe17 	ldw	r6,-8(fp)
10013250:	e1ffff17 	ldw	r7,-4(fp)
10013254:	00131740 	call	10013174 <lodepng_encode_file>
}
10013258:	e037883a 	mov	sp,fp
1001325c:	dfc00117 	ldw	ra,4(sp)
10013260:	df000017 	ldw	fp,0(sp)
10013264:	dec00204 	addi	sp,sp,8
10013268:	f800283a 	ret

1001326c <lodepng_encode24_file>:

unsigned lodepng_encode24_file(const char* filename, const unsigned char* image, unsigned w, unsigned h)
{
1001326c:	defff804 	addi	sp,sp,-32
10013270:	dfc00715 	stw	ra,28(sp)
10013274:	df000615 	stw	fp,24(sp)
10013278:	df000604 	addi	fp,sp,24
1001327c:	e13ffc15 	stw	r4,-16(fp)
10013280:	e17ffd15 	stw	r5,-12(fp)
10013284:	e1bffe15 	stw	r6,-8(fp)
10013288:	e1ffff15 	stw	r7,-4(fp)
  return lodepng_encode_file(filename, image, w, h, LCT_RGB, 8);
1001328c:	00800084 	movi	r2,2
10013290:	d8800015 	stw	r2,0(sp)
10013294:	00800204 	movi	r2,8
10013298:	d8800115 	stw	r2,4(sp)
1001329c:	e13ffc17 	ldw	r4,-16(fp)
100132a0:	e17ffd17 	ldw	r5,-12(fp)
100132a4:	e1bffe17 	ldw	r6,-8(fp)
100132a8:	e1ffff17 	ldw	r7,-4(fp)
100132ac:	00131740 	call	10013174 <lodepng_encode_file>
}
100132b0:	e037883a 	mov	sp,fp
100132b4:	dfc00117 	ldw	ra,4(sp)
100132b8:	df000017 	ldw	fp,0(sp)
100132bc:	dec00204 	addi	sp,sp,8
100132c0:	f800283a 	ret

100132c4 <lodepng_encoder_settings_init>:
#endif /*LODEPNG_COMPILE_DISK*/

void lodepng_encoder_settings_init(LodePNGEncoderSettings* settings)
{
100132c4:	defffd04 	addi	sp,sp,-12
100132c8:	dfc00215 	stw	ra,8(sp)
100132cc:	df000115 	stw	fp,4(sp)
100132d0:	df000104 	addi	fp,sp,4
100132d4:	e13fff15 	stw	r4,-4(fp)
  lodepng_compress_settings_init(&settings->zlibsettings);
100132d8:	e0bfff17 	ldw	r2,-4(fp)
100132dc:	1009883a 	mov	r4,r2
100132e0:	00061e40 	call	100061e4 <lodepng_compress_settings_init>
  settings->filter_palette_zero = 1;
100132e4:	e0bfff17 	ldw	r2,-4(fp)
100132e8:	00c00044 	movi	r3,1
100132ec:	10c00a15 	stw	r3,40(r2)
  settings->filter_strategy = LFS_MINSUM;
100132f0:	e0bfff17 	ldw	r2,-4(fp)
100132f4:	00c00044 	movi	r3,1
100132f8:	10c00b15 	stw	r3,44(r2)
  settings->auto_convert = 1;
100132fc:	e0bfff17 	ldw	r2,-4(fp)
10013300:	00c00044 	movi	r3,1
10013304:	10c00915 	stw	r3,36(r2)
  settings->force_palette = 0;
10013308:	e0bfff17 	ldw	r2,-4(fp)
1001330c:	10000d15 	stw	zero,52(r2)
  settings->predefined_filters = 0;
10013310:	e0bfff17 	ldw	r2,-4(fp)
10013314:	10000c15 	stw	zero,48(r2)
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
  settings->add_id = 0;
10013318:	e0bfff17 	ldw	r2,-4(fp)
1001331c:	10000e15 	stw	zero,56(r2)
  settings->text_compression = 1;
10013320:	e0bfff17 	ldw	r2,-4(fp)
10013324:	00c00044 	movi	r3,1
10013328:	10c00f15 	stw	r3,60(r2)
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
}
1001332c:	e037883a 	mov	sp,fp
10013330:	dfc00117 	ldw	ra,4(sp)
10013334:	df000017 	ldw	fp,0(sp)
10013338:	dec00204 	addi	sp,sp,8
1001333c:	f800283a 	ret

10013340 <lodepng_error_text>:
/*
This returns the description of a numerical error code in English. This is also
the documentation of all the error codes.
*/
const char* lodepng_error_text(unsigned code)
{
10013340:	defffe04 	addi	sp,sp,-8
10013344:	df000115 	stw	fp,4(sp)
10013348:	df000104 	addi	fp,sp,4
1001334c:	e13fff15 	stw	r4,-4(fp)
  switch(code)
10013350:	e0bfff17 	ldw	r2,-4(fp)
10013354:	108017a8 	cmpgeui	r2,r2,94
10013358:	1001561e 	bne	r2,zero,100138b4 <lodepng_error_text+0x574>
1001335c:	e0bfff17 	ldw	r2,-4(fp)
10013360:	1085883a 	add	r2,r2,r2
10013364:	1087883a 	add	r3,r2,r2
10013368:	00840074 	movhi	r2,4097
1001336c:	108cdf04 	addi	r2,r2,13180
10013370:	1885883a 	add	r2,r3,r2
10013374:	10800017 	ldw	r2,0(r2)
10013378:	1000683a 	jmp	r2
1001337c:	100134f4 	orhi	zero,r2,1235
10013380:	10013500 	call	11001350 <_gp+0xfd37a4>
10013384:	100138b4 	orhi	zero,r2,1250
10013388:	100138b4 	orhi	zero,r2,1250
1001338c:	100138b4 	orhi	zero,r2,1250
10013390:	100138b4 	orhi	zero,r2,1250
10013394:	100138b4 	orhi	zero,r2,1250
10013398:	100138b4 	orhi	zero,r2,1250
1001339c:	100138b4 	orhi	zero,r2,1250
100133a0:	100138b4 	orhi	zero,r2,1250
100133a4:	1001350c 	andi	zero,r2,1236
100133a8:	10013518 	cmpnei	zero,r2,1236
100133ac:	100138b4 	orhi	zero,r2,1250
100133b0:	10013524 	muli	zero,r2,1236
100133b4:	10013530 	cmpltui	zero,r2,1236
100133b8:	1001353c 	xorhi	zero,r2,1236
100133bc:	10013548 	cmpgei	zero,r2,1237
100133c0:	10013554 	ori	zero,r2,1237
100133c4:	10013560 	cmpeqi	zero,r2,1237
100133c8:	1001356c 	andhi	zero,r2,1237
100133cc:	10013578 	rdprs	zero,r2,1237
100133d0:	10013584 	addi	zero,r2,1238
100133d4:	10013590 	cmplti	zero,r2,1238
100133d8:	1001359c 	xori	zero,r2,1238
100133dc:	100135a8 	cmpgeui	zero,r2,1238
100133e0:	100135b4 	orhi	zero,r2,1238
100133e4:	100135c0 	call	1100135c <_gp+0xfd37b0>
100133e8:	100135cc 	andi	zero,r2,1239
100133ec:	100135d8 	cmpnei	zero,r2,1239
100133f0:	100135e4 	muli	zero,r2,1239
100133f4:	100135f0 	cmpltui	zero,r2,1239
100133f8:	100135fc 	xorhi	zero,r2,1239
100133fc:	10013608 	cmpgei	zero,r2,1240
10013400:	10013614 	ori	zero,r2,1240
10013404:	10013620 	cmpeqi	zero,r2,1240
10013408:	1001362c 	andhi	zero,r2,1240
1001340c:	10013638 	rdprs	zero,r2,1240
10013410:	10013644 	addi	zero,r2,1241
10013414:	10013650 	cmplti	zero,r2,1241
10013418:	1001365c 	xori	zero,r2,1241
1001341c:	10013668 	cmpgeui	zero,r2,1241
10013420:	10013674 	orhi	zero,r2,1241
10013424:	10013680 	call	11001368 <_gp+0xfd37bc>
10013428:	1001368c 	andi	zero,r2,1242
1001342c:	10013698 	cmpnei	zero,r2,1242
10013430:	100136a4 	muli	zero,r2,1242
10013434:	100138b4 	orhi	zero,r2,1250
10013438:	100138b4 	orhi	zero,r2,1250
1001343c:	100136b0 	cmpltui	zero,r2,1242
10013440:	100136bc 	xorhi	zero,r2,1242
10013444:	100136c8 	cmpgei	zero,r2,1243
10013448:	100136d4 	ori	zero,r2,1243
1001344c:	100136e0 	cmpeqi	zero,r2,1243
10013450:	100136ec 	andhi	zero,r2,1243
10013454:	100136f8 	rdprs	zero,r2,1243
10013458:	10013704 	addi	zero,r2,1244
1001345c:	10013710 	cmplti	zero,r2,1244
10013460:	1001371c 	xori	zero,r2,1244
10013464:	10013728 	cmpgeui	zero,r2,1244
10013468:	10013734 	orhi	zero,r2,1244
1001346c:	10013740 	call	11001374 <_gp+0xfd37c8>
10013470:	1001374c 	andi	zero,r2,1245
10013474:	10013758 	cmpnei	zero,r2,1245
10013478:	10013764 	muli	zero,r2,1245
1001347c:	10013770 	cmpltui	zero,r2,1245
10013480:	100138b4 	orhi	zero,r2,1250
10013484:	1001377c 	xorhi	zero,r2,1245
10013488:	10013788 	cmpgei	zero,r2,1246
1001348c:	10013794 	ori	zero,r2,1246
10013490:	100137a0 	cmpeqi	zero,r2,1246
10013494:	100138b4 	orhi	zero,r2,1250
10013498:	100137ac 	andhi	zero,r2,1246
1001349c:	100137b8 	rdprs	zero,r2,1246
100134a0:	100137c4 	addi	zero,r2,1247
100134a4:	100137d0 	cmplti	zero,r2,1247
100134a8:	100137dc 	xori	zero,r2,1247
100134ac:	100137e8 	cmpgeui	zero,r2,1247
100134b0:	100137f4 	orhi	zero,r2,1247
100134b4:	10013800 	call	11001380 <_gp+0xfd37d4>
100134b8:	1001380c 	andi	zero,r2,1248
100134bc:	10013818 	cmpnei	zero,r2,1248
100134c0:	10013824 	muli	zero,r2,1248
100134c4:	10013830 	cmpltui	zero,r2,1248
100134c8:	1001383c 	xorhi	zero,r2,1248
100134cc:	10013848 	cmpgei	zero,r2,1249
100134d0:	100138b4 	orhi	zero,r2,1250
100134d4:	10013854 	ori	zero,r2,1249
100134d8:	10013860 	cmpeqi	zero,r2,1249
100134dc:	1001386c 	andhi	zero,r2,1249
100134e0:	10013878 	rdprs	zero,r2,1249
100134e4:	10013884 	addi	zero,r2,1250
100134e8:	10013890 	cmplti	zero,r2,1250
100134ec:	1001389c 	xori	zero,r2,1250
100134f0:	100138a8 	cmpgeui	zero,r2,1250
  {
    case 0: return "no error, everything went ok";
100134f4:	008400b4 	movhi	r2,4098
100134f8:	108aa104 	addi	r2,r2,10884
100134fc:	0000ef06 	br	100138bc <lodepng_error_text+0x57c>
    case 1: return "nothing done yet"; /*the Encoder/Decoder has done nothing yet, error checking makes no sense yet*/
10013500:	008400b4 	movhi	r2,4098
10013504:	108aa904 	addi	r2,r2,10916
10013508:	0000ec06 	br	100138bc <lodepng_error_text+0x57c>
    case 10: return "end of input memory reached without huffman end code"; /*while huffman decoding*/
1001350c:	008400b4 	movhi	r2,4098
10013510:	108aae04 	addi	r2,r2,10936
10013514:	0000e906 	br	100138bc <lodepng_error_text+0x57c>
    case 11: return "error in code tree made it jump outside of huffman tree"; /*while huffman decoding*/
10013518:	008400b4 	movhi	r2,4098
1001351c:	108abc04 	addi	r2,r2,10992
10013520:	0000e606 	br	100138bc <lodepng_error_text+0x57c>
    case 13: return "problem while processing dynamic deflate block";
10013524:	008400b4 	movhi	r2,4098
10013528:	108aca04 	addi	r2,r2,11048
1001352c:	0000e306 	br	100138bc <lodepng_error_text+0x57c>
    case 14: return "problem while processing dynamic deflate block";
10013530:	008400b4 	movhi	r2,4098
10013534:	108aca04 	addi	r2,r2,11048
10013538:	0000e006 	br	100138bc <lodepng_error_text+0x57c>
    case 15: return "problem while processing dynamic deflate block";
1001353c:	008400b4 	movhi	r2,4098
10013540:	108aca04 	addi	r2,r2,11048
10013544:	0000dd06 	br	100138bc <lodepng_error_text+0x57c>
    case 16: return "unexisting code while processing dynamic deflate block";
10013548:	008400b4 	movhi	r2,4098
1001354c:	108ad604 	addi	r2,r2,11096
10013550:	0000da06 	br	100138bc <lodepng_error_text+0x57c>
    case 17: return "end of out buffer memory reached while inflating";
10013554:	008400b4 	movhi	r2,4098
10013558:	108ae404 	addi	r2,r2,11152
1001355c:	0000d706 	br	100138bc <lodepng_error_text+0x57c>
    case 18: return "invalid distance code while inflating";
10013560:	008400b4 	movhi	r2,4098
10013564:	108af104 	addi	r2,r2,11204
10013568:	0000d406 	br	100138bc <lodepng_error_text+0x57c>
    case 19: return "end of out buffer memory reached while inflating";
1001356c:	008400b4 	movhi	r2,4098
10013570:	108ae404 	addi	r2,r2,11152
10013574:	0000d106 	br	100138bc <lodepng_error_text+0x57c>
    case 20: return "invalid deflate block BTYPE encountered while decoding";
10013578:	008400b4 	movhi	r2,4098
1001357c:	108afb04 	addi	r2,r2,11244
10013580:	0000ce06 	br	100138bc <lodepng_error_text+0x57c>
    case 21: return "NLEN is not ones complement of LEN in a deflate block";
10013584:	008400b4 	movhi	r2,4098
10013588:	108b0904 	addi	r2,r2,11300
1001358c:	0000cb06 	br	100138bc <lodepng_error_text+0x57c>
     /*end of out buffer memory reached while inflating:
     This can happen if the inflated deflate data is longer than the amount of bytes required to fill up
     all the pixels of the image, given the color depth and image dimensions. Something that doesn't
     happen in a normal, well encoded, PNG image.*/
    case 22: return "end of out buffer memory reached while inflating";
10013590:	008400b4 	movhi	r2,4098
10013594:	108ae404 	addi	r2,r2,11152
10013598:	0000c806 	br	100138bc <lodepng_error_text+0x57c>
    case 23: return "end of in buffer memory reached while inflating";
1001359c:	008400b4 	movhi	r2,4098
100135a0:	108b1704 	addi	r2,r2,11356
100135a4:	0000c506 	br	100138bc <lodepng_error_text+0x57c>
    case 24: return "invalid FCHECK in zlib header";
100135a8:	008400b4 	movhi	r2,4098
100135ac:	108b2304 	addi	r2,r2,11404
100135b0:	0000c206 	br	100138bc <lodepng_error_text+0x57c>
    case 25: return "invalid compression method in zlib header";
100135b4:	008400b4 	movhi	r2,4098
100135b8:	108b2b04 	addi	r2,r2,11436
100135bc:	0000bf06 	br	100138bc <lodepng_error_text+0x57c>
    case 26: return "FDICT encountered in zlib header while it's not used for PNG";
100135c0:	008400b4 	movhi	r2,4098
100135c4:	108b3604 	addi	r2,r2,11480
100135c8:	0000bc06 	br	100138bc <lodepng_error_text+0x57c>
    case 27: return "PNG file is smaller than a PNG header";
100135cc:	008400b4 	movhi	r2,4098
100135d0:	108b4604 	addi	r2,r2,11544
100135d4:	0000b906 	br	100138bc <lodepng_error_text+0x57c>
    /*Checks the magic file header, the first 8 bytes of the PNG file*/
    case 28: return "incorrect PNG signature, it's no PNG or corrupted";
100135d8:	008400b4 	movhi	r2,4098
100135dc:	108b5004 	addi	r2,r2,11584
100135e0:	0000b606 	br	100138bc <lodepng_error_text+0x57c>
    case 29: return "first chunk is not the header chunk";
100135e4:	008400b4 	movhi	r2,4098
100135e8:	108b5d04 	addi	r2,r2,11636
100135ec:	0000b306 	br	100138bc <lodepng_error_text+0x57c>
    case 30: return "chunk length too large, chunk broken off at end of file";
100135f0:	008400b4 	movhi	r2,4098
100135f4:	108b6604 	addi	r2,r2,11672
100135f8:	0000b006 	br	100138bc <lodepng_error_text+0x57c>
    case 31: return "illegal PNG color type or bpp";
100135fc:	008400b4 	movhi	r2,4098
10013600:	108b7404 	addi	r2,r2,11728
10013604:	0000ad06 	br	100138bc <lodepng_error_text+0x57c>
    case 32: return "illegal PNG compression method";
10013608:	008400b4 	movhi	r2,4098
1001360c:	108b7c04 	addi	r2,r2,11760
10013610:	0000aa06 	br	100138bc <lodepng_error_text+0x57c>
    case 33: return "illegal PNG filter method";
10013614:	008400b4 	movhi	r2,4098
10013618:	108b8404 	addi	r2,r2,11792
1001361c:	0000a706 	br	100138bc <lodepng_error_text+0x57c>
    case 34: return "illegal PNG interlace method";
10013620:	008400b4 	movhi	r2,4098
10013624:	108b8b04 	addi	r2,r2,11820
10013628:	0000a406 	br	100138bc <lodepng_error_text+0x57c>
    case 35: return "chunk length of a chunk is too large or the chunk too small";
1001362c:	008400b4 	movhi	r2,4098
10013630:	108b9304 	addi	r2,r2,11852
10013634:	0000a106 	br	100138bc <lodepng_error_text+0x57c>
    case 36: return "illegal PNG filter type encountered";
10013638:	008400b4 	movhi	r2,4098
1001363c:	108ba204 	addi	r2,r2,11912
10013640:	00009e06 	br	100138bc <lodepng_error_text+0x57c>
    case 37: return "illegal bit depth for this color type given";
10013644:	008400b4 	movhi	r2,4098
10013648:	108bab04 	addi	r2,r2,11948
1001364c:	00009b06 	br	100138bc <lodepng_error_text+0x57c>
    case 38: return "the palette is too big"; /*more than 256 colors*/
10013650:	008400b4 	movhi	r2,4098
10013654:	108bb604 	addi	r2,r2,11992
10013658:	00009806 	br	100138bc <lodepng_error_text+0x57c>
    case 39: return "more palette alpha values given in tRNS chunk than there are colors in the palette";
1001365c:	008400b4 	movhi	r2,4098
10013660:	108bbc04 	addi	r2,r2,12016
10013664:	00009506 	br	100138bc <lodepng_error_text+0x57c>
    case 40: return "tRNS chunk has wrong size for greyscale image";
10013668:	008400b4 	movhi	r2,4098
1001366c:	108bd104 	addi	r2,r2,12100
10013670:	00009206 	br	100138bc <lodepng_error_text+0x57c>
    case 41: return "tRNS chunk has wrong size for RGB image";
10013674:	008400b4 	movhi	r2,4098
10013678:	108bdd04 	addi	r2,r2,12148
1001367c:	00008f06 	br	100138bc <lodepng_error_text+0x57c>
    case 42: return "tRNS chunk appeared while it was not allowed for this color type";
10013680:	008400b4 	movhi	r2,4098
10013684:	108be704 	addi	r2,r2,12188
10013688:	00008c06 	br	100138bc <lodepng_error_text+0x57c>
    case 43: return "bKGD chunk has wrong size for palette image";
1001368c:	008400b4 	movhi	r2,4098
10013690:	108bf804 	addi	r2,r2,12256
10013694:	00008906 	br	100138bc <lodepng_error_text+0x57c>
    case 44: return "bKGD chunk has wrong size for greyscale image";
10013698:	008400b4 	movhi	r2,4098
1001369c:	108c0304 	addi	r2,r2,12300
100136a0:	00008606 	br	100138bc <lodepng_error_text+0x57c>
    case 45: return "bKGD chunk has wrong size for RGB image";
100136a4:	008400b4 	movhi	r2,4098
100136a8:	108c0f04 	addi	r2,r2,12348
100136ac:	00008306 	br	100138bc <lodepng_error_text+0x57c>
    /*the input data is empty, maybe a PNG file doesn't exist or is in the wrong path*/
    case 48: return "empty input or file doesn't exist";
100136b0:	008400b4 	movhi	r2,4098
100136b4:	108c1904 	addi	r2,r2,12388
100136b8:	00008006 	br	100138bc <lodepng_error_text+0x57c>
    case 49: return "jumped past memory while generating dynamic huffman tree";
100136bc:	008400b4 	movhi	r2,4098
100136c0:	108c2204 	addi	r2,r2,12424
100136c4:	00007d06 	br	100138bc <lodepng_error_text+0x57c>
    case 50: return "jumped past memory while generating dynamic huffman tree";
100136c8:	008400b4 	movhi	r2,4098
100136cc:	108c2204 	addi	r2,r2,12424
100136d0:	00007a06 	br	100138bc <lodepng_error_text+0x57c>
    case 51: return "jumped past memory while inflating huffman block";
100136d4:	008400b4 	movhi	r2,4098
100136d8:	108c3104 	addi	r2,r2,12484
100136dc:	00007706 	br	100138bc <lodepng_error_text+0x57c>
    case 52: return "jumped past memory while inflating";
100136e0:	008400b4 	movhi	r2,4098
100136e4:	108c3e04 	addi	r2,r2,12536
100136e8:	00007406 	br	100138bc <lodepng_error_text+0x57c>
    case 53: return "size of zlib data too small";
100136ec:	008400b4 	movhi	r2,4098
100136f0:	108c4704 	addi	r2,r2,12572
100136f4:	00007106 	br	100138bc <lodepng_error_text+0x57c>
    case 54: return "repeat symbol in tree while there was no value symbol yet";
100136f8:	008400b4 	movhi	r2,4098
100136fc:	108c4e04 	addi	r2,r2,12600
10013700:	00006e06 	br	100138bc <lodepng_error_text+0x57c>
    /*jumped past tree while generating huffman tree, this could be when the
    tree will have more leaves than symbols after generating it out of the
    given lenghts. They call this an oversubscribed dynamic bit lengths tree in zlib.*/
    case 55: return "jumped past tree while generating huffman tree";
10013704:	008400b4 	movhi	r2,4098
10013708:	108c5d04 	addi	r2,r2,12660
1001370c:	00006b06 	br	100138bc <lodepng_error_text+0x57c>
    case 56: return "given output image colortype or bitdepth not supported for color conversion";
10013710:	008400b4 	movhi	r2,4098
10013714:	108c6904 	addi	r2,r2,12708
10013718:	00006806 	br	100138bc <lodepng_error_text+0x57c>
    case 57: return "invalid CRC encountered (checking CRC can be disabled)";
1001371c:	008400b4 	movhi	r2,4098
10013720:	108c7c04 	addi	r2,r2,12784
10013724:	00006506 	br	100138bc <lodepng_error_text+0x57c>
    case 58: return "invalid ADLER32 encountered (checking ADLER32 can be disabled)";
10013728:	008400b4 	movhi	r2,4098
1001372c:	108c8a04 	addi	r2,r2,12840
10013730:	00006206 	br	100138bc <lodepng_error_text+0x57c>
    case 59: return "requested color conversion not supported";
10013734:	008400b4 	movhi	r2,4098
10013738:	108c9a04 	addi	r2,r2,12904
1001373c:	00005f06 	br	100138bc <lodepng_error_text+0x57c>
    case 60: return "invalid window size given in the settings of the encoder (must be 0-32768)";
10013740:	008400b4 	movhi	r2,4098
10013744:	108ca504 	addi	r2,r2,12948
10013748:	00005c06 	br	100138bc <lodepng_error_text+0x57c>
    case 61: return "invalid BTYPE given in the settings of the encoder (only 0, 1 and 2 are allowed)";
1001374c:	008400b4 	movhi	r2,4098
10013750:	108cb804 	addi	r2,r2,13024
10013754:	00005906 	br	100138bc <lodepng_error_text+0x57c>
    /*LodePNG leaves the choice of RGB to greyscale conversion formula to the user.*/
    case 62: return "conversion from color to greyscale not supported";
10013758:	008400b4 	movhi	r2,4098
1001375c:	108ccd04 	addi	r2,r2,13108
10013760:	00005606 	br	100138bc <lodepng_error_text+0x57c>
    case 63: return "length of a chunk too long, max allowed for PNG is 2147483647 bytes per chunk"; /*(2^31-1)*/
10013764:	008400b4 	movhi	r2,4098
10013768:	108cda04 	addi	r2,r2,13160
1001376c:	00005306 	br	100138bc <lodepng_error_text+0x57c>
    /*this would result in the inability of a deflated block to ever contain an end code. It must be at least 1.*/
    case 64: return "the length of the END symbol 256 in the Huffman tree is 0";
10013770:	008400b4 	movhi	r2,4098
10013774:	108cee04 	addi	r2,r2,13240
10013778:	00005006 	br	100138bc <lodepng_error_text+0x57c>
    case 66: return "the length of a text chunk keyword given to the encoder is longer than the maximum of 79 bytes";
1001377c:	008400b4 	movhi	r2,4098
10013780:	108cfd04 	addi	r2,r2,13300
10013784:	00004d06 	br	100138bc <lodepng_error_text+0x57c>
    case 67: return "the length of a text chunk keyword given to the encoder is smaller than the minimum of 1 byte";
10013788:	008400b4 	movhi	r2,4098
1001378c:	108d1504 	addi	r2,r2,13396
10013790:	00004a06 	br	100138bc <lodepng_error_text+0x57c>
    case 68: return "tried to encode a PLTE chunk with a palette that has less than 1 or more than 256 colors";
10013794:	008400b4 	movhi	r2,4098
10013798:	108d2d04 	addi	r2,r2,13492
1001379c:	00004706 	br	100138bc <lodepng_error_text+0x57c>
    case 69: return "unknown chunk type with 'critical' flag encountered by the decoder";
100137a0:	008400b4 	movhi	r2,4098
100137a4:	108d4404 	addi	r2,r2,13584
100137a8:	00004406 	br	100138bc <lodepng_error_text+0x57c>
    case 71: return "unexisting interlace mode given to encoder (must be 0 or 1)";
100137ac:	008400b4 	movhi	r2,4098
100137b0:	108d5504 	addi	r2,r2,13652
100137b4:	00004106 	br	100138bc <lodepng_error_text+0x57c>
    case 72: return "while decoding, unexisting compression method encountering in zTXt or iTXt chunk (it must be 0)";
100137b8:	008400b4 	movhi	r2,4098
100137bc:	108d6404 	addi	r2,r2,13712
100137c0:	00003e06 	br	100138bc <lodepng_error_text+0x57c>
    case 73: return "invalid tIME chunk size";
100137c4:	008400b4 	movhi	r2,4098
100137c8:	108d7c04 	addi	r2,r2,13808
100137cc:	00003b06 	br	100138bc <lodepng_error_text+0x57c>
    case 74: return "invalid pHYs chunk size";
100137d0:	008400b4 	movhi	r2,4098
100137d4:	108d8204 	addi	r2,r2,13832
100137d8:	00003806 	br	100138bc <lodepng_error_text+0x57c>
    /*length could be wrong, or data chopped off*/
    case 75: return "no null termination char found while decoding text chunk";
100137dc:	008400b4 	movhi	r2,4098
100137e0:	108d8804 	addi	r2,r2,13856
100137e4:	00003506 	br	100138bc <lodepng_error_text+0x57c>
    case 76: return "iTXt chunk too short to contain required bytes";
100137e8:	008400b4 	movhi	r2,4098
100137ec:	108d9704 	addi	r2,r2,13916
100137f0:	00003206 	br	100138bc <lodepng_error_text+0x57c>
    case 77: return "integer overflow in buffer size";
100137f4:	008400b4 	movhi	r2,4098
100137f8:	108da304 	addi	r2,r2,13964
100137fc:	00002f06 	br	100138bc <lodepng_error_text+0x57c>
    case 78: return "failed to open file for reading"; /*file doesn't exist or couldn't be opened for reading*/
10013800:	008400b4 	movhi	r2,4098
10013804:	108dab04 	addi	r2,r2,13996
10013808:	00002c06 	br	100138bc <lodepng_error_text+0x57c>
    case 79: return "failed to open file for writing";
1001380c:	008400b4 	movhi	r2,4098
10013810:	108db304 	addi	r2,r2,14028
10013814:	00002906 	br	100138bc <lodepng_error_text+0x57c>
    case 80: return "tried creating a tree of 0 symbols";
10013818:	008400b4 	movhi	r2,4098
1001381c:	108dbb04 	addi	r2,r2,14060
10013820:	00002606 	br	100138bc <lodepng_error_text+0x57c>
    case 81: return "lazy matching at pos 0 is impossible";
10013824:	008400b4 	movhi	r2,4098
10013828:	108dc404 	addi	r2,r2,14096
1001382c:	00002306 	br	100138bc <lodepng_error_text+0x57c>
    case 82: return "color conversion to palette requested while a color isn't in palette";
10013830:	008400b4 	movhi	r2,4098
10013834:	108dce04 	addi	r2,r2,14136
10013838:	00002006 	br	100138bc <lodepng_error_text+0x57c>
    case 83: return "memory allocation failed";
1001383c:	008400b4 	movhi	r2,4098
10013840:	108de004 	addi	r2,r2,14208
10013844:	00001d06 	br	100138bc <lodepng_error_text+0x57c>
    case 84: return "given image too small to contain all pixels to be encoded";
10013848:	008400b4 	movhi	r2,4098
1001384c:	108de704 	addi	r2,r2,14236
10013850:	00001a06 	br	100138bc <lodepng_error_text+0x57c>
    case 86: return "impossible offset in lz77 encoding (internal bug)";
10013854:	008400b4 	movhi	r2,4098
10013858:	108df604 	addi	r2,r2,14296
1001385c:	00001706 	br	100138bc <lodepng_error_text+0x57c>
    case 87: return "must provide custom zlib function pointer if LODEPNG_COMPILE_ZLIB is not defined";
10013860:	008400b4 	movhi	r2,4098
10013864:	108e0304 	addi	r2,r2,14348
10013868:	00001406 	br	100138bc <lodepng_error_text+0x57c>
    case 88: return "invalid filter strategy given for LodePNGEncoderSettings.filter_strategy";
1001386c:	008400b4 	movhi	r2,4098
10013870:	108e1804 	addi	r2,r2,14432
10013874:	00001106 	br	100138bc <lodepng_error_text+0x57c>
    case 89: return "text chunk keyword too short or long: must have size 1-79";
10013878:	008400b4 	movhi	r2,4098
1001387c:	108e2b04 	addi	r2,r2,14508
10013880:	00000e06 	br	100138bc <lodepng_error_text+0x57c>
    /*the windowsize in the LodePNGCompressSettings. Requiring POT(==> & instead of %) makes encoding 12% faster.*/
    case 90: return "windowsize must be a power of two";
10013884:	008400b4 	movhi	r2,4098
10013888:	108e3a04 	addi	r2,r2,14568
1001388c:	00000b06 	br	100138bc <lodepng_error_text+0x57c>
    case 91: return "invalid decompressed idat size";
10013890:	008400b4 	movhi	r2,4098
10013894:	108e4304 	addi	r2,r2,14604
10013898:	00000806 	br	100138bc <lodepng_error_text+0x57c>
    case 92: return "too many pixels, not supported";
1001389c:	008400b4 	movhi	r2,4098
100138a0:	108e4b04 	addi	r2,r2,14636
100138a4:	00000506 	br	100138bc <lodepng_error_text+0x57c>
    case 93: return "zero width or height is invalid";
100138a8:	008400b4 	movhi	r2,4098
100138ac:	108e5304 	addi	r2,r2,14668
100138b0:	00000206 	br	100138bc <lodepng_error_text+0x57c>
  }
  return "unknown error code";
100138b4:	008400b4 	movhi	r2,4098
100138b8:	108e5b04 	addi	r2,r2,14700
}
100138bc:	e037883a 	mov	sp,fp
100138c0:	df000017 	ldw	fp,0(sp)
100138c4:	dec00104 	addi	sp,sp,4
100138c8:	f800283a 	ret

100138cc <displayAsciiArt>:
#include "stdio.h"

#include "lodepng.h"

void displayAsciiArt(const unsigned char * image, unsigned w, unsigned h)
{
100138cc:	deffea04 	addi	sp,sp,-88
100138d0:	dfc01515 	stw	ra,84(sp)
100138d4:	df001415 	stw	fp,80(sp)
100138d8:	df001404 	addi	fp,sp,80
100138dc:	e13ffd15 	stw	r4,-12(fp)
100138e0:	e17ffe15 	stw	r5,-8(fp)
100138e4:	e1bfff15 	stw	r6,-4(fp)
  if(w > 0 && h > 0)
100138e8:	e0bffe17 	ldw	r2,-8(fp)
100138ec:	10011026 	beq	r2,zero,10013d30 <displayAsciiArt+0x464>
100138f0:	e0bfff17 	ldw	r2,-4(fp)
100138f4:	10010e26 	beq	r2,zero,10013d30 <displayAsciiArt+0x464>
  {
    printf("\nASCII Art Preview: \n");
100138f8:	010400b4 	movhi	r4,4098
100138fc:	210e6004 	addi	r4,r4,14720
10013900:	00171700 	call	10017170 <puts>
    unsigned w2 = 48;
10013904:	00800c04 	movi	r2,48
10013908:	e0bfec15 	stw	r2,-80(fp)
    if(w < w2) w2 = w;
1001390c:	e0fffe17 	ldw	r3,-8(fp)
10013910:	e0bfec17 	ldw	r2,-80(fp)
10013914:	1880022e 	bgeu	r3,r2,10013920 <displayAsciiArt+0x54>
10013918:	e0bffe17 	ldw	r2,-8(fp)
1001391c:	e0bfec15 	stw	r2,-80(fp)
    unsigned h2 = h * w2 / w;
10013920:	e13fff17 	ldw	r4,-4(fp)
10013924:	e17fec17 	ldw	r5,-80(fp)
10013928:	00146fc0 	call	100146fc <__mulsi3>
1001392c:	1009883a 	mov	r4,r2
10013930:	e17ffe17 	ldw	r5,-8(fp)
10013934:	00146ec0 	call	100146ec <__udivsi3>
10013938:	e0bfed15 	stw	r2,-76(fp)
    h2 = (h2 * 2) / 3; //compensate for non-square characters in terminal
1001393c:	e0bfed17 	ldw	r2,-76(fp)
10013940:	1085883a 	add	r2,r2,r2
10013944:	1009883a 	mov	r4,r2
10013948:	014000c4 	movi	r5,3
1001394c:	00146ec0 	call	100146ec <__udivsi3>
10013950:	e0bfed15 	stw	r2,-76(fp)
    if(h2 > (w2 * 2)) h2 = w2 * 2; //avoid too large output
10013954:	e0bfec17 	ldw	r2,-80(fp)
10013958:	1085883a 	add	r2,r2,r2
1001395c:	1007883a 	mov	r3,r2
10013960:	e0bfed17 	ldw	r2,-76(fp)
10013964:	1880032e 	bgeu	r3,r2,10013974 <displayAsciiArt+0xa8>
10013968:	e0bfec17 	ldw	r2,-80(fp)
1001396c:	1085883a 	add	r2,r2,r2
10013970:	e0bfed15 	stw	r2,-76(fp)

    printf("+");
10013974:	01000ac4 	movi	r4,43
10013978:	00170d00 	call	100170d0 <putchar>
    unsigned x;
    for(x = 0; x < w2; x++) printf("-");
1001397c:	e03fee15 	stw	zero,-72(fp)
10013980:	00000506 	br	10013998 <displayAsciiArt+0xcc>
10013984:	01000b44 	movi	r4,45
10013988:	00170d00 	call	100170d0 <putchar>
1001398c:	e0bfee17 	ldw	r2,-72(fp)
10013990:	10800044 	addi	r2,r2,1
10013994:	e0bfee15 	stw	r2,-72(fp)
10013998:	e0ffee17 	ldw	r3,-72(fp)
1001399c:	e0bfec17 	ldw	r2,-80(fp)
100139a0:	18bff836 	bltu	r3,r2,10013984 <__alt_data_end+0xf8013984>
    printf("+\n");
100139a4:	010400b4 	movhi	r4,4098
100139a8:	210e6604 	addi	r4,r4,14744
100139ac:	00171700 	call	10017170 <puts>
    unsigned y;
    for(y = 0; y < h2; y++)
100139b0:	e03fef15 	stw	zero,-68(fp)
100139b4:	0000cc06 	br	10013ce8 <displayAsciiArt+0x41c>
    {
      printf("|");
100139b8:	01001f04 	movi	r4,124
100139bc:	00170d00 	call	100170d0 <putchar>
      for(x = 0; x < w2; x++)
100139c0:	e03fee15 	stw	zero,-72(fp)
100139c4:	0000bf06 	br	10013cc4 <displayAsciiArt+0x3f8>
      {
        unsigned x2 = x * w / w2;
100139c8:	e13fee17 	ldw	r4,-72(fp)
100139cc:	e17ffe17 	ldw	r5,-8(fp)
100139d0:	00146fc0 	call	100146fc <__mulsi3>
100139d4:	1009883a 	mov	r4,r2
100139d8:	e17fec17 	ldw	r5,-80(fp)
100139dc:	00146ec0 	call	100146ec <__udivsi3>
100139e0:	e0bff215 	stw	r2,-56(fp)
        unsigned y2 = y * h / h2;
100139e4:	e13fef17 	ldw	r4,-68(fp)
100139e8:	e17fff17 	ldw	r5,-4(fp)
100139ec:	00146fc0 	call	100146fc <__mulsi3>
100139f0:	1009883a 	mov	r4,r2
100139f4:	e17fed17 	ldw	r5,-76(fp)
100139f8:	00146ec0 	call	100146ec <__udivsi3>
100139fc:	e0bff315 	stw	r2,-52(fp)
        int r = image[y2 * w * 4 + x2 * 4 + 0];
10013a00:	e13ff317 	ldw	r4,-52(fp)
10013a04:	e17ffe17 	ldw	r5,-8(fp)
10013a08:	00146fc0 	call	100146fc <__mulsi3>
10013a0c:	1007883a 	mov	r3,r2
10013a10:	e0bff217 	ldw	r2,-56(fp)
10013a14:	1885883a 	add	r2,r3,r2
10013a18:	1085883a 	add	r2,r2,r2
10013a1c:	1085883a 	add	r2,r2,r2
10013a20:	e0fffd17 	ldw	r3,-12(fp)
10013a24:	1885883a 	add	r2,r3,r2
10013a28:	10800003 	ldbu	r2,0(r2)
10013a2c:	10803fcc 	andi	r2,r2,255
10013a30:	e0bff415 	stw	r2,-48(fp)
        int g = image[y2 * w * 4 + x2 * 4 + 1];
10013a34:	e13ff317 	ldw	r4,-52(fp)
10013a38:	e17ffe17 	ldw	r5,-8(fp)
10013a3c:	00146fc0 	call	100146fc <__mulsi3>
10013a40:	1007883a 	mov	r3,r2
10013a44:	e0bff217 	ldw	r2,-56(fp)
10013a48:	1885883a 	add	r2,r3,r2
10013a4c:	1085883a 	add	r2,r2,r2
10013a50:	1085883a 	add	r2,r2,r2
10013a54:	10800044 	addi	r2,r2,1
10013a58:	e0fffd17 	ldw	r3,-12(fp)
10013a5c:	1885883a 	add	r2,r3,r2
10013a60:	10800003 	ldbu	r2,0(r2)
10013a64:	10803fcc 	andi	r2,r2,255
10013a68:	e0bff515 	stw	r2,-44(fp)
        int b = image[y2 * w * 4 + x2 * 4 + 2];
10013a6c:	e13ff317 	ldw	r4,-52(fp)
10013a70:	e17ffe17 	ldw	r5,-8(fp)
10013a74:	00146fc0 	call	100146fc <__mulsi3>
10013a78:	1007883a 	mov	r3,r2
10013a7c:	e0bff217 	ldw	r2,-56(fp)
10013a80:	1885883a 	add	r2,r3,r2
10013a84:	1085883a 	add	r2,r2,r2
10013a88:	1085883a 	add	r2,r2,r2
10013a8c:	10800084 	addi	r2,r2,2
10013a90:	e0fffd17 	ldw	r3,-12(fp)
10013a94:	1885883a 	add	r2,r3,r2
10013a98:	10800003 	ldbu	r2,0(r2)
10013a9c:	10803fcc 	andi	r2,r2,255
10013aa0:	e0bff615 	stw	r2,-40(fp)
        int a = image[y2 * w * 4 + x2 * 4 + 3];
10013aa4:	e13ff317 	ldw	r4,-52(fp)
10013aa8:	e17ffe17 	ldw	r5,-8(fp)
10013aac:	00146fc0 	call	100146fc <__mulsi3>
10013ab0:	1007883a 	mov	r3,r2
10013ab4:	e0bff217 	ldw	r2,-56(fp)
10013ab8:	1885883a 	add	r2,r3,r2
10013abc:	1085883a 	add	r2,r2,r2
10013ac0:	1085883a 	add	r2,r2,r2
10013ac4:	108000c4 	addi	r2,r2,3
10013ac8:	e0fffd17 	ldw	r3,-12(fp)
10013acc:	1885883a 	add	r2,r3,r2
10013ad0:	10800003 	ldbu	r2,0(r2)
10013ad4:	10803fcc 	andi	r2,r2,255
10013ad8:	e0bff715 	stw	r2,-36(fp)
        int lightness = ((r + g + b) / 3) * a / 255;
10013adc:	e0fff417 	ldw	r3,-48(fp)
10013ae0:	e0bff517 	ldw	r2,-44(fp)
10013ae4:	1887883a 	add	r3,r3,r2
10013ae8:	e0bff617 	ldw	r2,-40(fp)
10013aec:	1885883a 	add	r2,r3,r2
10013af0:	1009883a 	mov	r4,r2
10013af4:	014000c4 	movi	r5,3
10013af8:	00146400 	call	10014640 <__divsi3>
10013afc:	1009883a 	mov	r4,r2
10013b00:	e17ff717 	ldw	r5,-36(fp)
10013b04:	00146fc0 	call	100146fc <__mulsi3>
10013b08:	1009883a 	mov	r4,r2
10013b0c:	01403fc4 	movi	r5,255
10013b10:	00146400 	call	10014640 <__divsi3>
10013b14:	e0bff815 	stw	r2,-32(fp)
        int min = (r < g && r < b) ? r : (g < b ? g : b);
10013b18:	e0fff417 	ldw	r3,-48(fp)
10013b1c:	e0bff517 	ldw	r2,-44(fp)
10013b20:	1880030e 	bge	r3,r2,10013b30 <displayAsciiArt+0x264>
10013b24:	e0fff417 	ldw	r3,-48(fp)
10013b28:	e0bff617 	ldw	r2,-40(fp)
10013b2c:	18800516 	blt	r3,r2,10013b44 <displayAsciiArt+0x278>
10013b30:	e0fff517 	ldw	r3,-44(fp)
10013b34:	e0bff617 	ldw	r2,-40(fp)
10013b38:	1880030e 	bge	r3,r2,10013b48 <displayAsciiArt+0x27c>
10013b3c:	1805883a 	mov	r2,r3
10013b40:	00000106 	br	10013b48 <displayAsciiArt+0x27c>
10013b44:	e0bff417 	ldw	r2,-48(fp)
10013b48:	e0bff915 	stw	r2,-28(fp)
        int max = (r > g && r > b) ? r : (g > b ? g : b);
10013b4c:	e0bff417 	ldw	r2,-48(fp)
10013b50:	e0fff517 	ldw	r3,-44(fp)
10013b54:	1880030e 	bge	r3,r2,10013b64 <displayAsciiArt+0x298>
10013b58:	e0bff417 	ldw	r2,-48(fp)
10013b5c:	e0fff617 	ldw	r3,-40(fp)
10013b60:	18800516 	blt	r3,r2,10013b78 <displayAsciiArt+0x2ac>
10013b64:	e0fff517 	ldw	r3,-44(fp)
10013b68:	e0bff617 	ldw	r2,-40(fp)
10013b6c:	10c0030e 	bge	r2,r3,10013b7c <displayAsciiArt+0x2b0>
10013b70:	1805883a 	mov	r2,r3
10013b74:	00000106 	br	10013b7c <displayAsciiArt+0x2b0>
10013b78:	e0bff417 	ldw	r2,-48(fp)
10013b7c:	e0bffa15 	stw	r2,-24(fp)
        int saturation = max - min;
10013b80:	e0fffa17 	ldw	r3,-24(fp)
10013b84:	e0bff917 	ldw	r2,-28(fp)
10013b88:	1885c83a 	sub	r2,r3,r2
10013b8c:	e0bffb15 	stw	r2,-20(fp)
        int letter = 'i'; //i for grey, or r,y,g,c,b,m for colors
10013b90:	00801a44 	movi	r2,105
10013b94:	e0bff015 	stw	r2,-64(fp)
        if(saturation > 32)
10013b98:	e0bffb17 	ldw	r2,-20(fp)
10013b9c:	10800850 	cmplti	r2,r2,33
10013ba0:	1000251e 	bne	r2,zero,10013c38 <displayAsciiArt+0x36c>
        {
          int h = lightness >= (min + max) / 2;
10013ba4:	e0fff917 	ldw	r3,-28(fp)
10013ba8:	e0bffa17 	ldw	r2,-24(fp)
10013bac:	1885883a 	add	r2,r3,r2
10013bb0:	1006d7fa 	srli	r3,r2,31
10013bb4:	1885883a 	add	r2,r3,r2
10013bb8:	1005d07a 	srai	r2,r2,1
10013bbc:	e0fff817 	ldw	r3,-32(fp)
10013bc0:	1884403a 	cmpge	r2,r3,r2
10013bc4:	10803fcc 	andi	r2,r2,255
10013bc8:	e0bffc15 	stw	r2,-16(fp)
          if(h) letter = (min == r ? 'c' : (min == g ? 'm' : 'y'));
10013bcc:	e0bffc17 	ldw	r2,-16(fp)
10013bd0:	10000d26 	beq	r2,zero,10013c08 <displayAsciiArt+0x33c>
10013bd4:	e0fff917 	ldw	r3,-28(fp)
10013bd8:	e0bff417 	ldw	r2,-48(fp)
10013bdc:	18800726 	beq	r3,r2,10013bfc <displayAsciiArt+0x330>
10013be0:	e0fff917 	ldw	r3,-28(fp)
10013be4:	e0bff517 	ldw	r2,-44(fp)
10013be8:	1880021e 	bne	r3,r2,10013bf4 <displayAsciiArt+0x328>
10013bec:	00801b44 	movi	r2,109
10013bf0:	00000106 	br	10013bf8 <displayAsciiArt+0x32c>
10013bf4:	00801e44 	movi	r2,121
10013bf8:	00000106 	br	10013c00 <displayAsciiArt+0x334>
10013bfc:	008018c4 	movi	r2,99
10013c00:	e0bff015 	stw	r2,-64(fp)
10013c04:	00000c06 	br	10013c38 <displayAsciiArt+0x36c>
          else letter = (max == r ? 'r' : (max == g ? 'g' : 'b'));
10013c08:	e0fffa17 	ldw	r3,-24(fp)
10013c0c:	e0bff417 	ldw	r2,-48(fp)
10013c10:	18800726 	beq	r3,r2,10013c30 <displayAsciiArt+0x364>
10013c14:	e0fffa17 	ldw	r3,-24(fp)
10013c18:	e0bff517 	ldw	r2,-44(fp)
10013c1c:	1880021e 	bne	r3,r2,10013c28 <displayAsciiArt+0x35c>
10013c20:	008019c4 	movi	r2,103
10013c24:	00000106 	br	10013c2c <displayAsciiArt+0x360>
10013c28:	00801884 	movi	r2,98
10013c2c:	00000106 	br	10013c34 <displayAsciiArt+0x368>
10013c30:	00801c84 	movi	r2,114
10013c34:	e0bff015 	stw	r2,-64(fp)
        }
        int symbol = ' ';
10013c38:	00800804 	movi	r2,32
10013c3c:	e0bff115 	stw	r2,-60(fp)
        if(lightness > 224) symbol = '@';
10013c40:	e0bff817 	ldw	r2,-32(fp)
10013c44:	10803850 	cmplti	r2,r2,225
10013c48:	1000031e 	bne	r2,zero,10013c58 <displayAsciiArt+0x38c>
10013c4c:	00801004 	movi	r2,64
10013c50:	e0bff115 	stw	r2,-60(fp)
10013c54:	00001206 	br	10013ca0 <displayAsciiArt+0x3d4>
        else if(lightness > 128) symbol = letter - 32;
10013c58:	e0bff817 	ldw	r2,-32(fp)
10013c5c:	10802050 	cmplti	r2,r2,129
10013c60:	1000041e 	bne	r2,zero,10013c74 <displayAsciiArt+0x3a8>
10013c64:	e0bff017 	ldw	r2,-64(fp)
10013c68:	10bff804 	addi	r2,r2,-32
10013c6c:	e0bff115 	stw	r2,-60(fp)
10013c70:	00000b06 	br	10013ca0 <displayAsciiArt+0x3d4>
        else if(lightness > 32) symbol = letter;
10013c74:	e0bff817 	ldw	r2,-32(fp)
10013c78:	10800850 	cmplti	r2,r2,33
10013c7c:	1000031e 	bne	r2,zero,10013c8c <displayAsciiArt+0x3c0>
10013c80:	e0bff017 	ldw	r2,-64(fp)
10013c84:	e0bff115 	stw	r2,-60(fp)
10013c88:	00000506 	br	10013ca0 <displayAsciiArt+0x3d4>
        else if(lightness > 16) symbol = '.';
10013c8c:	e0bff817 	ldw	r2,-32(fp)
10013c90:	10800450 	cmplti	r2,r2,17
10013c94:	1000021e 	bne	r2,zero,10013ca0 <displayAsciiArt+0x3d4>
10013c98:	00800b84 	movi	r2,46
10013c9c:	e0bff115 	stw	r2,-60(fp)
        printf((char)symbol);
10013ca0:	e0bff117 	ldw	r2,-60(fp)
10013ca4:	10803fcc 	andi	r2,r2,255
10013ca8:	1080201c 	xori	r2,r2,128
10013cac:	10bfe004 	addi	r2,r2,-128
10013cb0:	1009883a 	mov	r4,r2
10013cb4:	001708c0 	call	1001708c <printf>
    printf("+\n");
    unsigned y;
    for(y = 0; y < h2; y++)
    {
      printf("|");
      for(x = 0; x < w2; x++)
10013cb8:	e0bfee17 	ldw	r2,-72(fp)
10013cbc:	10800044 	addi	r2,r2,1
10013cc0:	e0bfee15 	stw	r2,-72(fp)
10013cc4:	e0ffee17 	ldw	r3,-72(fp)
10013cc8:	e0bfec17 	ldw	r2,-80(fp)
10013ccc:	18bf3e36 	bltu	r3,r2,100139c8 <__alt_data_end+0xf80139c8>
        else if(lightness > 128) symbol = letter - 32;
        else if(lightness > 32) symbol = letter;
        else if(lightness > 16) symbol = '.';
        printf((char)symbol);
      }
      printf("|\n");
10013cd0:	010400b4 	movhi	r4,4098
10013cd4:	210e6704 	addi	r4,r4,14748
10013cd8:	00171700 	call	10017170 <puts>
    printf("+");
    unsigned x;
    for(x = 0; x < w2; x++) printf("-");
    printf("+\n");
    unsigned y;
    for(y = 0; y < h2; y++)
10013cdc:	e0bfef17 	ldw	r2,-68(fp)
10013ce0:	10800044 	addi	r2,r2,1
10013ce4:	e0bfef15 	stw	r2,-68(fp)
10013ce8:	e0ffef17 	ldw	r3,-68(fp)
10013cec:	e0bfed17 	ldw	r2,-76(fp)
10013cf0:	18bf3136 	bltu	r3,r2,100139b8 <__alt_data_end+0xf80139b8>
        else if(lightness > 16) symbol = '.';
        printf((char)symbol);
      }
      printf("|\n");
    }
    printf("+");
10013cf4:	01000ac4 	movi	r4,43
10013cf8:	00170d00 	call	100170d0 <putchar>
    for(x = 0; x < w2; x++) printf("-");
10013cfc:	e03fee15 	stw	zero,-72(fp)
10013d00:	00000506 	br	10013d18 <displayAsciiArt+0x44c>
10013d04:	01000b44 	movi	r4,45
10013d08:	00170d00 	call	100170d0 <putchar>
10013d0c:	e0bfee17 	ldw	r2,-72(fp)
10013d10:	10800044 	addi	r2,r2,1
10013d14:	e0bfee15 	stw	r2,-72(fp)
10013d18:	e0ffee17 	ldw	r3,-72(fp)
10013d1c:	e0bfec17 	ldw	r2,-80(fp)
10013d20:	18bff836 	bltu	r3,r2,10013d04 <__alt_data_end+0xf8013d04>
    printf("+\n");
10013d24:	010400b4 	movhi	r4,4098
10013d28:	210e6604 	addi	r4,r4,14744
10013d2c:	00171700 	call	10017170 <puts>
  }
}
10013d30:	e037883a 	mov	sp,fp
10013d34:	dfc00117 	ldw	ra,4(sp)
10013d38:	df000017 	ldw	fp,0(sp)
10013d3c:	dec00204 	addi	sp,sp,8
10013d40:	f800283a 	ret

10013d44 <main>:

int main()
{
10013d44:	deffdc04 	addi	sp,sp,-144
10013d48:	dfc02315 	stw	ra,140(sp)
10013d4c:	df002215 	stw	fp,136(sp)
10013d50:	df002204 	addi	fp,sp,136
	int i = 0;
10013d54:	e03fde15 	stw	zero,-136(fp)
	volatile unsigned int *LED_PIO   = (unsigned int*)0x2030;
10013d58:	00880c04 	movi	r2,8240
10013d5c:	e0bfdf15 	stw	r2,-132(fp)
	volatile unsigned int *KEY_1_PIO = (unsigned int*)0x2010;
10013d60:	00880404 	movi	r2,8208
10013d64:	e0bfe015 	stw	r2,-128(fp)

	printf("Waiting for user to press KEY_1\n");
10013d68:	010400b4 	movhi	r4,4098
10013d6c:	210e6804 	addi	r4,r4,14752
10013d70:	00171700 	call	10017170 <puts>
	while(*KEY_1_PIO == 1);
10013d74:	0001883a 	nop
10013d78:	e0bfe017 	ldw	r2,-128(fp)
10013d7c:	10800017 	ldw	r2,0(r2)
10013d80:	10800060 	cmpeqi	r2,r2,1
10013d84:	103ffc1e 	bne	r2,zero,10013d78 <__alt_data_end+0xf8013d78>

	FILE * fp;
	fp = fopen("/mnt/host/test.txt", "r");
10013d88:	010400b4 	movhi	r4,4098
10013d8c:	210e7004 	addi	r4,r4,14784
10013d90:	014400b4 	movhi	r5,4098
10013d94:	294e7504 	addi	r5,r5,14804
10013d98:	00154740 	call	10015474 <fopen>
10013d9c:	e0bfe115 	stw	r2,-124(fp)
	char buffer[100];
	fgets(buffer, 100, fp);
10013da0:	e0bfe404 	addi	r2,fp,-112
10013da4:	1009883a 	mov	r4,r2
10013da8:	01401904 	movi	r5,100
10013dac:	e1bfe117 	ldw	r6,-124(fp)
10013db0:	00150340 	call	10015034 <fgets>
	printf("File read done!\n");
10013db4:	010400b4 	movhi	r4,4098
10013db8:	210e7604 	addi	r4,r4,14808
10013dbc:	00171700 	call	10017170 <puts>
	printf(buffer);
10013dc0:	e0bfe404 	addi	r2,fp,-112
10013dc4:	1009883a 	mov	r4,r2
10013dc8:	001708c0 	call	1001708c <printf>
	fflush(stdout);
10013dcc:	008400b4 	movhi	r2,4098
10013dd0:	1096f004 	addi	r2,r2,23488
10013dd4:	10800017 	ldw	r2,0(r2)
10013dd8:	10800217 	ldw	r2,8(r2)
10013ddc:	1009883a 	mov	r4,r2
10013de0:	0014ec80 	call	10014ec8 <fflush>
	fclose(fp);
10013de4:	e13fe117 	ldw	r4,-124(fp)
10013de8:	0014ccc0 	call	10014ccc <fclose>

	const char* filename = "/mnt/host/cvPNG.png";
10013dec:	008400b4 	movhi	r2,4098
10013df0:	108e7a04 	addi	r2,r2,14824
10013df4:	e0bfe215 	stw	r2,-120(fp)

	unsigned error;
	unsigned char* image;
	unsigned width, height;

	error = lodepng_decode32_file(&image, &width, &height, filename);
10013df8:	e13ffd04 	addi	r4,fp,-12
10013dfc:	e0fffe04 	addi	r3,fp,-8
10013e00:	e0bfff04 	addi	r2,fp,-4
10013e04:	180b883a 	mov	r5,r3
10013e08:	100d883a 	mov	r6,r2
10013e0c:	e1ffe217 	ldw	r7,-120(fp)
10013e10:	000f26c0 	call	1000f26c <lodepng_decode32_file>
10013e14:	e0bfe315 	stw	r2,-116(fp)
	if(error) printf("error %u: %s\n", error, lodepng_error_text(error));
10013e18:	e0bfe317 	ldw	r2,-116(fp)
10013e1c:	10000726 	beq	r2,zero,10013e3c <main+0xf8>
10013e20:	e13fe317 	ldw	r4,-116(fp)
10013e24:	00133400 	call	10013340 <lodepng_error_text>
10013e28:	010400b4 	movhi	r4,4098
10013e2c:	210e7f04 	addi	r4,r4,14844
10013e30:	e17fe317 	ldw	r5,-116(fp)
10013e34:	100d883a 	mov	r6,r2
10013e38:	001708c0 	call	1001708c <printf>

	printf("Width: %d, Height: %d", width, height);
10013e3c:	e0fffe17 	ldw	r3,-8(fp)
10013e40:	e0bfff17 	ldw	r2,-4(fp)
10013e44:	010400b4 	movhi	r4,4098
10013e48:	210e8304 	addi	r4,r4,14860
10013e4c:	180b883a 	mov	r5,r3
10013e50:	100d883a 	mov	r6,r2
10013e54:	001708c0 	call	1001708c <printf>
	//displayAsciiArt(image, width, height);

	free(image);
10013e58:	e0bffd17 	ldw	r2,-12(fp)
10013e5c:	1009883a 	mov	r4,r2
10013e60:	00165480 	call	10016548 <free>

	*LED_PIO = 0; //clear all LEDs
10013e64:	e0bfdf17 	ldw	r2,-132(fp)
10013e68:	10000015 	stw	zero,0(r2)
	while ( (1+1) != 3) //infinite loop
	{
		for (i = 0; i < 100000; i++); //software delay
10013e6c:	e03fde15 	stw	zero,-136(fp)
10013e70:	00000306 	br	10013e80 <main+0x13c>
10013e74:	e0bfde17 	ldw	r2,-136(fp)
10013e78:	10800044 	addi	r2,r2,1
10013e7c:	e0bfde15 	stw	r2,-136(fp)
10013e80:	e0bfde17 	ldw	r2,-136(fp)
10013e84:	00c000b4 	movhi	r3,2
10013e88:	18e1a7c4 	addi	r3,r3,-31073
10013e8c:	18bff90e 	bge	r3,r2,10013e74 <__alt_data_end+0xf8013e74>
		*LED_PIO |= 0x1; //set LSB
10013e90:	e0bfdf17 	ldw	r2,-132(fp)
10013e94:	10800017 	ldw	r2,0(r2)
10013e98:	10c00054 	ori	r3,r2,1
10013e9c:	e0bfdf17 	ldw	r2,-132(fp)
10013ea0:	10c00015 	stw	r3,0(r2)
		for (i = 0; i < 100000; i++); //software delay
10013ea4:	e03fde15 	stw	zero,-136(fp)
10013ea8:	00000306 	br	10013eb8 <main+0x174>
10013eac:	e0bfde17 	ldw	r2,-136(fp)
10013eb0:	10800044 	addi	r2,r2,1
10013eb4:	e0bfde15 	stw	r2,-136(fp)
10013eb8:	e0bfde17 	ldw	r2,-136(fp)
10013ebc:	00c000b4 	movhi	r3,2
10013ec0:	18e1a7c4 	addi	r3,r3,-31073
10013ec4:	18bff90e 	bge	r3,r2,10013eac <__alt_data_end+0xf8013eac>
		*LED_PIO &= ~0x1; //clear LSB
10013ec8:	e0bfdf17 	ldw	r2,-132(fp)
10013ecc:	10c00017 	ldw	r3,0(r2)
10013ed0:	00bfff84 	movi	r2,-2
10013ed4:	1886703a 	and	r3,r3,r2
10013ed8:	e0bfdf17 	ldw	r2,-132(fp)
10013edc:	10c00015 	stw	r3,0(r2)
	}
10013ee0:	003fe206 	br	10013e6c <__alt_data_end+0xf8013e6c>

10013ee4 <_fpadd_parts>:
10013ee4:	2005883a 	mov	r2,r4
10013ee8:	21000017 	ldw	r4,0(r4)
10013eec:	01c00044 	movi	r7,1
10013ef0:	3900332e 	bgeu	r7,r4,10013fc0 <_fpadd_parts+0xdc>
10013ef4:	28c00017 	ldw	r3,0(r5)
10013ef8:	38c0642e 	bgeu	r7,r3,1001408c <_fpadd_parts+0x1a8>
10013efc:	01c00104 	movi	r7,4
10013f00:	21c06e26 	beq	r4,r7,100140bc <_fpadd_parts+0x1d8>
10013f04:	19c06126 	beq	r3,r7,1001408c <_fpadd_parts+0x1a8>
10013f08:	01c00084 	movi	r7,2
10013f0c:	19c04226 	beq	r3,r7,10014018 <_fpadd_parts+0x134>
10013f10:	21c05e26 	beq	r4,r7,1001408c <_fpadd_parts+0x1a8>
10013f14:	11000217 	ldw	r4,8(r2)
10013f18:	2a400217 	ldw	r9,8(r5)
10013f1c:	12800317 	ldw	r10,12(r2)
10013f20:	29c00317 	ldw	r7,12(r5)
10013f24:	2247c83a 	sub	r3,r4,r9
10013f28:	1811883a 	mov	r8,r3
10013f2c:	18005316 	blt	r3,zero,1001407c <_fpadd_parts+0x198>
10013f30:	02c007c4 	movi	r11,31
10013f34:	5a002316 	blt	r11,r8,10013fc4 <_fpadd_parts+0xe0>
10013f38:	00c0560e 	bge	zero,r3,10014094 <_fpadd_parts+0x1b0>
10013f3c:	00c00044 	movi	r3,1
10013f40:	1a06983a 	sll	r3,r3,r8
10013f44:	3a10d83a 	srl	r8,r7,r8
10013f48:	18ffffc4 	addi	r3,r3,-1
10013f4c:	19ce703a 	and	r7,r3,r7
10013f50:	380ec03a 	cmpne	r7,r7,zero
10013f54:	3a0eb03a 	or	r7,r7,r8
10013f58:	10c00117 	ldw	r3,4(r2)
10013f5c:	28800117 	ldw	r2,4(r5)
10013f60:	18801d26 	beq	r3,r2,10013fd8 <_fpadd_parts+0xf4>
10013f64:	18003a26 	beq	r3,zero,10014050 <_fpadd_parts+0x16c>
10013f68:	3a85c83a 	sub	r2,r7,r10
10013f6c:	10003a16 	blt	r2,zero,10014058 <_fpadd_parts+0x174>
10013f70:	30000115 	stw	zero,4(r6)
10013f74:	31000215 	stw	r4,8(r6)
10013f78:	30800315 	stw	r2,12(r6)
10013f7c:	10ffffc4 	addi	r3,r2,-1
10013f80:	01d00034 	movhi	r7,16384
10013f84:	39ffff84 	addi	r7,r7,-2
10013f88:	38c00936 	bltu	r7,r3,10013fb0 <_fpadd_parts+0xcc>
10013f8c:	30c00217 	ldw	r3,8(r6)
10013f90:	18ffffc4 	addi	r3,r3,-1
10013f94:	1085883a 	add	r2,r2,r2
10013f98:	113fffc4 	addi	r4,r2,-1
10013f9c:	180b883a 	mov	r5,r3
10013fa0:	18ffffc4 	addi	r3,r3,-1
10013fa4:	393ffb2e 	bgeu	r7,r4,10013f94 <__alt_data_end+0xf8013f94>
10013fa8:	30800315 	stw	r2,12(r6)
10013fac:	31400215 	stw	r5,8(r6)
10013fb0:	00c000c4 	movi	r3,3
10013fb4:	30c00015 	stw	r3,0(r6)
10013fb8:	10000e16 	blt	r2,zero,10013ff4 <_fpadd_parts+0x110>
10013fbc:	3005883a 	mov	r2,r6
10013fc0:	f800283a 	ret
10013fc4:	49002a0e 	bge	r9,r4,10014070 <_fpadd_parts+0x18c>
10013fc8:	10c00117 	ldw	r3,4(r2)
10013fcc:	28800117 	ldw	r2,4(r5)
10013fd0:	000f883a 	mov	r7,zero
10013fd4:	18bfe31e 	bne	r3,r2,10013f64 <__alt_data_end+0xf8013f64>
10013fd8:	3a85883a 	add	r2,r7,r10
10013fdc:	30c00115 	stw	r3,4(r6)
10013fe0:	00c000c4 	movi	r3,3
10013fe4:	31000215 	stw	r4,8(r6)
10013fe8:	30800315 	stw	r2,12(r6)
10013fec:	30c00015 	stw	r3,0(r6)
10013ff0:	103ff20e 	bge	r2,zero,10013fbc <__alt_data_end+0xf8013fbc>
10013ff4:	30c00217 	ldw	r3,8(r6)
10013ff8:	1008d07a 	srli	r4,r2,1
10013ffc:	1080004c 	andi	r2,r2,1
10014000:	18c00044 	addi	r3,r3,1
10014004:	1104b03a 	or	r2,r2,r4
10014008:	30800315 	stw	r2,12(r6)
1001400c:	30c00215 	stw	r3,8(r6)
10014010:	3005883a 	mov	r2,r6
10014014:	f800283a 	ret
10014018:	20ffe91e 	bne	r4,r3,10013fc0 <__alt_data_end+0xf8013fc0>
1001401c:	31000015 	stw	r4,0(r6)
10014020:	10c00117 	ldw	r3,4(r2)
10014024:	30c00115 	stw	r3,4(r6)
10014028:	11c00217 	ldw	r7,8(r2)
1001402c:	10c00117 	ldw	r3,4(r2)
10014030:	29000117 	ldw	r4,4(r5)
10014034:	31c00215 	stw	r7,8(r6)
10014038:	10800317 	ldw	r2,12(r2)
1001403c:	20c6703a 	and	r3,r4,r3
10014040:	30c00115 	stw	r3,4(r6)
10014044:	30800315 	stw	r2,12(r6)
10014048:	3005883a 	mov	r2,r6
1001404c:	f800283a 	ret
10014050:	51c5c83a 	sub	r2,r10,r7
10014054:	103fc60e 	bge	r2,zero,10013f70 <__alt_data_end+0xf8013f70>
10014058:	0085c83a 	sub	r2,zero,r2
1001405c:	00c00044 	movi	r3,1
10014060:	30c00115 	stw	r3,4(r6)
10014064:	31000215 	stw	r4,8(r6)
10014068:	30800315 	stw	r2,12(r6)
1001406c:	003fc306 	br	10013f7c <__alt_data_end+0xf8013f7c>
10014070:	4809883a 	mov	r4,r9
10014074:	0015883a 	mov	r10,zero
10014078:	003fb706 	br	10013f58 <__alt_data_end+0xf8013f58>
1001407c:	00d1c83a 	sub	r8,zero,r3
10014080:	02c007c4 	movi	r11,31
10014084:	5a3fcf16 	blt	r11,r8,10013fc4 <__alt_data_end+0xf8013fc4>
10014088:	003fab06 	br	10013f38 <__alt_data_end+0xf8013f38>
1001408c:	2805883a 	mov	r2,r5
10014090:	f800283a 	ret
10014094:	183fb026 	beq	r3,zero,10013f58 <__alt_data_end+0xf8013f58>
10014098:	02400044 	movi	r9,1
1001409c:	4a12983a 	sll	r9,r9,r8
100140a0:	5206d83a 	srl	r3,r10,r8
100140a4:	2209883a 	add	r4,r4,r8
100140a8:	4a3fffc4 	addi	r8,r9,-1
100140ac:	4294703a 	and	r10,r8,r10
100140b0:	5014c03a 	cmpne	r10,r10,zero
100140b4:	50d4b03a 	or	r10,r10,r3
100140b8:	003fa706 	br	10013f58 <__alt_data_end+0xf8013f58>
100140bc:	193fc01e 	bne	r3,r4,10013fc0 <__alt_data_end+0xf8013fc0>
100140c0:	11000117 	ldw	r4,4(r2)
100140c4:	28c00117 	ldw	r3,4(r5)
100140c8:	20ffbd26 	beq	r4,r3,10013fc0 <__alt_data_end+0xf8013fc0>
100140cc:	008400b4 	movhi	r2,4098
100140d0:	108e8904 	addi	r2,r2,14884
100140d4:	f800283a 	ret

100140d8 <__addsf3>:
100140d8:	defff104 	addi	sp,sp,-60
100140dc:	d9000d15 	stw	r4,52(sp)
100140e0:	d9400c15 	stw	r5,48(sp)
100140e4:	d9000d04 	addi	r4,sp,52
100140e8:	d9400804 	addi	r5,sp,32
100140ec:	dfc00e15 	stw	ra,56(sp)
100140f0:	0014a0c0 	call	10014a0c <__unpack_f>
100140f4:	d9000c04 	addi	r4,sp,48
100140f8:	d9400404 	addi	r5,sp,16
100140fc:	0014a0c0 	call	10014a0c <__unpack_f>
10014100:	d9000804 	addi	r4,sp,32
10014104:	d9400404 	addi	r5,sp,16
10014108:	d80d883a 	mov	r6,sp
1001410c:	0013ee40 	call	10013ee4 <_fpadd_parts>
10014110:	1009883a 	mov	r4,r2
10014114:	00148e00 	call	100148e0 <__pack_f>
10014118:	dfc00e17 	ldw	ra,56(sp)
1001411c:	dec00f04 	addi	sp,sp,60
10014120:	f800283a 	ret

10014124 <__subsf3>:
10014124:	defff104 	addi	sp,sp,-60
10014128:	d9000d15 	stw	r4,52(sp)
1001412c:	d9400c15 	stw	r5,48(sp)
10014130:	d9000d04 	addi	r4,sp,52
10014134:	d9400804 	addi	r5,sp,32
10014138:	dfc00e15 	stw	ra,56(sp)
1001413c:	0014a0c0 	call	10014a0c <__unpack_f>
10014140:	d9000c04 	addi	r4,sp,48
10014144:	d9400404 	addi	r5,sp,16
10014148:	0014a0c0 	call	10014a0c <__unpack_f>
1001414c:	d8800517 	ldw	r2,20(sp)
10014150:	d9000804 	addi	r4,sp,32
10014154:	d9400404 	addi	r5,sp,16
10014158:	d80d883a 	mov	r6,sp
1001415c:	1080005c 	xori	r2,r2,1
10014160:	d8800515 	stw	r2,20(sp)
10014164:	0013ee40 	call	10013ee4 <_fpadd_parts>
10014168:	1009883a 	mov	r4,r2
1001416c:	00148e00 	call	100148e0 <__pack_f>
10014170:	dfc00e17 	ldw	ra,56(sp)
10014174:	dec00f04 	addi	sp,sp,60
10014178:	f800283a 	ret

1001417c <__mulsf3>:
1001417c:	defff104 	addi	sp,sp,-60
10014180:	d9000d15 	stw	r4,52(sp)
10014184:	d9400c15 	stw	r5,48(sp)
10014188:	d9000d04 	addi	r4,sp,52
1001418c:	d9400804 	addi	r5,sp,32
10014190:	dfc00e15 	stw	ra,56(sp)
10014194:	0014a0c0 	call	10014a0c <__unpack_f>
10014198:	d9000c04 	addi	r4,sp,48
1001419c:	d9400404 	addi	r5,sp,16
100141a0:	0014a0c0 	call	10014a0c <__unpack_f>
100141a4:	d8c00817 	ldw	r3,32(sp)
100141a8:	00800044 	movi	r2,1
100141ac:	10c00936 	bltu	r2,r3,100141d4 <__mulsf3+0x58>
100141b0:	d8c00917 	ldw	r3,36(sp)
100141b4:	d8800517 	ldw	r2,20(sp)
100141b8:	d9000804 	addi	r4,sp,32
100141bc:	1884c03a 	cmpne	r2,r3,r2
100141c0:	d8800915 	stw	r2,36(sp)
100141c4:	00148e00 	call	100148e0 <__pack_f>
100141c8:	dfc00e17 	ldw	ra,56(sp)
100141cc:	dec00f04 	addi	sp,sp,60
100141d0:	f800283a 	ret
100141d4:	d9000417 	ldw	r4,16(sp)
100141d8:	11000936 	bltu	r2,r4,10014200 <__mulsf3+0x84>
100141dc:	d8800517 	ldw	r2,20(sp)
100141e0:	d8c00917 	ldw	r3,36(sp)
100141e4:	d9000404 	addi	r4,sp,16
100141e8:	1884c03a 	cmpne	r2,r3,r2
100141ec:	d8800515 	stw	r2,20(sp)
100141f0:	00148e00 	call	100148e0 <__pack_f>
100141f4:	dfc00e17 	ldw	ra,56(sp)
100141f8:	dec00f04 	addi	sp,sp,60
100141fc:	f800283a 	ret
10014200:	00800104 	movi	r2,4
10014204:	1880051e 	bne	r3,r2,1001421c <__mulsf3+0xa0>
10014208:	00800084 	movi	r2,2
1001420c:	20bfe81e 	bne	r4,r2,100141b0 <__alt_data_end+0xf80141b0>
10014210:	010400b4 	movhi	r4,4098
10014214:	210e8904 	addi	r4,r4,14884
10014218:	003fea06 	br	100141c4 <__alt_data_end+0xf80141c4>
1001421c:	2080031e 	bne	r4,r2,1001422c <__mulsf3+0xb0>
10014220:	00800084 	movi	r2,2
10014224:	18bffa26 	beq	r3,r2,10014210 <__alt_data_end+0xf8014210>
10014228:	003fec06 	br	100141dc <__alt_data_end+0xf80141dc>
1001422c:	00800084 	movi	r2,2
10014230:	18bfdf26 	beq	r3,r2,100141b0 <__alt_data_end+0xf80141b0>
10014234:	20bfe926 	beq	r4,r2,100141dc <__alt_data_end+0xf80141dc>
10014238:	d9000717 	ldw	r4,28(sp)
1001423c:	d9800b17 	ldw	r6,44(sp)
10014240:	000b883a 	mov	r5,zero
10014244:	000f883a 	mov	r7,zero
10014248:	00147240 	call	10014724 <__muldi3>
1001424c:	d9000617 	ldw	r4,24(sp)
10014250:	d9400a17 	ldw	r5,40(sp)
10014254:	d9c00917 	ldw	r7,36(sp)
10014258:	290b883a 	add	r5,r5,r4
1001425c:	d9000517 	ldw	r4,20(sp)
10014260:	29800084 	addi	r6,r5,2
10014264:	d9800215 	stw	r6,8(sp)
10014268:	3908c03a 	cmpne	r4,r7,r4
1001426c:	d9000115 	stw	r4,4(sp)
10014270:	1809883a 	mov	r4,r3
10014274:	1800070e 	bge	r3,zero,10014294 <__mulsf3+0x118>
10014278:	1900004c 	andi	r4,r3,1
1001427c:	294000c4 	addi	r5,r5,3
10014280:	20000226 	beq	r4,zero,1001428c <__mulsf3+0x110>
10014284:	1004d07a 	srli	r2,r2,1
10014288:	10a00034 	orhi	r2,r2,32768
1001428c:	1808d07a 	srli	r4,r3,1
10014290:	d9400215 	stw	r5,8(sp)
10014294:	01900034 	movhi	r6,16384
10014298:	31bfffc4 	addi	r6,r6,-1
1001429c:	31000c36 	bltu	r6,r4,100142d0 <__mulsf3+0x154>
100142a0:	d8c00217 	ldw	r3,8(sp)
100142a4:	18ffffc4 	addi	r3,r3,-1
100142a8:	00000306 	br	100142b8 <__mulsf3+0x13c>
100142ac:	1085883a 	add	r2,r2,r2
100142b0:	18ffffc4 	addi	r3,r3,-1
100142b4:	31000536 	bltu	r6,r4,100142cc <__mulsf3+0x150>
100142b8:	2109883a 	add	r4,r4,r4
100142bc:	180b883a 	mov	r5,r3
100142c0:	103ffa0e 	bge	r2,zero,100142ac <__alt_data_end+0xf80142ac>
100142c4:	21000054 	ori	r4,r4,1
100142c8:	003ff806 	br	100142ac <__alt_data_end+0xf80142ac>
100142cc:	d9400215 	stw	r5,8(sp)
100142d0:	21401fcc 	andi	r5,r4,127
100142d4:	00c01004 	movi	r3,64
100142d8:	28c00526 	beq	r5,r3,100142f0 <__mulsf3+0x174>
100142dc:	008000c4 	movi	r2,3
100142e0:	d9000315 	stw	r4,12(sp)
100142e4:	d8800015 	stw	r2,0(sp)
100142e8:	d809883a 	mov	r4,sp
100142ec:	003fb506 	br	100141c4 <__alt_data_end+0xf80141c4>
100142f0:	20c0200c 	andi	r3,r4,128
100142f4:	183ff91e 	bne	r3,zero,100142dc <__alt_data_end+0xf80142dc>
100142f8:	103ff826 	beq	r2,zero,100142dc <__alt_data_end+0xf80142dc>
100142fc:	21001004 	addi	r4,r4,64
10014300:	00bfe004 	movi	r2,-128
10014304:	2088703a 	and	r4,r4,r2
10014308:	003ff406 	br	100142dc <__alt_data_end+0xf80142dc>

1001430c <__divsf3>:
1001430c:	defff504 	addi	sp,sp,-44
10014310:	d9000915 	stw	r4,36(sp)
10014314:	d9400815 	stw	r5,32(sp)
10014318:	d9000904 	addi	r4,sp,36
1001431c:	d9400404 	addi	r5,sp,16
10014320:	dfc00a15 	stw	ra,40(sp)
10014324:	0014a0c0 	call	10014a0c <__unpack_f>
10014328:	d9000804 	addi	r4,sp,32
1001432c:	d80b883a 	mov	r5,sp
10014330:	0014a0c0 	call	10014a0c <__unpack_f>
10014334:	d8c00417 	ldw	r3,16(sp)
10014338:	00800044 	movi	r2,1
1001433c:	10c00536 	bltu	r2,r3,10014354 <__divsf3+0x48>
10014340:	d9000404 	addi	r4,sp,16
10014344:	00148e00 	call	100148e0 <__pack_f>
10014348:	dfc00a17 	ldw	ra,40(sp)
1001434c:	dec00b04 	addi	sp,sp,44
10014350:	f800283a 	ret
10014354:	d9000017 	ldw	r4,0(sp)
10014358:	11000536 	bltu	r2,r4,10014370 <__divsf3+0x64>
1001435c:	d809883a 	mov	r4,sp
10014360:	00148e00 	call	100148e0 <__pack_f>
10014364:	dfc00a17 	ldw	ra,40(sp)
10014368:	dec00b04 	addi	sp,sp,44
1001436c:	f800283a 	ret
10014370:	d9800517 	ldw	r6,20(sp)
10014374:	d9400117 	ldw	r5,4(sp)
10014378:	00800104 	movi	r2,4
1001437c:	314af03a 	xor	r5,r6,r5
10014380:	d9400515 	stw	r5,20(sp)
10014384:	18800226 	beq	r3,r2,10014390 <__divsf3+0x84>
10014388:	01400084 	movi	r5,2
1001438c:	1940041e 	bne	r3,r5,100143a0 <__divsf3+0x94>
10014390:	193feb1e 	bne	r3,r4,10014340 <__alt_data_end+0xf8014340>
10014394:	010400b4 	movhi	r4,4098
10014398:	210e8904 	addi	r4,r4,14884
1001439c:	003fe906 	br	10014344 <__alt_data_end+0xf8014344>
100143a0:	20802226 	beq	r4,r2,1001442c <__divsf3+0x120>
100143a4:	21402526 	beq	r4,r5,1001443c <__divsf3+0x130>
100143a8:	d9000617 	ldw	r4,24(sp)
100143ac:	d8c00217 	ldw	r3,8(sp)
100143b0:	d8800717 	ldw	r2,28(sp)
100143b4:	d9400317 	ldw	r5,12(sp)
100143b8:	20c7c83a 	sub	r3,r4,r3
100143bc:	d8c00615 	stw	r3,24(sp)
100143c0:	1140032e 	bgeu	r2,r5,100143d0 <__divsf3+0xc4>
100143c4:	18ffffc4 	addi	r3,r3,-1
100143c8:	1085883a 	add	r2,r2,r2
100143cc:	d8c00615 	stw	r3,24(sp)
100143d0:	00c007c4 	movi	r3,31
100143d4:	01100034 	movhi	r4,16384
100143d8:	000d883a 	mov	r6,zero
100143dc:	18ffffc4 	addi	r3,r3,-1
100143e0:	11400236 	bltu	r2,r5,100143ec <__divsf3+0xe0>
100143e4:	310cb03a 	or	r6,r6,r4
100143e8:	1145c83a 	sub	r2,r2,r5
100143ec:	2008d07a 	srli	r4,r4,1
100143f0:	1085883a 	add	r2,r2,r2
100143f4:	183ff91e 	bne	r3,zero,100143dc <__alt_data_end+0xf80143dc>
100143f8:	31001fcc 	andi	r4,r6,127
100143fc:	00c01004 	movi	r3,64
10014400:	20c00226 	beq	r4,r3,1001440c <__divsf3+0x100>
10014404:	d9800715 	stw	r6,28(sp)
10014408:	003fcd06 	br	10014340 <__alt_data_end+0xf8014340>
1001440c:	30c0200c 	andi	r3,r6,128
10014410:	183ffc1e 	bne	r3,zero,10014404 <__alt_data_end+0xf8014404>
10014414:	103ffb26 	beq	r2,zero,10014404 <__alt_data_end+0xf8014404>
10014418:	31801004 	addi	r6,r6,64
1001441c:	00bfe004 	movi	r2,-128
10014420:	308c703a 	and	r6,r6,r2
10014424:	d9800715 	stw	r6,28(sp)
10014428:	003fc506 	br	10014340 <__alt_data_end+0xf8014340>
1001442c:	d8000715 	stw	zero,28(sp)
10014430:	d8000615 	stw	zero,24(sp)
10014434:	d9000404 	addi	r4,sp,16
10014438:	003fc206 	br	10014344 <__alt_data_end+0xf8014344>
1001443c:	d8800415 	stw	r2,16(sp)
10014440:	d9000404 	addi	r4,sp,16
10014444:	003fbf06 	br	10014344 <__alt_data_end+0xf8014344>

10014448 <__gtsf2>:
10014448:	defff504 	addi	sp,sp,-44
1001444c:	d9000915 	stw	r4,36(sp)
10014450:	d9400815 	stw	r5,32(sp)
10014454:	d9000904 	addi	r4,sp,36
10014458:	d9400404 	addi	r5,sp,16
1001445c:	dfc00a15 	stw	ra,40(sp)
10014460:	0014a0c0 	call	10014a0c <__unpack_f>
10014464:	d9000804 	addi	r4,sp,32
10014468:	d80b883a 	mov	r5,sp
1001446c:	0014a0c0 	call	10014a0c <__unpack_f>
10014470:	d8c00417 	ldw	r3,16(sp)
10014474:	00800044 	movi	r2,1
10014478:	10c0082e 	bgeu	r2,r3,1001449c <__gtsf2+0x54>
1001447c:	d8c00017 	ldw	r3,0(sp)
10014480:	10c0062e 	bgeu	r2,r3,1001449c <__gtsf2+0x54>
10014484:	d9000404 	addi	r4,sp,16
10014488:	d80b883a 	mov	r5,sp
1001448c:	0014ad40 	call	10014ad4 <__fpcmp_parts_f>
10014490:	dfc00a17 	ldw	ra,40(sp)
10014494:	dec00b04 	addi	sp,sp,44
10014498:	f800283a 	ret
1001449c:	00bfffc4 	movi	r2,-1
100144a0:	003ffb06 	br	10014490 <__alt_data_end+0xf8014490>

100144a4 <__ltsf2>:
100144a4:	defff504 	addi	sp,sp,-44
100144a8:	d9000915 	stw	r4,36(sp)
100144ac:	d9400815 	stw	r5,32(sp)
100144b0:	d9000904 	addi	r4,sp,36
100144b4:	d9400404 	addi	r5,sp,16
100144b8:	dfc00a15 	stw	ra,40(sp)
100144bc:	0014a0c0 	call	10014a0c <__unpack_f>
100144c0:	d9000804 	addi	r4,sp,32
100144c4:	d80b883a 	mov	r5,sp
100144c8:	0014a0c0 	call	10014a0c <__unpack_f>
100144cc:	d8c00417 	ldw	r3,16(sp)
100144d0:	00800044 	movi	r2,1
100144d4:	10c0052e 	bgeu	r2,r3,100144ec <__ltsf2+0x48>
100144d8:	d8c00017 	ldw	r3,0(sp)
100144dc:	10c0032e 	bgeu	r2,r3,100144ec <__ltsf2+0x48>
100144e0:	d9000404 	addi	r4,sp,16
100144e4:	d80b883a 	mov	r5,sp
100144e8:	0014ad40 	call	10014ad4 <__fpcmp_parts_f>
100144ec:	dfc00a17 	ldw	ra,40(sp)
100144f0:	dec00b04 	addi	sp,sp,44
100144f4:	f800283a 	ret

100144f8 <__floatunsisf>:
100144f8:	defffa04 	addi	sp,sp,-24
100144fc:	dc000415 	stw	r16,16(sp)
10014500:	dfc00515 	stw	ra,20(sp)
10014504:	d8000115 	stw	zero,4(sp)
10014508:	2021883a 	mov	r16,r4
1001450c:	20001326 	beq	r4,zero,1001455c <__floatunsisf+0x64>
10014510:	008000c4 	movi	r2,3
10014514:	d8800015 	stw	r2,0(sp)
10014518:	00800784 	movi	r2,30
1001451c:	d8800215 	stw	r2,8(sp)
10014520:	00148340 	call	10014834 <__clzsi2>
10014524:	10ffffc4 	addi	r3,r2,-1
10014528:	18001416 	blt	r3,zero,1001457c <__floatunsisf+0x84>
1001452c:	18002526 	beq	r3,zero,100145c4 <__floatunsisf+0xcc>
10014530:	80e0983a 	sll	r16,r16,r3
10014534:	00c007c4 	movi	r3,31
10014538:	1885c83a 	sub	r2,r3,r2
1001453c:	dc000315 	stw	r16,12(sp)
10014540:	d8800215 	stw	r2,8(sp)
10014544:	d809883a 	mov	r4,sp
10014548:	00148e00 	call	100148e0 <__pack_f>
1001454c:	dfc00517 	ldw	ra,20(sp)
10014550:	dc000417 	ldw	r16,16(sp)
10014554:	dec00604 	addi	sp,sp,24
10014558:	f800283a 	ret
1001455c:	00800084 	movi	r2,2
10014560:	d809883a 	mov	r4,sp
10014564:	d8800015 	stw	r2,0(sp)
10014568:	00148e00 	call	100148e0 <__pack_f>
1001456c:	dfc00517 	ldw	ra,20(sp)
10014570:	dc000417 	ldw	r16,16(sp)
10014574:	dec00604 	addi	sp,sp,24
10014578:	f800283a 	ret
1001457c:	00c7c83a 	sub	r3,zero,r3
10014580:	01000044 	movi	r4,1
10014584:	20c8983a 	sll	r4,r4,r3
10014588:	80c6d83a 	srl	r3,r16,r3
1001458c:	213fffc4 	addi	r4,r4,-1
10014590:	2420703a 	and	r16,r4,r16
10014594:	8020c03a 	cmpne	r16,r16,zero
10014598:	010007c4 	movi	r4,31
1001459c:	80c6b03a 	or	r3,r16,r3
100145a0:	2085c83a 	sub	r2,r4,r2
100145a4:	d809883a 	mov	r4,sp
100145a8:	d8c00315 	stw	r3,12(sp)
100145ac:	d8800215 	stw	r2,8(sp)
100145b0:	00148e00 	call	100148e0 <__pack_f>
100145b4:	dfc00517 	ldw	ra,20(sp)
100145b8:	dc000417 	ldw	r16,16(sp)
100145bc:	dec00604 	addi	sp,sp,24
100145c0:	f800283a 	ret
100145c4:	dc000315 	stw	r16,12(sp)
100145c8:	003fde06 	br	10014544 <__alt_data_end+0xf8014544>

100145cc <udivmodsi4>:
100145cc:	2005883a 	mov	r2,r4
100145d0:	2900182e 	bgeu	r5,r4,10014634 <udivmodsi4+0x68>
100145d4:	28001716 	blt	r5,zero,10014634 <udivmodsi4+0x68>
100145d8:	01000804 	movi	r4,32
100145dc:	00c00044 	movi	r3,1
100145e0:	00000206 	br	100145ec <udivmodsi4+0x20>
100145e4:	20001126 	beq	r4,zero,1001462c <udivmodsi4+0x60>
100145e8:	28000516 	blt	r5,zero,10014600 <udivmodsi4+0x34>
100145ec:	294b883a 	add	r5,r5,r5
100145f0:	213fffc4 	addi	r4,r4,-1
100145f4:	18c7883a 	add	r3,r3,r3
100145f8:	28bffa36 	bltu	r5,r2,100145e4 <__alt_data_end+0xf80145e4>
100145fc:	18000b26 	beq	r3,zero,1001462c <udivmodsi4+0x60>
10014600:	0009883a 	mov	r4,zero
10014604:	11400236 	bltu	r2,r5,10014610 <udivmodsi4+0x44>
10014608:	1145c83a 	sub	r2,r2,r5
1001460c:	20c8b03a 	or	r4,r4,r3
10014610:	1806d07a 	srli	r3,r3,1
10014614:	280ad07a 	srli	r5,r5,1
10014618:	183ffa1e 	bne	r3,zero,10014604 <__alt_data_end+0xf8014604>
1001461c:	3000021e 	bne	r6,zero,10014628 <udivmodsi4+0x5c>
10014620:	2005883a 	mov	r2,r4
10014624:	f800283a 	ret
10014628:	f800283a 	ret
1001462c:	0009883a 	mov	r4,zero
10014630:	003ffa06 	br	1001461c <__alt_data_end+0xf801461c>
10014634:	00c00044 	movi	r3,1
10014638:	0009883a 	mov	r4,zero
1001463c:	003ff106 	br	10014604 <__alt_data_end+0xf8014604>

10014640 <__divsi3>:
10014640:	defffe04 	addi	sp,sp,-8
10014644:	dfc00115 	stw	ra,4(sp)
10014648:	dc000015 	stw	r16,0(sp)
1001464c:	20000a16 	blt	r4,zero,10014678 <__divsi3+0x38>
10014650:	0021883a 	mov	r16,zero
10014654:	28000b16 	blt	r5,zero,10014684 <__divsi3+0x44>
10014658:	000d883a 	mov	r6,zero
1001465c:	00145cc0 	call	100145cc <udivmodsi4>
10014660:	80000126 	beq	r16,zero,10014668 <__divsi3+0x28>
10014664:	0085c83a 	sub	r2,zero,r2
10014668:	dfc00117 	ldw	ra,4(sp)
1001466c:	dc000017 	ldw	r16,0(sp)
10014670:	dec00204 	addi	sp,sp,8
10014674:	f800283a 	ret
10014678:	0109c83a 	sub	r4,zero,r4
1001467c:	04000044 	movi	r16,1
10014680:	283ff50e 	bge	r5,zero,10014658 <__alt_data_end+0xf8014658>
10014684:	014bc83a 	sub	r5,zero,r5
10014688:	8400005c 	xori	r16,r16,1
1001468c:	003ff206 	br	10014658 <__alt_data_end+0xf8014658>

10014690 <__modsi3>:
10014690:	deffff04 	addi	sp,sp,-4
10014694:	dfc00015 	stw	ra,0(sp)
10014698:	20000516 	blt	r4,zero,100146b0 <__modsi3+0x20>
1001469c:	28000c16 	blt	r5,zero,100146d0 <__modsi3+0x40>
100146a0:	01800044 	movi	r6,1
100146a4:	dfc00017 	ldw	ra,0(sp)
100146a8:	dec00104 	addi	sp,sp,4
100146ac:	00145cc1 	jmpi	100145cc <udivmodsi4>
100146b0:	0109c83a 	sub	r4,zero,r4
100146b4:	28000b16 	blt	r5,zero,100146e4 <__modsi3+0x54>
100146b8:	01800044 	movi	r6,1
100146bc:	00145cc0 	call	100145cc <udivmodsi4>
100146c0:	0085c83a 	sub	r2,zero,r2
100146c4:	dfc00017 	ldw	ra,0(sp)
100146c8:	dec00104 	addi	sp,sp,4
100146cc:	f800283a 	ret
100146d0:	014bc83a 	sub	r5,zero,r5
100146d4:	01800044 	movi	r6,1
100146d8:	dfc00017 	ldw	ra,0(sp)
100146dc:	dec00104 	addi	sp,sp,4
100146e0:	00145cc1 	jmpi	100145cc <udivmodsi4>
100146e4:	014bc83a 	sub	r5,zero,r5
100146e8:	003ff306 	br	100146b8 <__alt_data_end+0xf80146b8>

100146ec <__udivsi3>:
100146ec:	000d883a 	mov	r6,zero
100146f0:	00145cc1 	jmpi	100145cc <udivmodsi4>

100146f4 <__umodsi3>:
100146f4:	01800044 	movi	r6,1
100146f8:	00145cc1 	jmpi	100145cc <udivmodsi4>

100146fc <__mulsi3>:
100146fc:	0005883a 	mov	r2,zero
10014700:	20000726 	beq	r4,zero,10014720 <__mulsi3+0x24>
10014704:	20c0004c 	andi	r3,r4,1
10014708:	2008d07a 	srli	r4,r4,1
1001470c:	18000126 	beq	r3,zero,10014714 <__mulsi3+0x18>
10014710:	1145883a 	add	r2,r2,r5
10014714:	294b883a 	add	r5,r5,r5
10014718:	203ffa1e 	bne	r4,zero,10014704 <__alt_data_end+0xf8014704>
1001471c:	f800283a 	ret
10014720:	f800283a 	ret

10014724 <__muldi3>:
10014724:	defff604 	addi	sp,sp,-40
10014728:	dd400515 	stw	r21,20(sp)
1001472c:	dd000415 	stw	r20,16(sp)
10014730:	257fffcc 	andi	r21,r4,65535
10014734:	353fffcc 	andi	r20,r6,65535
10014738:	dcc00315 	stw	r19,12(sp)
1001473c:	3026d43a 	srli	r19,r6,16
10014740:	dd800615 	stw	r22,24(sp)
10014744:	dc800215 	stw	r18,8(sp)
10014748:	dc400115 	stw	r17,4(sp)
1001474c:	2024d43a 	srli	r18,r4,16
10014750:	2023883a 	mov	r17,r4
10014754:	282d883a 	mov	r22,r5
10014758:	a009883a 	mov	r4,r20
1001475c:	a80b883a 	mov	r5,r21
10014760:	dfc00915 	stw	ra,36(sp)
10014764:	df000815 	stw	fp,32(sp)
10014768:	ddc00715 	stw	r23,28(sp)
1001476c:	3839883a 	mov	fp,r7
10014770:	dc000015 	stw	r16,0(sp)
10014774:	3021883a 	mov	r16,r6
10014778:	00146fc0 	call	100146fc <__mulsi3>
1001477c:	a80b883a 	mov	r5,r21
10014780:	9809883a 	mov	r4,r19
10014784:	102f883a 	mov	r23,r2
10014788:	00146fc0 	call	100146fc <__mulsi3>
1001478c:	a009883a 	mov	r4,r20
10014790:	900b883a 	mov	r5,r18
10014794:	102b883a 	mov	r21,r2
10014798:	00146fc0 	call	100146fc <__mulsi3>
1001479c:	9809883a 	mov	r4,r19
100147a0:	900b883a 	mov	r5,r18
100147a4:	1029883a 	mov	r20,r2
100147a8:	00146fc0 	call	100146fc <__mulsi3>
100147ac:	1007883a 	mov	r3,r2
100147b0:	b804d43a 	srli	r2,r23,16
100147b4:	a549883a 	add	r4,r20,r21
100147b8:	2089883a 	add	r4,r4,r2
100147bc:	2500022e 	bgeu	r4,r20,100147c8 <__muldi3+0xa4>
100147c0:	00800074 	movhi	r2,1
100147c4:	1887883a 	add	r3,r3,r2
100147c8:	200cd43a 	srli	r6,r4,16
100147cc:	2004943a 	slli	r2,r4,16
100147d0:	e00b883a 	mov	r5,fp
100147d4:	8809883a 	mov	r4,r17
100147d8:	bdffffcc 	andi	r23,r23,65535
100147dc:	19a3883a 	add	r17,r3,r6
100147e0:	15ef883a 	add	r23,r2,r23
100147e4:	00146fc0 	call	100146fc <__mulsi3>
100147e8:	8009883a 	mov	r4,r16
100147ec:	b00b883a 	mov	r5,r22
100147f0:	1025883a 	mov	r18,r2
100147f4:	00146fc0 	call	100146fc <__mulsi3>
100147f8:	9085883a 	add	r2,r18,r2
100147fc:	1447883a 	add	r3,r2,r17
10014800:	b805883a 	mov	r2,r23
10014804:	dfc00917 	ldw	ra,36(sp)
10014808:	df000817 	ldw	fp,32(sp)
1001480c:	ddc00717 	ldw	r23,28(sp)
10014810:	dd800617 	ldw	r22,24(sp)
10014814:	dd400517 	ldw	r21,20(sp)
10014818:	dd000417 	ldw	r20,16(sp)
1001481c:	dcc00317 	ldw	r19,12(sp)
10014820:	dc800217 	ldw	r18,8(sp)
10014824:	dc400117 	ldw	r17,4(sp)
10014828:	dc000017 	ldw	r16,0(sp)
1001482c:	dec00a04 	addi	sp,sp,40
10014830:	f800283a 	ret

10014834 <__clzsi2>:
10014834:	00bfffd4 	movui	r2,65535
10014838:	11000b36 	bltu	r2,r4,10014868 <__clzsi2+0x34>
1001483c:	00803fc4 	movi	r2,255
10014840:	11001e2e 	bgeu	r2,r4,100148bc <__clzsi2+0x88>
10014844:	00c00204 	movi	r3,8
10014848:	20c8d83a 	srl	r4,r4,r3
1001484c:	00c400b4 	movhi	r3,4098
10014850:	18ce8d04 	addi	r3,r3,14900
10014854:	00800604 	movi	r2,24
10014858:	1909883a 	add	r4,r3,r4
1001485c:	20c00003 	ldbu	r3,0(r4)
10014860:	10c5c83a 	sub	r2,r2,r3
10014864:	f800283a 	ret
10014868:	00804034 	movhi	r2,256
1001486c:	10bfffc4 	addi	r2,r2,-1
10014870:	11000936 	bltu	r2,r4,10014898 <__clzsi2+0x64>
10014874:	00800404 	movi	r2,16
10014878:	1007883a 	mov	r3,r2
1001487c:	20c8d83a 	srl	r4,r4,r3
10014880:	00c400b4 	movhi	r3,4098
10014884:	18ce8d04 	addi	r3,r3,14900
10014888:	1909883a 	add	r4,r3,r4
1001488c:	20c00003 	ldbu	r3,0(r4)
10014890:	10c5c83a 	sub	r2,r2,r3
10014894:	f800283a 	ret
10014898:	00c00604 	movi	r3,24
1001489c:	20c8d83a 	srl	r4,r4,r3
100148a0:	00c400b4 	movhi	r3,4098
100148a4:	18ce8d04 	addi	r3,r3,14900
100148a8:	00800204 	movi	r2,8
100148ac:	1909883a 	add	r4,r3,r4
100148b0:	20c00003 	ldbu	r3,0(r4)
100148b4:	10c5c83a 	sub	r2,r2,r3
100148b8:	f800283a 	ret
100148bc:	0007883a 	mov	r3,zero
100148c0:	20c8d83a 	srl	r4,r4,r3
100148c4:	00c400b4 	movhi	r3,4098
100148c8:	18ce8d04 	addi	r3,r3,14900
100148cc:	00800804 	movi	r2,32
100148d0:	1909883a 	add	r4,r3,r4
100148d4:	20c00003 	ldbu	r3,0(r4)
100148d8:	10c5c83a 	sub	r2,r2,r3
100148dc:	f800283a 	ret

100148e0 <__pack_f>:
100148e0:	21400017 	ldw	r5,0(r4)
100148e4:	01800044 	movi	r6,1
100148e8:	20c00317 	ldw	r3,12(r4)
100148ec:	21c00117 	ldw	r7,4(r4)
100148f0:	3140282e 	bgeu	r6,r5,10014994 <__pack_f+0xb4>
100148f4:	00800104 	movi	r2,4
100148f8:	28802326 	beq	r5,r2,10014988 <__pack_f+0xa8>
100148fc:	00800084 	movi	r2,2
10014900:	28800f26 	beq	r5,r2,10014940 <__pack_f+0x60>
10014904:	18000e26 	beq	r3,zero,10014940 <__pack_f+0x60>
10014908:	21000217 	ldw	r4,8(r4)
1001490c:	00bfe084 	movi	r2,-126
10014910:	20802616 	blt	r4,r2,100149ac <__pack_f+0xcc>
10014914:	00801fc4 	movi	r2,127
10014918:	11001b16 	blt	r2,r4,10014988 <__pack_f+0xa8>
1001491c:	188a703a 	and	r5,r3,r2
10014920:	00801004 	movi	r2,64
10014924:	28801126 	beq	r5,r2,1001496c <__pack_f+0x8c>
10014928:	18c00fc4 	addi	r3,r3,63
1001492c:	18001316 	blt	r3,zero,1001497c <__pack_f+0x9c>
10014930:	21001fc4 	addi	r4,r4,127
10014934:	180690ba 	slli	r3,r3,2
10014938:	1806d27a 	srli	r3,r3,9
1001493c:	00000206 	br	10014948 <__pack_f+0x68>
10014940:	0009883a 	mov	r4,zero
10014944:	0007883a 	mov	r3,zero
10014948:	21003fcc 	andi	r4,r4,255
1001494c:	200895fa 	slli	r4,r4,23
10014950:	380a97fa 	slli	r5,r7,31
10014954:	00802034 	movhi	r2,128
10014958:	10bfffc4 	addi	r2,r2,-1
1001495c:	1886703a 	and	r3,r3,r2
10014960:	1904b03a 	or	r2,r3,r4
10014964:	1144b03a 	or	r2,r2,r5
10014968:	f800283a 	ret
1001496c:	1880200c 	andi	r2,r3,128
10014970:	103fee26 	beq	r2,zero,1001492c <__alt_data_end+0xf801492c>
10014974:	18c01004 	addi	r3,r3,64
10014978:	183fed0e 	bge	r3,zero,10014930 <__alt_data_end+0xf8014930>
1001497c:	1806d07a 	srli	r3,r3,1
10014980:	21002004 	addi	r4,r4,128
10014984:	003feb06 	br	10014934 <__alt_data_end+0xf8014934>
10014988:	013fffc4 	movi	r4,-1
1001498c:	0007883a 	mov	r3,zero
10014990:	003fed06 	br	10014948 <__alt_data_end+0xf8014948>
10014994:	18c00434 	orhi	r3,r3,16
10014998:	00802034 	movhi	r2,128
1001499c:	10bfffc4 	addi	r2,r2,-1
100149a0:	1886703a 	and	r3,r3,r2
100149a4:	013fffc4 	movi	r4,-1
100149a8:	003fe706 	br	10014948 <__alt_data_end+0xf8014948>
100149ac:	1105c83a 	sub	r2,r2,r4
100149b0:	01000644 	movi	r4,25
100149b4:	20801216 	blt	r4,r2,10014a00 <__pack_f+0x120>
100149b8:	3088983a 	sll	r4,r6,r2
100149bc:	1884d83a 	srl	r2,r3,r2
100149c0:	213fffc4 	addi	r4,r4,-1
100149c4:	20c6703a 	and	r3,r4,r3
100149c8:	1806c03a 	cmpne	r3,r3,zero
100149cc:	1884b03a 	or	r2,r3,r2
100149d0:	11001fcc 	andi	r4,r2,127
100149d4:	00c01004 	movi	r3,64
100149d8:	20c00a1e 	bne	r4,r3,10014a04 <__pack_f+0x124>
100149dc:	10c0200c 	andi	r3,r2,128
100149e0:	18000126 	beq	r3,zero,100149e8 <__pack_f+0x108>
100149e4:	10801004 	addi	r2,r2,64
100149e8:	100690ba 	slli	r3,r2,2
100149ec:	01100034 	movhi	r4,16384
100149f0:	1105403a 	cmpgeu	r2,r2,r4
100149f4:	1806d27a 	srli	r3,r3,9
100149f8:	1009883a 	mov	r4,r2
100149fc:	003fd206 	br	10014948 <__alt_data_end+0xf8014948>
10014a00:	0005883a 	mov	r2,zero
10014a04:	10800fc4 	addi	r2,r2,63
10014a08:	003ff706 	br	100149e8 <__alt_data_end+0xf80149e8>

10014a0c <__unpack_f>:
10014a0c:	20c00017 	ldw	r3,0(r4)
10014a10:	00802034 	movhi	r2,128
10014a14:	10bfffc4 	addi	r2,r2,-1
10014a18:	1808d5fa 	srli	r4,r3,23
10014a1c:	180cd7fa 	srli	r6,r3,31
10014a20:	1884703a 	and	r2,r3,r2
10014a24:	21003fcc 	andi	r4,r4,255
10014a28:	29800115 	stw	r6,4(r5)
10014a2c:	2000111e 	bne	r4,zero,10014a74 <__unpack_f+0x68>
10014a30:	10001a26 	beq	r2,zero,10014a9c <__unpack_f+0x90>
10014a34:	00ffe084 	movi	r3,-126
10014a38:	100491fa 	slli	r2,r2,7
10014a3c:	28c00215 	stw	r3,8(r5)
10014a40:	00c000c4 	movi	r3,3
10014a44:	28c00015 	stw	r3,0(r5)
10014a48:	01900034 	movhi	r6,16384
10014a4c:	31bfffc4 	addi	r6,r6,-1
10014a50:	30801036 	bltu	r6,r2,10014a94 <__unpack_f+0x88>
10014a54:	00ffe044 	movi	r3,-127
10014a58:	1085883a 	add	r2,r2,r2
10014a5c:	1809883a 	mov	r4,r3
10014a60:	18ffffc4 	addi	r3,r3,-1
10014a64:	30bffc2e 	bgeu	r6,r2,10014a58 <__alt_data_end+0xf8014a58>
10014a68:	29000215 	stw	r4,8(r5)
10014a6c:	28800315 	stw	r2,12(r5)
10014a70:	f800283a 	ret
10014a74:	01803fc4 	movi	r6,255
10014a78:	21800b26 	beq	r4,r6,10014aa8 <__unpack_f+0x9c>
10014a7c:	100491fa 	slli	r2,r2,7
10014a80:	213fe044 	addi	r4,r4,-127
10014a84:	00c000c4 	movi	r3,3
10014a88:	10900034 	orhi	r2,r2,16384
10014a8c:	29000215 	stw	r4,8(r5)
10014a90:	28c00015 	stw	r3,0(r5)
10014a94:	28800315 	stw	r2,12(r5)
10014a98:	f800283a 	ret
10014a9c:	00800084 	movi	r2,2
10014aa0:	28800015 	stw	r2,0(r5)
10014aa4:	f800283a 	ret
10014aa8:	10000526 	beq	r2,zero,10014ac0 <__unpack_f+0xb4>
10014aac:	18c0042c 	andhi	r3,r3,16
10014ab0:	18000626 	beq	r3,zero,10014acc <__unpack_f+0xc0>
10014ab4:	00c00044 	movi	r3,1
10014ab8:	28c00015 	stw	r3,0(r5)
10014abc:	003ff506 	br	10014a94 <__alt_data_end+0xf8014a94>
10014ac0:	00800104 	movi	r2,4
10014ac4:	28800015 	stw	r2,0(r5)
10014ac8:	f800283a 	ret
10014acc:	28000015 	stw	zero,0(r5)
10014ad0:	003ff006 	br	10014a94 <__alt_data_end+0xf8014a94>

10014ad4 <__fpcmp_parts_f>:
10014ad4:	20c00017 	ldw	r3,0(r4)
10014ad8:	00800044 	movi	r2,1
10014adc:	10c0172e 	bgeu	r2,r3,10014b3c <__fpcmp_parts_f+0x68>
10014ae0:	29800017 	ldw	r6,0(r5)
10014ae4:	1180152e 	bgeu	r2,r6,10014b3c <__fpcmp_parts_f+0x68>
10014ae8:	01c00104 	movi	r7,4
10014aec:	19c02326 	beq	r3,r7,10014b7c <__fpcmp_parts_f+0xa8>
10014af0:	31c00926 	beq	r6,r7,10014b18 <__fpcmp_parts_f+0x44>
10014af4:	01c00084 	movi	r7,2
10014af8:	19c00626 	beq	r3,r7,10014b14 <__fpcmp_parts_f+0x40>
10014afc:	31c01126 	beq	r6,r7,10014b44 <__fpcmp_parts_f+0x70>
10014b00:	20c00117 	ldw	r3,4(r4)
10014b04:	29800117 	ldw	r6,4(r5)
10014b08:	19801226 	beq	r3,r6,10014b54 <__fpcmp_parts_f+0x80>
10014b0c:	1800041e 	bne	r3,zero,10014b20 <__fpcmp_parts_f+0x4c>
10014b10:	f800283a 	ret
10014b14:	30c01526 	beq	r6,r3,10014b6c <__fpcmp_parts_f+0x98>
10014b18:	28800117 	ldw	r2,4(r5)
10014b1c:	1000071e 	bne	r2,zero,10014b3c <__fpcmp_parts_f+0x68>
10014b20:	00bfffc4 	movi	r2,-1
10014b24:	f800283a 	ret
10014b28:	39801216 	blt	r7,r6,10014b74 <__fpcmp_parts_f+0xa0>
10014b2c:	21000317 	ldw	r4,12(r4)
10014b30:	28800317 	ldw	r2,12(r5)
10014b34:	11000c2e 	bgeu	r2,r4,10014b68 <__fpcmp_parts_f+0x94>
10014b38:	183ff91e 	bne	r3,zero,10014b20 <__alt_data_end+0xf8014b20>
10014b3c:	00800044 	movi	r2,1
10014b40:	f800283a 	ret
10014b44:	20800117 	ldw	r2,4(r4)
10014b48:	103ff51e 	bne	r2,zero,10014b20 <__alt_data_end+0xf8014b20>
10014b4c:	00800044 	movi	r2,1
10014b50:	f800283a 	ret
10014b54:	21c00217 	ldw	r7,8(r4)
10014b58:	29800217 	ldw	r6,8(r5)
10014b5c:	31fff20e 	bge	r6,r7,10014b28 <__alt_data_end+0xf8014b28>
10014b60:	183fef1e 	bne	r3,zero,10014b20 <__alt_data_end+0xf8014b20>
10014b64:	f800283a 	ret
10014b68:	20800236 	bltu	r4,r2,10014b74 <__fpcmp_parts_f+0xa0>
10014b6c:	0005883a 	mov	r2,zero
10014b70:	f800283a 	ret
10014b74:	183fea26 	beq	r3,zero,10014b20 <__alt_data_end+0xf8014b20>
10014b78:	003ff006 	br	10014b3c <__alt_data_end+0xf8014b3c>
10014b7c:	30fff11e 	bne	r6,r3,10014b44 <__alt_data_end+0xf8014b44>
10014b80:	28c00117 	ldw	r3,4(r5)
10014b84:	20800117 	ldw	r2,4(r4)
10014b88:	1885c83a 	sub	r2,r3,r2
10014b8c:	f800283a 	ret

10014b90 <_fclose_r>:
10014b90:	defffc04 	addi	sp,sp,-16
10014b94:	dc400115 	stw	r17,4(sp)
10014b98:	dc000015 	stw	r16,0(sp)
10014b9c:	dfc00315 	stw	ra,12(sp)
10014ba0:	dc800215 	stw	r18,8(sp)
10014ba4:	2821883a 	mov	r16,r5
10014ba8:	2023883a 	mov	r17,r4
10014bac:	28003426 	beq	r5,zero,10014c80 <_fclose_r+0xf0>
10014bb0:	00153040 	call	10015304 <__sfp_lock_acquire>
10014bb4:	88000226 	beq	r17,zero,10014bc0 <_fclose_r+0x30>
10014bb8:	88800e17 	ldw	r2,56(r17)
10014bbc:	10003826 	beq	r2,zero,10014ca0 <_fclose_r+0x110>
10014bc0:	8080030f 	ldh	r2,12(r16)
10014bc4:	10002526 	beq	r2,zero,10014c5c <_fclose_r+0xcc>
10014bc8:	8809883a 	mov	r4,r17
10014bcc:	800b883a 	mov	r5,r16
10014bd0:	0014ce00 	call	10014ce0 <_fflush_r>
10014bd4:	1025883a 	mov	r18,r2
10014bd8:	80800b17 	ldw	r2,44(r16)
10014bdc:	10000426 	beq	r2,zero,10014bf0 <_fclose_r+0x60>
10014be0:	81400717 	ldw	r5,28(r16)
10014be4:	8809883a 	mov	r4,r17
10014be8:	103ee83a 	callr	r2
10014bec:	10003516 	blt	r2,zero,10014cc4 <_fclose_r+0x134>
10014bf0:	8080030b 	ldhu	r2,12(r16)
10014bf4:	1080200c 	andi	r2,r2,128
10014bf8:	10bfffcc 	andi	r2,r2,65535
10014bfc:	10a0001c 	xori	r2,r2,32768
10014c00:	10a00004 	addi	r2,r2,-32768
10014c04:	10002b1e 	bne	r2,zero,10014cb4 <_fclose_r+0x124>
10014c08:	81400c17 	ldw	r5,48(r16)
10014c0c:	28000526 	beq	r5,zero,10014c24 <_fclose_r+0x94>
10014c10:	80801004 	addi	r2,r16,64
10014c14:	28800226 	beq	r5,r2,10014c20 <_fclose_r+0x90>
10014c18:	8809883a 	mov	r4,r17
10014c1c:	00158480 	call	10015848 <_free_r>
10014c20:	80000c15 	stw	zero,48(r16)
10014c24:	81401117 	ldw	r5,68(r16)
10014c28:	28000326 	beq	r5,zero,10014c38 <_fclose_r+0xa8>
10014c2c:	8809883a 	mov	r4,r17
10014c30:	00158480 	call	10015848 <_free_r>
10014c34:	80001115 	stw	zero,68(r16)
10014c38:	8000030d 	sth	zero,12(r16)
10014c3c:	00153080 	call	10015308 <__sfp_lock_release>
10014c40:	9005883a 	mov	r2,r18
10014c44:	dfc00317 	ldw	ra,12(sp)
10014c48:	dc800217 	ldw	r18,8(sp)
10014c4c:	dc400117 	ldw	r17,4(sp)
10014c50:	dc000017 	ldw	r16,0(sp)
10014c54:	dec00404 	addi	sp,sp,16
10014c58:	f800283a 	ret
10014c5c:	00153080 	call	10015308 <__sfp_lock_release>
10014c60:	0025883a 	mov	r18,zero
10014c64:	9005883a 	mov	r2,r18
10014c68:	dfc00317 	ldw	ra,12(sp)
10014c6c:	dc800217 	ldw	r18,8(sp)
10014c70:	dc400117 	ldw	r17,4(sp)
10014c74:	dc000017 	ldw	r16,0(sp)
10014c78:	dec00404 	addi	sp,sp,16
10014c7c:	f800283a 	ret
10014c80:	0025883a 	mov	r18,zero
10014c84:	9005883a 	mov	r2,r18
10014c88:	dfc00317 	ldw	ra,12(sp)
10014c8c:	dc800217 	ldw	r18,8(sp)
10014c90:	dc400117 	ldw	r17,4(sp)
10014c94:	dc000017 	ldw	r16,0(sp)
10014c98:	dec00404 	addi	sp,sp,16
10014c9c:	f800283a 	ret
10014ca0:	8809883a 	mov	r4,r17
10014ca4:	00150fc0 	call	100150fc <__sinit>
10014ca8:	8080030f 	ldh	r2,12(r16)
10014cac:	103fc61e 	bne	r2,zero,10014bc8 <__alt_data_end+0xf8014bc8>
10014cb0:	003fea06 	br	10014c5c <__alt_data_end+0xf8014c5c>
10014cb4:	81400417 	ldw	r5,16(r16)
10014cb8:	8809883a 	mov	r4,r17
10014cbc:	00158480 	call	10015848 <_free_r>
10014cc0:	003fd106 	br	10014c08 <__alt_data_end+0xf8014c08>
10014cc4:	04bfffc4 	movi	r18,-1
10014cc8:	003fc906 	br	10014bf0 <__alt_data_end+0xf8014bf0>

10014ccc <fclose>:
10014ccc:	008400b4 	movhi	r2,4098
10014cd0:	1096f004 	addi	r2,r2,23488
10014cd4:	200b883a 	mov	r5,r4
10014cd8:	11000017 	ldw	r4,0(r2)
10014cdc:	0014b901 	jmpi	10014b90 <_fclose_r>

10014ce0 <_fflush_r>:
10014ce0:	defffb04 	addi	sp,sp,-20
10014ce4:	dcc00315 	stw	r19,12(sp)
10014ce8:	dc400115 	stw	r17,4(sp)
10014cec:	dfc00415 	stw	ra,16(sp)
10014cf0:	dc800215 	stw	r18,8(sp)
10014cf4:	dc000015 	stw	r16,0(sp)
10014cf8:	2027883a 	mov	r19,r4
10014cfc:	2823883a 	mov	r17,r5
10014d00:	20000226 	beq	r4,zero,10014d0c <_fflush_r+0x2c>
10014d04:	20800e17 	ldw	r2,56(r4)
10014d08:	10005726 	beq	r2,zero,10014e68 <_fflush_r+0x188>
10014d0c:	8880030b 	ldhu	r2,12(r17)
10014d10:	10c0020c 	andi	r3,r2,8
10014d14:	18ffffcc 	andi	r3,r3,65535
10014d18:	18e0001c 	xori	r3,r3,32768
10014d1c:	18e00004 	addi	r3,r3,-32768
10014d20:	1800311e 	bne	r3,zero,10014de8 <_fflush_r+0x108>
10014d24:	89000117 	ldw	r4,4(r17)
10014d28:	10c20014 	ori	r3,r2,2048
10014d2c:	88c0030d 	sth	r3,12(r17)
10014d30:	180b883a 	mov	r5,r3
10014d34:	0100520e 	bge	zero,r4,10014e80 <_fflush_r+0x1a0>
10014d38:	88c00a17 	ldw	r3,40(r17)
10014d3c:	18002226 	beq	r3,zero,10014dc8 <_fflush_r+0xe8>
10014d40:	1084000c 	andi	r2,r2,4096
10014d44:	10bfffcc 	andi	r2,r2,65535
10014d48:	10a0001c 	xori	r2,r2,32768
10014d4c:	10a00004 	addi	r2,r2,-32768
10014d50:	10004e26 	beq	r2,zero,10014e8c <_fflush_r+0x1ac>
10014d54:	8c001417 	ldw	r16,80(r17)
10014d58:	2940010c 	andi	r5,r5,4
10014d5c:	297fffcc 	andi	r5,r5,65535
10014d60:	2960001c 	xori	r5,r5,32768
10014d64:	29600004 	addi	r5,r5,-32768
10014d68:	28000626 	beq	r5,zero,10014d84 <_fflush_r+0xa4>
10014d6c:	89000117 	ldw	r4,4(r17)
10014d70:	88800c17 	ldw	r2,48(r17)
10014d74:	8121c83a 	sub	r16,r16,r4
10014d78:	10000226 	beq	r2,zero,10014d84 <_fflush_r+0xa4>
10014d7c:	88800f17 	ldw	r2,60(r17)
10014d80:	80a1c83a 	sub	r16,r16,r2
10014d84:	89400717 	ldw	r5,28(r17)
10014d88:	9809883a 	mov	r4,r19
10014d8c:	800d883a 	mov	r6,r16
10014d90:	000f883a 	mov	r7,zero
10014d94:	183ee83a 	callr	r3
10014d98:	8080281e 	bne	r16,r2,10014e3c <_fflush_r+0x15c>
10014d9c:	8880030b 	ldhu	r2,12(r17)
10014da0:	88c00417 	ldw	r3,16(r17)
10014da4:	88000115 	stw	zero,4(r17)
10014da8:	113dffcc 	andi	r4,r2,63487
10014dac:	1084000c 	andi	r2,r2,4096
10014db0:	10bfffcc 	andi	r2,r2,65535
10014db4:	10a0001c 	xori	r2,r2,32768
10014db8:	8900030d 	sth	r4,12(r17)
10014dbc:	88c00015 	stw	r3,0(r17)
10014dc0:	10a00004 	addi	r2,r2,-32768
10014dc4:	10002c1e 	bne	r2,zero,10014e78 <_fflush_r+0x198>
10014dc8:	0005883a 	mov	r2,zero
10014dcc:	dfc00417 	ldw	ra,16(sp)
10014dd0:	dcc00317 	ldw	r19,12(sp)
10014dd4:	dc800217 	ldw	r18,8(sp)
10014dd8:	dc400117 	ldw	r17,4(sp)
10014ddc:	dc000017 	ldw	r16,0(sp)
10014de0:	dec00504 	addi	sp,sp,20
10014de4:	f800283a 	ret
10014de8:	8c800417 	ldw	r18,16(r17)
10014dec:	903ff626 	beq	r18,zero,10014dc8 <__alt_data_end+0xf8014dc8>
10014df0:	8c000017 	ldw	r16,0(r17)
10014df4:	108000cc 	andi	r2,r2,3
10014df8:	8c800015 	stw	r18,0(r17)
10014dfc:	84a1c83a 	sub	r16,r16,r18
10014e00:	10001b1e 	bne	r2,zero,10014e70 <_fflush_r+0x190>
10014e04:	88800517 	ldw	r2,20(r17)
10014e08:	88800215 	stw	r2,8(r17)
10014e0c:	04000316 	blt	zero,r16,10014e1c <_fflush_r+0x13c>
10014e10:	003fed06 	br	10014dc8 <__alt_data_end+0xf8014dc8>
10014e14:	90a5883a 	add	r18,r18,r2
10014e18:	043feb0e 	bge	zero,r16,10014dc8 <__alt_data_end+0xf8014dc8>
10014e1c:	88800917 	ldw	r2,36(r17)
10014e20:	89400717 	ldw	r5,28(r17)
10014e24:	800f883a 	mov	r7,r16
10014e28:	900d883a 	mov	r6,r18
10014e2c:	9809883a 	mov	r4,r19
10014e30:	103ee83a 	callr	r2
10014e34:	80a1c83a 	sub	r16,r16,r2
10014e38:	00bff616 	blt	zero,r2,10014e14 <__alt_data_end+0xf8014e14>
10014e3c:	88c0030b 	ldhu	r3,12(r17)
10014e40:	00bfffc4 	movi	r2,-1
10014e44:	18c01014 	ori	r3,r3,64
10014e48:	88c0030d 	sth	r3,12(r17)
10014e4c:	dfc00417 	ldw	ra,16(sp)
10014e50:	dcc00317 	ldw	r19,12(sp)
10014e54:	dc800217 	ldw	r18,8(sp)
10014e58:	dc400117 	ldw	r17,4(sp)
10014e5c:	dc000017 	ldw	r16,0(sp)
10014e60:	dec00504 	addi	sp,sp,20
10014e64:	f800283a 	ret
10014e68:	00150fc0 	call	100150fc <__sinit>
10014e6c:	003fa706 	br	10014d0c <__alt_data_end+0xf8014d0c>
10014e70:	0005883a 	mov	r2,zero
10014e74:	003fe406 	br	10014e08 <__alt_data_end+0xf8014e08>
10014e78:	8c001415 	stw	r16,80(r17)
10014e7c:	003fd206 	br	10014dc8 <__alt_data_end+0xf8014dc8>
10014e80:	88c00f17 	ldw	r3,60(r17)
10014e84:	00ffac16 	blt	zero,r3,10014d38 <__alt_data_end+0xf8014d38>
10014e88:	003fcf06 	br	10014dc8 <__alt_data_end+0xf8014dc8>
10014e8c:	89400717 	ldw	r5,28(r17)
10014e90:	9809883a 	mov	r4,r19
10014e94:	000d883a 	mov	r6,zero
10014e98:	01c00044 	movi	r7,1
10014e9c:	183ee83a 	callr	r3
10014ea0:	1021883a 	mov	r16,r2
10014ea4:	00bfffc4 	movi	r2,-1
10014ea8:	80800326 	beq	r16,r2,10014eb8 <_fflush_r+0x1d8>
10014eac:	8940030b 	ldhu	r5,12(r17)
10014eb0:	88c00a17 	ldw	r3,40(r17)
10014eb4:	003fa806 	br	10014d58 <__alt_data_end+0xf8014d58>
10014eb8:	98c00017 	ldw	r3,0(r19)
10014ebc:	00800744 	movi	r2,29
10014ec0:	18bfde1e 	bne	r3,r2,10014e3c <__alt_data_end+0xf8014e3c>
10014ec4:	003fc006 	br	10014dc8 <__alt_data_end+0xf8014dc8>

10014ec8 <fflush>:
10014ec8:	200b883a 	mov	r5,r4
10014ecc:	20000426 	beq	r4,zero,10014ee0 <fflush+0x18>
10014ed0:	008400b4 	movhi	r2,4098
10014ed4:	1096f004 	addi	r2,r2,23488
10014ed8:	11000017 	ldw	r4,0(r2)
10014edc:	0014ce01 	jmpi	10014ce0 <_fflush_r>
10014ee0:	008400b4 	movhi	r2,4098
10014ee4:	1096ef04 	addi	r2,r2,23484
10014ee8:	11000017 	ldw	r4,0(r2)
10014eec:	01440074 	movhi	r5,4097
10014ef0:	29533804 	addi	r5,r5,19680
10014ef4:	00161e41 	jmpi	100161e4 <_fwalk_reent>

10014ef8 <_fgets_r>:
10014ef8:	defff704 	addi	sp,sp,-36
10014efc:	dd800715 	stw	r22,28(sp)
10014f00:	dd400615 	stw	r21,24(sp)
10014f04:	dc400215 	stw	r17,8(sp)
10014f08:	dfc00815 	stw	ra,32(sp)
10014f0c:	dd000515 	stw	r20,20(sp)
10014f10:	dcc00415 	stw	r19,16(sp)
10014f14:	dc800315 	stw	r18,12(sp)
10014f18:	dc000115 	stw	r16,4(sp)
10014f1c:	00800044 	movi	r2,1
10014f20:	202b883a 	mov	r21,r4
10014f24:	282d883a 	mov	r22,r5
10014f28:	3823883a 	mov	r17,r7
10014f2c:	11803f0e 	bge	r2,r6,1001502c <_fgets_r+0x134>
10014f30:	20000226 	beq	r4,zero,10014f3c <_fgets_r+0x44>
10014f34:	20800e17 	ldw	r2,56(r4)
10014f38:	10002d26 	beq	r2,zero,10014ff0 <_fgets_r+0xf8>
10014f3c:	34bfffc4 	addi	r18,r6,-1
10014f40:	b027883a 	mov	r19,r22
10014f44:	00001506 	br	10014f9c <_fgets_r+0xa4>
10014f48:	01400284 	movi	r5,10
10014f4c:	8d000017 	ldw	r20,0(r17)
10014f50:	9400012e 	bgeu	r18,r16,10014f58 <_fgets_r+0x60>
10014f54:	9021883a 	mov	r16,r18
10014f58:	a009883a 	mov	r4,r20
10014f5c:	800d883a 	mov	r6,r16
10014f60:	0016ce00 	call	10016ce0 <memchr>
10014f64:	9809883a 	mov	r4,r19
10014f68:	a00b883a 	mov	r5,r20
10014f6c:	800d883a 	mov	r6,r16
10014f70:	9425c83a 	sub	r18,r18,r16
10014f74:	1000221e 	bne	r2,zero,10015000 <_fgets_r+0x108>
10014f78:	88800117 	ldw	r2,4(r17)
10014f7c:	88c00017 	ldw	r3,0(r17)
10014f80:	9c27883a 	add	r19,r19,r16
10014f84:	1405c83a 	sub	r2,r2,r16
10014f88:	1c21883a 	add	r16,r3,r16
10014f8c:	88800115 	stw	r2,4(r17)
10014f90:	8c000015 	stw	r16,0(r17)
10014f94:	0016dd80 	call	10016dd8 <memcpy>
10014f98:	90000926 	beq	r18,zero,10014fc0 <_fgets_r+0xc8>
10014f9c:	8c000117 	ldw	r16,4(r17)
10014fa0:	803fe91e 	bne	r16,zero,10014f48 <__alt_data_end+0xf8014f48>
10014fa4:	a809883a 	mov	r4,r21
10014fa8:	880b883a 	mov	r5,r17
10014fac:	0017f9c0 	call	10017f9c <__srefill_r>
10014fb0:	1000021e 	bne	r2,zero,10014fbc <_fgets_r+0xc4>
10014fb4:	8c000117 	ldw	r16,4(r17)
10014fb8:	003fe306 	br	10014f48 <__alt_data_end+0xf8014f48>
10014fbc:	9d801b26 	beq	r19,r22,1001502c <_fgets_r+0x134>
10014fc0:	98000005 	stb	zero,0(r19)
10014fc4:	b005883a 	mov	r2,r22
10014fc8:	dfc00817 	ldw	ra,32(sp)
10014fcc:	dd800717 	ldw	r22,28(sp)
10014fd0:	dd400617 	ldw	r21,24(sp)
10014fd4:	dd000517 	ldw	r20,20(sp)
10014fd8:	dcc00417 	ldw	r19,16(sp)
10014fdc:	dc800317 	ldw	r18,12(sp)
10014fe0:	dc400217 	ldw	r17,8(sp)
10014fe4:	dc000117 	ldw	r16,4(sp)
10014fe8:	dec00904 	addi	sp,sp,36
10014fec:	f800283a 	ret
10014ff0:	d9800015 	stw	r6,0(sp)
10014ff4:	00150fc0 	call	100150fc <__sinit>
10014ff8:	d9800017 	ldw	r6,0(sp)
10014ffc:	003fcf06 	br	10014f3c <__alt_data_end+0xf8014f3c>
10015000:	88c00117 	ldw	r3,4(r17)
10015004:	10800044 	addi	r2,r2,1
10015008:	1521c83a 	sub	r16,r2,r20
1001500c:	1c07c83a 	sub	r3,r3,r16
10015010:	800d883a 	mov	r6,r16
10015014:	88c00115 	stw	r3,4(r17)
10015018:	88800015 	stw	r2,0(r17)
1001501c:	9c21883a 	add	r16,r19,r16
10015020:	0016dd80 	call	10016dd8 <memcpy>
10015024:	80000005 	stb	zero,0(r16)
10015028:	003fe606 	br	10014fc4 <__alt_data_end+0xf8014fc4>
1001502c:	002d883a 	mov	r22,zero
10015030:	003fe406 	br	10014fc4 <__alt_data_end+0xf8014fc4>

10015034 <fgets>:
10015034:	008400b4 	movhi	r2,4098
10015038:	1096f004 	addi	r2,r2,23488
1001503c:	2007883a 	mov	r3,r4
10015040:	11000017 	ldw	r4,0(r2)
10015044:	2805883a 	mov	r2,r5
10015048:	300f883a 	mov	r7,r6
1001504c:	180b883a 	mov	r5,r3
10015050:	100d883a 	mov	r6,r2
10015054:	0014ef81 	jmpi	10014ef8 <_fgets_r>

10015058 <__fp_lock>:
10015058:	0005883a 	mov	r2,zero
1001505c:	f800283a 	ret

10015060 <__fp_unlock>:
10015060:	0005883a 	mov	r2,zero
10015064:	f800283a 	ret

10015068 <_cleanup_r>:
10015068:	01440074 	movhi	r5,4097
1001506c:	29533304 	addi	r5,r5,19660
10015070:	001613c1 	jmpi	1001613c <_fwalk>

10015074 <__sfmoreglue>:
10015074:	defffc04 	addi	sp,sp,-16
10015078:	dc800215 	stw	r18,8(sp)
1001507c:	2825883a 	mov	r18,r5
10015080:	dc000015 	stw	r16,0(sp)
10015084:	01401704 	movi	r5,92
10015088:	2021883a 	mov	r16,r4
1001508c:	9009883a 	mov	r4,r18
10015090:	dfc00315 	stw	ra,12(sp)
10015094:	dc400115 	stw	r17,4(sp)
10015098:	00146fc0 	call	100146fc <__mulsi3>
1001509c:	8009883a 	mov	r4,r16
100150a0:	11400304 	addi	r5,r2,12
100150a4:	1023883a 	mov	r17,r2
100150a8:	001655c0 	call	1001655c <_malloc_r>
100150ac:	1021883a 	mov	r16,r2
100150b0:	10000726 	beq	r2,zero,100150d0 <__sfmoreglue+0x5c>
100150b4:	11000304 	addi	r4,r2,12
100150b8:	10000015 	stw	zero,0(r2)
100150bc:	14800115 	stw	r18,4(r2)
100150c0:	11000215 	stw	r4,8(r2)
100150c4:	000b883a 	mov	r5,zero
100150c8:	880d883a 	mov	r6,r17
100150cc:	0016f180 	call	10016f18 <memset>
100150d0:	8005883a 	mov	r2,r16
100150d4:	dfc00317 	ldw	ra,12(sp)
100150d8:	dc800217 	ldw	r18,8(sp)
100150dc:	dc400117 	ldw	r17,4(sp)
100150e0:	dc000017 	ldw	r16,0(sp)
100150e4:	dec00404 	addi	sp,sp,16
100150e8:	f800283a 	ret

100150ec <_cleanup>:
100150ec:	008400b4 	movhi	r2,4098
100150f0:	1096ef04 	addi	r2,r2,23484
100150f4:	11000017 	ldw	r4,0(r2)
100150f8:	00150681 	jmpi	10015068 <_cleanup_r>

100150fc <__sinit>:
100150fc:	20800e17 	ldw	r2,56(r4)
10015100:	1000401e 	bne	r2,zero,10015204 <__sinit+0x108>
10015104:	21400117 	ldw	r5,4(r4)
10015108:	01840074 	movhi	r6,4097
1001510c:	31941a04 	addi	r6,r6,20584
10015110:	20c00217 	ldw	r3,8(r4)
10015114:	21800f15 	stw	r6,60(r4)
10015118:	2080bb04 	addi	r2,r4,748
1001511c:	02400044 	movi	r9,1
10015120:	018000c4 	movi	r6,3
10015124:	2180b915 	stw	r6,740(r4)
10015128:	2080ba15 	stw	r2,744(r4)
1001512c:	22400e15 	stw	r9,56(r4)
10015130:	20800317 	ldw	r2,12(r4)
10015134:	2000b815 	stw	zero,736(r4)
10015138:	020400b4 	movhi	r8,4098
1001513c:	42208e04 	addi	r8,r8,-32200
10015140:	01c400b4 	movhi	r7,4098
10015144:	39e0a304 	addi	r7,r7,-32116
10015148:	018400b4 	movhi	r6,4098
1001514c:	31a0c504 	addi	r6,r6,-31980
10015150:	010400b4 	movhi	r4,4098
10015154:	2120dc04 	addi	r4,r4,-31888
10015158:	02800104 	movi	r10,4
1001515c:	28000015 	stw	zero,0(r5)
10015160:	28000115 	stw	zero,4(r5)
10015164:	28000215 	stw	zero,8(r5)
10015168:	2a80030d 	sth	r10,12(r5)
1001516c:	2800038d 	sth	zero,14(r5)
10015170:	28000415 	stw	zero,16(r5)
10015174:	28000515 	stw	zero,20(r5)
10015178:	28000615 	stw	zero,24(r5)
1001517c:	29400715 	stw	r5,28(r5)
10015180:	2a000815 	stw	r8,32(r5)
10015184:	29c00915 	stw	r7,36(r5)
10015188:	29800a15 	stw	r6,40(r5)
1001518c:	29000b15 	stw	r4,44(r5)
10015190:	01400284 	movi	r5,10
10015194:	18000015 	stw	zero,0(r3)
10015198:	18000115 	stw	zero,4(r3)
1001519c:	18000215 	stw	zero,8(r3)
100151a0:	1940030d 	sth	r5,12(r3)
100151a4:	1a40038d 	sth	r9,14(r3)
100151a8:	18000415 	stw	zero,16(r3)
100151ac:	18000515 	stw	zero,20(r3)
100151b0:	18000615 	stw	zero,24(r3)
100151b4:	18c00715 	stw	r3,28(r3)
100151b8:	1a000815 	stw	r8,32(r3)
100151bc:	19c00915 	stw	r7,36(r3)
100151c0:	19800a15 	stw	r6,40(r3)
100151c4:	19000b15 	stw	r4,44(r3)
100151c8:	00c00484 	movi	r3,18
100151cc:	10c0030d 	sth	r3,12(r2)
100151d0:	00c00084 	movi	r3,2
100151d4:	10000015 	stw	zero,0(r2)
100151d8:	10000115 	stw	zero,4(r2)
100151dc:	10000215 	stw	zero,8(r2)
100151e0:	10c0038d 	sth	r3,14(r2)
100151e4:	10000415 	stw	zero,16(r2)
100151e8:	10000515 	stw	zero,20(r2)
100151ec:	10000615 	stw	zero,24(r2)
100151f0:	10800715 	stw	r2,28(r2)
100151f4:	12000815 	stw	r8,32(r2)
100151f8:	11c00915 	stw	r7,36(r2)
100151fc:	11800a15 	stw	r6,40(r2)
10015200:	11000b15 	stw	r4,44(r2)
10015204:	f800283a 	ret

10015208 <__sfp>:
10015208:	defffc04 	addi	sp,sp,-16
1001520c:	008400b4 	movhi	r2,4098
10015210:	1096ef04 	addi	r2,r2,23484
10015214:	dc400115 	stw	r17,4(sp)
10015218:	14400017 	ldw	r17,0(r2)
1001521c:	dc800215 	stw	r18,8(sp)
10015220:	dfc00315 	stw	ra,12(sp)
10015224:	88800e17 	ldw	r2,56(r17)
10015228:	dc000015 	stw	r16,0(sp)
1001522c:	2025883a 	mov	r18,r4
10015230:	10002826 	beq	r2,zero,100152d4 <__sfp+0xcc>
10015234:	8c40b804 	addi	r17,r17,736
10015238:	043fffc4 	movi	r16,-1
1001523c:	89400117 	ldw	r5,4(r17)
10015240:	88800217 	ldw	r2,8(r17)
10015244:	297fffc4 	addi	r5,r5,-1
10015248:	28000a16 	blt	r5,zero,10015274 <__sfp+0x6c>
1001524c:	10c0030f 	ldh	r3,12(r2)
10015250:	18000c26 	beq	r3,zero,10015284 <__sfp+0x7c>
10015254:	10c01a04 	addi	r3,r2,104
10015258:	00000206 	br	10015264 <__sfp+0x5c>
1001525c:	19bfe90f 	ldh	r6,-92(r3)
10015260:	30000826 	beq	r6,zero,10015284 <__sfp+0x7c>
10015264:	297fffc4 	addi	r5,r5,-1
10015268:	18bffd04 	addi	r2,r3,-12
1001526c:	18c01704 	addi	r3,r3,92
10015270:	2c3ffa1e 	bne	r5,r16,1001525c <__alt_data_end+0xf801525c>
10015274:	88800017 	ldw	r2,0(r17)
10015278:	10001926 	beq	r2,zero,100152e0 <__sfp+0xd8>
1001527c:	1023883a 	mov	r17,r2
10015280:	003fee06 	br	1001523c <__alt_data_end+0xf801523c>
10015284:	00ffffc4 	movi	r3,-1
10015288:	10c0038d 	sth	r3,14(r2)
1001528c:	00c00044 	movi	r3,1
10015290:	10c0030d 	sth	r3,12(r2)
10015294:	10000015 	stw	zero,0(r2)
10015298:	10000215 	stw	zero,8(r2)
1001529c:	10000115 	stw	zero,4(r2)
100152a0:	10000415 	stw	zero,16(r2)
100152a4:	10000515 	stw	zero,20(r2)
100152a8:	10000615 	stw	zero,24(r2)
100152ac:	10000c15 	stw	zero,48(r2)
100152b0:	10000d15 	stw	zero,52(r2)
100152b4:	10001115 	stw	zero,68(r2)
100152b8:	10001215 	stw	zero,72(r2)
100152bc:	dfc00317 	ldw	ra,12(sp)
100152c0:	dc800217 	ldw	r18,8(sp)
100152c4:	dc400117 	ldw	r17,4(sp)
100152c8:	dc000017 	ldw	r16,0(sp)
100152cc:	dec00404 	addi	sp,sp,16
100152d0:	f800283a 	ret
100152d4:	8809883a 	mov	r4,r17
100152d8:	00150fc0 	call	100150fc <__sinit>
100152dc:	003fd506 	br	10015234 <__alt_data_end+0xf8015234>
100152e0:	9009883a 	mov	r4,r18
100152e4:	01400104 	movi	r5,4
100152e8:	00150740 	call	10015074 <__sfmoreglue>
100152ec:	88800015 	stw	r2,0(r17)
100152f0:	103fe21e 	bne	r2,zero,1001527c <__alt_data_end+0xf801527c>
100152f4:	00800304 	movi	r2,12
100152f8:	90800015 	stw	r2,0(r18)
100152fc:	0005883a 	mov	r2,zero
10015300:	003fee06 	br	100152bc <__alt_data_end+0xf80152bc>

10015304 <__sfp_lock_acquire>:
10015304:	f800283a 	ret

10015308 <__sfp_lock_release>:
10015308:	f800283a 	ret

1001530c <__sinit_lock_acquire>:
1001530c:	f800283a 	ret

10015310 <__sinit_lock_release>:
10015310:	f800283a 	ret

10015314 <__fp_lock_all>:
10015314:	008400b4 	movhi	r2,4098
10015318:	1096f004 	addi	r2,r2,23488
1001531c:	11000017 	ldw	r4,0(r2)
10015320:	01440074 	movhi	r5,4097
10015324:	29541604 	addi	r5,r5,20568
10015328:	001613c1 	jmpi	1001613c <_fwalk>

1001532c <__fp_unlock_all>:
1001532c:	008400b4 	movhi	r2,4098
10015330:	1096f004 	addi	r2,r2,23488
10015334:	11000017 	ldw	r4,0(r2)
10015338:	01440074 	movhi	r5,4097
1001533c:	29541804 	addi	r5,r5,20576
10015340:	001613c1 	jmpi	1001613c <_fwalk>

10015344 <_fopen_r>:
10015344:	defffa04 	addi	sp,sp,-24
10015348:	dcc00415 	stw	r19,16(sp)
1001534c:	2827883a 	mov	r19,r5
10015350:	300b883a 	mov	r5,r6
10015354:	d80d883a 	mov	r6,sp
10015358:	dc800315 	stw	r18,12(sp)
1001535c:	dc400215 	stw	r17,8(sp)
10015360:	dfc00515 	stw	ra,20(sp)
10015364:	dc000115 	stw	r16,4(sp)
10015368:	2025883a 	mov	r18,r4
1001536c:	001be180 	call	1001be18 <__sflags>
10015370:	1023883a 	mov	r17,r2
10015374:	10002926 	beq	r2,zero,1001541c <_fopen_r+0xd8>
10015378:	9009883a 	mov	r4,r18
1001537c:	00152080 	call	10015208 <__sfp>
10015380:	1021883a 	mov	r16,r2
10015384:	10002526 	beq	r2,zero,1001541c <_fopen_r+0xd8>
10015388:	d9800017 	ldw	r6,0(sp)
1001538c:	9009883a 	mov	r4,r18
10015390:	980b883a 	mov	r5,r19
10015394:	01c06d84 	movi	r7,438
10015398:	0016ff40 	call	10016ff4 <_open_r>
1001539c:	10001c16 	blt	r2,zero,10015410 <_fopen_r+0xcc>
100153a0:	8080038d 	sth	r2,14(r16)
100153a4:	008400b4 	movhi	r2,4098
100153a8:	10a08e04 	addi	r2,r2,-32200
100153ac:	80800815 	stw	r2,32(r16)
100153b0:	008400b4 	movhi	r2,4098
100153b4:	10a0a304 	addi	r2,r2,-32116
100153b8:	80800915 	stw	r2,36(r16)
100153bc:	008400b4 	movhi	r2,4098
100153c0:	10a0c504 	addi	r2,r2,-31980
100153c4:	88c0400c 	andi	r3,r17,256
100153c8:	80800a15 	stw	r2,40(r16)
100153cc:	008400b4 	movhi	r2,4098
100153d0:	10a0dc04 	addi	r2,r2,-31888
100153d4:	80800b15 	stw	r2,44(r16)
100153d8:	18bfffcc 	andi	r2,r3,65535
100153dc:	10a0001c 	xori	r2,r2,32768
100153e0:	8440030d 	sth	r17,12(r16)
100153e4:	84000715 	stw	r16,28(r16)
100153e8:	10a00004 	addi	r2,r2,-32768
100153ec:	1000141e 	bne	r2,zero,10015440 <_fopen_r+0xfc>
100153f0:	8005883a 	mov	r2,r16
100153f4:	dfc00517 	ldw	ra,20(sp)
100153f8:	dcc00417 	ldw	r19,16(sp)
100153fc:	dc800317 	ldw	r18,12(sp)
10015400:	dc400217 	ldw	r17,8(sp)
10015404:	dc000117 	ldw	r16,4(sp)
10015408:	dec00604 	addi	sp,sp,24
1001540c:	f800283a 	ret
10015410:	00153040 	call	10015304 <__sfp_lock_acquire>
10015414:	8000030d 	sth	zero,12(r16)
10015418:	00153080 	call	10015308 <__sfp_lock_release>
1001541c:	0021883a 	mov	r16,zero
10015420:	8005883a 	mov	r2,r16
10015424:	dfc00517 	ldw	ra,20(sp)
10015428:	dcc00417 	ldw	r19,16(sp)
1001542c:	dc800317 	ldw	r18,12(sp)
10015430:	dc400217 	ldw	r17,8(sp)
10015434:	dc000117 	ldw	r16,4(sp)
10015438:	dec00604 	addi	sp,sp,24
1001543c:	f800283a 	ret
10015440:	9009883a 	mov	r4,r18
10015444:	800b883a 	mov	r5,r16
10015448:	000d883a 	mov	r6,zero
1001544c:	01c00084 	movi	r7,2
10015450:	0015b180 	call	10015b18 <_fseek_r>
10015454:	8005883a 	mov	r2,r16
10015458:	dfc00517 	ldw	ra,20(sp)
1001545c:	dcc00417 	ldw	r19,16(sp)
10015460:	dc800317 	ldw	r18,12(sp)
10015464:	dc400217 	ldw	r17,8(sp)
10015468:	dc000117 	ldw	r16,4(sp)
1001546c:	dec00604 	addi	sp,sp,24
10015470:	f800283a 	ret

10015474 <fopen>:
10015474:	00c400b4 	movhi	r3,4098
10015478:	18d6f004 	addi	r3,r3,23488
1001547c:	2005883a 	mov	r2,r4
10015480:	19000017 	ldw	r4,0(r3)
10015484:	280d883a 	mov	r6,r5
10015488:	100b883a 	mov	r5,r2
1001548c:	00153441 	jmpi	10015344 <_fopen_r>

10015490 <_fread_r>:
10015490:	defff504 	addi	sp,sp,-44
10015494:	dd000515 	stw	r20,20(sp)
10015498:	dcc00415 	stw	r19,16(sp)
1001549c:	2029883a 	mov	r20,r4
100154a0:	2827883a 	mov	r19,r5
100154a4:	3809883a 	mov	r4,r7
100154a8:	300b883a 	mov	r5,r6
100154ac:	ddc00815 	stw	r23,32(sp)
100154b0:	dd800715 	stw	r22,28(sp)
100154b4:	dd400615 	stw	r21,24(sp)
100154b8:	dc000115 	stw	r16,4(sp)
100154bc:	dfc00a15 	stw	ra,40(sp)
100154c0:	df000915 	stw	fp,36(sp)
100154c4:	dc800315 	stw	r18,12(sp)
100154c8:	dc400215 	stw	r17,8(sp)
100154cc:	302f883a 	mov	r23,r6
100154d0:	382b883a 	mov	r21,r7
100154d4:	00146fc0 	call	100146fc <__mulsi3>
100154d8:	102d883a 	mov	r22,r2
100154dc:	dc000b17 	ldw	r16,44(sp)
100154e0:	10002e26 	beq	r2,zero,1001559c <_fread_r+0x10c>
100154e4:	a0000226 	beq	r20,zero,100154f0 <_fread_r+0x60>
100154e8:	a0800e17 	ldw	r2,56(r20)
100154ec:	10006726 	beq	r2,zero,1001568c <_fread_r+0x1fc>
100154f0:	84400117 	ldw	r17,4(r16)
100154f4:	88002b16 	blt	r17,zero,100155a4 <_fread_r+0x114>
100154f8:	8080030b 	ldhu	r2,12(r16)
100154fc:	8807883a 	mov	r3,r17
10015500:	1080008c 	andi	r2,r2,2
10015504:	10bfffcc 	andi	r2,r2,65535
10015508:	10a0001c 	xori	r2,r2,32768
1001550c:	10a00004 	addi	r2,r2,-32768
10015510:	10002d1e 	bne	r2,zero,100155c8 <_fread_r+0x138>
10015514:	b025883a 	mov	r18,r22
10015518:	00000106 	br	10015520 <_fread_r+0x90>
1001551c:	84400117 	ldw	r17,4(r16)
10015520:	9809883a 	mov	r4,r19
10015524:	880d883a 	mov	r6,r17
10015528:	81400017 	ldw	r5,0(r16)
1001552c:	8c805c2e 	bgeu	r17,r18,100156a0 <_fread_r+0x210>
10015530:	0016dd80 	call	10016dd8 <memcpy>
10015534:	80800017 	ldw	r2,0(r16)
10015538:	9c67883a 	add	r19,r19,r17
1001553c:	9465c83a 	sub	r18,r18,r17
10015540:	1463883a 	add	r17,r2,r17
10015544:	a009883a 	mov	r4,r20
10015548:	800b883a 	mov	r5,r16
1001554c:	84400015 	stw	r17,0(r16)
10015550:	0017f9c0 	call	10017f9c <__srefill_r>
10015554:	103ff126 	beq	r2,zero,1001551c <__alt_data_end+0xf801551c>
10015558:	b489c83a 	sub	r4,r22,r18
1001555c:	b80b883a 	mov	r5,r23
10015560:	00146ec0 	call	100146ec <__udivsi3>
10015564:	102b883a 	mov	r21,r2
10015568:	a805883a 	mov	r2,r21
1001556c:	dfc00a17 	ldw	ra,40(sp)
10015570:	df000917 	ldw	fp,36(sp)
10015574:	ddc00817 	ldw	r23,32(sp)
10015578:	dd800717 	ldw	r22,28(sp)
1001557c:	dd400617 	ldw	r21,24(sp)
10015580:	dd000517 	ldw	r20,20(sp)
10015584:	dcc00417 	ldw	r19,16(sp)
10015588:	dc800317 	ldw	r18,12(sp)
1001558c:	dc400217 	ldw	r17,8(sp)
10015590:	dc000117 	ldw	r16,4(sp)
10015594:	dec00b04 	addi	sp,sp,44
10015598:	f800283a 	ret
1001559c:	002b883a 	mov	r21,zero
100155a0:	003ff106 	br	10015568 <__alt_data_end+0xf8015568>
100155a4:	8080030b 	ldhu	r2,12(r16)
100155a8:	80000115 	stw	zero,4(r16)
100155ac:	0007883a 	mov	r3,zero
100155b0:	1080008c 	andi	r2,r2,2
100155b4:	10bfffcc 	andi	r2,r2,65535
100155b8:	10a0001c 	xori	r2,r2,32768
100155bc:	10a00004 	addi	r2,r2,-32768
100155c0:	0023883a 	mov	r17,zero
100155c4:	103fd326 	beq	r2,zero,10015514 <__alt_data_end+0xf8015514>
100155c8:	1823883a 	mov	r17,r3
100155cc:	b0c0012e 	bgeu	r22,r3,100155d4 <_fread_r+0x144>
100155d0:	b023883a 	mov	r17,r22
100155d4:	81400017 	ldw	r5,0(r16)
100155d8:	9809883a 	mov	r4,r19
100155dc:	880d883a 	mov	r6,r17
100155e0:	0016dd80 	call	10016dd8 <memcpy>
100155e4:	80800117 	ldw	r2,4(r16)
100155e8:	84800017 	ldw	r18,0(r16)
100155ec:	81400c17 	ldw	r5,48(r16)
100155f0:	1445c83a 	sub	r2,r2,r17
100155f4:	9465883a 	add	r18,r18,r17
100155f8:	84800015 	stw	r18,0(r16)
100155fc:	80800115 	stw	r2,4(r16)
10015600:	9c67883a 	add	r19,r19,r17
10015604:	b463c83a 	sub	r17,r22,r17
10015608:	28002e26 	beq	r5,zero,100156c4 <_fread_r+0x234>
1001560c:	883fd626 	beq	r17,zero,10015568 <__alt_data_end+0xf8015568>
10015610:	80801004 	addi	r2,r16,64
10015614:	28800326 	beq	r5,r2,10015624 <_fread_r+0x194>
10015618:	a009883a 	mov	r4,r20
1001561c:	00158480 	call	10015848 <_free_r>
10015620:	84800017 	ldw	r18,0(r16)
10015624:	80000c15 	stw	zero,48(r16)
10015628:	80c00517 	ldw	r3,20(r16)
1001562c:	87000417 	ldw	fp,16(r16)
10015630:	d8c00015 	stw	r3,0(sp)
10015634:	00000106 	br	1001563c <_fread_r+0x1ac>
10015638:	883fcb26 	beq	r17,zero,10015568 <__alt_data_end+0xf8015568>
1001563c:	84c00415 	stw	r19,16(r16)
10015640:	84400515 	stw	r17,20(r16)
10015644:	84c00015 	stw	r19,0(r16)
10015648:	a009883a 	mov	r4,r20
1001564c:	800b883a 	mov	r5,r16
10015650:	0017f9c0 	call	10017f9c <__srefill_r>
10015654:	d8c00017 	ldw	r3,0(sp)
10015658:	81000117 	ldw	r4,4(r16)
1001565c:	87000415 	stw	fp,16(r16)
10015660:	80c00515 	stw	r3,20(r16)
10015664:	84800015 	stw	r18,0(r16)
10015668:	80000115 	stw	zero,4(r16)
1001566c:	8923c83a 	sub	r17,r17,r4
10015670:	9927883a 	add	r19,r19,r4
10015674:	103ff026 	beq	r2,zero,10015638 <__alt_data_end+0xf8015638>
10015678:	b449c83a 	sub	r4,r22,r17
1001567c:	b80b883a 	mov	r5,r23
10015680:	00146ec0 	call	100146ec <__udivsi3>
10015684:	102b883a 	mov	r21,r2
10015688:	003fb706 	br	10015568 <__alt_data_end+0xf8015568>
1001568c:	a009883a 	mov	r4,r20
10015690:	00150fc0 	call	100150fc <__sinit>
10015694:	84400117 	ldw	r17,4(r16)
10015698:	883f970e 	bge	r17,zero,100154f8 <__alt_data_end+0xf80154f8>
1001569c:	003fc106 	br	100155a4 <__alt_data_end+0xf80155a4>
100156a0:	900d883a 	mov	r6,r18
100156a4:	0016dd80 	call	10016dd8 <memcpy>
100156a8:	80800117 	ldw	r2,4(r16)
100156ac:	80c00017 	ldw	r3,0(r16)
100156b0:	1485c83a 	sub	r2,r2,r18
100156b4:	1ca5883a 	add	r18,r3,r18
100156b8:	80800115 	stw	r2,4(r16)
100156bc:	84800015 	stw	r18,0(r16)
100156c0:	003fa906 	br	10015568 <__alt_data_end+0xf8015568>
100156c4:	883fd81e 	bne	r17,zero,10015628 <__alt_data_end+0xf8015628>
100156c8:	003fa706 	br	10015568 <__alt_data_end+0xf8015568>

100156cc <fread>:
100156cc:	008400b4 	movhi	r2,4098
100156d0:	1096f004 	addi	r2,r2,23488
100156d4:	2011883a 	mov	r8,r4
100156d8:	11000017 	ldw	r4,0(r2)
100156dc:	defffe04 	addi	sp,sp,-8
100156e0:	2807883a 	mov	r3,r5
100156e4:	3005883a 	mov	r2,r6
100156e8:	d9c00015 	stw	r7,0(sp)
100156ec:	400b883a 	mov	r5,r8
100156f0:	180d883a 	mov	r6,r3
100156f4:	100f883a 	mov	r7,r2
100156f8:	dfc00115 	stw	ra,4(sp)
100156fc:	00154900 	call	10015490 <_fread_r>
10015700:	dfc00117 	ldw	ra,4(sp)
10015704:	dec00204 	addi	sp,sp,8
10015708:	f800283a 	ret

1001570c <_malloc_trim_r>:
1001570c:	defffb04 	addi	sp,sp,-20
10015710:	dcc00315 	stw	r19,12(sp)
10015714:	dc800215 	stw	r18,8(sp)
10015718:	dc400115 	stw	r17,4(sp)
1001571c:	dc000015 	stw	r16,0(sp)
10015720:	2827883a 	mov	r19,r5
10015724:	dfc00415 	stw	ra,16(sp)
10015728:	044400b4 	movhi	r17,4098
1001572c:	8c515a04 	addi	r17,r17,17768
10015730:	2021883a 	mov	r16,r4
10015734:	001ffa80 	call	1001ffa8 <__malloc_lock>
10015738:	88800217 	ldw	r2,8(r17)
1001573c:	14800117 	ldw	r18,4(r2)
10015740:	00bfff04 	movi	r2,-4
10015744:	90a4703a 	and	r18,r18,r2
10015748:	9083fbc4 	addi	r2,r18,4079
1001574c:	14e7c83a 	sub	r19,r2,r19
10015750:	9826d33a 	srli	r19,r19,12
10015754:	0083ffc4 	movi	r2,4095
10015758:	9cffffc4 	addi	r19,r19,-1
1001575c:	9826933a 	slli	r19,r19,12
10015760:	14c0060e 	bge	r2,r19,1001577c <_malloc_trim_r+0x70>
10015764:	8009883a 	mov	r4,r16
10015768:	000b883a 	mov	r5,zero
1001576c:	00181d40 	call	100181d4 <_sbrk_r>
10015770:	88c00217 	ldw	r3,8(r17)
10015774:	1c87883a 	add	r3,r3,r18
10015778:	10c00a26 	beq	r2,r3,100157a4 <_malloc_trim_r+0x98>
1001577c:	8009883a 	mov	r4,r16
10015780:	001ffc80 	call	1001ffc8 <__malloc_unlock>
10015784:	0005883a 	mov	r2,zero
10015788:	dfc00417 	ldw	ra,16(sp)
1001578c:	dcc00317 	ldw	r19,12(sp)
10015790:	dc800217 	ldw	r18,8(sp)
10015794:	dc400117 	ldw	r17,4(sp)
10015798:	dc000017 	ldw	r16,0(sp)
1001579c:	dec00504 	addi	sp,sp,20
100157a0:	f800283a 	ret
100157a4:	8009883a 	mov	r4,r16
100157a8:	04cbc83a 	sub	r5,zero,r19
100157ac:	00181d40 	call	100181d4 <_sbrk_r>
100157b0:	00ffffc4 	movi	r3,-1
100157b4:	10c01326 	beq	r2,r3,10015804 <_malloc_trim_r+0xf8>
100157b8:	008400b4 	movhi	r2,4098
100157bc:	109ed304 	addi	r2,r2,31564
100157c0:	11000017 	ldw	r4,0(r2)
100157c4:	88c00217 	ldw	r3,8(r17)
100157c8:	94e5c83a 	sub	r18,r18,r19
100157cc:	94800054 	ori	r18,r18,1
100157d0:	24e7c83a 	sub	r19,r4,r19
100157d4:	1c800115 	stw	r18,4(r3)
100157d8:	8009883a 	mov	r4,r16
100157dc:	14c00015 	stw	r19,0(r2)
100157e0:	001ffc80 	call	1001ffc8 <__malloc_unlock>
100157e4:	00800044 	movi	r2,1
100157e8:	dfc00417 	ldw	ra,16(sp)
100157ec:	dcc00317 	ldw	r19,12(sp)
100157f0:	dc800217 	ldw	r18,8(sp)
100157f4:	dc400117 	ldw	r17,4(sp)
100157f8:	dc000017 	ldw	r16,0(sp)
100157fc:	dec00504 	addi	sp,sp,20
10015800:	f800283a 	ret
10015804:	8009883a 	mov	r4,r16
10015808:	000b883a 	mov	r5,zero
1001580c:	00181d40 	call	100181d4 <_sbrk_r>
10015810:	88c00217 	ldw	r3,8(r17)
10015814:	014003c4 	movi	r5,15
10015818:	10c9c83a 	sub	r4,r2,r3
1001581c:	293fd70e 	bge	r5,r4,1001577c <__alt_data_end+0xf801577c>
10015820:	014400b4 	movhi	r5,4098
10015824:	2956f104 	addi	r5,r5,23492
10015828:	29400017 	ldw	r5,0(r5)
1001582c:	21000054 	ori	r4,r4,1
10015830:	19000115 	stw	r4,4(r3)
10015834:	1145c83a 	sub	r2,r2,r5
10015838:	014400b4 	movhi	r5,4098
1001583c:	295ed304 	addi	r5,r5,31564
10015840:	28800015 	stw	r2,0(r5)
10015844:	003fcd06 	br	1001577c <__alt_data_end+0xf801577c>

10015848 <_free_r>:
10015848:	defffd04 	addi	sp,sp,-12
1001584c:	dc400115 	stw	r17,4(sp)
10015850:	dc000015 	stw	r16,0(sp)
10015854:	dfc00215 	stw	ra,8(sp)
10015858:	2821883a 	mov	r16,r5
1001585c:	2023883a 	mov	r17,r4
10015860:	28004b26 	beq	r5,zero,10015990 <_free_r+0x148>
10015864:	001ffa80 	call	1001ffa8 <__malloc_lock>
10015868:	823fff17 	ldw	r8,-4(r16)
1001586c:	00bfff84 	movi	r2,-2
10015870:	81bffe04 	addi	r6,r16,-8
10015874:	4084703a 	and	r2,r8,r2
10015878:	3087883a 	add	r3,r6,r2
1001587c:	014400b4 	movhi	r5,4098
10015880:	29515a04 	addi	r5,r5,17768
10015884:	1a400117 	ldw	r9,4(r3)
10015888:	29000217 	ldw	r4,8(r5)
1001588c:	01ffff04 	movi	r7,-4
10015890:	49ce703a 	and	r7,r9,r7
10015894:	20c06526 	beq	r4,r3,10015a2c <_free_r+0x1e4>
10015898:	19c00115 	stw	r7,4(r3)
1001589c:	4200004c 	andi	r8,r8,1
100158a0:	40003026 	beq	r8,zero,10015964 <_free_r+0x11c>
100158a4:	0009883a 	mov	r4,zero
100158a8:	19d1883a 	add	r8,r3,r7
100158ac:	42000117 	ldw	r8,4(r8)
100158b0:	4200004c 	andi	r8,r8,1
100158b4:	4000061e 	bne	r8,zero,100158d0 <_free_r+0x88>
100158b8:	11c5883a 	add	r2,r2,r7
100158bc:	19c00217 	ldw	r7,8(r3)
100158c0:	20004e26 	beq	r4,zero,100159fc <_free_r+0x1b4>
100158c4:	18c00317 	ldw	r3,12(r3)
100158c8:	38c00315 	stw	r3,12(r7)
100158cc:	19c00215 	stw	r7,8(r3)
100158d0:	11c00054 	ori	r7,r2,1
100158d4:	3087883a 	add	r3,r6,r2
100158d8:	31c00115 	stw	r7,4(r6)
100158dc:	18800015 	stw	r2,0(r3)
100158e0:	20001a1e 	bne	r4,zero,1001594c <_free_r+0x104>
100158e4:	00c07fc4 	movi	r3,511
100158e8:	18802e2e 	bgeu	r3,r2,100159a4 <_free_r+0x15c>
100158ec:	1006d27a 	srli	r3,r2,9
100158f0:	01000104 	movi	r4,4
100158f4:	20c06636 	bltu	r4,r3,10015a90 <_free_r+0x248>
100158f8:	1008d1ba 	srli	r4,r2,6
100158fc:	21000e04 	addi	r4,r4,56
10015900:	210f883a 	add	r7,r4,r4
10015904:	39cf883a 	add	r7,r7,r7
10015908:	39cf883a 	add	r7,r7,r7
1001590c:	29cf883a 	add	r7,r5,r7
10015910:	38c00217 	ldw	r3,8(r7)
10015914:	014400b4 	movhi	r5,4098
10015918:	29515a04 	addi	r5,r5,17768
1001591c:	19c06126 	beq	r3,r7,10015aa4 <_free_r+0x25c>
10015920:	013fff04 	movi	r4,-4
10015924:	19400117 	ldw	r5,4(r3)
10015928:	290a703a 	and	r5,r5,r4
1001592c:	1140022e 	bgeu	r2,r5,10015938 <_free_r+0xf0>
10015930:	18c00217 	ldw	r3,8(r3)
10015934:	38fffb1e 	bne	r7,r3,10015924 <__alt_data_end+0xf8015924>
10015938:	18800317 	ldw	r2,12(r3)
1001593c:	30800315 	stw	r2,12(r6)
10015940:	30c00215 	stw	r3,8(r6)
10015944:	11800215 	stw	r6,8(r2)
10015948:	19800315 	stw	r6,12(r3)
1001594c:	8809883a 	mov	r4,r17
10015950:	dfc00217 	ldw	ra,8(sp)
10015954:	dc400117 	ldw	r17,4(sp)
10015958:	dc000017 	ldw	r16,0(sp)
1001595c:	dec00304 	addi	sp,sp,12
10015960:	001ffc81 	jmpi	1001ffc8 <__malloc_unlock>
10015964:	813ffe17 	ldw	r4,-8(r16)
10015968:	2a400204 	addi	r9,r5,8
1001596c:	310dc83a 	sub	r6,r6,r4
10015970:	32000217 	ldw	r8,8(r6)
10015974:	1105883a 	add	r2,r2,r4
10015978:	42404326 	beq	r8,r9,10015a88 <_free_r+0x240>
1001597c:	32400317 	ldw	r9,12(r6)
10015980:	0009883a 	mov	r4,zero
10015984:	42400315 	stw	r9,12(r8)
10015988:	4a000215 	stw	r8,8(r9)
1001598c:	003fc606 	br	100158a8 <__alt_data_end+0xf80158a8>
10015990:	dfc00217 	ldw	ra,8(sp)
10015994:	dc400117 	ldw	r17,4(sp)
10015998:	dc000017 	ldw	r16,0(sp)
1001599c:	dec00304 	addi	sp,sp,12
100159a0:	f800283a 	ret
100159a4:	1004d0fa 	srli	r2,r2,3
100159a8:	02000044 	movi	r8,1
100159ac:	29c00117 	ldw	r7,4(r5)
100159b0:	1087883a 	add	r3,r2,r2
100159b4:	18c7883a 	add	r3,r3,r3
100159b8:	1005d0ba 	srai	r2,r2,2
100159bc:	18c7883a 	add	r3,r3,r3
100159c0:	28c7883a 	add	r3,r5,r3
100159c4:	19000217 	ldw	r4,8(r3)
100159c8:	4084983a 	sll	r2,r8,r2
100159cc:	30c00315 	stw	r3,12(r6)
100159d0:	31000215 	stw	r4,8(r6)
100159d4:	11c4b03a 	or	r2,r2,r7
100159d8:	21800315 	stw	r6,12(r4)
100159dc:	8809883a 	mov	r4,r17
100159e0:	28800115 	stw	r2,4(r5)
100159e4:	19800215 	stw	r6,8(r3)
100159e8:	dfc00217 	ldw	ra,8(sp)
100159ec:	dc400117 	ldw	r17,4(sp)
100159f0:	dc000017 	ldw	r16,0(sp)
100159f4:	dec00304 	addi	sp,sp,12
100159f8:	001ffc81 	jmpi	1001ffc8 <__malloc_unlock>
100159fc:	020400b4 	movhi	r8,4098
10015a00:	42115c04 	addi	r8,r8,17776
10015a04:	3a3faf1e 	bne	r7,r8,100158c4 <__alt_data_end+0xf80158c4>
10015a08:	29800515 	stw	r6,20(r5)
10015a0c:	29800415 	stw	r6,16(r5)
10015a10:	11000054 	ori	r4,r2,1
10015a14:	3087883a 	add	r3,r6,r2
10015a18:	31c00315 	stw	r7,12(r6)
10015a1c:	31c00215 	stw	r7,8(r6)
10015a20:	31000115 	stw	r4,4(r6)
10015a24:	18800015 	stw	r2,0(r3)
10015a28:	003fc806 	br	1001594c <__alt_data_end+0xf801594c>
10015a2c:	4200004c 	andi	r8,r8,1
10015a30:	3885883a 	add	r2,r7,r2
10015a34:	4000071e 	bne	r8,zero,10015a54 <_free_r+0x20c>
10015a38:	81fffe17 	ldw	r7,-8(r16)
10015a3c:	31cdc83a 	sub	r6,r6,r7
10015a40:	30c00317 	ldw	r3,12(r6)
10015a44:	31000217 	ldw	r4,8(r6)
10015a48:	11c5883a 	add	r2,r2,r7
10015a4c:	20c00315 	stw	r3,12(r4)
10015a50:	19000215 	stw	r4,8(r3)
10015a54:	00c400b4 	movhi	r3,4098
10015a58:	18d6f204 	addi	r3,r3,23496
10015a5c:	18c00017 	ldw	r3,0(r3)
10015a60:	11000054 	ori	r4,r2,1
10015a64:	31000115 	stw	r4,4(r6)
10015a68:	29800215 	stw	r6,8(r5)
10015a6c:	10ffb736 	bltu	r2,r3,1001594c <__alt_data_end+0xf801594c>
10015a70:	008400b4 	movhi	r2,4098
10015a74:	109ec904 	addi	r2,r2,31524
10015a78:	11400017 	ldw	r5,0(r2)
10015a7c:	8809883a 	mov	r4,r17
10015a80:	001570c0 	call	1001570c <_malloc_trim_r>
10015a84:	003fb106 	br	1001594c <__alt_data_end+0xf801594c>
10015a88:	01000044 	movi	r4,1
10015a8c:	003f8606 	br	100158a8 <__alt_data_end+0xf80158a8>
10015a90:	01000504 	movi	r4,20
10015a94:	20c00b36 	bltu	r4,r3,10015ac4 <_free_r+0x27c>
10015a98:	190016c4 	addi	r4,r3,91
10015a9c:	210f883a 	add	r7,r4,r4
10015aa0:	003f9806 	br	10015904 <__alt_data_end+0xf8015904>
10015aa4:	2009d0ba 	srai	r4,r4,2
10015aa8:	00800044 	movi	r2,1
10015aac:	29c00117 	ldw	r7,4(r5)
10015ab0:	1108983a 	sll	r4,r2,r4
10015ab4:	1805883a 	mov	r2,r3
10015ab8:	21c8b03a 	or	r4,r4,r7
10015abc:	29000115 	stw	r4,4(r5)
10015ac0:	003f9e06 	br	1001593c <__alt_data_end+0xf801593c>
10015ac4:	01001504 	movi	r4,84
10015ac8:	20c00436 	bltu	r4,r3,10015adc <_free_r+0x294>
10015acc:	1008d33a 	srli	r4,r2,12
10015ad0:	21001b84 	addi	r4,r4,110
10015ad4:	210f883a 	add	r7,r4,r4
10015ad8:	003f8a06 	br	10015904 <__alt_data_end+0xf8015904>
10015adc:	01005504 	movi	r4,340
10015ae0:	20c00436 	bltu	r4,r3,10015af4 <_free_r+0x2ac>
10015ae4:	1008d3fa 	srli	r4,r2,15
10015ae8:	21001dc4 	addi	r4,r4,119
10015aec:	210f883a 	add	r7,r4,r4
10015af0:	003f8406 	br	10015904 <__alt_data_end+0xf8015904>
10015af4:	01015504 	movi	r4,1364
10015af8:	20c00436 	bltu	r4,r3,10015b0c <_free_r+0x2c4>
10015afc:	1008d4ba 	srli	r4,r2,18
10015b00:	21001f04 	addi	r4,r4,124
10015b04:	210f883a 	add	r7,r4,r4
10015b08:	003f7e06 	br	10015904 <__alt_data_end+0xf8015904>
10015b0c:	01c03f04 	movi	r7,252
10015b10:	01001f84 	movi	r4,126
10015b14:	003f7b06 	br	10015904 <__alt_data_end+0xf8015904>

10015b18 <_fseek_r>:
10015b18:	deffe804 	addi	sp,sp,-96
10015b1c:	dd001315 	stw	r20,76(sp)
10015b20:	dc801115 	stw	r18,68(sp)
10015b24:	dc401015 	stw	r17,64(sp)
10015b28:	dc000f15 	stw	r16,60(sp)
10015b2c:	dfc01715 	stw	ra,92(sp)
10015b30:	ddc01615 	stw	r23,88(sp)
10015b34:	dd801515 	stw	r22,84(sp)
10015b38:	dd401415 	stw	r21,80(sp)
10015b3c:	dcc01215 	stw	r19,72(sp)
10015b40:	2023883a 	mov	r17,r4
10015b44:	2821883a 	mov	r16,r5
10015b48:	3029883a 	mov	r20,r6
10015b4c:	3825883a 	mov	r18,r7
10015b50:	20000226 	beq	r4,zero,10015b5c <_fseek_r+0x44>
10015b54:	20800e17 	ldw	r2,56(r4)
10015b58:	10006226 	beq	r2,zero,10015ce4 <_fseek_r+0x1cc>
10015b5c:	80c0030b 	ldhu	r3,12(r16)
10015b60:	00804204 	movi	r2,264
10015b64:	18c0420c 	andi	r3,r3,264
10015b68:	18806326 	beq	r3,r2,10015cf8 <_fseek_r+0x1e0>
10015b6c:	84c00a17 	ldw	r19,40(r16)
10015b70:	98010226 	beq	r19,zero,10015f7c <_fseek_r+0x464>
10015b74:	00800044 	movi	r2,1
10015b78:	90803d26 	beq	r18,r2,10015c70 <_fseek_r+0x158>
10015b7c:	00800084 	movi	r2,2
10015b80:	90800126 	beq	r18,r2,10015b88 <_fseek_r+0x70>
10015b84:	90002c1e 	bne	r18,zero,10015c38 <_fseek_r+0x120>
10015b88:	80800417 	ldw	r2,16(r16)
10015b8c:	002d883a 	mov	r22,zero
10015b90:	002b883a 	mov	r21,zero
10015b94:	1000e526 	beq	r2,zero,10015f2c <_fseek_r+0x414>
10015b98:	80c0030b 	ldhu	r3,12(r16)
10015b9c:	1882068c 	andi	r2,r3,2074
10015ba0:	1809883a 	mov	r4,r3
10015ba4:	10000a1e 	bne	r2,zero,10015bd0 <_fseek_r+0xb8>
10015ba8:	1881000c 	andi	r2,r3,1024
10015bac:	10bfffcc 	andi	r2,r2,65535
10015bb0:	10a0001c 	xori	r2,r2,32768
10015bb4:	10a00004 	addi	r2,r2,-32768
10015bb8:	1000631e 	bne	r2,zero,10015d48 <_fseek_r+0x230>
10015bbc:	008400b4 	movhi	r2,4098
10015bc0:	10a0c504 	addi	r2,r2,-31980
10015bc4:	98805026 	beq	r19,r2,10015d08 <_fseek_r+0x1f0>
10015bc8:	18c20014 	ori	r3,r3,2048
10015bcc:	80c0030d 	sth	r3,12(r16)
10015bd0:	8809883a 	mov	r4,r17
10015bd4:	800b883a 	mov	r5,r16
10015bd8:	0014ce00 	call	10014ce0 <_fflush_r>
10015bdc:	1000181e 	bne	r2,zero,10015c40 <_fseek_r+0x128>
10015be0:	81400717 	ldw	r5,28(r16)
10015be4:	8809883a 	mov	r4,r17
10015be8:	a00d883a 	mov	r6,r20
10015bec:	900f883a 	mov	r7,r18
10015bf0:	983ee83a 	callr	r19
10015bf4:	00ffffc4 	movi	r3,-1
10015bf8:	10c01126 	beq	r2,r3,10015c40 <_fseek_r+0x128>
10015bfc:	81400c17 	ldw	r5,48(r16)
10015c00:	28000526 	beq	r5,zero,10015c18 <_fseek_r+0x100>
10015c04:	80801004 	addi	r2,r16,64
10015c08:	28800226 	beq	r5,r2,10015c14 <_fseek_r+0xfc>
10015c0c:	8809883a 	mov	r4,r17
10015c10:	00158480 	call	10015848 <_free_r>
10015c14:	80000c15 	stw	zero,48(r16)
10015c18:	8080030b 	ldhu	r2,12(r16)
10015c1c:	80c00417 	ldw	r3,16(r16)
10015c20:	80000115 	stw	zero,4(r16)
10015c24:	10bdf7cc 	andi	r2,r2,63455
10015c28:	8080030d 	sth	r2,12(r16)
10015c2c:	80c00015 	stw	r3,0(r16)
10015c30:	0005883a 	mov	r2,zero
10015c34:	00000306 	br	10015c44 <_fseek_r+0x12c>
10015c38:	00800584 	movi	r2,22
10015c3c:	88800015 	stw	r2,0(r17)
10015c40:	00bfffc4 	movi	r2,-1
10015c44:	dfc01717 	ldw	ra,92(sp)
10015c48:	ddc01617 	ldw	r23,88(sp)
10015c4c:	dd801517 	ldw	r22,84(sp)
10015c50:	dd401417 	ldw	r21,80(sp)
10015c54:	dd001317 	ldw	r20,76(sp)
10015c58:	dcc01217 	ldw	r19,72(sp)
10015c5c:	dc801117 	ldw	r18,68(sp)
10015c60:	dc401017 	ldw	r17,64(sp)
10015c64:	dc000f17 	ldw	r16,60(sp)
10015c68:	dec01804 	addi	sp,sp,96
10015c6c:	f800283a 	ret
10015c70:	8809883a 	mov	r4,r17
10015c74:	800b883a 	mov	r5,r16
10015c78:	0014ce00 	call	10014ce0 <_fflush_r>
10015c7c:	8080030b 	ldhu	r2,12(r16)
10015c80:	10c4000c 	andi	r3,r2,4096
10015c84:	18ffffcc 	andi	r3,r3,65535
10015c88:	18e0001c 	xori	r3,r3,32768
10015c8c:	18e00004 	addi	r3,r3,-32768
10015c90:	18007d26 	beq	r3,zero,10015e88 <_fseek_r+0x370>
10015c94:	85401417 	ldw	r21,80(r16)
10015c98:	10c0010c 	andi	r3,r2,4
10015c9c:	18ffffcc 	andi	r3,r3,65535
10015ca0:	18e0001c 	xori	r3,r3,32768
10015ca4:	18e00004 	addi	r3,r3,-32768
10015ca8:	18005f1e 	bne	r3,zero,10015e28 <_fseek_r+0x310>
10015cac:	1080020c 	andi	r2,r2,8
10015cb0:	10bfffcc 	andi	r2,r2,65535
10015cb4:	10a0001c 	xori	r2,r2,32768
10015cb8:	10a00004 	addi	r2,r2,-32768
10015cbc:	10007026 	beq	r2,zero,10015e80 <_fseek_r+0x368>
10015cc0:	80c00017 	ldw	r3,0(r16)
10015cc4:	80800417 	ldw	r2,16(r16)
10015cc8:	18000226 	beq	r3,zero,10015cd4 <_fseek_r+0x1bc>
10015ccc:	1887c83a 	sub	r3,r3,r2
10015cd0:	a8eb883a 	add	r21,r21,r3
10015cd4:	a569883a 	add	r20,r20,r21
10015cd8:	05800044 	movi	r22,1
10015cdc:	0025883a 	mov	r18,zero
10015ce0:	003fac06 	br	10015b94 <__alt_data_end+0xf8015b94>
10015ce4:	00150fc0 	call	100150fc <__sinit>
10015ce8:	80c0030b 	ldhu	r3,12(r16)
10015cec:	00804204 	movi	r2,264
10015cf0:	18c0420c 	andi	r3,r3,264
10015cf4:	18bf9d1e 	bne	r3,r2,10015b6c <__alt_data_end+0xf8015b6c>
10015cf8:	8809883a 	mov	r4,r17
10015cfc:	800b883a 	mov	r5,r16
10015d00:	0014ce00 	call	10014ce0 <_fflush_r>
10015d04:	003f9906 	br	10015b6c <__alt_data_end+0xf8015b6c>
10015d08:	8140038f 	ldh	r5,14(r16)
10015d0c:	283fae16 	blt	r5,zero,10015bc8 <__alt_data_end+0xf8015bc8>
10015d10:	8809883a 	mov	r4,r17
10015d14:	d80d883a 	mov	r6,sp
10015d18:	0015fb00 	call	10015fb0 <_fstat_r>
10015d1c:	1000741e 	bne	r2,zero,10015ef0 <_fseek_r+0x3d8>
10015d20:	d8c00117 	ldw	r3,4(sp)
10015d24:	00a00014 	movui	r2,32768
10015d28:	18fc000c 	andi	r3,r3,61440
10015d2c:	1880701e 	bne	r3,r2,10015ef0 <_fseek_r+0x3d8>
10015d30:	8100030b 	ldhu	r4,12(r16)
10015d34:	00810004 	movi	r2,1024
10015d38:	80801315 	stw	r2,76(r16)
10015d3c:	2084b03a 	or	r2,r4,r2
10015d40:	1009883a 	mov	r4,r2
10015d44:	8080030d 	sth	r2,12(r16)
10015d48:	90003f1e 	bne	r18,zero,10015e48 <_fseek_r+0x330>
10015d4c:	a02f883a 	mov	r23,r20
10015d50:	b000461e 	bne	r22,zero,10015e6c <_fseek_r+0x354>
10015d54:	2084000c 	andi	r2,r4,4096
10015d58:	10bfffcc 	andi	r2,r2,65535
10015d5c:	10a0001c 	xori	r2,r2,32768
10015d60:	10a00004 	addi	r2,r2,-32768
10015d64:	10007526 	beq	r2,zero,10015f3c <_fseek_r+0x424>
10015d68:	80801417 	ldw	r2,80(r16)
10015d6c:	80c00117 	ldw	r3,4(r16)
10015d70:	81400c17 	ldw	r5,48(r16)
10015d74:	10ebc83a 	sub	r21,r2,r3
10015d78:	28007926 	beq	r5,zero,10015f60 <_fseek_r+0x448>
10015d7c:	81c00f17 	ldw	r7,60(r16)
10015d80:	a9ebc83a 	sub	r21,r21,r7
10015d84:	80800e17 	ldw	r2,56(r16)
10015d88:	81800417 	ldw	r6,16(r16)
10015d8c:	a8eb883a 	add	r21,r21,r3
10015d90:	1185c83a 	sub	r2,r2,r6
10015d94:	a8abc83a 	sub	r21,r21,r2
10015d98:	3885883a 	add	r2,r7,r2
10015d9c:	2208000c 	andi	r8,r4,8192
10015da0:	423fffcc 	andi	r8,r8,65535
10015da4:	4220001c 	xori	r8,r8,32768
10015da8:	42200004 	addi	r8,r8,-32768
10015dac:	4000031e 	bne	r8,zero,10015dbc <_fseek_r+0x2a4>
10015db0:	bd400216 	blt	r23,r21,10015dbc <_fseek_r+0x2a4>
10015db4:	a887883a 	add	r3,r21,r2
10015db8:	b8c03d36 	bltu	r23,r3,10015eb0 <_fseek_r+0x398>
10015dbc:	85401317 	ldw	r21,76(r16)
10015dc0:	81400717 	ldw	r5,28(r16)
10015dc4:	8809883a 	mov	r4,r17
10015dc8:	056bc83a 	sub	r21,zero,r21
10015dcc:	bd6a703a 	and	r21,r23,r21
10015dd0:	a80d883a 	mov	r6,r21
10015dd4:	000f883a 	mov	r7,zero
10015dd8:	983ee83a 	callr	r19
10015ddc:	00ffffc4 	movi	r3,-1
10015de0:	10ff7b26 	beq	r2,r3,10015bd0 <__alt_data_end+0xf8015bd0>
10015de4:	80800417 	ldw	r2,16(r16)
10015de8:	81400c17 	ldw	r5,48(r16)
10015dec:	80000115 	stw	zero,4(r16)
10015df0:	80800015 	stw	r2,0(r16)
10015df4:	28000526 	beq	r5,zero,10015e0c <_fseek_r+0x2f4>
10015df8:	80801004 	addi	r2,r16,64
10015dfc:	28800226 	beq	r5,r2,10015e08 <_fseek_r+0x2f0>
10015e00:	8809883a 	mov	r4,r17
10015e04:	00158480 	call	10015848 <_free_r>
10015e08:	80000c15 	stw	zero,48(r16)
10015e0c:	8080030b 	ldhu	r2,12(r16)
10015e10:	bd6fc83a 	sub	r23,r23,r21
10015e14:	10bff7cc 	andi	r2,r2,65503
10015e18:	8080030d 	sth	r2,12(r16)
10015e1c:	b800361e 	bne	r23,zero,10015ef8 <_fseek_r+0x3e0>
10015e20:	0005883a 	mov	r2,zero
10015e24:	003f8706 	br	10015c44 <__alt_data_end+0xf8015c44>
10015e28:	80c00117 	ldw	r3,4(r16)
10015e2c:	80800c17 	ldw	r2,48(r16)
10015e30:	a8ebc83a 	sub	r21,r21,r3
10015e34:	10001226 	beq	r2,zero,10015e80 <_fseek_r+0x368>
10015e38:	80c00f17 	ldw	r3,60(r16)
10015e3c:	80800417 	ldw	r2,16(r16)
10015e40:	a8ebc83a 	sub	r21,r21,r3
10015e44:	003fa306 	br	10015cd4 <__alt_data_end+0xf8015cd4>
10015e48:	8140038f 	ldh	r5,14(r16)
10015e4c:	8809883a 	mov	r4,r17
10015e50:	d80d883a 	mov	r6,sp
10015e54:	0015fb00 	call	10015fb0 <_fstat_r>
10015e58:	103f5d1e 	bne	r2,zero,10015bd0 <__alt_data_end+0xf8015bd0>
10015e5c:	ddc00417 	ldw	r23,16(sp)
10015e60:	8100030b 	ldhu	r4,12(r16)
10015e64:	a5ef883a 	add	r23,r20,r23
10015e68:	b03fba26 	beq	r22,zero,10015d54 <__alt_data_end+0xf8015d54>
10015e6c:	81400c17 	ldw	r5,48(r16)
10015e70:	80c00117 	ldw	r3,4(r16)
10015e74:	28003a26 	beq	r5,zero,10015f60 <_fseek_r+0x448>
10015e78:	81c00f17 	ldw	r7,60(r16)
10015e7c:	003fc106 	br	10015d84 <__alt_data_end+0xf8015d84>
10015e80:	80800417 	ldw	r2,16(r16)
10015e84:	003f9306 	br	10015cd4 <__alt_data_end+0xf8015cd4>
10015e88:	81400717 	ldw	r5,28(r16)
10015e8c:	8809883a 	mov	r4,r17
10015e90:	000d883a 	mov	r6,zero
10015e94:	900f883a 	mov	r7,r18
10015e98:	983ee83a 	callr	r19
10015e9c:	102b883a 	mov	r21,r2
10015ea0:	00bfffc4 	movi	r2,-1
10015ea4:	a8bf6626 	beq	r21,r2,10015c40 <__alt_data_end+0xf8015c40>
10015ea8:	8080030b 	ldhu	r2,12(r16)
10015eac:	003f7a06 	br	10015c98 <__alt_data_end+0xf8015c98>
10015eb0:	bd6bc83a 	sub	r21,r23,r21
10015eb4:	354d883a 	add	r6,r6,r21
10015eb8:	1545c83a 	sub	r2,r2,r21
10015ebc:	81800015 	stw	r6,0(r16)
10015ec0:	80800115 	stw	r2,4(r16)
10015ec4:	28000626 	beq	r5,zero,10015ee0 <_fseek_r+0x3c8>
10015ec8:	80801004 	addi	r2,r16,64
10015ecc:	28800326 	beq	r5,r2,10015edc <_fseek_r+0x3c4>
10015ed0:	8809883a 	mov	r4,r17
10015ed4:	00158480 	call	10015848 <_free_r>
10015ed8:	8100030b 	ldhu	r4,12(r16)
10015edc:	80000c15 	stw	zero,48(r16)
10015ee0:	213ff7cc 	andi	r4,r4,65503
10015ee4:	8100030d 	sth	r4,12(r16)
10015ee8:	0005883a 	mov	r2,zero
10015eec:	003f5506 	br	10015c44 <__alt_data_end+0xf8015c44>
10015ef0:	80c0030b 	ldhu	r3,12(r16)
10015ef4:	003f3406 	br	10015bc8 <__alt_data_end+0xf8015bc8>
10015ef8:	8809883a 	mov	r4,r17
10015efc:	800b883a 	mov	r5,r16
10015f00:	0017f9c0 	call	10017f9c <__srefill_r>
10015f04:	103f321e 	bne	r2,zero,10015bd0 <__alt_data_end+0xf8015bd0>
10015f08:	80800117 	ldw	r2,4(r16)
10015f0c:	15ff3036 	bltu	r2,r23,10015bd0 <__alt_data_end+0xf8015bd0>
10015f10:	80c00017 	ldw	r3,0(r16)
10015f14:	15c5c83a 	sub	r2,r2,r23
10015f18:	80800115 	stw	r2,4(r16)
10015f1c:	1def883a 	add	r23,r3,r23
10015f20:	85c00015 	stw	r23,0(r16)
10015f24:	0005883a 	mov	r2,zero
10015f28:	003f4606 	br	10015c44 <__alt_data_end+0xf8015c44>
10015f2c:	8809883a 	mov	r4,r17
10015f30:	800b883a 	mov	r5,r16
10015f34:	001638c0 	call	1001638c <__smakebuf_r>
10015f38:	003f1706 	br	10015b98 <__alt_data_end+0xf8015b98>
10015f3c:	81400717 	ldw	r5,28(r16)
10015f40:	8809883a 	mov	r4,r17
10015f44:	000d883a 	mov	r6,zero
10015f48:	01c00044 	movi	r7,1
10015f4c:	983ee83a 	callr	r19
10015f50:	00ffffc4 	movi	r3,-1
10015f54:	10ff1e26 	beq	r2,r3,10015bd0 <__alt_data_end+0xf8015bd0>
10015f58:	8100030b 	ldhu	r4,12(r16)
10015f5c:	003f8306 	br	10015d6c <__alt_data_end+0xf8015d6c>
10015f60:	80800017 	ldw	r2,0(r16)
10015f64:	81800417 	ldw	r6,16(r16)
10015f68:	000b883a 	mov	r5,zero
10015f6c:	1185c83a 	sub	r2,r2,r6
10015f70:	a8abc83a 	sub	r21,r21,r2
10015f74:	1885883a 	add	r2,r3,r2
10015f78:	003f8806 	br	10015d9c <__alt_data_end+0xf8015d9c>
10015f7c:	00800744 	movi	r2,29
10015f80:	88800015 	stw	r2,0(r17)
10015f84:	00bfffc4 	movi	r2,-1
10015f88:	003f2e06 	br	10015c44 <__alt_data_end+0xf8015c44>

10015f8c <fseek>:
10015f8c:	008400b4 	movhi	r2,4098
10015f90:	1096f004 	addi	r2,r2,23488
10015f94:	2007883a 	mov	r3,r4
10015f98:	11000017 	ldw	r4,0(r2)
10015f9c:	2805883a 	mov	r2,r5
10015fa0:	300f883a 	mov	r7,r6
10015fa4:	180b883a 	mov	r5,r3
10015fa8:	100d883a 	mov	r6,r2
10015fac:	0015b181 	jmpi	10015b18 <_fseek_r>

10015fb0 <_fstat_r>:
10015fb0:	defffd04 	addi	sp,sp,-12
10015fb4:	dc400115 	stw	r17,4(sp)
10015fb8:	dc000015 	stw	r16,0(sp)
10015fbc:	2023883a 	mov	r17,r4
10015fc0:	040400b4 	movhi	r16,4098
10015fc4:	841ec604 	addi	r16,r16,31512
10015fc8:	2809883a 	mov	r4,r5
10015fcc:	300b883a 	mov	r5,r6
10015fd0:	dfc00215 	stw	ra,8(sp)
10015fd4:	80000015 	stw	zero,0(r16)
10015fd8:	001fb7c0 	call	1001fb7c <fstat>
10015fdc:	00ffffc4 	movi	r3,-1
10015fe0:	10c00526 	beq	r2,r3,10015ff8 <_fstat_r+0x48>
10015fe4:	dfc00217 	ldw	ra,8(sp)
10015fe8:	dc400117 	ldw	r17,4(sp)
10015fec:	dc000017 	ldw	r16,0(sp)
10015ff0:	dec00304 	addi	sp,sp,12
10015ff4:	f800283a 	ret
10015ff8:	80c00017 	ldw	r3,0(r16)
10015ffc:	183ff926 	beq	r3,zero,10015fe4 <__alt_data_end+0xf8015fe4>
10016000:	88c00015 	stw	r3,0(r17)
10016004:	dfc00217 	ldw	ra,8(sp)
10016008:	dc400117 	ldw	r17,4(sp)
1001600c:	dc000017 	ldw	r16,0(sp)
10016010:	dec00304 	addi	sp,sp,12
10016014:	f800283a 	ret

10016018 <_ftell_r>:
10016018:	defffd04 	addi	sp,sp,-12
1001601c:	dc400115 	stw	r17,4(sp)
10016020:	dc000015 	stw	r16,0(sp)
10016024:	dfc00215 	stw	ra,8(sp)
10016028:	2023883a 	mov	r17,r4
1001602c:	2821883a 	mov	r16,r5
10016030:	20000226 	beq	r4,zero,1001603c <_ftell_r+0x24>
10016034:	20800e17 	ldw	r2,56(r4)
10016038:	10003526 	beq	r2,zero,10016110 <_ftell_r+0xf8>
1001603c:	80800a17 	ldw	r2,40(r16)
10016040:	10003526 	beq	r2,zero,10016118 <_ftell_r+0x100>
10016044:	8809883a 	mov	r4,r17
10016048:	800b883a 	mov	r5,r16
1001604c:	0014ce00 	call	10014ce0 <_fflush_r>
10016050:	80c0030b 	ldhu	r3,12(r16)
10016054:	1884000c 	andi	r2,r3,4096
10016058:	10bfffcc 	andi	r2,r2,65535
1001605c:	10a0001c 	xori	r2,r2,32768
10016060:	10a00004 	addi	r2,r2,-32768
10016064:	10002026 	beq	r2,zero,100160e8 <_ftell_r+0xd0>
10016068:	80801417 	ldw	r2,80(r16)
1001606c:	1900010c 	andi	r4,r3,4
10016070:	213fffcc 	andi	r4,r4,65535
10016074:	2120001c 	xori	r4,r4,32768
10016078:	21200004 	addi	r4,r4,-32768
1001607c:	20000b26 	beq	r4,zero,100160ac <_ftell_r+0x94>
10016080:	81000117 	ldw	r4,4(r16)
10016084:	80c00c17 	ldw	r3,48(r16)
10016088:	1105c83a 	sub	r2,r2,r4
1001608c:	18000226 	beq	r3,zero,10016098 <_ftell_r+0x80>
10016090:	80c00f17 	ldw	r3,60(r16)
10016094:	10c5c83a 	sub	r2,r2,r3
10016098:	dfc00217 	ldw	ra,8(sp)
1001609c:	dc400117 	ldw	r17,4(sp)
100160a0:	dc000017 	ldw	r16,0(sp)
100160a4:	dec00304 	addi	sp,sp,12
100160a8:	f800283a 	ret
100160ac:	18c0020c 	andi	r3,r3,8
100160b0:	18ffffcc 	andi	r3,r3,65535
100160b4:	18e0001c 	xori	r3,r3,32768
100160b8:	18e00004 	addi	r3,r3,-32768
100160bc:	183ff626 	beq	r3,zero,10016098 <__alt_data_end+0xf8016098>
100160c0:	80c00017 	ldw	r3,0(r16)
100160c4:	183ff426 	beq	r3,zero,10016098 <__alt_data_end+0xf8016098>
100160c8:	81000417 	ldw	r4,16(r16)
100160cc:	1907c83a 	sub	r3,r3,r4
100160d0:	10c5883a 	add	r2,r2,r3
100160d4:	dfc00217 	ldw	ra,8(sp)
100160d8:	dc400117 	ldw	r17,4(sp)
100160dc:	dc000017 	ldw	r16,0(sp)
100160e0:	dec00304 	addi	sp,sp,12
100160e4:	f800283a 	ret
100160e8:	80800a17 	ldw	r2,40(r16)
100160ec:	81400717 	ldw	r5,28(r16)
100160f0:	8809883a 	mov	r4,r17
100160f4:	000d883a 	mov	r6,zero
100160f8:	01c00044 	movi	r7,1
100160fc:	103ee83a 	callr	r2
10016100:	00ffffc4 	movi	r3,-1
10016104:	10ffe426 	beq	r2,r3,10016098 <__alt_data_end+0xf8016098>
10016108:	80c0030b 	ldhu	r3,12(r16)
1001610c:	003fd706 	br	1001606c <__alt_data_end+0xf801606c>
10016110:	00150fc0 	call	100150fc <__sinit>
10016114:	003fc906 	br	1001603c <__alt_data_end+0xf801603c>
10016118:	00800744 	movi	r2,29
1001611c:	88800015 	stw	r2,0(r17)
10016120:	00bfffc4 	movi	r2,-1
10016124:	003fdc06 	br	10016098 <__alt_data_end+0xf8016098>

10016128 <ftell>:
10016128:	008400b4 	movhi	r2,4098
1001612c:	1096f004 	addi	r2,r2,23488
10016130:	200b883a 	mov	r5,r4
10016134:	11000017 	ldw	r4,0(r2)
10016138:	00160181 	jmpi	10016018 <_ftell_r>

1001613c <_fwalk>:
1001613c:	defff904 	addi	sp,sp,-28
10016140:	dcc00315 	stw	r19,12(sp)
10016144:	24c0b804 	addi	r19,r4,736
10016148:	dd400515 	stw	r21,20(sp)
1001614c:	dd000415 	stw	r20,16(sp)
10016150:	dfc00615 	stw	ra,24(sp)
10016154:	dc800215 	stw	r18,8(sp)
10016158:	dc400115 	stw	r17,4(sp)
1001615c:	dc000015 	stw	r16,0(sp)
10016160:	282b883a 	mov	r21,r5
10016164:	0029883a 	mov	r20,zero
10016168:	00153040 	call	10015304 <__sfp_lock_acquire>
1001616c:	98001226 	beq	r19,zero,100161b8 <_fwalk+0x7c>
10016170:	04bfffc4 	movi	r18,-1
10016174:	9c400117 	ldw	r17,4(r19)
10016178:	9c000217 	ldw	r16,8(r19)
1001617c:	8c7fffc4 	addi	r17,r17,-1
10016180:	88000b16 	blt	r17,zero,100161b0 <_fwalk+0x74>
10016184:	84000304 	addi	r16,r16,12
10016188:	80c0000f 	ldh	r3,0(r16)
1001618c:	8c7fffc4 	addi	r17,r17,-1
10016190:	813ffd04 	addi	r4,r16,-12
10016194:	18000426 	beq	r3,zero,100161a8 <_fwalk+0x6c>
10016198:	80c0008f 	ldh	r3,2(r16)
1001619c:	1c800226 	beq	r3,r18,100161a8 <_fwalk+0x6c>
100161a0:	a83ee83a 	callr	r21
100161a4:	a0a8b03a 	or	r20,r20,r2
100161a8:	84001704 	addi	r16,r16,92
100161ac:	8cbff61e 	bne	r17,r18,10016188 <__alt_data_end+0xf8016188>
100161b0:	9cc00017 	ldw	r19,0(r19)
100161b4:	983fef1e 	bne	r19,zero,10016174 <__alt_data_end+0xf8016174>
100161b8:	00153080 	call	10015308 <__sfp_lock_release>
100161bc:	a005883a 	mov	r2,r20
100161c0:	dfc00617 	ldw	ra,24(sp)
100161c4:	dd400517 	ldw	r21,20(sp)
100161c8:	dd000417 	ldw	r20,16(sp)
100161cc:	dcc00317 	ldw	r19,12(sp)
100161d0:	dc800217 	ldw	r18,8(sp)
100161d4:	dc400117 	ldw	r17,4(sp)
100161d8:	dc000017 	ldw	r16,0(sp)
100161dc:	dec00704 	addi	sp,sp,28
100161e0:	f800283a 	ret

100161e4 <_fwalk_reent>:
100161e4:	defff804 	addi	sp,sp,-32
100161e8:	dcc00315 	stw	r19,12(sp)
100161ec:	24c0b804 	addi	r19,r4,736
100161f0:	dd800615 	stw	r22,24(sp)
100161f4:	dd400515 	stw	r21,20(sp)
100161f8:	dd000415 	stw	r20,16(sp)
100161fc:	dfc00715 	stw	ra,28(sp)
10016200:	dc800215 	stw	r18,8(sp)
10016204:	dc400115 	stw	r17,4(sp)
10016208:	dc000015 	stw	r16,0(sp)
1001620c:	2029883a 	mov	r20,r4
10016210:	282b883a 	mov	r21,r5
10016214:	002d883a 	mov	r22,zero
10016218:	00153040 	call	10015304 <__sfp_lock_acquire>
1001621c:	98001326 	beq	r19,zero,1001626c <_fwalk_reent+0x88>
10016220:	04bfffc4 	movi	r18,-1
10016224:	9c400117 	ldw	r17,4(r19)
10016228:	9c000217 	ldw	r16,8(r19)
1001622c:	8c7fffc4 	addi	r17,r17,-1
10016230:	88000c16 	blt	r17,zero,10016264 <_fwalk_reent+0x80>
10016234:	84000304 	addi	r16,r16,12
10016238:	80c0000f 	ldh	r3,0(r16)
1001623c:	8c7fffc4 	addi	r17,r17,-1
10016240:	817ffd04 	addi	r5,r16,-12
10016244:	18000526 	beq	r3,zero,1001625c <_fwalk_reent+0x78>
10016248:	80c0008f 	ldh	r3,2(r16)
1001624c:	a009883a 	mov	r4,r20
10016250:	1c800226 	beq	r3,r18,1001625c <_fwalk_reent+0x78>
10016254:	a83ee83a 	callr	r21
10016258:	b0acb03a 	or	r22,r22,r2
1001625c:	84001704 	addi	r16,r16,92
10016260:	8cbff51e 	bne	r17,r18,10016238 <__alt_data_end+0xf8016238>
10016264:	9cc00017 	ldw	r19,0(r19)
10016268:	983fee1e 	bne	r19,zero,10016224 <__alt_data_end+0xf8016224>
1001626c:	00153080 	call	10015308 <__sfp_lock_release>
10016270:	b005883a 	mov	r2,r22
10016274:	dfc00717 	ldw	ra,28(sp)
10016278:	dd800617 	ldw	r22,24(sp)
1001627c:	dd400517 	ldw	r21,20(sp)
10016280:	dd000417 	ldw	r20,16(sp)
10016284:	dcc00317 	ldw	r19,12(sp)
10016288:	dc800217 	ldw	r18,8(sp)
1001628c:	dc400117 	ldw	r17,4(sp)
10016290:	dc000017 	ldw	r16,0(sp)
10016294:	dec00804 	addi	sp,sp,32
10016298:	f800283a 	ret

1001629c <_fwrite_r>:
1001629c:	defff604 	addi	sp,sp,-40
100162a0:	dc000515 	stw	r16,20(sp)
100162a4:	d9400315 	stw	r5,12(sp)
100162a8:	2021883a 	mov	r16,r4
100162ac:	300b883a 	mov	r5,r6
100162b0:	3809883a 	mov	r4,r7
100162b4:	dcc00815 	stw	r19,32(sp)
100162b8:	dc800715 	stw	r18,28(sp)
100162bc:	dc400615 	stw	r17,24(sp)
100162c0:	dfc00915 	stw	ra,36(sp)
100162c4:	3027883a 	mov	r19,r6
100162c8:	3823883a 	mov	r17,r7
100162cc:	00146fc0 	call	100146fc <__mulsi3>
100162d0:	1025883a 	mov	r18,r2
100162d4:	d8800415 	stw	r2,16(sp)
100162d8:	d8800215 	stw	r2,8(sp)
100162dc:	d8800304 	addi	r2,sp,12
100162e0:	d8800015 	stw	r2,0(sp)
100162e4:	00800044 	movi	r2,1
100162e8:	d8800115 	stw	r2,4(sp)
100162ec:	80000226 	beq	r16,zero,100162f8 <_fwrite_r+0x5c>
100162f0:	80800e17 	ldw	r2,56(r16)
100162f4:	10001226 	beq	r2,zero,10016340 <_fwrite_r+0xa4>
100162f8:	d9400a17 	ldw	r5,40(sp)
100162fc:	8009883a 	mov	r4,r16
10016300:	d80d883a 	mov	r6,sp
10016304:	001beb00 	call	1001beb0 <__sfvwrite_r>
10016308:	10000526 	beq	r2,zero,10016320 <_fwrite_r+0x84>
1001630c:	d9000217 	ldw	r4,8(sp)
10016310:	980b883a 	mov	r5,r19
10016314:	9109c83a 	sub	r4,r18,r4
10016318:	00146ec0 	call	100146ec <__udivsi3>
1001631c:	1023883a 	mov	r17,r2
10016320:	8805883a 	mov	r2,r17
10016324:	dfc00917 	ldw	ra,36(sp)
10016328:	dcc00817 	ldw	r19,32(sp)
1001632c:	dc800717 	ldw	r18,28(sp)
10016330:	dc400617 	ldw	r17,24(sp)
10016334:	dc000517 	ldw	r16,20(sp)
10016338:	dec00a04 	addi	sp,sp,40
1001633c:	f800283a 	ret
10016340:	8009883a 	mov	r4,r16
10016344:	00150fc0 	call	100150fc <__sinit>
10016348:	003feb06 	br	100162f8 <__alt_data_end+0xf80162f8>

1001634c <fwrite>:
1001634c:	008400b4 	movhi	r2,4098
10016350:	1096f004 	addi	r2,r2,23488
10016354:	2011883a 	mov	r8,r4
10016358:	11000017 	ldw	r4,0(r2)
1001635c:	defffe04 	addi	sp,sp,-8
10016360:	2807883a 	mov	r3,r5
10016364:	3005883a 	mov	r2,r6
10016368:	d9c00015 	stw	r7,0(sp)
1001636c:	400b883a 	mov	r5,r8
10016370:	180d883a 	mov	r6,r3
10016374:	100f883a 	mov	r7,r2
10016378:	dfc00115 	stw	ra,4(sp)
1001637c:	001629c0 	call	1001629c <_fwrite_r>
10016380:	dfc00117 	ldw	ra,4(sp)
10016384:	dec00204 	addi	sp,sp,8
10016388:	f800283a 	ret

1001638c <__smakebuf_r>:
1001638c:	2880030b 	ldhu	r2,12(r5)
10016390:	deffed04 	addi	sp,sp,-76
10016394:	dc401015 	stw	r17,64(sp)
10016398:	10c0008c 	andi	r3,r2,2
1001639c:	18ffffcc 	andi	r3,r3,65535
100163a0:	18e0001c 	xori	r3,r3,32768
100163a4:	dc000f15 	stw	r16,60(sp)
100163a8:	dfc01215 	stw	ra,72(sp)
100163ac:	dc801115 	stw	r18,68(sp)
100163b0:	18e00004 	addi	r3,r3,-32768
100163b4:	2821883a 	mov	r16,r5
100163b8:	2023883a 	mov	r17,r4
100163bc:	1800381e 	bne	r3,zero,100164a0 <__smakebuf_r+0x114>
100163c0:	2940038f 	ldh	r5,14(r5)
100163c4:	28002d16 	blt	r5,zero,1001647c <__smakebuf_r+0xf0>
100163c8:	d80d883a 	mov	r6,sp
100163cc:	0015fb00 	call	10015fb0 <_fstat_r>
100163d0:	10002916 	blt	r2,zero,10016478 <__smakebuf_r+0xec>
100163d4:	d8800117 	ldw	r2,4(sp)
100163d8:	00e00014 	movui	r3,32768
100163dc:	10bc000c 	andi	r2,r2,61440
100163e0:	10c03c26 	beq	r2,r3,100164d4 <__smakebuf_r+0x148>
100163e4:	80c0030b 	ldhu	r3,12(r16)
100163e8:	18c20014 	ori	r3,r3,2048
100163ec:	80c0030d 	sth	r3,12(r16)
100163f0:	00c80004 	movi	r3,8192
100163f4:	10c00c1e 	bne	r2,r3,10016428 <__smakebuf_r+0x9c>
100163f8:	8140038f 	ldh	r5,14(r16)
100163fc:	8809883a 	mov	r4,r17
10016400:	001c3940 	call	1001c394 <_isatty_r>
10016404:	10000826 	beq	r2,zero,10016428 <__smakebuf_r+0x9c>
10016408:	80c0030b 	ldhu	r3,12(r16)
1001640c:	808010c4 	addi	r2,r16,67
10016410:	80800015 	stw	r2,0(r16)
10016414:	18c00054 	ori	r3,r3,1
10016418:	80800415 	stw	r2,16(r16)
1001641c:	00800044 	movi	r2,1
10016420:	80c0030d 	sth	r3,12(r16)
10016424:	80800515 	stw	r2,20(r16)
10016428:	04810004 	movi	r18,1024
1001642c:	8809883a 	mov	r4,r17
10016430:	900b883a 	mov	r5,r18
10016434:	001655c0 	call	1001655c <_malloc_r>
10016438:	10003026 	beq	r2,zero,100164fc <__smakebuf_r+0x170>
1001643c:	80c0030b 	ldhu	r3,12(r16)
10016440:	01040074 	movhi	r4,4097
10016444:	21141a04 	addi	r4,r4,20584
10016448:	89000f15 	stw	r4,60(r17)
1001644c:	18c02014 	ori	r3,r3,128
10016450:	80c0030d 	sth	r3,12(r16)
10016454:	80800015 	stw	r2,0(r16)
10016458:	80800415 	stw	r2,16(r16)
1001645c:	84800515 	stw	r18,20(r16)
10016460:	dfc01217 	ldw	ra,72(sp)
10016464:	dc801117 	ldw	r18,68(sp)
10016468:	dc401017 	ldw	r17,64(sp)
1001646c:	dc000f17 	ldw	r16,60(sp)
10016470:	dec01304 	addi	sp,sp,76
10016474:	f800283a 	ret
10016478:	8080030b 	ldhu	r2,12(r16)
1001647c:	10c0200c 	andi	r3,r2,128
10016480:	18ffffcc 	andi	r3,r3,65535
10016484:	18e0001c 	xori	r3,r3,32768
10016488:	18e00004 	addi	r3,r3,-32768
1001648c:	18000f1e 	bne	r3,zero,100164cc <__smakebuf_r+0x140>
10016490:	04810004 	movi	r18,1024
10016494:	10820014 	ori	r2,r2,2048
10016498:	8080030d 	sth	r2,12(r16)
1001649c:	003fe306 	br	1001642c <__alt_data_end+0xf801642c>
100164a0:	288010c4 	addi	r2,r5,67
100164a4:	28800015 	stw	r2,0(r5)
100164a8:	28800415 	stw	r2,16(r5)
100164ac:	00800044 	movi	r2,1
100164b0:	28800515 	stw	r2,20(r5)
100164b4:	dfc01217 	ldw	ra,72(sp)
100164b8:	dc801117 	ldw	r18,68(sp)
100164bc:	dc401017 	ldw	r17,64(sp)
100164c0:	dc000f17 	ldw	r16,60(sp)
100164c4:	dec01304 	addi	sp,sp,76
100164c8:	f800283a 	ret
100164cc:	04801004 	movi	r18,64
100164d0:	003ff006 	br	10016494 <__alt_data_end+0xf8016494>
100164d4:	81000a17 	ldw	r4,40(r16)
100164d8:	00c400b4 	movhi	r3,4098
100164dc:	18e0c504 	addi	r3,r3,-31980
100164e0:	20ffc01e 	bne	r4,r3,100163e4 <__alt_data_end+0xf80163e4>
100164e4:	8080030b 	ldhu	r2,12(r16)
100164e8:	00c10004 	movi	r3,1024
100164ec:	80c01315 	stw	r3,76(r16)
100164f0:	10c4b03a 	or	r2,r2,r3
100164f4:	8080030d 	sth	r2,12(r16)
100164f8:	003fcb06 	br	10016428 <__alt_data_end+0xf8016428>
100164fc:	8080030b 	ldhu	r2,12(r16)
10016500:	10c0800c 	andi	r3,r2,512
10016504:	18ffffcc 	andi	r3,r3,65535
10016508:	18e0001c 	xori	r3,r3,32768
1001650c:	18e00004 	addi	r3,r3,-32768
10016510:	183fd31e 	bne	r3,zero,10016460 <__alt_data_end+0xf8016460>
10016514:	10800094 	ori	r2,r2,2
10016518:	80c010c4 	addi	r3,r16,67
1001651c:	8080030d 	sth	r2,12(r16)
10016520:	00800044 	movi	r2,1
10016524:	80c00015 	stw	r3,0(r16)
10016528:	80c00415 	stw	r3,16(r16)
1001652c:	80800515 	stw	r2,20(r16)
10016530:	003fcb06 	br	10016460 <__alt_data_end+0xf8016460>

10016534 <malloc>:
10016534:	008400b4 	movhi	r2,4098
10016538:	1096f004 	addi	r2,r2,23488
1001653c:	200b883a 	mov	r5,r4
10016540:	11000017 	ldw	r4,0(r2)
10016544:	001655c1 	jmpi	1001655c <_malloc_r>

10016548 <free>:
10016548:	008400b4 	movhi	r2,4098
1001654c:	1096f004 	addi	r2,r2,23488
10016550:	200b883a 	mov	r5,r4
10016554:	11000017 	ldw	r4,0(r2)
10016558:	00158481 	jmpi	10015848 <_free_r>

1001655c <_malloc_r>:
1001655c:	defff604 	addi	sp,sp,-40
10016560:	dc800215 	stw	r18,8(sp)
10016564:	dfc00915 	stw	ra,36(sp)
10016568:	df000815 	stw	fp,32(sp)
1001656c:	ddc00715 	stw	r23,28(sp)
10016570:	dd800615 	stw	r22,24(sp)
10016574:	dd400515 	stw	r21,20(sp)
10016578:	dd000415 	stw	r20,16(sp)
1001657c:	dcc00315 	stw	r19,12(sp)
10016580:	dc400115 	stw	r17,4(sp)
10016584:	dc000015 	stw	r16,0(sp)
10016588:	288002c4 	addi	r2,r5,11
1001658c:	00c00584 	movi	r3,22
10016590:	2025883a 	mov	r18,r4
10016594:	18802b2e 	bgeu	r3,r2,10016644 <_malloc_r+0xe8>
10016598:	047ffe04 	movi	r17,-8
1001659c:	1462703a 	and	r17,r2,r17
100165a0:	88002a16 	blt	r17,zero,1001664c <_malloc_r+0xf0>
100165a4:	89402936 	bltu	r17,r5,1001664c <_malloc_r+0xf0>
100165a8:	9009883a 	mov	r4,r18
100165ac:	001ffa80 	call	1001ffa8 <__malloc_lock>
100165b0:	00807dc4 	movi	r2,503
100165b4:	14402936 	bltu	r2,r17,1001665c <_malloc_r+0x100>
100165b8:	8808d0fa 	srli	r4,r17,3
100165bc:	04c400b4 	movhi	r19,4098
100165c0:	9cd15a04 	addi	r19,r19,17768
100165c4:	2105883a 	add	r2,r4,r4
100165c8:	1085883a 	add	r2,r2,r2
100165cc:	1085883a 	add	r2,r2,r2
100165d0:	9885883a 	add	r2,r19,r2
100165d4:	14000317 	ldw	r16,12(r2)
100165d8:	80815526 	beq	r16,r2,10016b30 <_malloc_r+0x5d4>
100165dc:	81000117 	ldw	r4,4(r16)
100165e0:	00bfff04 	movi	r2,-4
100165e4:	80c00317 	ldw	r3,12(r16)
100165e8:	2084703a 	and	r2,r4,r2
100165ec:	8085883a 	add	r2,r16,r2
100165f0:	11800117 	ldw	r6,4(r2)
100165f4:	81400217 	ldw	r5,8(r16)
100165f8:	9009883a 	mov	r4,r18
100165fc:	31800054 	ori	r6,r6,1
10016600:	11800115 	stw	r6,4(r2)
10016604:	28c00315 	stw	r3,12(r5)
10016608:	19400215 	stw	r5,8(r3)
1001660c:	001ffc80 	call	1001ffc8 <__malloc_unlock>
10016610:	80800204 	addi	r2,r16,8
10016614:	dfc00917 	ldw	ra,36(sp)
10016618:	df000817 	ldw	fp,32(sp)
1001661c:	ddc00717 	ldw	r23,28(sp)
10016620:	dd800617 	ldw	r22,24(sp)
10016624:	dd400517 	ldw	r21,20(sp)
10016628:	dd000417 	ldw	r20,16(sp)
1001662c:	dcc00317 	ldw	r19,12(sp)
10016630:	dc800217 	ldw	r18,8(sp)
10016634:	dc400117 	ldw	r17,4(sp)
10016638:	dc000017 	ldw	r16,0(sp)
1001663c:	dec00a04 	addi	sp,sp,40
10016640:	f800283a 	ret
10016644:	04400404 	movi	r17,16
10016648:	897fd72e 	bgeu	r17,r5,100165a8 <__alt_data_end+0xf80165a8>
1001664c:	00800304 	movi	r2,12
10016650:	90800015 	stw	r2,0(r18)
10016654:	0005883a 	mov	r2,zero
10016658:	003fee06 	br	10016614 <__alt_data_end+0xf8016614>
1001665c:	8808d27a 	srli	r4,r17,9
10016660:	20007126 	beq	r4,zero,10016828 <_malloc_r+0x2cc>
10016664:	00800104 	movi	r2,4
10016668:	1100eb36 	bltu	r2,r4,10016a18 <_malloc_r+0x4bc>
1001666c:	8808d1ba 	srli	r4,r17,6
10016670:	21000e04 	addi	r4,r4,56
10016674:	210b883a 	add	r5,r4,r4
10016678:	294b883a 	add	r5,r5,r5
1001667c:	294b883a 	add	r5,r5,r5
10016680:	04c400b4 	movhi	r19,4098
10016684:	9cd15a04 	addi	r19,r19,17768
10016688:	994b883a 	add	r5,r19,r5
1001668c:	2c000317 	ldw	r16,12(r5)
10016690:	2c000e26 	beq	r5,r16,100166cc <_malloc_r+0x170>
10016694:	80c00117 	ldw	r3,4(r16)
10016698:	01ffff04 	movi	r7,-4
1001669c:	018003c4 	movi	r6,15
100166a0:	19c6703a 	and	r3,r3,r7
100166a4:	1c45c83a 	sub	r2,r3,r17
100166a8:	30800716 	blt	r6,r2,100166c8 <_malloc_r+0x16c>
100166ac:	1000610e 	bge	r2,zero,10016834 <_malloc_r+0x2d8>
100166b0:	84000317 	ldw	r16,12(r16)
100166b4:	2c000526 	beq	r5,r16,100166cc <_malloc_r+0x170>
100166b8:	80c00117 	ldw	r3,4(r16)
100166bc:	19c6703a 	and	r3,r3,r7
100166c0:	1c45c83a 	sub	r2,r3,r17
100166c4:	30bff90e 	bge	r6,r2,100166ac <__alt_data_end+0xf80166ac>
100166c8:	213fffc4 	addi	r4,r4,-1
100166cc:	21000044 	addi	r4,r4,1
100166d0:	9c000417 	ldw	r16,16(r19)
100166d4:	00c400b4 	movhi	r3,4098
100166d8:	18d15a04 	addi	r3,r3,17768
100166dc:	1a400204 	addi	r9,r3,8
100166e0:	8240ff26 	beq	r16,r9,10016ae0 <_malloc_r+0x584>
100166e4:	81400117 	ldw	r5,4(r16)
100166e8:	00bfff04 	movi	r2,-4
100166ec:	018003c4 	movi	r6,15
100166f0:	2884703a 	and	r2,r5,r2
100166f4:	144bc83a 	sub	r5,r2,r17
100166f8:	3140ea16 	blt	r6,r5,10016aa4 <_malloc_r+0x548>
100166fc:	1a400515 	stw	r9,20(r3)
10016700:	1a400415 	stw	r9,16(r3)
10016704:	2800570e 	bge	r5,zero,10016864 <_malloc_r+0x308>
10016708:	01407fc4 	movi	r5,511
1001670c:	2880ca36 	bltu	r5,r2,10016a38 <_malloc_r+0x4dc>
10016710:	1004d0fa 	srli	r2,r2,3
10016714:	02000044 	movi	r8,1
10016718:	19c00117 	ldw	r7,4(r3)
1001671c:	108b883a 	add	r5,r2,r2
10016720:	294b883a 	add	r5,r5,r5
10016724:	1005d0ba 	srai	r2,r2,2
10016728:	294b883a 	add	r5,r5,r5
1001672c:	28cb883a 	add	r5,r5,r3
10016730:	29800217 	ldw	r6,8(r5)
10016734:	4084983a 	sll	r2,r8,r2
10016738:	81400315 	stw	r5,12(r16)
1001673c:	81800215 	stw	r6,8(r16)
10016740:	11c4b03a 	or	r2,r2,r7
10016744:	18800115 	stw	r2,4(r3)
10016748:	2c000215 	stw	r16,8(r5)
1001674c:	34000315 	stw	r16,12(r6)
10016750:	200bd0ba 	srai	r5,r4,2
10016754:	00c00044 	movi	r3,1
10016758:	194a983a 	sll	r5,r3,r5
1001675c:	11404936 	bltu	r2,r5,10016884 <_malloc_r+0x328>
10016760:	1146703a 	and	r3,r2,r5
10016764:	18000a1e 	bne	r3,zero,10016790 <_malloc_r+0x234>
10016768:	00ffff04 	movi	r3,-4
1001676c:	294b883a 	add	r5,r5,r5
10016770:	20c8703a 	and	r4,r4,r3
10016774:	1146703a 	and	r3,r2,r5
10016778:	21000104 	addi	r4,r4,4
1001677c:	1800041e 	bne	r3,zero,10016790 <_malloc_r+0x234>
10016780:	294b883a 	add	r5,r5,r5
10016784:	1146703a 	and	r3,r2,r5
10016788:	21000104 	addi	r4,r4,4
1001678c:	183ffc26 	beq	r3,zero,10016780 <__alt_data_end+0xf8016780>
10016790:	023fff04 	movi	r8,-4
10016794:	01c003c4 	movi	r7,15
10016798:	2105883a 	add	r2,r4,r4
1001679c:	1085883a 	add	r2,r2,r2
100167a0:	1085883a 	add	r2,r2,r2
100167a4:	9899883a 	add	r12,r19,r2
100167a8:	62800304 	addi	r10,r12,12
100167ac:	2017883a 	mov	r11,r4
100167b0:	54000017 	ldw	r16,0(r10)
100167b4:	51bffd04 	addi	r6,r10,-12
100167b8:	8180041e 	bne	r16,r6,100167cc <_malloc_r+0x270>
100167bc:	0000ca06 	br	10016ae8 <_malloc_r+0x58c>
100167c0:	10001c0e 	bge	r2,zero,10016834 <_malloc_r+0x2d8>
100167c4:	84000317 	ldw	r16,12(r16)
100167c8:	8180c726 	beq	r16,r6,10016ae8 <_malloc_r+0x58c>
100167cc:	80c00117 	ldw	r3,4(r16)
100167d0:	1a06703a 	and	r3,r3,r8
100167d4:	1c45c83a 	sub	r2,r3,r17
100167d8:	38bff90e 	bge	r7,r2,100167c0 <__alt_data_end+0xf80167c0>
100167dc:	81000317 	ldw	r4,12(r16)
100167e0:	81400217 	ldw	r5,8(r16)
100167e4:	8447883a 	add	r3,r16,r17
100167e8:	8c400054 	ori	r17,r17,1
100167ec:	29000315 	stw	r4,12(r5)
100167f0:	21400215 	stw	r5,8(r4)
100167f4:	84400115 	stw	r17,4(r16)
100167f8:	1889883a 	add	r4,r3,r2
100167fc:	11400054 	ori	r5,r2,1
10016800:	98c00515 	stw	r3,20(r19)
10016804:	98c00415 	stw	r3,16(r19)
10016808:	20800015 	stw	r2,0(r4)
1001680c:	1a400315 	stw	r9,12(r3)
10016810:	1a400215 	stw	r9,8(r3)
10016814:	19400115 	stw	r5,4(r3)
10016818:	9009883a 	mov	r4,r18
1001681c:	001ffc80 	call	1001ffc8 <__malloc_unlock>
10016820:	80800204 	addi	r2,r16,8
10016824:	003f7b06 	br	10016614 <__alt_data_end+0xf8016614>
10016828:	8808d0fa 	srli	r4,r17,3
1001682c:	210b883a 	add	r5,r4,r4
10016830:	003f9106 	br	10016678 <__alt_data_end+0xf8016678>
10016834:	80c7883a 	add	r3,r16,r3
10016838:	19400117 	ldw	r5,4(r3)
1001683c:	80800317 	ldw	r2,12(r16)
10016840:	81000217 	ldw	r4,8(r16)
10016844:	29400054 	ori	r5,r5,1
10016848:	19400115 	stw	r5,4(r3)
1001684c:	20800315 	stw	r2,12(r4)
10016850:	11000215 	stw	r4,8(r2)
10016854:	9009883a 	mov	r4,r18
10016858:	001ffc80 	call	1001ffc8 <__malloc_unlock>
1001685c:	80800204 	addi	r2,r16,8
10016860:	003f6c06 	br	10016614 <__alt_data_end+0xf8016614>
10016864:	8085883a 	add	r2,r16,r2
10016868:	10c00117 	ldw	r3,4(r2)
1001686c:	9009883a 	mov	r4,r18
10016870:	18c00054 	ori	r3,r3,1
10016874:	10c00115 	stw	r3,4(r2)
10016878:	001ffc80 	call	1001ffc8 <__malloc_unlock>
1001687c:	80800204 	addi	r2,r16,8
10016880:	003f6406 	br	10016614 <__alt_data_end+0xf8016614>
10016884:	9c000217 	ldw	r16,8(r19)
10016888:	00bfff04 	movi	r2,-4
1001688c:	85400117 	ldw	r21,4(r16)
10016890:	a8aa703a 	and	r21,r21,r2
10016894:	ac400336 	bltu	r21,r17,100168a4 <_malloc_r+0x348>
10016898:	ac45c83a 	sub	r2,r21,r17
1001689c:	00c003c4 	movi	r3,15
100168a0:	18805316 	blt	r3,r2,100169f0 <_malloc_r+0x494>
100168a4:	d5e7de17 	ldw	r23,-24712(gp)
100168a8:	d0e00617 	ldw	r3,-32744(gp)
100168ac:	00bfffc4 	movi	r2,-1
100168b0:	8579883a 	add	fp,r16,r21
100168b4:	8def883a 	add	r23,r17,r23
100168b8:	1880d226 	beq	r3,r2,10016c04 <_malloc_r+0x6a8>
100168bc:	bdc403c4 	addi	r23,r23,4111
100168c0:	00bc0004 	movi	r2,-4096
100168c4:	b8ae703a 	and	r23,r23,r2
100168c8:	9009883a 	mov	r4,r18
100168cc:	b80b883a 	mov	r5,r23
100168d0:	00181d40 	call	100181d4 <_sbrk_r>
100168d4:	1029883a 	mov	r20,r2
100168d8:	00bfffc4 	movi	r2,-1
100168dc:	a080d126 	beq	r20,r2,10016c24 <_malloc_r+0x6c8>
100168e0:	a7009f36 	bltu	r20,fp,10016b60 <_malloc_r+0x604>
100168e4:	058400b4 	movhi	r22,4098
100168e8:	b59ed304 	addi	r22,r22,31564
100168ec:	b0800017 	ldw	r2,0(r22)
100168f0:	b885883a 	add	r2,r23,r2
100168f4:	b0800015 	stw	r2,0(r22)
100168f8:	e500cf26 	beq	fp,r20,10016c38 <_malloc_r+0x6dc>
100168fc:	d1200617 	ldw	r4,-32744(gp)
10016900:	00ffffc4 	movi	r3,-1
10016904:	20c0e026 	beq	r4,r3,10016c88 <_malloc_r+0x72c>
10016908:	a739c83a 	sub	fp,r20,fp
1001690c:	1705883a 	add	r2,r2,fp
10016910:	b0800015 	stw	r2,0(r22)
10016914:	a08001cc 	andi	r2,r20,7
10016918:	1000a526 	beq	r2,zero,10016bb0 <_malloc_r+0x654>
1001691c:	a0a9c83a 	sub	r20,r20,r2
10016920:	00c40204 	movi	r3,4104
10016924:	a5000204 	addi	r20,r20,8
10016928:	1885c83a 	sub	r2,r3,r2
1001692c:	a5c7883a 	add	r3,r20,r23
10016930:	18c3ffcc 	andi	r3,r3,4095
10016934:	10efc83a 	sub	r23,r2,r3
10016938:	9009883a 	mov	r4,r18
1001693c:	b80b883a 	mov	r5,r23
10016940:	00181d40 	call	100181d4 <_sbrk_r>
10016944:	00ffffc4 	movi	r3,-1
10016948:	10c0cc26 	beq	r2,r3,10016c7c <_malloc_r+0x720>
1001694c:	1505c83a 	sub	r2,r2,r20
10016950:	b887883a 	add	r3,r23,r2
10016954:	18c00054 	ori	r3,r3,1
10016958:	b0800017 	ldw	r2,0(r22)
1001695c:	9d000215 	stw	r20,8(r19)
10016960:	a0c00115 	stw	r3,4(r20)
10016964:	b885883a 	add	r2,r23,r2
10016968:	b0800015 	stw	r2,0(r22)
1001696c:	84c00e26 	beq	r16,r19,100169a8 <_malloc_r+0x44c>
10016970:	00c003c4 	movi	r3,15
10016974:	1d40902e 	bgeu	r3,r21,10016bb8 <_malloc_r+0x65c>
10016978:	ad7ffd04 	addi	r21,r21,-12
1001697c:	013ffe04 	movi	r4,-8
10016980:	a908703a 	and	r4,r21,r4
10016984:	810b883a 	add	r5,r16,r4
10016988:	01800144 	movi	r6,5
1001698c:	29800115 	stw	r6,4(r5)
10016990:	29800215 	stw	r6,8(r5)
10016994:	81400117 	ldw	r5,4(r16)
10016998:	2940004c 	andi	r5,r5,1
1001699c:	214ab03a 	or	r5,r4,r5
100169a0:	81400115 	stw	r5,4(r16)
100169a4:	1900ae36 	bltu	r3,r4,10016c60 <_malloc_r+0x704>
100169a8:	d0e7dd17 	ldw	r3,-24716(gp)
100169ac:	1880012e 	bgeu	r3,r2,100169b4 <_malloc_r+0x458>
100169b0:	d0a7dd15 	stw	r2,-24716(gp)
100169b4:	d0e7dc17 	ldw	r3,-24720(gp)
100169b8:	9c000217 	ldw	r16,8(r19)
100169bc:	1880012e 	bgeu	r3,r2,100169c4 <_malloc_r+0x468>
100169c0:	d0a7dc15 	stw	r2,-24720(gp)
100169c4:	80c00117 	ldw	r3,4(r16)
100169c8:	00bfff04 	movi	r2,-4
100169cc:	1886703a 	and	r3,r3,r2
100169d0:	1c45c83a 	sub	r2,r3,r17
100169d4:	1c400236 	bltu	r3,r17,100169e0 <_malloc_r+0x484>
100169d8:	00c003c4 	movi	r3,15
100169dc:	18800416 	blt	r3,r2,100169f0 <_malloc_r+0x494>
100169e0:	9009883a 	mov	r4,r18
100169e4:	001ffc80 	call	1001ffc8 <__malloc_unlock>
100169e8:	0005883a 	mov	r2,zero
100169ec:	003f0906 	br	10016614 <__alt_data_end+0xf8016614>
100169f0:	88c00054 	ori	r3,r17,1
100169f4:	10800054 	ori	r2,r2,1
100169f8:	80c00115 	stw	r3,4(r16)
100169fc:	8463883a 	add	r17,r16,r17
10016a00:	88800115 	stw	r2,4(r17)
10016a04:	9009883a 	mov	r4,r18
10016a08:	9c400215 	stw	r17,8(r19)
10016a0c:	001ffc80 	call	1001ffc8 <__malloc_unlock>
10016a10:	80800204 	addi	r2,r16,8
10016a14:	003eff06 	br	10016614 <__alt_data_end+0xf8016614>
10016a18:	00800504 	movi	r2,20
10016a1c:	1100492e 	bgeu	r2,r4,10016b44 <_malloc_r+0x5e8>
10016a20:	00801504 	movi	r2,84
10016a24:	11005c36 	bltu	r2,r4,10016b98 <_malloc_r+0x63c>
10016a28:	8808d33a 	srli	r4,r17,12
10016a2c:	21001b84 	addi	r4,r4,110
10016a30:	210b883a 	add	r5,r4,r4
10016a34:	003f1006 	br	10016678 <__alt_data_end+0xf8016678>
10016a38:	1006d27a 	srli	r3,r2,9
10016a3c:	01400104 	movi	r5,4
10016a40:	28c0432e 	bgeu	r5,r3,10016b50 <_malloc_r+0x5f4>
10016a44:	01400504 	movi	r5,20
10016a48:	28c07036 	bltu	r5,r3,10016c0c <_malloc_r+0x6b0>
10016a4c:	194016c4 	addi	r5,r3,91
10016a50:	294d883a 	add	r6,r5,r5
10016a54:	318d883a 	add	r6,r6,r6
10016a58:	318d883a 	add	r6,r6,r6
10016a5c:	998d883a 	add	r6,r19,r6
10016a60:	30c00217 	ldw	r3,8(r6)
10016a64:	01c400b4 	movhi	r7,4098
10016a68:	39d15a04 	addi	r7,r7,17768
10016a6c:	19805726 	beq	r3,r6,10016bcc <_malloc_r+0x670>
10016a70:	01ffff04 	movi	r7,-4
10016a74:	19400117 	ldw	r5,4(r3)
10016a78:	29ca703a 	and	r5,r5,r7
10016a7c:	1140022e 	bgeu	r2,r5,10016a88 <_malloc_r+0x52c>
10016a80:	18c00217 	ldw	r3,8(r3)
10016a84:	30fffb1e 	bne	r6,r3,10016a74 <__alt_data_end+0xf8016a74>
10016a88:	19400317 	ldw	r5,12(r3)
10016a8c:	98800117 	ldw	r2,4(r19)
10016a90:	81400315 	stw	r5,12(r16)
10016a94:	80c00215 	stw	r3,8(r16)
10016a98:	2c000215 	stw	r16,8(r5)
10016a9c:	1c000315 	stw	r16,12(r3)
10016aa0:	003f2b06 	br	10016750 <__alt_data_end+0xf8016750>
10016aa4:	8445883a 	add	r2,r16,r17
10016aa8:	8c400054 	ori	r17,r17,1
10016aac:	18800515 	stw	r2,20(r3)
10016ab0:	18800415 	stw	r2,16(r3)
10016ab4:	29000054 	ori	r4,r5,1
10016ab8:	1147883a 	add	r3,r2,r5
10016abc:	84400115 	stw	r17,4(r16)
10016ac0:	11000115 	stw	r4,4(r2)
10016ac4:	12400315 	stw	r9,12(r2)
10016ac8:	12400215 	stw	r9,8(r2)
10016acc:	19400015 	stw	r5,0(r3)
10016ad0:	9009883a 	mov	r4,r18
10016ad4:	001ffc80 	call	1001ffc8 <__malloc_unlock>
10016ad8:	80800204 	addi	r2,r16,8
10016adc:	003ecd06 	br	10016614 <__alt_data_end+0xf8016614>
10016ae0:	18800117 	ldw	r2,4(r3)
10016ae4:	003f1a06 	br	10016750 <__alt_data_end+0xf8016750>
10016ae8:	5ac00044 	addi	r11,r11,1
10016aec:	588000cc 	andi	r2,r11,3
10016af0:	52800204 	addi	r10,r10,8
10016af4:	103f2e1e 	bne	r2,zero,100167b0 <__alt_data_end+0xf80167b0>
10016af8:	20c000cc 	andi	r3,r4,3
10016afc:	60bffe04 	addi	r2,r12,-8
10016b00:	18006f26 	beq	r3,zero,10016cc0 <_malloc_r+0x764>
10016b04:	63000017 	ldw	r12,0(r12)
10016b08:	213fffc4 	addi	r4,r4,-1
10016b0c:	60bffa26 	beq	r12,r2,10016af8 <__alt_data_end+0xf8016af8>
10016b10:	98800117 	ldw	r2,4(r19)
10016b14:	294b883a 	add	r5,r5,r5
10016b18:	117f5a36 	bltu	r2,r5,10016884 <__alt_data_end+0xf8016884>
10016b1c:	283f5926 	beq	r5,zero,10016884 <__alt_data_end+0xf8016884>
10016b20:	1146703a 	and	r3,r2,r5
10016b24:	18001626 	beq	r3,zero,10016b80 <_malloc_r+0x624>
10016b28:	5809883a 	mov	r4,r11
10016b2c:	003f1a06 	br	10016798 <__alt_data_end+0xf8016798>
10016b30:	80800204 	addi	r2,r16,8
10016b34:	84000517 	ldw	r16,20(r16)
10016b38:	143ea81e 	bne	r2,r16,100165dc <__alt_data_end+0xf80165dc>
10016b3c:	21000084 	addi	r4,r4,2
10016b40:	003ee306 	br	100166d0 <__alt_data_end+0xf80166d0>
10016b44:	210016c4 	addi	r4,r4,91
10016b48:	210b883a 	add	r5,r4,r4
10016b4c:	003eca06 	br	10016678 <__alt_data_end+0xf8016678>
10016b50:	100ad1ba 	srli	r5,r2,6
10016b54:	29400e04 	addi	r5,r5,56
10016b58:	294d883a 	add	r6,r5,r5
10016b5c:	003fbd06 	br	10016a54 <__alt_data_end+0xf8016a54>
10016b60:	84ff6026 	beq	r16,r19,100168e4 <__alt_data_end+0xf80168e4>
10016b64:	008400b4 	movhi	r2,4098
10016b68:	10915a04 	addi	r2,r2,17768
10016b6c:	14000217 	ldw	r16,8(r2)
10016b70:	00bfff04 	movi	r2,-4
10016b74:	80c00117 	ldw	r3,4(r16)
10016b78:	1886703a 	and	r3,r3,r2
10016b7c:	003f9406 	br	100169d0 <__alt_data_end+0xf80169d0>
10016b80:	294b883a 	add	r5,r5,r5
10016b84:	1146703a 	and	r3,r2,r5
10016b88:	5ac00104 	addi	r11,r11,4
10016b8c:	183ffc26 	beq	r3,zero,10016b80 <__alt_data_end+0xf8016b80>
10016b90:	5809883a 	mov	r4,r11
10016b94:	003f0006 	br	10016798 <__alt_data_end+0xf8016798>
10016b98:	00805504 	movi	r2,340
10016b9c:	11001336 	bltu	r2,r4,10016bec <_malloc_r+0x690>
10016ba0:	8808d3fa 	srli	r4,r17,15
10016ba4:	21001dc4 	addi	r4,r4,119
10016ba8:	210b883a 	add	r5,r4,r4
10016bac:	003eb206 	br	10016678 <__alt_data_end+0xf8016678>
10016bb0:	00840004 	movi	r2,4096
10016bb4:	003f5d06 	br	1001692c <__alt_data_end+0xf801692c>
10016bb8:	00800044 	movi	r2,1
10016bbc:	a0800115 	stw	r2,4(r20)
10016bc0:	a021883a 	mov	r16,r20
10016bc4:	0007883a 	mov	r3,zero
10016bc8:	003f8106 	br	100169d0 <__alt_data_end+0xf80169d0>
10016bcc:	280bd0ba 	srai	r5,r5,2
10016bd0:	01800044 	movi	r6,1
10016bd4:	38800117 	ldw	r2,4(r7)
10016bd8:	314c983a 	sll	r6,r6,r5
10016bdc:	180b883a 	mov	r5,r3
10016be0:	3084b03a 	or	r2,r6,r2
10016be4:	38800115 	stw	r2,4(r7)
10016be8:	003fa906 	br	10016a90 <__alt_data_end+0xf8016a90>
10016bec:	00815504 	movi	r2,1364
10016bf0:	11001836 	bltu	r2,r4,10016c54 <_malloc_r+0x6f8>
10016bf4:	8808d4ba 	srli	r4,r17,18
10016bf8:	21001f04 	addi	r4,r4,124
10016bfc:	210b883a 	add	r5,r4,r4
10016c00:	003e9d06 	br	10016678 <__alt_data_end+0xf8016678>
10016c04:	bdc00404 	addi	r23,r23,16
10016c08:	003f2f06 	br	100168c8 <__alt_data_end+0xf80168c8>
10016c0c:	01401504 	movi	r5,84
10016c10:	28c01f36 	bltu	r5,r3,10016c90 <_malloc_r+0x734>
10016c14:	100ad33a 	srli	r5,r2,12
10016c18:	29401b84 	addi	r5,r5,110
10016c1c:	294d883a 	add	r6,r5,r5
10016c20:	003f8c06 	br	10016a54 <__alt_data_end+0xf8016a54>
10016c24:	9c000217 	ldw	r16,8(r19)
10016c28:	00bfff04 	movi	r2,-4
10016c2c:	80c00117 	ldw	r3,4(r16)
10016c30:	1886703a 	and	r3,r3,r2
10016c34:	003f6606 	br	100169d0 <__alt_data_end+0xf80169d0>
10016c38:	e0c3ffcc 	andi	r3,fp,4095
10016c3c:	183f2f1e 	bne	r3,zero,100168fc <__alt_data_end+0xf80168fc>
10016c40:	98c00217 	ldw	r3,8(r19)
10016c44:	bd49883a 	add	r4,r23,r21
10016c48:	21000054 	ori	r4,r4,1
10016c4c:	19000115 	stw	r4,4(r3)
10016c50:	003f5506 	br	100169a8 <__alt_data_end+0xf80169a8>
10016c54:	01403f04 	movi	r5,252
10016c58:	01001f84 	movi	r4,126
10016c5c:	003e8606 	br	10016678 <__alt_data_end+0xf8016678>
10016c60:	9009883a 	mov	r4,r18
10016c64:	81400204 	addi	r5,r16,8
10016c68:	00158480 	call	10015848 <_free_r>
10016c6c:	008400b4 	movhi	r2,4098
10016c70:	109ed304 	addi	r2,r2,31564
10016c74:	10800017 	ldw	r2,0(r2)
10016c78:	003f4b06 	br	100169a8 <__alt_data_end+0xf80169a8>
10016c7c:	00c00044 	movi	r3,1
10016c80:	002f883a 	mov	r23,zero
10016c84:	003f3406 	br	10016958 <__alt_data_end+0xf8016958>
10016c88:	d5200615 	stw	r20,-32744(gp)
10016c8c:	003f2106 	br	10016914 <__alt_data_end+0xf8016914>
10016c90:	01405504 	movi	r5,340
10016c94:	28c00436 	bltu	r5,r3,10016ca8 <_malloc_r+0x74c>
10016c98:	100ad3fa 	srli	r5,r2,15
10016c9c:	29401dc4 	addi	r5,r5,119
10016ca0:	294d883a 	add	r6,r5,r5
10016ca4:	003f6b06 	br	10016a54 <__alt_data_end+0xf8016a54>
10016ca8:	01415504 	movi	r5,1364
10016cac:	28c00936 	bltu	r5,r3,10016cd4 <_malloc_r+0x778>
10016cb0:	100ad4ba 	srli	r5,r2,18
10016cb4:	29401f04 	addi	r5,r5,124
10016cb8:	294d883a 	add	r6,r5,r5
10016cbc:	003f6506 	br	10016a54 <__alt_data_end+0xf8016a54>
10016cc0:	98800117 	ldw	r2,4(r19)
10016cc4:	0146303a 	nor	r3,zero,r5
10016cc8:	1884703a 	and	r2,r3,r2
10016ccc:	98800115 	stw	r2,4(r19)
10016cd0:	003f9006 	br	10016b14 <__alt_data_end+0xf8016b14>
10016cd4:	01803f04 	movi	r6,252
10016cd8:	01401f84 	movi	r5,126
10016cdc:	003f5d06 	br	10016a54 <__alt_data_end+0xf8016a54>

10016ce0 <memchr>:
10016ce0:	008000c4 	movi	r2,3
10016ce4:	29403fcc 	andi	r5,r5,255
10016ce8:	1180282e 	bgeu	r2,r6,10016d8c <memchr+0xac>
10016cec:	2086703a 	and	r3,r4,r2
10016cf0:	1800351e 	bne	r3,zero,10016dc8 <memchr+0xe8>
10016cf4:	2816923a 	slli	r11,r5,8
10016cf8:	2093883a 	add	r9,r4,r2
10016cfc:	22000084 	addi	r8,r4,2
10016d00:	5957883a 	add	r11,r11,r5
10016d04:	5816923a 	slli	r11,r11,8
10016d08:	20c00044 	addi	r3,r4,1
10016d0c:	037fbff4 	movhi	r13,65279
10016d10:	6b7fbfc4 	addi	r13,r13,-257
10016d14:	5957883a 	add	r11,r11,r5
10016d18:	5816923a 	slli	r11,r11,8
10016d1c:	03202074 	movhi	r12,32897
10016d20:	63202004 	addi	r12,r12,-32640
10016d24:	101d883a 	mov	r14,r2
10016d28:	5957883a 	add	r11,r11,r5
10016d2c:	21c00017 	ldw	r7,0(r4)
10016d30:	31bfff04 	addi	r6,r6,-4
10016d34:	1805883a 	mov	r2,r3
10016d38:	3acef03a 	xor	r7,r7,r11
10016d3c:	3b55883a 	add	r10,r7,r13
10016d40:	01ce303a 	nor	r7,zero,r7
10016d44:	51ce703a 	and	r7,r10,r7
10016d48:	3b0e703a 	and	r7,r7,r12
10016d4c:	38000a26 	beq	r7,zero,10016d78 <memchr+0x98>
10016d50:	21c00003 	ldbu	r7,0(r4)
10016d54:	39401e26 	beq	r7,r5,10016dd0 <memchr+0xf0>
10016d58:	19c00003 	ldbu	r7,0(r3)
10016d5c:	39401926 	beq	r7,r5,10016dc4 <memchr+0xe4>
10016d60:	41c00003 	ldbu	r7,0(r8)
10016d64:	4005883a 	mov	r2,r8
10016d68:	39401626 	beq	r7,r5,10016dc4 <memchr+0xe4>
10016d6c:	49c00003 	ldbu	r7,0(r9)
10016d70:	4805883a 	mov	r2,r9
10016d74:	39401326 	beq	r7,r5,10016dc4 <memchr+0xe4>
10016d78:	21000104 	addi	r4,r4,4
10016d7c:	4a400104 	addi	r9,r9,4
10016d80:	42000104 	addi	r8,r8,4
10016d84:	18c00104 	addi	r3,r3,4
10016d88:	71bfe836 	bltu	r14,r6,10016d2c <__alt_data_end+0xf8016d2c>
10016d8c:	2005883a 	mov	r2,r4
10016d90:	30000a26 	beq	r6,zero,10016dbc <memchr+0xdc>
10016d94:	10c00003 	ldbu	r3,0(r2)
10016d98:	19400a26 	beq	r3,r5,10016dc4 <memchr+0xe4>
10016d9c:	10c00044 	addi	r3,r2,1
10016da0:	118d883a 	add	r6,r2,r6
10016da4:	00000306 	br	10016db4 <memchr+0xd4>
10016da8:	11000003 	ldbu	r4,0(r2)
10016dac:	18c00044 	addi	r3,r3,1
10016db0:	21400426 	beq	r4,r5,10016dc4 <memchr+0xe4>
10016db4:	1805883a 	mov	r2,r3
10016db8:	19bffb1e 	bne	r3,r6,10016da8 <__alt_data_end+0xf8016da8>
10016dbc:	0005883a 	mov	r2,zero
10016dc0:	f800283a 	ret
10016dc4:	f800283a 	ret
10016dc8:	2005883a 	mov	r2,r4
10016dcc:	003ff106 	br	10016d94 <__alt_data_end+0xf8016d94>
10016dd0:	2005883a 	mov	r2,r4
10016dd4:	f800283a 	ret

10016dd8 <memcpy>:
10016dd8:	defffb04 	addi	sp,sp,-20
10016ddc:	dc000015 	stw	r16,0(sp)
10016de0:	dfc00415 	stw	ra,16(sp)
10016de4:	dcc00315 	stw	r19,12(sp)
10016de8:	dc800215 	stw	r18,8(sp)
10016dec:	dc400115 	stw	r17,4(sp)
10016df0:	00c003c4 	movi	r3,15
10016df4:	2021883a 	mov	r16,r4
10016df8:	3005883a 	mov	r2,r6
10016dfc:	1980032e 	bgeu	r3,r6,10016e0c <memcpy+0x34>
10016e00:	2906b03a 	or	r3,r5,r4
10016e04:	18c000cc 	andi	r3,r3,3
10016e08:	18001026 	beq	r3,zero,10016e4c <memcpy+0x74>
10016e0c:	8007883a 	mov	r3,r16
10016e10:	288f883a 	add	r7,r5,r2
10016e14:	10000526 	beq	r2,zero,10016e2c <memcpy+0x54>
10016e18:	29800003 	ldbu	r6,0(r5)
10016e1c:	18c00044 	addi	r3,r3,1
10016e20:	29400044 	addi	r5,r5,1
10016e24:	19bfffc5 	stb	r6,-1(r3)
10016e28:	29fffb1e 	bne	r5,r7,10016e18 <__alt_data_end+0xf8016e18>
10016e2c:	8005883a 	mov	r2,r16
10016e30:	dfc00417 	ldw	ra,16(sp)
10016e34:	dcc00317 	ldw	r19,12(sp)
10016e38:	dc800217 	ldw	r18,8(sp)
10016e3c:	dc400117 	ldw	r17,4(sp)
10016e40:	dc000017 	ldw	r16,0(sp)
10016e44:	dec00504 	addi	sp,sp,20
10016e48:	f800283a 	ret
10016e4c:	32bffc04 	addi	r10,r6,-16
10016e50:	5014d13a 	srli	r10,r10,4
10016e54:	20800404 	addi	r2,r4,16
10016e58:	2007883a 	mov	r3,r4
10016e5c:	5008913a 	slli	r4,r10,4
10016e60:	280f883a 	mov	r7,r5
10016e64:	1105883a 	add	r2,r2,r4
10016e68:	3a000017 	ldw	r8,0(r7)
10016e6c:	18c00404 	addi	r3,r3,16
10016e70:	39c00404 	addi	r7,r7,16
10016e74:	1a3ffc15 	stw	r8,-16(r3)
10016e78:	3a3ffd17 	ldw	r8,-12(r7)
10016e7c:	1a3ffd15 	stw	r8,-12(r3)
10016e80:	3a3ffe17 	ldw	r8,-8(r7)
10016e84:	1a3ffe15 	stw	r8,-8(r3)
10016e88:	3a3fff17 	ldw	r8,-4(r7)
10016e8c:	1a3fff15 	stw	r8,-4(r3)
10016e90:	18bff51e 	bne	r3,r2,10016e68 <__alt_data_end+0xf8016e68>
10016e94:	52800044 	addi	r10,r10,1
10016e98:	5014913a 	slli	r10,r10,4
10016e9c:	308003cc 	andi	r2,r6,15
10016ea0:	010000c4 	movi	r4,3
10016ea4:	8287883a 	add	r3,r16,r10
10016ea8:	2a95883a 	add	r10,r5,r10
10016eac:	2080182e 	bgeu	r4,r2,10016f10 <memcpy+0x138>
10016eb0:	147fff04 	addi	r17,r2,-4
10016eb4:	8808d0ba 	srli	r4,r17,2
10016eb8:	1a400104 	addi	r9,r3,4
10016ebc:	180d883a 	mov	r6,r3
10016ec0:	2105883a 	add	r2,r4,r4
10016ec4:	1085883a 	add	r2,r2,r2
10016ec8:	4893883a 	add	r9,r9,r2
10016ecc:	500f883a 	mov	r7,r10
10016ed0:	3a000017 	ldw	r8,0(r7)
10016ed4:	31800104 	addi	r6,r6,4
10016ed8:	39c00104 	addi	r7,r7,4
10016edc:	323fff15 	stw	r8,-4(r6)
10016ee0:	327ffb1e 	bne	r6,r9,10016ed0 <__alt_data_end+0xf8016ed0>
10016ee4:	20800044 	addi	r2,r4,1
10016ee8:	1085883a 	add	r2,r2,r2
10016eec:	1085883a 	add	r2,r2,r2
10016ef0:	017fff04 	movi	r5,-4
10016ef4:	18a5883a 	add	r18,r3,r2
10016ef8:	50a7883a 	add	r19,r10,r2
10016efc:	00146fc0 	call	100146fc <__mulsi3>
10016f00:	1445883a 	add	r2,r2,r17
10016f04:	980b883a 	mov	r5,r19
10016f08:	9007883a 	mov	r3,r18
10016f0c:	003fc006 	br	10016e10 <__alt_data_end+0xf8016e10>
10016f10:	500b883a 	mov	r5,r10
10016f14:	003fbe06 	br	10016e10 <__alt_data_end+0xf8016e10>

10016f18 <memset>:
10016f18:	00c000c4 	movi	r3,3
10016f1c:	2005883a 	mov	r2,r4
10016f20:	29403fcc 	andi	r5,r5,255
10016f24:	19802d2e 	bgeu	r3,r6,10016fdc <memset+0xc4>
10016f28:	20c6703a 	and	r3,r4,r3
10016f2c:	18002e1e 	bne	r3,zero,10016fe8 <memset+0xd0>
10016f30:	2806923a 	slli	r3,r5,8
10016f34:	010003c4 	movi	r4,15
10016f38:	3011883a 	mov	r8,r6
10016f3c:	1946b03a 	or	r3,r3,r5
10016f40:	180e943a 	slli	r7,r3,16
10016f44:	38ceb03a 	or	r7,r7,r3
10016f48:	1007883a 	mov	r3,r2
10016f4c:	21800f2e 	bgeu	r4,r6,10016f8c <memset+0x74>
10016f50:	19c00015 	stw	r7,0(r3)
10016f54:	19c00115 	stw	r7,4(r3)
10016f58:	19c00215 	stw	r7,8(r3)
10016f5c:	19c00315 	stw	r7,12(r3)
10016f60:	423ffc04 	addi	r8,r8,-16
10016f64:	18c00404 	addi	r3,r3,16
10016f68:	223ff936 	bltu	r4,r8,10016f50 <__alt_data_end+0xf8016f50>
10016f6c:	30fffc04 	addi	r3,r6,-16
10016f70:	1806d13a 	srli	r3,r3,4
10016f74:	318003cc 	andi	r6,r6,15
10016f78:	010000c4 	movi	r4,3
10016f7c:	18c00044 	addi	r3,r3,1
10016f80:	1806913a 	slli	r3,r3,4
10016f84:	10c7883a 	add	r3,r2,r3
10016f88:	21800e2e 	bgeu	r4,r6,10016fc4 <memset+0xac>
10016f8c:	1813883a 	mov	r9,r3
10016f90:	3011883a 	mov	r8,r6
10016f94:	010000c4 	movi	r4,3
10016f98:	49c00015 	stw	r7,0(r9)
10016f9c:	423fff04 	addi	r8,r8,-4
10016fa0:	4a400104 	addi	r9,r9,4
10016fa4:	223ffc36 	bltu	r4,r8,10016f98 <__alt_data_end+0xf8016f98>
10016fa8:	313fff04 	addi	r4,r6,-4
10016fac:	2008d0ba 	srli	r4,r4,2
10016fb0:	318000cc 	andi	r6,r6,3
10016fb4:	21000044 	addi	r4,r4,1
10016fb8:	2109883a 	add	r4,r4,r4
10016fbc:	2109883a 	add	r4,r4,r4
10016fc0:	1907883a 	add	r3,r3,r4
10016fc4:	30000a26 	beq	r6,zero,10016ff0 <memset+0xd8>
10016fc8:	198d883a 	add	r6,r3,r6
10016fcc:	19400005 	stb	r5,0(r3)
10016fd0:	18c00044 	addi	r3,r3,1
10016fd4:	19bffd1e 	bne	r3,r6,10016fcc <__alt_data_end+0xf8016fcc>
10016fd8:	f800283a 	ret
10016fdc:	2007883a 	mov	r3,r4
10016fe0:	303ff91e 	bne	r6,zero,10016fc8 <__alt_data_end+0xf8016fc8>
10016fe4:	00000206 	br	10016ff0 <memset+0xd8>
10016fe8:	2007883a 	mov	r3,r4
10016fec:	003ff606 	br	10016fc8 <__alt_data_end+0xf8016fc8>
10016ff0:	f800283a 	ret

10016ff4 <_open_r>:
10016ff4:	defffd04 	addi	sp,sp,-12
10016ff8:	dc400115 	stw	r17,4(sp)
10016ffc:	dc000015 	stw	r16,0(sp)
10017000:	2023883a 	mov	r17,r4
10017004:	040400b4 	movhi	r16,4098
10017008:	841ec604 	addi	r16,r16,31512
1001700c:	2809883a 	mov	r4,r5
10017010:	300b883a 	mov	r5,r6
10017014:	380d883a 	mov	r6,r7
10017018:	dfc00215 	stw	ra,8(sp)
1001701c:	80000015 	stw	zero,0(r16)
10017020:	00201280 	call	10020128 <open>
10017024:	00ffffc4 	movi	r3,-1
10017028:	10c00526 	beq	r2,r3,10017040 <_open_r+0x4c>
1001702c:	dfc00217 	ldw	ra,8(sp)
10017030:	dc400117 	ldw	r17,4(sp)
10017034:	dc000017 	ldw	r16,0(sp)
10017038:	dec00304 	addi	sp,sp,12
1001703c:	f800283a 	ret
10017040:	80c00017 	ldw	r3,0(r16)
10017044:	183ff926 	beq	r3,zero,1001702c <__alt_data_end+0xf801702c>
10017048:	88c00015 	stw	r3,0(r17)
1001704c:	dfc00217 	ldw	ra,8(sp)
10017050:	dc400117 	ldw	r17,4(sp)
10017054:	dc000017 	ldw	r16,0(sp)
10017058:	dec00304 	addi	sp,sp,12
1001705c:	f800283a 	ret

10017060 <_printf_r>:
10017060:	defffd04 	addi	sp,sp,-12
10017064:	dfc00015 	stw	ra,0(sp)
10017068:	d9800115 	stw	r6,4(sp)
1001706c:	d9c00215 	stw	r7,8(sp)
10017070:	280d883a 	mov	r6,r5
10017074:	21400217 	ldw	r5,8(r4)
10017078:	d9c00104 	addi	r7,sp,4
1001707c:	00184dc0 	call	100184dc <___vfprintf_internal_r>
10017080:	dfc00017 	ldw	ra,0(sp)
10017084:	dec00304 	addi	sp,sp,12
10017088:	f800283a 	ret

1001708c <printf>:
1001708c:	defffc04 	addi	sp,sp,-16
10017090:	dfc00015 	stw	ra,0(sp)
10017094:	d9400115 	stw	r5,4(sp)
10017098:	d9800215 	stw	r6,8(sp)
1001709c:	d9c00315 	stw	r7,12(sp)
100170a0:	008400b4 	movhi	r2,4098
100170a4:	1096f004 	addi	r2,r2,23488
100170a8:	10800017 	ldw	r2,0(r2)
100170ac:	200b883a 	mov	r5,r4
100170b0:	d9800104 	addi	r6,sp,4
100170b4:	11000217 	ldw	r4,8(r2)
100170b8:	001a3580 	call	1001a358 <__vfprintf_internal>
100170bc:	dfc00017 	ldw	ra,0(sp)
100170c0:	dec00404 	addi	sp,sp,16
100170c4:	f800283a 	ret

100170c8 <_putchar_r>:
100170c8:	21800217 	ldw	r6,8(r4)
100170cc:	001d71c1 	jmpi	1001d71c <_putc_r>

100170d0 <putchar>:
100170d0:	008400b4 	movhi	r2,4098
100170d4:	1096f004 	addi	r2,r2,23488
100170d8:	10800017 	ldw	r2,0(r2)
100170dc:	200b883a 	mov	r5,r4
100170e0:	11800217 	ldw	r6,8(r2)
100170e4:	1009883a 	mov	r4,r2
100170e8:	001d71c1 	jmpi	1001d71c <_putc_r>

100170ec <_puts_r>:
100170ec:	defff604 	addi	sp,sp,-40
100170f0:	dc400815 	stw	r17,32(sp)
100170f4:	2023883a 	mov	r17,r4
100170f8:	2809883a 	mov	r4,r5
100170fc:	dc000715 	stw	r16,28(sp)
10017100:	dfc00915 	stw	ra,36(sp)
10017104:	2821883a 	mov	r16,r5
10017108:	001841c0 	call	1001841c <strlen>
1001710c:	10c00044 	addi	r3,r2,1
10017110:	d8800115 	stw	r2,4(sp)
10017114:	89400217 	ldw	r5,8(r17)
10017118:	008400b4 	movhi	r2,4098
1001711c:	108ece04 	addi	r2,r2,15160
10017120:	d8800215 	stw	r2,8(sp)
10017124:	00800044 	movi	r2,1
10017128:	d8800315 	stw	r2,12(sp)
1001712c:	8809883a 	mov	r4,r17
10017130:	00800084 	movi	r2,2
10017134:	d9800404 	addi	r6,sp,16
10017138:	dc000015 	stw	r16,0(sp)
1001713c:	d8c00615 	stw	r3,24(sp)
10017140:	dec00415 	stw	sp,16(sp)
10017144:	d8800515 	stw	r2,20(sp)
10017148:	001beb00 	call	1001beb0 <__sfvwrite_r>
1001714c:	1000061e 	bne	r2,zero,10017168 <_puts_r+0x7c>
10017150:	00800284 	movi	r2,10
10017154:	dfc00917 	ldw	ra,36(sp)
10017158:	dc400817 	ldw	r17,32(sp)
1001715c:	dc000717 	ldw	r16,28(sp)
10017160:	dec00a04 	addi	sp,sp,40
10017164:	f800283a 	ret
10017168:	00bfffc4 	movi	r2,-1
1001716c:	003ff906 	br	10017154 <__alt_data_end+0xf8017154>

10017170 <puts>:
10017170:	008400b4 	movhi	r2,4098
10017174:	1096f004 	addi	r2,r2,23488
10017178:	200b883a 	mov	r5,r4
1001717c:	11000017 	ldw	r4,0(r2)
10017180:	00170ec1 	jmpi	100170ec <_puts_r>

10017184 <qsort>:
10017184:	3006d0ba 	srli	r3,r6,2
10017188:	deffef04 	addi	sp,sp,-68
1001718c:	dc800915 	stw	r18,36(sp)
10017190:	d8c00115 	stw	r3,4(sp)
10017194:	30c000cc 	andi	r3,r6,3
10017198:	2025883a 	mov	r18,r4
1001719c:	d8c00415 	stw	r3,16(sp)
100171a0:	30c00118 	cmpnei	r3,r6,4
100171a4:	dd800d15 	stw	r22,52(sp)
100171a8:	dcc00a15 	stw	r19,40(sp)
100171ac:	dfc01015 	stw	ra,64(sp)
100171b0:	df000f15 	stw	fp,60(sp)
100171b4:	ddc00e15 	stw	r23,56(sp)
100171b8:	dd400c15 	stw	r21,48(sp)
100171bc:	dd000b15 	stw	r20,44(sp)
100171c0:	dc400815 	stw	r17,32(sp)
100171c4:	dc000715 	stw	r16,28(sp)
100171c8:	d9400015 	stw	r5,0(sp)
100171cc:	d8c00615 	stw	r3,24(sp)
100171d0:	908000cc 	andi	r2,r18,3
100171d4:	302d883a 	mov	r22,r6
100171d8:	3827883a 	mov	r19,r7
100171dc:	1000511e 	bne	r2,zero,10017324 <qsort+0x1a0>
100171e0:	d8c00417 	ldw	r3,16(sp)
100171e4:	18004f1e 	bne	r3,zero,10017324 <qsort+0x1a0>
100171e8:	d8c00017 	ldw	r3,0(sp)
100171ec:	00800184 	movi	r2,6
100171f0:	dd000617 	ldw	r20,24(sp)
100171f4:	10c04f2e 	bgeu	r2,r3,10017334 <qsort+0x1b0>
100171f8:	d8800017 	ldw	r2,0(sp)
100171fc:	b00b883a 	mov	r5,r22
10017200:	1008d07a 	srli	r4,r2,1
10017204:	00146fc0 	call	100146fc <__mulsi3>
10017208:	d8c00017 	ldw	r3,0(sp)
1001720c:	90b9883a 	add	fp,r18,r2
10017210:	008001c4 	movi	r2,7
10017214:	1880bd1e 	bne	r3,r2,1001750c <qsort+0x388>
10017218:	b009883a 	mov	r4,r22
1001721c:	01400184 	movi	r5,6
10017220:	00146fc0 	call	100146fc <__mulsi3>
10017224:	90a1883a 	add	r16,r18,r2
10017228:	a000d01e 	bne	r20,zero,1001756c <qsort+0x3e8>
1001722c:	e1000017 	ldw	r4,0(fp)
10017230:	90800017 	ldw	r2,0(r18)
10017234:	91000015 	stw	r4,0(r18)
10017238:	e0800015 	stw	r2,0(fp)
1001723c:	9587883a 	add	r3,r18,r22
10017240:	802f883a 	mov	r23,r16
10017244:	8039883a 	mov	fp,r16
10017248:	d8c00315 	stw	r3,12(sp)
1001724c:	1821883a 	mov	r16,r3
10017250:	d8c00215 	stw	r3,8(sp)
10017254:	002b883a 	mov	r21,zero
10017258:	05a3c83a 	sub	r17,zero,r22
1001725c:	e400722e 	bgeu	fp,r16,10017428 <qsort+0x2a4>
10017260:	d9000017 	ldw	r4,0(sp)
10017264:	b00b883a 	mov	r5,r22
10017268:	a8016226 	beq	r21,zero,100177f4 <qsort+0x670>
1001726c:	00146fc0 	call	100146fc <__mulsi3>
10017270:	d8c00217 	ldw	r3,8(sp)
10017274:	90a3883a 	add	r17,r18,r2
10017278:	80c9c83a 	sub	r4,r16,r3
1001727c:	1c8fc83a 	sub	r7,r3,r18
10017280:	21c0010e 	bge	r4,r7,10017288 <qsort+0x104>
10017284:	200f883a 	mov	r7,r4
10017288:	01c00c0e 	bge	zero,r7,100172bc <qsort+0x138>
1001728c:	00800084 	movi	r2,2
10017290:	81cbc83a 	sub	r5,r16,r7
10017294:	a081071e 	bne	r20,r2,100176b4 <qsort+0x530>
10017298:	91d3883a 	add	r9,r18,r7
1001729c:	900f883a 	mov	r7,r18
100172a0:	28800003 	ldbu	r2,0(r5)
100172a4:	3a000003 	ldbu	r8,0(r7)
100172a8:	39c00044 	addi	r7,r7,1
100172ac:	29400044 	addi	r5,r5,1
100172b0:	38bfffc5 	stb	r2,-1(r7)
100172b4:	2a3fffc5 	stb	r8,-1(r5)
100172b8:	3a7ff91e 	bne	r7,r9,100172a0 <__alt_data_end+0xf80172a0>
100172bc:	8dc5c83a 	sub	r2,r17,r23
100172c0:	bf2bc83a 	sub	r21,r23,fp
100172c4:	1585c83a 	sub	r2,r2,r22
100172c8:	a880012e 	bgeu	r21,r2,100172d0 <qsort+0x14c>
100172cc:	a805883a 	mov	r2,r21
100172d0:	00800b0e 	bge	zero,r2,10017300 <qsort+0x17c>
100172d4:	00c00084 	movi	r3,2
100172d8:	888bc83a 	sub	r5,r17,r2
100172dc:	a0c1001e 	bne	r20,r3,100176e0 <qsort+0x55c>
100172e0:	8085883a 	add	r2,r16,r2
100172e4:	2a000003 	ldbu	r8,0(r5)
100172e8:	81c00003 	ldbu	r7,0(r16)
100172ec:	84000044 	addi	r16,r16,1
100172f0:	29400044 	addi	r5,r5,1
100172f4:	823fffc5 	stb	r8,-1(r16)
100172f8:	29ffffc5 	stb	r7,-1(r5)
100172fc:	80bff91e 	bne	r16,r2,100172e4 <__alt_data_end+0xf80172e4>
10017300:	b1004136 	bltu	r22,r4,10017408 <qsort+0x284>
10017304:	b540342e 	bgeu	r22,r21,100173d8 <qsort+0x254>
10017308:	a809883a 	mov	r4,r21
1001730c:	b00b883a 	mov	r5,r22
10017310:	00146ec0 	call	100146ec <__udivsi3>
10017314:	8d65c83a 	sub	r18,r17,r21
10017318:	d8800015 	stw	r2,0(sp)
1001731c:	908000cc 	andi	r2,r18,3
10017320:	103faf26 	beq	r2,zero,100171e0 <__alt_data_end+0xf80171e0>
10017324:	d8c00017 	ldw	r3,0(sp)
10017328:	00800184 	movi	r2,6
1001732c:	05000084 	movi	r20,2
10017330:	10ffb136 	bltu	r2,r3,100171f8 <__alt_data_end+0xf80171f8>
10017334:	1809883a 	mov	r4,r3
10017338:	b00b883a 	mov	r5,r22
1001733c:	00146fc0 	call	100146fc <__mulsi3>
10017340:	9085883a 	add	r2,r18,r2
10017344:	95a1883a 	add	r16,r18,r22
10017348:	d8800015 	stw	r2,0(sp)
1001734c:	8023883a 	mov	r17,r16
10017350:	8080212e 	bgeu	r16,r2,100173d8 <qsort+0x254>
10017354:	05a1c83a 	sub	r16,zero,r22
10017358:	05400044 	movi	r21,1
1001735c:	94401b2e 	bgeu	r18,r17,100173cc <qsort+0x248>
10017360:	8839883a 	mov	fp,r17
10017364:	00000606 	br	10017380 <qsort+0x1fc>
10017368:	b8c00017 	ldw	r3,0(r23)
1001736c:	e0800017 	ldw	r2,0(fp)
10017370:	e0c00015 	stw	r3,0(fp)
10017374:	b8800015 	stw	r2,0(r23)
10017378:	b839883a 	mov	fp,r23
1001737c:	95c0132e 	bgeu	r18,r23,100173cc <qsort+0x248>
10017380:	e42f883a 	add	r23,fp,r16
10017384:	b809883a 	mov	r4,r23
10017388:	e00b883a 	mov	r5,fp
1001738c:	983ee83a 	callr	r19
10017390:	00800e0e 	bge	zero,r2,100173cc <qsort+0x248>
10017394:	a03ff426 	beq	r20,zero,10017368 <__alt_data_end+0xf8017368>
10017398:	b007883a 	mov	r3,r22
1001739c:	b805883a 	mov	r2,r23
100173a0:	a5414526 	beq	r20,r21,100178b8 <qsort+0x734>
100173a4:	11400003 	ldbu	r5,0(r2)
100173a8:	e1000003 	ldbu	r4,0(fp)
100173ac:	18ffffc4 	addi	r3,r3,-1
100173b0:	e1400005 	stb	r5,0(fp)
100173b4:	11000005 	stb	r4,0(r2)
100173b8:	e7000044 	addi	fp,fp,1
100173bc:	10800044 	addi	r2,r2,1
100173c0:	00fff816 	blt	zero,r3,100173a4 <__alt_data_end+0xf80173a4>
100173c4:	b839883a 	mov	fp,r23
100173c8:	95ffed36 	bltu	r18,r23,10017380 <__alt_data_end+0xf8017380>
100173cc:	d8c00017 	ldw	r3,0(sp)
100173d0:	8da3883a 	add	r17,r17,r22
100173d4:	88ffe136 	bltu	r17,r3,1001735c <__alt_data_end+0xf801735c>
100173d8:	dfc01017 	ldw	ra,64(sp)
100173dc:	df000f17 	ldw	fp,60(sp)
100173e0:	ddc00e17 	ldw	r23,56(sp)
100173e4:	dd800d17 	ldw	r22,52(sp)
100173e8:	dd400c17 	ldw	r21,48(sp)
100173ec:	dd000b17 	ldw	r20,44(sp)
100173f0:	dcc00a17 	ldw	r19,40(sp)
100173f4:	dc800917 	ldw	r18,36(sp)
100173f8:	dc400817 	ldw	r17,32(sp)
100173fc:	dc000717 	ldw	r16,28(sp)
10017400:	dec01104 	addi	sp,sp,68
10017404:	f800283a 	ret
10017408:	b00b883a 	mov	r5,r22
1001740c:	00146ec0 	call	100146ec <__udivsi3>
10017410:	9009883a 	mov	r4,r18
10017414:	100b883a 	mov	r5,r2
10017418:	b00d883a 	mov	r6,r22
1001741c:	980f883a 	mov	r7,r19
10017420:	00171840 	call	10017184 <qsort>
10017424:	003fb706 	br	10017304 <__alt_data_end+0xf8017304>
10017428:	8009883a 	mov	r4,r16
1001742c:	900b883a 	mov	r5,r18
10017430:	983ee83a 	callr	r19
10017434:	00800916 	blt	zero,r2,1001745c <qsort+0x2d8>
10017438:	00002706 	br	100174d8 <qsort+0x354>
1001743c:	b9000017 	ldw	r4,0(r23)
10017440:	e0800017 	ldw	r2,0(fp)
10017444:	e1000015 	stw	r4,0(fp)
10017448:	b8800015 	stw	r2,0(r23)
1001744c:	bc6f883a 	add	r23,r23,r17
10017450:	05400044 	movi	r21,1
10017454:	e479883a 	add	fp,fp,r17
10017458:	e43f8136 	bltu	fp,r16,10017260 <__alt_data_end+0xf8017260>
1001745c:	e009883a 	mov	r4,fp
10017460:	900b883a 	mov	r5,r18
10017464:	983ee83a 	callr	r19
10017468:	10011d16 	blt	r2,zero,100178e0 <qsort+0x75c>
1001746c:	103ff91e 	bne	r2,zero,10017454 <__alt_data_end+0xf8017454>
10017470:	a03ff226 	beq	r20,zero,1001743c <__alt_data_end+0xf801743c>
10017474:	00800044 	movi	r2,1
10017478:	b00b883a 	mov	r5,r22
1001747c:	b809883a 	mov	r4,r23
10017480:	a0800a26 	beq	r20,r2,100174ac <qsort+0x328>
10017484:	e005883a 	mov	r2,fp
10017488:	22000003 	ldbu	r8,0(r4)
1001748c:	11c00003 	ldbu	r7,0(r2)
10017490:	297fffc4 	addi	r5,r5,-1
10017494:	12000005 	stb	r8,0(r2)
10017498:	21c00005 	stb	r7,0(r4)
1001749c:	10800044 	addi	r2,r2,1
100174a0:	21000044 	addi	r4,r4,1
100174a4:	017ff816 	blt	zero,r5,10017488 <__alt_data_end+0xf8017488>
100174a8:	003fe806 	br	1001744c <__alt_data_end+0xf801744c>
100174ac:	d9400117 	ldw	r5,4(sp)
100174b0:	e005883a 	mov	r2,fp
100174b4:	22000017 	ldw	r8,0(r4)
100174b8:	11c00017 	ldw	r7,0(r2)
100174bc:	297fffc4 	addi	r5,r5,-1
100174c0:	12000015 	stw	r8,0(r2)
100174c4:	21c00015 	stw	r7,0(r4)
100174c8:	10800104 	addi	r2,r2,4
100174cc:	21000104 	addi	r4,r4,4
100174d0:	017ff816 	blt	zero,r5,100174b4 <__alt_data_end+0xf80174b4>
100174d4:	003fdd06 	br	1001744c <__alt_data_end+0xf801744c>
100174d8:	10000a1e 	bne	r2,zero,10017504 <qsort+0x380>
100174dc:	a000671e 	bne	r20,zero,1001767c <qsort+0x4f8>
100174e0:	d8c00217 	ldw	r3,8(sp)
100174e4:	81000017 	ldw	r4,0(r16)
100174e8:	18800017 	ldw	r2,0(r3)
100174ec:	19000015 	stw	r4,0(r3)
100174f0:	80800015 	stw	r2,0(r16)
100174f4:	d8c00217 	ldw	r3,8(sp)
100174f8:	05400044 	movi	r21,1
100174fc:	1d87883a 	add	r3,r3,r22
10017500:	d8c00215 	stw	r3,8(sp)
10017504:	85a1883a 	add	r16,r16,r22
10017508:	003f5406 	br	1001725c <__alt_data_end+0xf801725c>
1001750c:	d8c00017 	ldw	r3,0(sp)
10017510:	b00b883a 	mov	r5,r22
10017514:	193fffc4 	addi	r4,r3,-1
10017518:	00146fc0 	call	100146fc <__mulsi3>
1001751c:	d8c00017 	ldw	r3,0(sp)
10017520:	90a1883a 	add	r16,r18,r2
10017524:	00800a04 	movi	r2,40
10017528:	10c02536 	bltu	r2,r3,100175c0 <qsort+0x43c>
1001752c:	8023883a 	mov	r17,r16
10017530:	902b883a 	mov	r21,r18
10017534:	a809883a 	mov	r4,r21
10017538:	e00b883a 	mov	r5,fp
1001753c:	983ee83a 	callr	r19
10017540:	e009883a 	mov	r4,fp
10017544:	880b883a 	mov	r5,r17
10017548:	10001516 	blt	r2,zero,100175a0 <qsort+0x41c>
1001754c:	983ee83a 	callr	r19
10017550:	00bf3516 	blt	zero,r2,10017228 <__alt_data_end+0xf8017228>
10017554:	a809883a 	mov	r4,r21
10017558:	880b883a 	mov	r5,r17
1001755c:	983ee83a 	callr	r19
10017560:	10001516 	blt	r2,zero,100175b8 <qsort+0x434>
10017564:	8839883a 	mov	fp,r17
10017568:	a03f3026 	beq	r20,zero,1001722c <__alt_data_end+0xf801722c>
1001756c:	00800044 	movi	r2,1
10017570:	b009883a 	mov	r4,r22
10017574:	a0806526 	beq	r20,r2,1001770c <qsort+0x588>
10017578:	9005883a 	mov	r2,r18
1001757c:	e1800003 	ldbu	r6,0(fp)
10017580:	11400003 	ldbu	r5,0(r2)
10017584:	213fffc4 	addi	r4,r4,-1
10017588:	11800005 	stb	r6,0(r2)
1001758c:	e1400005 	stb	r5,0(fp)
10017590:	10800044 	addi	r2,r2,1
10017594:	e7000044 	addi	fp,fp,1
10017598:	013ff816 	blt	zero,r4,1001757c <__alt_data_end+0xf801757c>
1001759c:	003f2706 	br	1001723c <__alt_data_end+0xf801723c>
100175a0:	983ee83a 	callr	r19
100175a4:	103f2016 	blt	r2,zero,10017228 <__alt_data_end+0xf8017228>
100175a8:	a809883a 	mov	r4,r21
100175ac:	880b883a 	mov	r5,r17
100175b0:	983ee83a 	callr	r19
100175b4:	103feb16 	blt	r2,zero,10017564 <__alt_data_end+0xf8017564>
100175b8:	a839883a 	mov	fp,r21
100175bc:	003f1a06 	br	10017228 <__alt_data_end+0xf8017228>
100175c0:	1808d0fa 	srli	r4,r3,3
100175c4:	b00b883a 	mov	r5,r22
100175c8:	00146fc0 	call	100146fc <__mulsi3>
100175cc:	90ab883a 	add	r21,r18,r2
100175d0:	1087883a 	add	r3,r2,r2
100175d4:	9009883a 	mov	r4,r18
100175d8:	a80b883a 	mov	r5,r21
100175dc:	90e3883a 	add	r17,r18,r3
100175e0:	102f883a 	mov	r23,r2
100175e4:	d8c00315 	stw	r3,12(sp)
100175e8:	983ee83a 	callr	r19
100175ec:	a809883a 	mov	r4,r21
100175f0:	880b883a 	mov	r5,r17
100175f4:	10006b16 	blt	r2,zero,100177a4 <qsort+0x620>
100175f8:	983ee83a 	callr	r19
100175fc:	0080770e 	bge	zero,r2,100177dc <qsort+0x658>
10017600:	05c7c83a 	sub	r3,zero,r23
10017604:	d8c00515 	stw	r3,20(sp)
10017608:	e0c7883a 	add	r3,fp,r3
1001760c:	1809883a 	mov	r4,r3
10017610:	e00b883a 	mov	r5,fp
10017614:	d8c00215 	stw	r3,8(sp)
10017618:	e5e3883a 	add	r17,fp,r23
1001761c:	983ee83a 	callr	r19
10017620:	e009883a 	mov	r4,fp
10017624:	880b883a 	mov	r5,r17
10017628:	10005616 	blt	r2,zero,10017784 <qsort+0x600>
1001762c:	983ee83a 	callr	r19
10017630:	0080640e 	bge	zero,r2,100177c4 <qsort+0x640>
10017634:	d8c00317 	ldw	r3,12(sp)
10017638:	80efc83a 	sub	r23,r16,r3
1001763c:	d8c00517 	ldw	r3,20(sp)
10017640:	b809883a 	mov	r4,r23
10017644:	80e3883a 	add	r17,r16,r3
10017648:	880b883a 	mov	r5,r17
1001764c:	983ee83a 	callr	r19
10017650:	8809883a 	mov	r4,r17
10017654:	800b883a 	mov	r5,r16
10017658:	10004216 	blt	r2,zero,10017764 <qsort+0x5e0>
1001765c:	983ee83a 	callr	r19
10017660:	00bfb416 	blt	zero,r2,10017534 <__alt_data_end+0xf8017534>
10017664:	b809883a 	mov	r4,r23
10017668:	800b883a 	mov	r5,r16
1001766c:	983ee83a 	callr	r19
10017670:	10004216 	blt	r2,zero,1001777c <qsort+0x5f8>
10017674:	8023883a 	mov	r17,r16
10017678:	003fae06 	br	10017534 <__alt_data_end+0xf8017534>
1001767c:	00800044 	movi	r2,1
10017680:	b00b883a 	mov	r5,r22
10017684:	8009883a 	mov	r4,r16
10017688:	a0802b26 	beq	r20,r2,10017738 <qsort+0x5b4>
1001768c:	d8800217 	ldw	r2,8(sp)
10017690:	22000003 	ldbu	r8,0(r4)
10017694:	11c00003 	ldbu	r7,0(r2)
10017698:	297fffc4 	addi	r5,r5,-1
1001769c:	12000005 	stb	r8,0(r2)
100176a0:	21c00005 	stb	r7,0(r4)
100176a4:	10800044 	addi	r2,r2,1
100176a8:	21000044 	addi	r4,r4,1
100176ac:	017ff816 	blt	zero,r5,10017690 <__alt_data_end+0xf8017690>
100176b0:	003f9006 	br	100174f4 <__alt_data_end+0xf80174f4>
100176b4:	388ed83a 	srl	r7,r7,r2
100176b8:	9005883a 	mov	r2,r18
100176bc:	2a400017 	ldw	r9,0(r5)
100176c0:	12000017 	ldw	r8,0(r2)
100176c4:	39ffffc4 	addi	r7,r7,-1
100176c8:	12400015 	stw	r9,0(r2)
100176cc:	2a000015 	stw	r8,0(r5)
100176d0:	10800104 	addi	r2,r2,4
100176d4:	29400104 	addi	r5,r5,4
100176d8:	01fff816 	blt	zero,r7,100176bc <__alt_data_end+0xf80176bc>
100176dc:	003ef706 	br	100172bc <__alt_data_end+0xf80172bc>
100176e0:	10c4d83a 	srl	r2,r2,r3
100176e4:	29800017 	ldw	r6,0(r5)
100176e8:	80c00017 	ldw	r3,0(r16)
100176ec:	10bfffc4 	addi	r2,r2,-1
100176f0:	81800015 	stw	r6,0(r16)
100176f4:	28c00015 	stw	r3,0(r5)
100176f8:	84000104 	addi	r16,r16,4
100176fc:	29400104 	addi	r5,r5,4
10017700:	00bff816 	blt	zero,r2,100176e4 <__alt_data_end+0xf80176e4>
10017704:	b13eff2e 	bgeu	r22,r4,10017304 <__alt_data_end+0xf8017304>
10017708:	003f3f06 	br	10017408 <__alt_data_end+0xf8017408>
1001770c:	d9000117 	ldw	r4,4(sp)
10017710:	9005883a 	mov	r2,r18
10017714:	e1800017 	ldw	r6,0(fp)
10017718:	11400017 	ldw	r5,0(r2)
1001771c:	213fffc4 	addi	r4,r4,-1
10017720:	11800015 	stw	r6,0(r2)
10017724:	e1400015 	stw	r5,0(fp)
10017728:	10800104 	addi	r2,r2,4
1001772c:	e7000104 	addi	fp,fp,4
10017730:	013ff816 	blt	zero,r4,10017714 <__alt_data_end+0xf8017714>
10017734:	003ec106 	br	1001723c <__alt_data_end+0xf801723c>
10017738:	d8800217 	ldw	r2,8(sp)
1001773c:	d9400117 	ldw	r5,4(sp)
10017740:	22000017 	ldw	r8,0(r4)
10017744:	11c00017 	ldw	r7,0(r2)
10017748:	297fffc4 	addi	r5,r5,-1
1001774c:	12000015 	stw	r8,0(r2)
10017750:	21c00015 	stw	r7,0(r4)
10017754:	10800104 	addi	r2,r2,4
10017758:	21000104 	addi	r4,r4,4
1001775c:	017ff816 	blt	zero,r5,10017740 <__alt_data_end+0xf8017740>
10017760:	003f6406 	br	100174f4 <__alt_data_end+0xf80174f4>
10017764:	983ee83a 	callr	r19
10017768:	103f7216 	blt	r2,zero,10017534 <__alt_data_end+0xf8017534>
1001776c:	b809883a 	mov	r4,r23
10017770:	800b883a 	mov	r5,r16
10017774:	983ee83a 	callr	r19
10017778:	103fbe16 	blt	r2,zero,10017674 <__alt_data_end+0xf8017674>
1001777c:	b823883a 	mov	r17,r23
10017780:	003f6c06 	br	10017534 <__alt_data_end+0xf8017534>
10017784:	983ee83a 	callr	r19
10017788:	103faa16 	blt	r2,zero,10017634 <__alt_data_end+0xf8017634>
1001778c:	d9000217 	ldw	r4,8(sp)
10017790:	880b883a 	mov	r5,r17
10017794:	983ee83a 	callr	r19
10017798:	10000e16 	blt	r2,zero,100177d4 <qsort+0x650>
1001779c:	df000217 	ldw	fp,8(sp)
100177a0:	003fa406 	br	10017634 <__alt_data_end+0xf8017634>
100177a4:	983ee83a 	callr	r19
100177a8:	103f9516 	blt	r2,zero,10017600 <__alt_data_end+0xf8017600>
100177ac:	9009883a 	mov	r4,r18
100177b0:	880b883a 	mov	r5,r17
100177b4:	983ee83a 	callr	r19
100177b8:	10000c16 	blt	r2,zero,100177ec <qsort+0x668>
100177bc:	902b883a 	mov	r21,r18
100177c0:	003f8f06 	br	10017600 <__alt_data_end+0xf8017600>
100177c4:	d9000217 	ldw	r4,8(sp)
100177c8:	880b883a 	mov	r5,r17
100177cc:	983ee83a 	callr	r19
100177d0:	103ff216 	blt	r2,zero,1001779c <__alt_data_end+0xf801779c>
100177d4:	8839883a 	mov	fp,r17
100177d8:	003f9606 	br	10017634 <__alt_data_end+0xf8017634>
100177dc:	9009883a 	mov	r4,r18
100177e0:	880b883a 	mov	r5,r17
100177e4:	983ee83a 	callr	r19
100177e8:	103ff416 	blt	r2,zero,100177bc <__alt_data_end+0xf80177bc>
100177ec:	882b883a 	mov	r21,r17
100177f0:	003f8306 	br	10017600 <__alt_data_end+0xf8017600>
100177f4:	00146fc0 	call	100146fc <__mulsi3>
100177f8:	dc400317 	ldw	r17,12(sp)
100177fc:	9085883a 	add	r2,r18,r2
10017800:	d8800015 	stw	r2,0(sp)
10017804:	88bef42e 	bgeu	r17,r2,100173d8 <__alt_data_end+0xf80173d8>
10017808:	05a1c83a 	sub	r16,zero,r22
1001780c:	05c00044 	movi	r23,1
10017810:	94401b2e 	bgeu	r18,r17,10017880 <qsort+0x6fc>
10017814:	8839883a 	mov	fp,r17
10017818:	00000606 	br	10017834 <qsort+0x6b0>
1001781c:	a8c00017 	ldw	r3,0(r21)
10017820:	e0800017 	ldw	r2,0(fp)
10017824:	e0c00015 	stw	r3,0(fp)
10017828:	a8800015 	stw	r2,0(r21)
1001782c:	a839883a 	mov	fp,r21
10017830:	9540132e 	bgeu	r18,r21,10017880 <qsort+0x6fc>
10017834:	e42b883a 	add	r21,fp,r16
10017838:	a809883a 	mov	r4,r21
1001783c:	e00b883a 	mov	r5,fp
10017840:	983ee83a 	callr	r19
10017844:	00800e0e 	bge	zero,r2,10017880 <qsort+0x6fc>
10017848:	a03ff426 	beq	r20,zero,1001781c <__alt_data_end+0xf801781c>
1001784c:	b007883a 	mov	r3,r22
10017850:	a805883a 	mov	r2,r21
10017854:	a5c00e26 	beq	r20,r23,10017890 <qsort+0x70c>
10017858:	11400003 	ldbu	r5,0(r2)
1001785c:	e1000003 	ldbu	r4,0(fp)
10017860:	18ffffc4 	addi	r3,r3,-1
10017864:	e1400005 	stb	r5,0(fp)
10017868:	11000005 	stb	r4,0(r2)
1001786c:	e7000044 	addi	fp,fp,1
10017870:	10800044 	addi	r2,r2,1
10017874:	00fff816 	blt	zero,r3,10017858 <__alt_data_end+0xf8017858>
10017878:	a839883a 	mov	fp,r21
1001787c:	957fed36 	bltu	r18,r21,10017834 <__alt_data_end+0xf8017834>
10017880:	d8c00017 	ldw	r3,0(sp)
10017884:	8da3883a 	add	r17,r17,r22
10017888:	88ffe136 	bltu	r17,r3,10017810 <__alt_data_end+0xf8017810>
1001788c:	003ed206 	br	100173d8 <__alt_data_end+0xf80173d8>
10017890:	d8c00117 	ldw	r3,4(sp)
10017894:	11400017 	ldw	r5,0(r2)
10017898:	e1000017 	ldw	r4,0(fp)
1001789c:	18ffffc4 	addi	r3,r3,-1
100178a0:	e1400015 	stw	r5,0(fp)
100178a4:	11000015 	stw	r4,0(r2)
100178a8:	e7000104 	addi	fp,fp,4
100178ac:	10800104 	addi	r2,r2,4
100178b0:	00fff816 	blt	zero,r3,10017894 <__alt_data_end+0xf8017894>
100178b4:	003fdd06 	br	1001782c <__alt_data_end+0xf801782c>
100178b8:	d8c00117 	ldw	r3,4(sp)
100178bc:	11400017 	ldw	r5,0(r2)
100178c0:	e1000017 	ldw	r4,0(fp)
100178c4:	18ffffc4 	addi	r3,r3,-1
100178c8:	e1400015 	stw	r5,0(fp)
100178cc:	11000015 	stw	r4,0(r2)
100178d0:	e7000104 	addi	fp,fp,4
100178d4:	10800104 	addi	r2,r2,4
100178d8:	00fff816 	blt	zero,r3,100178bc <__alt_data_end+0xf80178bc>
100178dc:	003ea606 	br	10017378 <__alt_data_end+0xf8017378>
100178e0:	e011883a 	mov	r8,fp
100178e4:	e43e5e36 	bltu	fp,r16,10017260 <__alt_data_end+0xf8017260>
100178e8:	a000081e 	bne	r20,zero,1001790c <qsort+0x788>
100178ec:	e0c00017 	ldw	r3,0(fp)
100178f0:	80800017 	ldw	r2,0(r16)
100178f4:	80c00015 	stw	r3,0(r16)
100178f8:	e0800015 	stw	r2,0(fp)
100178fc:	85a1883a 	add	r16,r16,r22
10017900:	45b9c83a 	sub	fp,r8,r22
10017904:	05400044 	movi	r21,1
10017908:	003e5406 	br	1001725c <__alt_data_end+0xf801725c>
1001790c:	00c00044 	movi	r3,1
10017910:	b009883a 	mov	r4,r22
10017914:	8005883a 	mov	r2,r16
10017918:	a0c00926 	beq	r20,r3,10017940 <qsort+0x7bc>
1001791c:	e1c00003 	ldbu	r7,0(fp)
10017920:	11400003 	ldbu	r5,0(r2)
10017924:	213fffc4 	addi	r4,r4,-1
10017928:	11c00005 	stb	r7,0(r2)
1001792c:	e1400005 	stb	r5,0(fp)
10017930:	10800044 	addi	r2,r2,1
10017934:	e7000044 	addi	fp,fp,1
10017938:	013ff816 	blt	zero,r4,1001791c <__alt_data_end+0xf801791c>
1001793c:	003fef06 	br	100178fc <__alt_data_end+0xf80178fc>
10017940:	d9000117 	ldw	r4,4(sp)
10017944:	e1c00017 	ldw	r7,0(fp)
10017948:	11400017 	ldw	r5,0(r2)
1001794c:	213fffc4 	addi	r4,r4,-1
10017950:	11c00015 	stw	r7,0(r2)
10017954:	e1400015 	stw	r5,0(fp)
10017958:	10800104 	addi	r2,r2,4
1001795c:	e7000104 	addi	fp,fp,4
10017960:	013ff816 	blt	zero,r4,10017944 <__alt_data_end+0xf8017944>
10017964:	003fe506 	br	100178fc <__alt_data_end+0xf80178fc>

10017968 <realloc>:
10017968:	00c400b4 	movhi	r3,4098
1001796c:	18d6f004 	addi	r3,r3,23488
10017970:	2005883a 	mov	r2,r4
10017974:	19000017 	ldw	r4,0(r3)
10017978:	280d883a 	mov	r6,r5
1001797c:	100b883a 	mov	r5,r2
10017980:	00179841 	jmpi	10017984 <_realloc_r>

10017984 <_realloc_r>:
10017984:	defff504 	addi	sp,sp,-44
10017988:	dd400615 	stw	r21,24(sp)
1001798c:	dc800315 	stw	r18,12(sp)
10017990:	dc000115 	stw	r16,4(sp)
10017994:	dfc00a15 	stw	ra,40(sp)
10017998:	df000915 	stw	fp,36(sp)
1001799c:	ddc00815 	stw	r23,32(sp)
100179a0:	dd800715 	stw	r22,28(sp)
100179a4:	dd000515 	stw	r20,20(sp)
100179a8:	dcc00415 	stw	r19,16(sp)
100179ac:	dc400215 	stw	r17,8(sp)
100179b0:	2821883a 	mov	r16,r5
100179b4:	202b883a 	mov	r21,r4
100179b8:	3025883a 	mov	r18,r6
100179bc:	28009626 	beq	r5,zero,10017c18 <_realloc_r+0x294>
100179c0:	001ffa80 	call	1001ffa8 <__malloc_lock>
100179c4:	80bfff17 	ldw	r2,-4(r16)
100179c8:	04ffff04 	movi	r19,-4
100179cc:	90c002c4 	addi	r3,r18,11
100179d0:	01000584 	movi	r4,22
100179d4:	85bffe04 	addi	r22,r16,-8
100179d8:	14e6703a 	and	r19,r2,r19
100179dc:	20c0372e 	bgeu	r4,r3,10017abc <_realloc_r+0x138>
100179e0:	047ffe04 	movi	r17,-8
100179e4:	1c62703a 	and	r17,r3,r17
100179e8:	8807883a 	mov	r3,r17
100179ec:	88005a16 	blt	r17,zero,10017b58 <_realloc_r+0x1d4>
100179f0:	8c805936 	bltu	r17,r18,10017b58 <_realloc_r+0x1d4>
100179f4:	98c0340e 	bge	r19,r3,10017ac8 <_realloc_r+0x144>
100179f8:	070400b4 	movhi	fp,4098
100179fc:	e7115a04 	addi	fp,fp,17768
10017a00:	e1400217 	ldw	r5,8(fp)
10017a04:	b4c9883a 	add	r4,r22,r19
10017a08:	29009026 	beq	r5,r4,10017c4c <_realloc_r+0x2c8>
10017a0c:	21800117 	ldw	r6,4(r4)
10017a10:	01ffff84 	movi	r7,-2
10017a14:	31ce703a 	and	r7,r6,r7
10017a18:	21cf883a 	add	r7,r4,r7
10017a1c:	39c00117 	ldw	r7,4(r7)
10017a20:	39c0004c 	andi	r7,r7,1
10017a24:	38004326 	beq	r7,zero,10017b34 <_realloc_r+0x1b0>
10017a28:	000d883a 	mov	r6,zero
10017a2c:	0009883a 	mov	r4,zero
10017a30:	1080004c 	andi	r2,r2,1
10017a34:	10005a1e 	bne	r2,zero,10017ba0 <_realloc_r+0x21c>
10017a38:	85fffe17 	ldw	r23,-8(r16)
10017a3c:	00bfff04 	movi	r2,-4
10017a40:	b5efc83a 	sub	r23,r22,r23
10017a44:	b9c00117 	ldw	r7,4(r23)
10017a48:	388e703a 	and	r7,r7,r2
10017a4c:	3ccf883a 	add	r7,r7,r19
10017a50:	20005226 	beq	r4,zero,10017b9c <_realloc_r+0x218>
10017a54:	31e9883a 	add	r20,r6,r7
10017a58:	2140c726 	beq	r4,r5,10017d78 <_realloc_r+0x3f4>
10017a5c:	a0c04f16 	blt	r20,r3,10017b9c <_realloc_r+0x218>
10017a60:	20800317 	ldw	r2,12(r4)
10017a64:	20c00217 	ldw	r3,8(r4)
10017a68:	99bfff04 	addi	r6,r19,-4
10017a6c:	01000904 	movi	r4,36
10017a70:	18800315 	stw	r2,12(r3)
10017a74:	10c00215 	stw	r3,8(r2)
10017a78:	b8c00217 	ldw	r3,8(r23)
10017a7c:	b8800317 	ldw	r2,12(r23)
10017a80:	bc800204 	addi	r18,r23,8
10017a84:	18800315 	stw	r2,12(r3)
10017a88:	10c00215 	stw	r3,8(r2)
10017a8c:	2180ed36 	bltu	r4,r6,10017e44 <_realloc_r+0x4c0>
10017a90:	008004c4 	movi	r2,19
10017a94:	11809b2e 	bgeu	r2,r6,10017d04 <_realloc_r+0x380>
10017a98:	80800017 	ldw	r2,0(r16)
10017a9c:	b8800215 	stw	r2,8(r23)
10017aa0:	80800117 	ldw	r2,4(r16)
10017aa4:	b8800315 	stw	r2,12(r23)
10017aa8:	008006c4 	movi	r2,27
10017aac:	1180f936 	bltu	r2,r6,10017e94 <_realloc_r+0x510>
10017ab0:	b8800404 	addi	r2,r23,16
10017ab4:	80c00204 	addi	r3,r16,8
10017ab8:	00009406 	br	10017d0c <_realloc_r+0x388>
10017abc:	00c00404 	movi	r3,16
10017ac0:	1823883a 	mov	r17,r3
10017ac4:	003fca06 	br	100179f0 <__alt_data_end+0xf80179f0>
10017ac8:	9829883a 	mov	r20,r19
10017acc:	a447c83a 	sub	r3,r20,r17
10017ad0:	010003c4 	movi	r4,15
10017ad4:	1080004c 	andi	r2,r2,1
10017ad8:	20c02336 	bltu	r4,r3,10017b68 <_realloc_r+0x1e4>
10017adc:	1504b03a 	or	r2,r2,r20
10017ae0:	b0800115 	stw	r2,4(r22)
10017ae4:	b52d883a 	add	r22,r22,r20
10017ae8:	b0800117 	ldw	r2,4(r22)
10017aec:	10800054 	ori	r2,r2,1
10017af0:	b0800115 	stw	r2,4(r22)
10017af4:	a809883a 	mov	r4,r21
10017af8:	001ffc80 	call	1001ffc8 <__malloc_unlock>
10017afc:	8025883a 	mov	r18,r16
10017b00:	9005883a 	mov	r2,r18
10017b04:	dfc00a17 	ldw	ra,40(sp)
10017b08:	df000917 	ldw	fp,36(sp)
10017b0c:	ddc00817 	ldw	r23,32(sp)
10017b10:	dd800717 	ldw	r22,28(sp)
10017b14:	dd400617 	ldw	r21,24(sp)
10017b18:	dd000517 	ldw	r20,20(sp)
10017b1c:	dcc00417 	ldw	r19,16(sp)
10017b20:	dc800317 	ldw	r18,12(sp)
10017b24:	dc400217 	ldw	r17,8(sp)
10017b28:	dc000117 	ldw	r16,4(sp)
10017b2c:	dec00b04 	addi	sp,sp,44
10017b30:	f800283a 	ret
10017b34:	01ffff04 	movi	r7,-4
10017b38:	31cc703a 	and	r6,r6,r7
10017b3c:	34e9883a 	add	r20,r6,r19
10017b40:	a0ffbb16 	blt	r20,r3,10017a30 <__alt_data_end+0xf8017a30>
10017b44:	20c00317 	ldw	r3,12(r4)
10017b48:	21000217 	ldw	r4,8(r4)
10017b4c:	20c00315 	stw	r3,12(r4)
10017b50:	19000215 	stw	r4,8(r3)
10017b54:	003fdd06 	br	10017acc <__alt_data_end+0xf8017acc>
10017b58:	00800304 	movi	r2,12
10017b5c:	a8800015 	stw	r2,0(r21)
10017b60:	0025883a 	mov	r18,zero
10017b64:	003fe606 	br	10017b00 <__alt_data_end+0xf8017b00>
10017b68:	1444b03a 	or	r2,r2,r17
10017b6c:	b0800115 	stw	r2,4(r22)
10017b70:	b44b883a 	add	r5,r22,r17
10017b74:	18800054 	ori	r2,r3,1
10017b78:	28800115 	stw	r2,4(r5)
10017b7c:	28c7883a 	add	r3,r5,r3
10017b80:	18800117 	ldw	r2,4(r3)
10017b84:	a809883a 	mov	r4,r21
10017b88:	29400204 	addi	r5,r5,8
10017b8c:	10800054 	ori	r2,r2,1
10017b90:	18800115 	stw	r2,4(r3)
10017b94:	00158480 	call	10015848 <_free_r>
10017b98:	003fd606 	br	10017af4 <__alt_data_end+0xf8017af4>
10017b9c:	38c0330e 	bge	r7,r3,10017c6c <_realloc_r+0x2e8>
10017ba0:	900b883a 	mov	r5,r18
10017ba4:	a809883a 	mov	r4,r21
10017ba8:	001655c0 	call	1001655c <_malloc_r>
10017bac:	1025883a 	mov	r18,r2
10017bb0:	10001626 	beq	r2,zero,10017c0c <_realloc_r+0x288>
10017bb4:	80bfff17 	ldw	r2,-4(r16)
10017bb8:	00ffff84 	movi	r3,-2
10017bbc:	913ffe04 	addi	r4,r18,-8
10017bc0:	10c6703a 	and	r3,r2,r3
10017bc4:	b0c7883a 	add	r3,r22,r3
10017bc8:	20c09926 	beq	r4,r3,10017e30 <_realloc_r+0x4ac>
10017bcc:	99bfff04 	addi	r6,r19,-4
10017bd0:	00800904 	movi	r2,36
10017bd4:	11806436 	bltu	r2,r6,10017d68 <_realloc_r+0x3e4>
10017bd8:	00c004c4 	movi	r3,19
10017bdc:	19804036 	bltu	r3,r6,10017ce0 <_realloc_r+0x35c>
10017be0:	9005883a 	mov	r2,r18
10017be4:	8007883a 	mov	r3,r16
10017be8:	19000017 	ldw	r4,0(r3)
10017bec:	11000015 	stw	r4,0(r2)
10017bf0:	19000117 	ldw	r4,4(r3)
10017bf4:	11000115 	stw	r4,4(r2)
10017bf8:	18c00217 	ldw	r3,8(r3)
10017bfc:	10c00215 	stw	r3,8(r2)
10017c00:	a809883a 	mov	r4,r21
10017c04:	800b883a 	mov	r5,r16
10017c08:	00158480 	call	10015848 <_free_r>
10017c0c:	a809883a 	mov	r4,r21
10017c10:	001ffc80 	call	1001ffc8 <__malloc_unlock>
10017c14:	003fba06 	br	10017b00 <__alt_data_end+0xf8017b00>
10017c18:	300b883a 	mov	r5,r6
10017c1c:	dfc00a17 	ldw	ra,40(sp)
10017c20:	df000917 	ldw	fp,36(sp)
10017c24:	ddc00817 	ldw	r23,32(sp)
10017c28:	dd800717 	ldw	r22,28(sp)
10017c2c:	dd400617 	ldw	r21,24(sp)
10017c30:	dd000517 	ldw	r20,20(sp)
10017c34:	dcc00417 	ldw	r19,16(sp)
10017c38:	dc800317 	ldw	r18,12(sp)
10017c3c:	dc400217 	ldw	r17,8(sp)
10017c40:	dc000117 	ldw	r16,4(sp)
10017c44:	dec00b04 	addi	sp,sp,44
10017c48:	001655c1 	jmpi	1001655c <_malloc_r>
10017c4c:	29800117 	ldw	r6,4(r5)
10017c50:	013fff04 	movi	r4,-4
10017c54:	89c00404 	addi	r7,r17,16
10017c58:	310c703a 	and	r6,r6,r4
10017c5c:	34c9883a 	add	r4,r6,r19
10017c60:	21c0340e 	bge	r4,r7,10017d34 <_realloc_r+0x3b0>
10017c64:	2809883a 	mov	r4,r5
10017c68:	003f7106 	br	10017a30 <__alt_data_end+0xf8017a30>
10017c6c:	b8800317 	ldw	r2,12(r23)
10017c70:	b8c00217 	ldw	r3,8(r23)
10017c74:	99bfff04 	addi	r6,r19,-4
10017c78:	01000904 	movi	r4,36
10017c7c:	18800315 	stw	r2,12(r3)
10017c80:	10c00215 	stw	r3,8(r2)
10017c84:	bc800204 	addi	r18,r23,8
10017c88:	21807836 	bltu	r4,r6,10017e6c <_realloc_r+0x4e8>
10017c8c:	008004c4 	movi	r2,19
10017c90:	1180732e 	bgeu	r2,r6,10017e60 <_realloc_r+0x4dc>
10017c94:	80800017 	ldw	r2,0(r16)
10017c98:	b8800215 	stw	r2,8(r23)
10017c9c:	80800117 	ldw	r2,4(r16)
10017ca0:	b8800315 	stw	r2,12(r23)
10017ca4:	008006c4 	movi	r2,27
10017ca8:	11808936 	bltu	r2,r6,10017ed0 <_realloc_r+0x54c>
10017cac:	b8800404 	addi	r2,r23,16
10017cb0:	80c00204 	addi	r3,r16,8
10017cb4:	19000017 	ldw	r4,0(r3)
10017cb8:	9021883a 	mov	r16,r18
10017cbc:	3829883a 	mov	r20,r7
10017cc0:	11000015 	stw	r4,0(r2)
10017cc4:	19000117 	ldw	r4,4(r3)
10017cc8:	b82d883a 	mov	r22,r23
10017ccc:	11000115 	stw	r4,4(r2)
10017cd0:	18c00217 	ldw	r3,8(r3)
10017cd4:	10c00215 	stw	r3,8(r2)
10017cd8:	b8800117 	ldw	r2,4(r23)
10017cdc:	003f7b06 	br	10017acc <__alt_data_end+0xf8017acc>
10017ce0:	80c00017 	ldw	r3,0(r16)
10017ce4:	90c00015 	stw	r3,0(r18)
10017ce8:	80c00117 	ldw	r3,4(r16)
10017cec:	90c00115 	stw	r3,4(r18)
10017cf0:	00c006c4 	movi	r3,27
10017cf4:	19804636 	bltu	r3,r6,10017e10 <_realloc_r+0x48c>
10017cf8:	90800204 	addi	r2,r18,8
10017cfc:	80c00204 	addi	r3,r16,8
10017d00:	003fb906 	br	10017be8 <__alt_data_end+0xf8017be8>
10017d04:	9005883a 	mov	r2,r18
10017d08:	8007883a 	mov	r3,r16
10017d0c:	19000017 	ldw	r4,0(r3)
10017d10:	9021883a 	mov	r16,r18
10017d14:	b82d883a 	mov	r22,r23
10017d18:	11000015 	stw	r4,0(r2)
10017d1c:	19000117 	ldw	r4,4(r3)
10017d20:	11000115 	stw	r4,4(r2)
10017d24:	18c00217 	ldw	r3,8(r3)
10017d28:	10c00215 	stw	r3,8(r2)
10017d2c:	b8800117 	ldw	r2,4(r23)
10017d30:	003f6606 	br	10017acc <__alt_data_end+0xf8017acc>
10017d34:	2445c83a 	sub	r2,r4,r17
10017d38:	b46d883a 	add	r22,r22,r17
10017d3c:	10800054 	ori	r2,r2,1
10017d40:	b0800115 	stw	r2,4(r22)
10017d44:	80bfff17 	ldw	r2,-4(r16)
10017d48:	a809883a 	mov	r4,r21
10017d4c:	e5800215 	stw	r22,8(fp)
10017d50:	1080004c 	andi	r2,r2,1
10017d54:	88a2b03a 	or	r17,r17,r2
10017d58:	847fff15 	stw	r17,-4(r16)
10017d5c:	001ffc80 	call	1001ffc8 <__malloc_unlock>
10017d60:	8025883a 	mov	r18,r16
10017d64:	003f6606 	br	10017b00 <__alt_data_end+0xf8017b00>
10017d68:	9009883a 	mov	r4,r18
10017d6c:	800b883a 	mov	r5,r16
10017d70:	001c5400 	call	1001c540 <memmove>
10017d74:	003fa206 	br	10017c00 <__alt_data_end+0xf8017c00>
10017d78:	88800404 	addi	r2,r17,16
10017d7c:	a0bf8716 	blt	r20,r2,10017b9c <__alt_data_end+0xf8017b9c>
10017d80:	b8800317 	ldw	r2,12(r23)
10017d84:	b8c00217 	ldw	r3,8(r23)
10017d88:	99bfff04 	addi	r6,r19,-4
10017d8c:	01000904 	movi	r4,36
10017d90:	18800315 	stw	r2,12(r3)
10017d94:	10c00215 	stw	r3,8(r2)
10017d98:	bc800204 	addi	r18,r23,8
10017d9c:	21806536 	bltu	r4,r6,10017f34 <_realloc_r+0x5b0>
10017da0:	008004c4 	movi	r2,19
10017da4:	1180592e 	bgeu	r2,r6,10017f0c <_realloc_r+0x588>
10017da8:	80800017 	ldw	r2,0(r16)
10017dac:	b8800215 	stw	r2,8(r23)
10017db0:	80800117 	ldw	r2,4(r16)
10017db4:	b8800315 	stw	r2,12(r23)
10017db8:	008006c4 	movi	r2,27
10017dbc:	11806136 	bltu	r2,r6,10017f44 <_realloc_r+0x5c0>
10017dc0:	b8800404 	addi	r2,r23,16
10017dc4:	80c00204 	addi	r3,r16,8
10017dc8:	19000017 	ldw	r4,0(r3)
10017dcc:	11000015 	stw	r4,0(r2)
10017dd0:	19000117 	ldw	r4,4(r3)
10017dd4:	11000115 	stw	r4,4(r2)
10017dd8:	18c00217 	ldw	r3,8(r3)
10017ddc:	10c00215 	stw	r3,8(r2)
10017de0:	a447c83a 	sub	r3,r20,r17
10017de4:	bc45883a 	add	r2,r23,r17
10017de8:	18c00054 	ori	r3,r3,1
10017dec:	10c00115 	stw	r3,4(r2)
10017df0:	b8c00117 	ldw	r3,4(r23)
10017df4:	e0800215 	stw	r2,8(fp)
10017df8:	a809883a 	mov	r4,r21
10017dfc:	1880004c 	andi	r2,r3,1
10017e00:	88a2b03a 	or	r17,r17,r2
10017e04:	bc400115 	stw	r17,4(r23)
10017e08:	001ffc80 	call	1001ffc8 <__malloc_unlock>
10017e0c:	003f3c06 	br	10017b00 <__alt_data_end+0xf8017b00>
10017e10:	80c00217 	ldw	r3,8(r16)
10017e14:	90c00215 	stw	r3,8(r18)
10017e18:	80c00317 	ldw	r3,12(r16)
10017e1c:	90c00315 	stw	r3,12(r18)
10017e20:	30802426 	beq	r6,r2,10017eb4 <_realloc_r+0x530>
10017e24:	90800404 	addi	r2,r18,16
10017e28:	80c00404 	addi	r3,r16,16
10017e2c:	003f6e06 	br	10017be8 <__alt_data_end+0xf8017be8>
10017e30:	953fff17 	ldw	r20,-4(r18)
10017e34:	00ffff04 	movi	r3,-4
10017e38:	a0e8703a 	and	r20,r20,r3
10017e3c:	a4e9883a 	add	r20,r20,r19
10017e40:	003f2206 	br	10017acc <__alt_data_end+0xf8017acc>
10017e44:	800b883a 	mov	r5,r16
10017e48:	9009883a 	mov	r4,r18
10017e4c:	001c5400 	call	1001c540 <memmove>
10017e50:	9021883a 	mov	r16,r18
10017e54:	b8800117 	ldw	r2,4(r23)
10017e58:	b82d883a 	mov	r22,r23
10017e5c:	003f1b06 	br	10017acc <__alt_data_end+0xf8017acc>
10017e60:	9005883a 	mov	r2,r18
10017e64:	8007883a 	mov	r3,r16
10017e68:	003f9206 	br	10017cb4 <__alt_data_end+0xf8017cb4>
10017e6c:	800b883a 	mov	r5,r16
10017e70:	9009883a 	mov	r4,r18
10017e74:	d9c00015 	stw	r7,0(sp)
10017e78:	001c5400 	call	1001c540 <memmove>
10017e7c:	d9c00017 	ldw	r7,0(sp)
10017e80:	9021883a 	mov	r16,r18
10017e84:	b8800117 	ldw	r2,4(r23)
10017e88:	3829883a 	mov	r20,r7
10017e8c:	b82d883a 	mov	r22,r23
10017e90:	003f0e06 	br	10017acc <__alt_data_end+0xf8017acc>
10017e94:	80800217 	ldw	r2,8(r16)
10017e98:	b8800415 	stw	r2,16(r23)
10017e9c:	80800317 	ldw	r2,12(r16)
10017ea0:	b8800515 	stw	r2,20(r23)
10017ea4:	31001226 	beq	r6,r4,10017ef0 <_realloc_r+0x56c>
10017ea8:	b8800604 	addi	r2,r23,24
10017eac:	80c00404 	addi	r3,r16,16
10017eb0:	003f9606 	br	10017d0c <__alt_data_end+0xf8017d0c>
10017eb4:	81000417 	ldw	r4,16(r16)
10017eb8:	90800604 	addi	r2,r18,24
10017ebc:	80c00604 	addi	r3,r16,24
10017ec0:	91000415 	stw	r4,16(r18)
10017ec4:	81000517 	ldw	r4,20(r16)
10017ec8:	91000515 	stw	r4,20(r18)
10017ecc:	003f4606 	br	10017be8 <__alt_data_end+0xf8017be8>
10017ed0:	80800217 	ldw	r2,8(r16)
10017ed4:	b8800415 	stw	r2,16(r23)
10017ed8:	80800317 	ldw	r2,12(r16)
10017edc:	b8800515 	stw	r2,20(r23)
10017ee0:	31000d26 	beq	r6,r4,10017f18 <_realloc_r+0x594>
10017ee4:	b8800604 	addi	r2,r23,24
10017ee8:	80c00404 	addi	r3,r16,16
10017eec:	003f7106 	br	10017cb4 <__alt_data_end+0xf8017cb4>
10017ef0:	81000417 	ldw	r4,16(r16)
10017ef4:	b8800804 	addi	r2,r23,32
10017ef8:	80c00604 	addi	r3,r16,24
10017efc:	b9000615 	stw	r4,24(r23)
10017f00:	81000517 	ldw	r4,20(r16)
10017f04:	b9000715 	stw	r4,28(r23)
10017f08:	003f8006 	br	10017d0c <__alt_data_end+0xf8017d0c>
10017f0c:	9005883a 	mov	r2,r18
10017f10:	8007883a 	mov	r3,r16
10017f14:	003fac06 	br	10017dc8 <__alt_data_end+0xf8017dc8>
10017f18:	81000417 	ldw	r4,16(r16)
10017f1c:	b8800804 	addi	r2,r23,32
10017f20:	80c00604 	addi	r3,r16,24
10017f24:	b9000615 	stw	r4,24(r23)
10017f28:	81000517 	ldw	r4,20(r16)
10017f2c:	b9000715 	stw	r4,28(r23)
10017f30:	003f6006 	br	10017cb4 <__alt_data_end+0xf8017cb4>
10017f34:	9009883a 	mov	r4,r18
10017f38:	800b883a 	mov	r5,r16
10017f3c:	001c5400 	call	1001c540 <memmove>
10017f40:	003fa706 	br	10017de0 <__alt_data_end+0xf8017de0>
10017f44:	80800217 	ldw	r2,8(r16)
10017f48:	b8800415 	stw	r2,16(r23)
10017f4c:	80800317 	ldw	r2,12(r16)
10017f50:	b8800515 	stw	r2,20(r23)
10017f54:	31000326 	beq	r6,r4,10017f64 <_realloc_r+0x5e0>
10017f58:	b8800604 	addi	r2,r23,24
10017f5c:	80c00404 	addi	r3,r16,16
10017f60:	003f9906 	br	10017dc8 <__alt_data_end+0xf8017dc8>
10017f64:	81000417 	ldw	r4,16(r16)
10017f68:	b8800804 	addi	r2,r23,32
10017f6c:	80c00604 	addi	r3,r16,24
10017f70:	b9000615 	stw	r4,24(r23)
10017f74:	81000517 	ldw	r4,20(r16)
10017f78:	b9000715 	stw	r4,28(r23)
10017f7c:	003f9206 	br	10017dc8 <__alt_data_end+0xf8017dc8>

10017f80 <lflush>:
10017f80:	20c0030b 	ldhu	r3,12(r4)
10017f84:	00800244 	movi	r2,9
10017f88:	18c0024c 	andi	r3,r3,9
10017f8c:	18800226 	beq	r3,r2,10017f98 <lflush+0x18>
10017f90:	0005883a 	mov	r2,zero
10017f94:	f800283a 	ret
10017f98:	0014ec81 	jmpi	10014ec8 <fflush>

10017f9c <__srefill_r>:
10017f9c:	defffd04 	addi	sp,sp,-12
10017fa0:	dc400115 	stw	r17,4(sp)
10017fa4:	dc000015 	stw	r16,0(sp)
10017fa8:	dfc00215 	stw	ra,8(sp)
10017fac:	2023883a 	mov	r17,r4
10017fb0:	2821883a 	mov	r16,r5
10017fb4:	20000226 	beq	r4,zero,10017fc0 <__srefill_r+0x24>
10017fb8:	20800e17 	ldw	r2,56(r4)
10017fbc:	10004426 	beq	r2,zero,100180d0 <__srefill_r+0x134>
10017fc0:	8080030b 	ldhu	r2,12(r16)
10017fc4:	80000115 	stw	zero,4(r16)
10017fc8:	10c0080c 	andi	r3,r2,32
10017fcc:	18ffffcc 	andi	r3,r3,65535
10017fd0:	18e0001c 	xori	r3,r3,32768
10017fd4:	18e00004 	addi	r3,r3,-32768
10017fd8:	1800371e 	bne	r3,zero,100180b8 <__srefill_r+0x11c>
10017fdc:	10c0010c 	andi	r3,r2,4
10017fe0:	18ffffcc 	andi	r3,r3,65535
10017fe4:	18e0001c 	xori	r3,r3,32768
10017fe8:	18e00004 	addi	r3,r3,-32768
10017fec:	18002226 	beq	r3,zero,10018078 <__srefill_r+0xdc>
10017ff0:	81400c17 	ldw	r5,48(r16)
10017ff4:	28000826 	beq	r5,zero,10018018 <__srefill_r+0x7c>
10017ff8:	80801004 	addi	r2,r16,64
10017ffc:	28800226 	beq	r5,r2,10018008 <__srefill_r+0x6c>
10018000:	8809883a 	mov	r4,r17
10018004:	00158480 	call	10015848 <_free_r>
10018008:	80800f17 	ldw	r2,60(r16)
1001800c:	80000c15 	stw	zero,48(r16)
10018010:	80800115 	stw	r2,4(r16)
10018014:	1000401e 	bne	r2,zero,10018118 <__srefill_r+0x17c>
10018018:	80800417 	ldw	r2,16(r16)
1001801c:	10005026 	beq	r2,zero,10018160 <__srefill_r+0x1c4>
10018020:	8080030b 	ldhu	r2,12(r16)
10018024:	108000cc 	andi	r2,r2,3
10018028:	10002b1e 	bne	r2,zero,100180d8 <__srefill_r+0x13c>
1001802c:	81800417 	ldw	r6,16(r16)
10018030:	80800817 	ldw	r2,32(r16)
10018034:	81400717 	ldw	r5,28(r16)
10018038:	81c00517 	ldw	r7,20(r16)
1001803c:	8809883a 	mov	r4,r17
10018040:	81800015 	stw	r6,0(r16)
10018044:	103ee83a 	callr	r2
10018048:	8100030b 	ldhu	r4,12(r16)
1001804c:	00f7ffc4 	movi	r3,-8193
10018050:	80800115 	stw	r2,4(r16)
10018054:	20c6703a 	and	r3,r4,r3
10018058:	80c0030d 	sth	r3,12(r16)
1001805c:	0080130e 	bge	zero,r2,100180ac <__srefill_r+0x110>
10018060:	0005883a 	mov	r2,zero
10018064:	dfc00217 	ldw	ra,8(sp)
10018068:	dc400117 	ldw	r17,4(sp)
1001806c:	dc000017 	ldw	r16,0(sp)
10018070:	dec00304 	addi	sp,sp,12
10018074:	f800283a 	ret
10018078:	10c0040c 	andi	r3,r2,16
1001807c:	18ffffcc 	andi	r3,r3,65535
10018080:	18e0001c 	xori	r3,r3,32768
10018084:	18e00004 	addi	r3,r3,-32768
10018088:	18003926 	beq	r3,zero,10018170 <__srefill_r+0x1d4>
1001808c:	10c0020c 	andi	r3,r2,8
10018090:	18ffffcc 	andi	r3,r3,65535
10018094:	18e0001c 	xori	r3,r3,32768
10018098:	18e00004 	addi	r3,r3,-32768
1001809c:	1800261e 	bne	r3,zero,10018138 <__srefill_r+0x19c>
100180a0:	10800114 	ori	r2,r2,4
100180a4:	8080030d 	sth	r2,12(r16)
100180a8:	003fdb06 	br	10018018 <__alt_data_end+0xf8018018>
100180ac:	1000111e 	bne	r2,zero,100180f4 <__srefill_r+0x158>
100180b0:	18c00814 	ori	r3,r3,32
100180b4:	80c0030d 	sth	r3,12(r16)
100180b8:	00bfffc4 	movi	r2,-1
100180bc:	dfc00217 	ldw	ra,8(sp)
100180c0:	dc400117 	ldw	r17,4(sp)
100180c4:	dc000017 	ldw	r16,0(sp)
100180c8:	dec00304 	addi	sp,sp,12
100180cc:	f800283a 	ret
100180d0:	00150fc0 	call	100150fc <__sinit>
100180d4:	003fba06 	br	10017fc0 <__alt_data_end+0xf8017fc0>
100180d8:	008400b4 	movhi	r2,4098
100180dc:	1096ef04 	addi	r2,r2,23484
100180e0:	11000017 	ldw	r4,0(r2)
100180e4:	01440074 	movhi	r5,4097
100180e8:	295fe004 	addi	r5,r5,32640
100180ec:	001613c0 	call	1001613c <_fwalk>
100180f0:	003fce06 	br	1001802c <__alt_data_end+0xf801802c>
100180f4:	18c01014 	ori	r3,r3,64
100180f8:	00bfffc4 	movi	r2,-1
100180fc:	80000115 	stw	zero,4(r16)
10018100:	80c0030d 	sth	r3,12(r16)
10018104:	dfc00217 	ldw	ra,8(sp)
10018108:	dc400117 	ldw	r17,4(sp)
1001810c:	dc000017 	ldw	r16,0(sp)
10018110:	dec00304 	addi	sp,sp,12
10018114:	f800283a 	ret
10018118:	80c00e17 	ldw	r3,56(r16)
1001811c:	0005883a 	mov	r2,zero
10018120:	80c00015 	stw	r3,0(r16)
10018124:	dfc00217 	ldw	ra,8(sp)
10018128:	dc400117 	ldw	r17,4(sp)
1001812c:	dc000017 	ldw	r16,0(sp)
10018130:	dec00304 	addi	sp,sp,12
10018134:	f800283a 	ret
10018138:	8809883a 	mov	r4,r17
1001813c:	800b883a 	mov	r5,r16
10018140:	0014ce00 	call	10014ce0 <_fflush_r>
10018144:	103fdc1e 	bne	r2,zero,100180b8 <__alt_data_end+0xf80180b8>
10018148:	8080030b 	ldhu	r2,12(r16)
1001814c:	00fffdc4 	movi	r3,-9
10018150:	80000215 	stw	zero,8(r16)
10018154:	1884703a 	and	r2,r3,r2
10018158:	80000615 	stw	zero,24(r16)
1001815c:	003fd006 	br	100180a0 <__alt_data_end+0xf80180a0>
10018160:	8809883a 	mov	r4,r17
10018164:	800b883a 	mov	r5,r16
10018168:	001638c0 	call	1001638c <__smakebuf_r>
1001816c:	003fac06 	br	10018020 <__alt_data_end+0xf8018020>
10018170:	00c00244 	movi	r3,9
10018174:	10801014 	ori	r2,r2,64
10018178:	88c00015 	stw	r3,0(r17)
1001817c:	8080030d 	sth	r2,12(r16)
10018180:	00bfffc4 	movi	r2,-1
10018184:	003fb706 	br	10018064 <__alt_data_end+0xf8018064>

10018188 <_rewind_r>:
10018188:	defffe04 	addi	sp,sp,-8
1001818c:	000d883a 	mov	r6,zero
10018190:	000f883a 	mov	r7,zero
10018194:	dc000015 	stw	r16,0(sp)
10018198:	dfc00115 	stw	ra,4(sp)
1001819c:	2821883a 	mov	r16,r5
100181a0:	0015b180 	call	10015b18 <_fseek_r>
100181a4:	8080030b 	ldhu	r2,12(r16)
100181a8:	10bfe7cc 	andi	r2,r2,65439
100181ac:	8080030d 	sth	r2,12(r16)
100181b0:	dfc00117 	ldw	ra,4(sp)
100181b4:	dc000017 	ldw	r16,0(sp)
100181b8:	dec00204 	addi	sp,sp,8
100181bc:	f800283a 	ret

100181c0 <rewind>:
100181c0:	008400b4 	movhi	r2,4098
100181c4:	1096f004 	addi	r2,r2,23488
100181c8:	200b883a 	mov	r5,r4
100181cc:	11000017 	ldw	r4,0(r2)
100181d0:	00181881 	jmpi	10018188 <_rewind_r>

100181d4 <_sbrk_r>:
100181d4:	defffd04 	addi	sp,sp,-12
100181d8:	dc400115 	stw	r17,4(sp)
100181dc:	dc000015 	stw	r16,0(sp)
100181e0:	2023883a 	mov	r17,r4
100181e4:	040400b4 	movhi	r16,4098
100181e8:	841ec604 	addi	r16,r16,31512
100181ec:	2809883a 	mov	r4,r5
100181f0:	dfc00215 	stw	ra,8(sp)
100181f4:	80000015 	stw	zero,0(r16)
100181f8:	00204440 	call	10020444 <sbrk>
100181fc:	00ffffc4 	movi	r3,-1
10018200:	10c00526 	beq	r2,r3,10018218 <_sbrk_r+0x44>
10018204:	dfc00217 	ldw	ra,8(sp)
10018208:	dc400117 	ldw	r17,4(sp)
1001820c:	dc000017 	ldw	r16,0(sp)
10018210:	dec00304 	addi	sp,sp,12
10018214:	f800283a 	ret
10018218:	80c00017 	ldw	r3,0(r16)
1001821c:	183ff926 	beq	r3,zero,10018204 <__alt_data_end+0xf8018204>
10018220:	88c00015 	stw	r3,0(r17)
10018224:	dfc00217 	ldw	ra,8(sp)
10018228:	dc400117 	ldw	r17,4(sp)
1001822c:	dc000017 	ldw	r16,0(sp)
10018230:	dec00304 	addi	sp,sp,12
10018234:	f800283a 	ret

10018238 <__sread>:
10018238:	defffe04 	addi	sp,sp,-8
1001823c:	dc000015 	stw	r16,0(sp)
10018240:	2821883a 	mov	r16,r5
10018244:	2940038f 	ldh	r5,14(r5)
10018248:	dfc00115 	stw	ra,4(sp)
1001824c:	001d8c80 	call	1001d8c8 <_read_r>
10018250:	10000716 	blt	r2,zero,10018270 <__sread+0x38>
10018254:	80c01417 	ldw	r3,80(r16)
10018258:	1887883a 	add	r3,r3,r2
1001825c:	80c01415 	stw	r3,80(r16)
10018260:	dfc00117 	ldw	ra,4(sp)
10018264:	dc000017 	ldw	r16,0(sp)
10018268:	dec00204 	addi	sp,sp,8
1001826c:	f800283a 	ret
10018270:	80c0030b 	ldhu	r3,12(r16)
10018274:	18fbffcc 	andi	r3,r3,61439
10018278:	80c0030d 	sth	r3,12(r16)
1001827c:	dfc00117 	ldw	ra,4(sp)
10018280:	dc000017 	ldw	r16,0(sp)
10018284:	dec00204 	addi	sp,sp,8
10018288:	f800283a 	ret

1001828c <__swrite>:
1001828c:	2880030b 	ldhu	r2,12(r5)
10018290:	defffb04 	addi	sp,sp,-20
10018294:	dcc00315 	stw	r19,12(sp)
10018298:	10c0400c 	andi	r3,r2,256
1001829c:	18ffffcc 	andi	r3,r3,65535
100182a0:	18e0001c 	xori	r3,r3,32768
100182a4:	dc800215 	stw	r18,8(sp)
100182a8:	dc400115 	stw	r17,4(sp)
100182ac:	dc000015 	stw	r16,0(sp)
100182b0:	dfc00415 	stw	ra,16(sp)
100182b4:	18e00004 	addi	r3,r3,-32768
100182b8:	2821883a 	mov	r16,r5
100182bc:	2027883a 	mov	r19,r4
100182c0:	3025883a 	mov	r18,r6
100182c4:	3823883a 	mov	r17,r7
100182c8:	18000526 	beq	r3,zero,100182e0 <__swrite+0x54>
100182cc:	2940038f 	ldh	r5,14(r5)
100182d0:	000d883a 	mov	r6,zero
100182d4:	01c00084 	movi	r7,2
100182d8:	001c4d40 	call	1001c4d4 <_lseek_r>
100182dc:	8080030b 	ldhu	r2,12(r16)
100182e0:	8140038f 	ldh	r5,14(r16)
100182e4:	10bbffcc 	andi	r2,r2,61439
100182e8:	9809883a 	mov	r4,r19
100182ec:	900d883a 	mov	r6,r18
100182f0:	880f883a 	mov	r7,r17
100182f4:	8080030d 	sth	r2,12(r16)
100182f8:	dfc00417 	ldw	ra,16(sp)
100182fc:	dcc00317 	ldw	r19,12(sp)
10018300:	dc800217 	ldw	r18,8(sp)
10018304:	dc400117 	ldw	r17,4(sp)
10018308:	dc000017 	ldw	r16,0(sp)
1001830c:	dec00504 	addi	sp,sp,20
10018310:	001a37c1 	jmpi	1001a37c <_write_r>

10018314 <__sseek>:
10018314:	defffe04 	addi	sp,sp,-8
10018318:	dc000015 	stw	r16,0(sp)
1001831c:	2821883a 	mov	r16,r5
10018320:	2940038f 	ldh	r5,14(r5)
10018324:	dfc00115 	stw	ra,4(sp)
10018328:	001c4d40 	call	1001c4d4 <_lseek_r>
1001832c:	00ffffc4 	movi	r3,-1
10018330:	10c00826 	beq	r2,r3,10018354 <__sseek+0x40>
10018334:	80c0030b 	ldhu	r3,12(r16)
10018338:	80801415 	stw	r2,80(r16)
1001833c:	18c40014 	ori	r3,r3,4096
10018340:	80c0030d 	sth	r3,12(r16)
10018344:	dfc00117 	ldw	ra,4(sp)
10018348:	dc000017 	ldw	r16,0(sp)
1001834c:	dec00204 	addi	sp,sp,8
10018350:	f800283a 	ret
10018354:	80c0030b 	ldhu	r3,12(r16)
10018358:	18fbffcc 	andi	r3,r3,61439
1001835c:	80c0030d 	sth	r3,12(r16)
10018360:	dfc00117 	ldw	ra,4(sp)
10018364:	dc000017 	ldw	r16,0(sp)
10018368:	dec00204 	addi	sp,sp,8
1001836c:	f800283a 	ret

10018370 <__sclose>:
10018370:	2940038f 	ldh	r5,14(r5)
10018374:	001a55c1 	jmpi	1001a55c <_close_r>

10018378 <strcmp>:
10018378:	2904b03a 	or	r2,r5,r4
1001837c:	108000cc 	andi	r2,r2,3
10018380:	1000171e 	bne	r2,zero,100183e0 <strcmp+0x68>
10018384:	20800017 	ldw	r2,0(r4)
10018388:	28c00017 	ldw	r3,0(r5)
1001838c:	10c0141e 	bne	r2,r3,100183e0 <strcmp+0x68>
10018390:	027fbff4 	movhi	r9,65279
10018394:	4a7fbfc4 	addi	r9,r9,-257
10018398:	1247883a 	add	r3,r2,r9
1001839c:	0084303a 	nor	r2,zero,r2
100183a0:	1884703a 	and	r2,r3,r2
100183a4:	02202074 	movhi	r8,32897
100183a8:	42202004 	addi	r8,r8,-32640
100183ac:	1204703a 	and	r2,r2,r8
100183b0:	10000226 	beq	r2,zero,100183bc <strcmp+0x44>
100183b4:	00001706 	br	10018414 <strcmp+0x9c>
100183b8:	3000161e 	bne	r6,zero,10018414 <strcmp+0x9c>
100183bc:	21000104 	addi	r4,r4,4
100183c0:	20800017 	ldw	r2,0(r4)
100183c4:	29400104 	addi	r5,r5,4
100183c8:	28c00017 	ldw	r3,0(r5)
100183cc:	124f883a 	add	r7,r2,r9
100183d0:	008c303a 	nor	r6,zero,r2
100183d4:	398c703a 	and	r6,r7,r6
100183d8:	320c703a 	and	r6,r6,r8
100183dc:	10fff626 	beq	r2,r3,100183b8 <__alt_data_end+0xf80183b8>
100183e0:	20800007 	ldb	r2,0(r4)
100183e4:	1000051e 	bne	r2,zero,100183fc <strcmp+0x84>
100183e8:	00000606 	br	10018404 <strcmp+0x8c>
100183ec:	21000044 	addi	r4,r4,1
100183f0:	20800007 	ldb	r2,0(r4)
100183f4:	29400044 	addi	r5,r5,1
100183f8:	10000226 	beq	r2,zero,10018404 <strcmp+0x8c>
100183fc:	28c00007 	ldb	r3,0(r5)
10018400:	10fffa26 	beq	r2,r3,100183ec <__alt_data_end+0xf80183ec>
10018404:	20c00003 	ldbu	r3,0(r4)
10018408:	28800003 	ldbu	r2,0(r5)
1001840c:	1885c83a 	sub	r2,r3,r2
10018410:	f800283a 	ret
10018414:	0005883a 	mov	r2,zero
10018418:	f800283a 	ret

1001841c <strlen>:
1001841c:	208000cc 	andi	r2,r4,3
10018420:	10001f1e 	bne	r2,zero,100184a0 <strlen+0x84>
10018424:	20800017 	ldw	r2,0(r4)
10018428:	01ffbff4 	movhi	r7,65279
1001842c:	39ffbfc4 	addi	r7,r7,-257
10018430:	01a02074 	movhi	r6,32897
10018434:	31a02004 	addi	r6,r6,-32640
10018438:	11c7883a 	add	r3,r2,r7
1001843c:	0084303a 	nor	r2,zero,r2
10018440:	1886703a 	and	r3,r3,r2
10018444:	1986703a 	and	r3,r3,r6
10018448:	2005883a 	mov	r2,r4
1001844c:	1800101e 	bne	r3,zero,10018490 <strlen+0x74>
10018450:	10800104 	addi	r2,r2,4
10018454:	10c00017 	ldw	r3,0(r2)
10018458:	19cb883a 	add	r5,r3,r7
1001845c:	00c6303a 	nor	r3,zero,r3
10018460:	28c6703a 	and	r3,r5,r3
10018464:	1986703a 	and	r3,r3,r6
10018468:	1800091e 	bne	r3,zero,10018490 <strlen+0x74>
1001846c:	10800104 	addi	r2,r2,4
10018470:	10c00017 	ldw	r3,0(r2)
10018474:	19cb883a 	add	r5,r3,r7
10018478:	00c6303a 	nor	r3,zero,r3
1001847c:	28c6703a 	and	r3,r5,r3
10018480:	1986703a 	and	r3,r3,r6
10018484:	183ff226 	beq	r3,zero,10018450 <__alt_data_end+0xf8018450>
10018488:	00000106 	br	10018490 <strlen+0x74>
1001848c:	10800044 	addi	r2,r2,1
10018490:	10c00007 	ldb	r3,0(r2)
10018494:	183ffd1e 	bne	r3,zero,1001848c <__alt_data_end+0xf801848c>
10018498:	1105c83a 	sub	r2,r2,r4
1001849c:	f800283a 	ret
100184a0:	2005883a 	mov	r2,r4
100184a4:	003ffa06 	br	10018490 <__alt_data_end+0xf8018490>

100184a8 <__sprint_r>:
100184a8:	30800217 	ldw	r2,8(r6)
100184ac:	defffe04 	addi	sp,sp,-8
100184b0:	dc000015 	stw	r16,0(sp)
100184b4:	dfc00115 	stw	ra,4(sp)
100184b8:	3021883a 	mov	r16,r6
100184bc:	10000226 	beq	r2,zero,100184c8 <__sprint_r+0x20>
100184c0:	001beb00 	call	1001beb0 <__sfvwrite_r>
100184c4:	80000215 	stw	zero,8(r16)
100184c8:	80000115 	stw	zero,4(r16)
100184cc:	dfc00117 	ldw	ra,4(sp)
100184d0:	dc000017 	ldw	r16,0(sp)
100184d4:	dec00204 	addi	sp,sp,8
100184d8:	f800283a 	ret

100184dc <___vfprintf_internal_r>:
100184dc:	defeb904 	addi	sp,sp,-1308
100184e0:	dc013d15 	stw	r16,1268(sp)
100184e4:	d9013015 	stw	r4,1216(sp)
100184e8:	dfc14615 	stw	ra,1304(sp)
100184ec:	df014515 	stw	fp,1300(sp)
100184f0:	ddc14415 	stw	r23,1296(sp)
100184f4:	dd814315 	stw	r22,1292(sp)
100184f8:	dd414215 	stw	r21,1288(sp)
100184fc:	dd014115 	stw	r20,1284(sp)
10018500:	dcc14015 	stw	r19,1280(sp)
10018504:	dc813f15 	stw	r18,1276(sp)
10018508:	dc413e15 	stw	r17,1272(sp)
1001850c:	d9412915 	stw	r5,1188(sp)
10018510:	3021883a 	mov	r16,r6
10018514:	d9c12d15 	stw	r7,1204(sp)
10018518:	001c4a00 	call	1001c4a0 <_localeconv_r>
1001851c:	10800017 	ldw	r2,0(r2)
10018520:	d9013017 	ldw	r4,1216(sp)
10018524:	d8013315 	stw	zero,1228(sp)
10018528:	d8813715 	stw	r2,1244(sp)
1001852c:	d8013415 	stw	zero,1232(sp)
10018530:	20000226 	beq	r4,zero,1001853c <___vfprintf_internal_r+0x60>
10018534:	20800e17 	ldw	r2,56(r4)
10018538:	10014b26 	beq	r2,zero,10018a68 <___vfprintf_internal_r+0x58c>
1001853c:	d8c12917 	ldw	r3,1188(sp)
10018540:	1880030b 	ldhu	r2,12(r3)
10018544:	10c0020c 	andi	r3,r2,8
10018548:	18ffffcc 	andi	r3,r3,65535
1001854c:	18e0001c 	xori	r3,r3,32768
10018550:	18e00004 	addi	r3,r3,-32768
10018554:	1800ed26 	beq	r3,zero,1001890c <___vfprintf_internal_r+0x430>
10018558:	d9012917 	ldw	r4,1188(sp)
1001855c:	20c00417 	ldw	r3,16(r4)
10018560:	1800ea26 	beq	r3,zero,1001890c <___vfprintf_internal_r+0x430>
10018564:	1100068c 	andi	r4,r2,26
10018568:	00c00284 	movi	r3,10
1001856c:	20c0f026 	beq	r4,r3,10018930 <___vfprintf_internal_r+0x454>
10018570:	d9010dc4 	addi	r4,sp,1079
10018574:	d8810e04 	addi	r2,sp,1080
10018578:	dc413017 	ldw	r17,1216(sp)
1001857c:	d8c00404 	addi	r3,sp,16
10018580:	d9012615 	stw	r4,1176(sp)
10018584:	1109c83a 	sub	r4,r2,r4
10018588:	d8812715 	stw	r2,1180(sp)
1001858c:	d8c11b15 	stw	r3,1132(sp)
10018590:	d8011d15 	stw	zero,1140(sp)
10018594:	d8011c15 	stw	zero,1136(sp)
10018598:	802b883a 	mov	r21,r16
1001859c:	d8013215 	stw	zero,1224(sp)
100185a0:	d8013615 	stw	zero,1240(sp)
100185a4:	d8013515 	stw	zero,1236(sp)
100185a8:	d8012c15 	stw	zero,1200(sp)
100185ac:	1813883a 	mov	r9,r3
100185b0:	d9013915 	stw	r4,1252(sp)
100185b4:	a8800007 	ldb	r2,0(r21)
100185b8:	1002f326 	beq	r2,zero,10019188 <___vfprintf_internal_r+0xcac>
100185bc:	00c00944 	movi	r3,37
100185c0:	a825883a 	mov	r18,r21
100185c4:	10c0021e 	bne	r2,r3,100185d0 <___vfprintf_internal_r+0xf4>
100185c8:	00001406 	br	1001861c <___vfprintf_internal_r+0x140>
100185cc:	10c00326 	beq	r2,r3,100185dc <___vfprintf_internal_r+0x100>
100185d0:	94800044 	addi	r18,r18,1
100185d4:	90800007 	ldb	r2,0(r18)
100185d8:	103ffc1e 	bne	r2,zero,100185cc <__alt_data_end+0xf80185cc>
100185dc:	9561c83a 	sub	r16,r18,r21
100185e0:	80000e26 	beq	r16,zero,1001861c <___vfprintf_internal_r+0x140>
100185e4:	da011d17 	ldw	r8,1140(sp)
100185e8:	d8c11c17 	ldw	r3,1136(sp)
100185ec:	4d400015 	stw	r21,0(r9)
100185f0:	4c000115 	stw	r16,4(r9)
100185f4:	4411883a 	add	r8,r8,r16
100185f8:	18c00044 	addi	r3,r3,1
100185fc:	da011d15 	stw	r8,1140(sp)
10018600:	d8c11c15 	stw	r3,1136(sp)
10018604:	008001c4 	movi	r2,7
10018608:	10c11016 	blt	r2,r3,10018a4c <___vfprintf_internal_r+0x570>
1001860c:	4a400204 	addi	r9,r9,8
10018610:	d8812c17 	ldw	r2,1200(sp)
10018614:	1405883a 	add	r2,r2,r16
10018618:	d8812c15 	stw	r2,1200(sp)
1001861c:	90800007 	ldb	r2,0(r18)
10018620:	1000ee26 	beq	r2,zero,100189dc <___vfprintf_internal_r+0x500>
10018624:	95400044 	addi	r21,r18,1
10018628:	94800047 	ldb	r18,1(r18)
1001862c:	073fffc4 	movi	fp,-1
10018630:	e007883a 	mov	r3,fp
10018634:	d8012585 	stb	zero,1174(sp)
10018638:	d8012e15 	stw	zero,1208(sp)
1001863c:	0021883a 	mov	r16,zero
10018640:	05001604 	movi	r20,88
10018644:	04c00244 	movi	r19,9
10018648:	4839883a 	mov	fp,r9
1001864c:	ad400044 	addi	r21,r21,1
10018650:	90bff804 	addi	r2,r18,-32
10018654:	a080462e 	bgeu	r20,r2,10018770 <___vfprintf_internal_r+0x294>
10018658:	e013883a 	mov	r9,fp
1001865c:	9000df26 	beq	r18,zero,100189dc <___vfprintf_internal_r+0x500>
10018660:	00c00044 	movi	r3,1
10018664:	d8c12815 	stw	r3,1184(sp)
10018668:	dc810405 	stb	r18,1040(sp)
1001866c:	d8012585 	stb	zero,1174(sp)
10018670:	d8c12b15 	stw	r3,1196(sp)
10018674:	dcc10404 	addi	r19,sp,1040
10018678:	d8013115 	stw	zero,1220(sp)
1001867c:	80c0008c 	andi	r3,r16,2
10018680:	d8c12a15 	stw	r3,1192(sp)
10018684:	18000326 	beq	r3,zero,10018694 <___vfprintf_internal_r+0x1b8>
10018688:	d8c12817 	ldw	r3,1184(sp)
1001868c:	18c00084 	addi	r3,r3,2
10018690:	d8c12815 	stw	r3,1184(sp)
10018694:	80c0210c 	andi	r3,r16,132
10018698:	d8c12f15 	stw	r3,1212(sp)
1001869c:	1802251e 	bne	r3,zero,10018f34 <___vfprintf_internal_r+0xa58>
100186a0:	d9012e17 	ldw	r4,1208(sp)
100186a4:	d8c12817 	ldw	r3,1184(sp)
100186a8:	20edc83a 	sub	r22,r4,r3
100186ac:	0582210e 	bge	zero,r22,10018f34 <___vfprintf_internal_r+0xa58>
100186b0:	02800404 	movi	r10,16
100186b4:	da011d17 	ldw	r8,1140(sp)
100186b8:	d8c11c17 	ldw	r3,1136(sp)
100186bc:	05c400b4 	movhi	r23,4098
100186c0:	bdcedf84 	addi	r23,r23,15230
100186c4:	5580200e 	bge	r10,r22,10018748 <___vfprintf_internal_r+0x26c>
100186c8:	dc813815 	stw	r18,1248(sp)
100186cc:	5039883a 	mov	fp,r10
100186d0:	b825883a 	mov	r18,r23
100186d4:	050001c4 	movi	r20,7
100186d8:	b02f883a 	mov	r23,r22
100186dc:	802d883a 	mov	r22,r16
100186e0:	dc012917 	ldw	r16,1188(sp)
100186e4:	00000306 	br	100186f4 <___vfprintf_internal_r+0x218>
100186e8:	bdfffc04 	addi	r23,r23,-16
100186ec:	4a400204 	addi	r9,r9,8
100186f0:	e5c0110e 	bge	fp,r23,10018738 <___vfprintf_internal_r+0x25c>
100186f4:	4c800015 	stw	r18,0(r9)
100186f8:	4f000115 	stw	fp,4(r9)
100186fc:	42000404 	addi	r8,r8,16
10018700:	18c00044 	addi	r3,r3,1
10018704:	da011d15 	stw	r8,1140(sp)
10018708:	d8c11c15 	stw	r3,1136(sp)
1001870c:	a0fff60e 	bge	r20,r3,100186e8 <__alt_data_end+0xf80186e8>
10018710:	8809883a 	mov	r4,r17
10018714:	800b883a 	mov	r5,r16
10018718:	d9811b04 	addi	r6,sp,1132
1001871c:	00184a80 	call	100184a8 <__sprint_r>
10018720:	1000b41e 	bne	r2,zero,100189f4 <___vfprintf_internal_r+0x518>
10018724:	bdfffc04 	addi	r23,r23,-16
10018728:	da011d17 	ldw	r8,1140(sp)
1001872c:	d8c11c17 	ldw	r3,1136(sp)
10018730:	da400404 	addi	r9,sp,16
10018734:	e5ffef16 	blt	fp,r23,100186f4 <__alt_data_end+0xf80186f4>
10018738:	b021883a 	mov	r16,r22
1001873c:	b82d883a 	mov	r22,r23
10018740:	902f883a 	mov	r23,r18
10018744:	dc813817 	ldw	r18,1248(sp)
10018748:	4dc00015 	stw	r23,0(r9)
1001874c:	4d800115 	stw	r22,4(r9)
10018750:	4591883a 	add	r8,r8,r22
10018754:	18c00044 	addi	r3,r3,1
10018758:	da011d15 	stw	r8,1140(sp)
1001875c:	d8c11c15 	stw	r3,1136(sp)
10018760:	008001c4 	movi	r2,7
10018764:	10c3fe16 	blt	r2,r3,10019760 <___vfprintf_internal_r+0x1284>
10018768:	4a400204 	addi	r9,r9,8
1001876c:	0001f306 	br	10018f3c <___vfprintf_internal_r+0xa60>
10018770:	1085883a 	add	r2,r2,r2
10018774:	1085883a 	add	r2,r2,r2
10018778:	010400b4 	movhi	r4,4098
1001877c:	2121e304 	addi	r4,r4,-30836
10018780:	1105883a 	add	r2,r2,r4
10018784:	10800017 	ldw	r2,0(r2)
10018788:	1000683a 	jmp	r2
1001878c:	10018e68 	cmpgeui	zero,r2,1593
10018790:	10018658 	cmpnei	zero,r2,1561
10018794:	10018658 	cmpnei	zero,r2,1561
10018798:	10018e80 	call	110018e8 <_gp+0xfd3d3c>
1001879c:	10018658 	cmpnei	zero,r2,1561
100187a0:	10018658 	cmpnei	zero,r2,1561
100187a4:	10018658 	cmpnei	zero,r2,1561
100187a8:	10018658 	cmpnei	zero,r2,1561
100187ac:	10018658 	cmpnei	zero,r2,1561
100187b0:	10018658 	cmpnei	zero,r2,1561
100187b4:	10018d38 	rdprs	zero,r2,1588
100187b8:	10018ecc 	andi	zero,r2,1595
100187bc:	10018658 	cmpnei	zero,r2,1561
100187c0:	10018900 	call	11001890 <_gp+0xfd3ce4>
100187c4:	10018ca0 	cmpeqi	zero,r2,1586
100187c8:	10018658 	cmpnei	zero,r2,1561
100187cc:	10018e8c 	andi	zero,r2,1594
100187d0:	10018e98 	cmpnei	zero,r2,1594
100187d4:	10018e98 	cmpnei	zero,r2,1594
100187d8:	10018e98 	cmpnei	zero,r2,1594
100187dc:	10018e98 	cmpnei	zero,r2,1594
100187e0:	10018e98 	cmpnei	zero,r2,1594
100187e4:	10018e98 	cmpnei	zero,r2,1594
100187e8:	10018e98 	cmpnei	zero,r2,1594
100187ec:	10018e98 	cmpnei	zero,r2,1594
100187f0:	10018e98 	cmpnei	zero,r2,1594
100187f4:	10018658 	cmpnei	zero,r2,1561
100187f8:	10018658 	cmpnei	zero,r2,1561
100187fc:	10018658 	cmpnei	zero,r2,1561
10018800:	10018658 	cmpnei	zero,r2,1561
10018804:	10018658 	cmpnei	zero,r2,1561
10018808:	10018658 	cmpnei	zero,r2,1561
1001880c:	10018658 	cmpnei	zero,r2,1561
10018810:	10018658 	cmpnei	zero,r2,1561
10018814:	10018658 	cmpnei	zero,r2,1561
10018818:	10018658 	cmpnei	zero,r2,1561
1001881c:	10018a70 	cmpltui	zero,r2,1577
10018820:	10018b30 	cmpltui	zero,r2,1580
10018824:	10018658 	cmpnei	zero,r2,1561
10018828:	10018b30 	cmpltui	zero,r2,1580
1001882c:	10018658 	cmpnei	zero,r2,1561
10018830:	10018658 	cmpnei	zero,r2,1561
10018834:	10018658 	cmpnei	zero,r2,1561
10018838:	10018658 	cmpnei	zero,r2,1561
1001883c:	10018bc4 	addi	zero,r2,1583
10018840:	10018658 	cmpnei	zero,r2,1561
10018844:	10018658 	cmpnei	zero,r2,1561
10018848:	10018bd0 	cmplti	zero,r2,1583
1001884c:	10018658 	cmpnei	zero,r2,1561
10018850:	10018658 	cmpnei	zero,r2,1561
10018854:	10018658 	cmpnei	zero,r2,1561
10018858:	10018658 	cmpnei	zero,r2,1561
1001885c:	10018658 	cmpnei	zero,r2,1561
10018860:	10018c08 	cmpgei	zero,r2,1584
10018864:	10018658 	cmpnei	zero,r2,1561
10018868:	10018658 	cmpnei	zero,r2,1561
1001886c:	10018c44 	addi	zero,r2,1585
10018870:	10018658 	cmpnei	zero,r2,1561
10018874:	10018658 	cmpnei	zero,r2,1561
10018878:	10018658 	cmpnei	zero,r2,1561
1001887c:	10018658 	cmpnei	zero,r2,1561
10018880:	10018658 	cmpnei	zero,r2,1561
10018884:	10018658 	cmpnei	zero,r2,1561
10018888:	10018658 	cmpnei	zero,r2,1561
1001888c:	10018658 	cmpnei	zero,r2,1561
10018890:	10018658 	cmpnei	zero,r2,1561
10018894:	10018658 	cmpnei	zero,r2,1561
10018898:	10018edc 	xori	zero,r2,1595
1001889c:	10018f10 	cmplti	zero,r2,1596
100188a0:	10018b30 	cmpltui	zero,r2,1580
100188a4:	10018b30 	cmpltui	zero,r2,1580
100188a8:	10018b30 	cmpltui	zero,r2,1580
100188ac:	10018e5c 	xori	zero,r2,1593
100188b0:	10018f10 	cmplti	zero,r2,1596
100188b4:	10018658 	cmpnei	zero,r2,1561
100188b8:	10018658 	cmpnei	zero,r2,1561
100188bc:	10018ce8 	cmpgeui	zero,r2,1587
100188c0:	10018658 	cmpnei	zero,r2,1561
100188c4:	10018d00 	call	110018d0 <_gp+0xfd3d24>
100188c8:	10018f1c 	xori	zero,r2,1596
100188cc:	10018d60 	cmpeqi	zero,r2,1589
100188d0:	10018db0 	cmpltui	zero,r2,1590
100188d4:	10018658 	cmpnei	zero,r2,1561
100188d8:	10018dbc 	xorhi	zero,r2,1590
100188dc:	10018658 	cmpnei	zero,r2,1561
100188e0:	10018f28 	cmpgeui	zero,r2,1596
100188e4:	10018658 	cmpnei	zero,r2,1561
100188e8:	10018658 	cmpnei	zero,r2,1561
100188ec:	10018e20 	cmpeqi	zero,r2,1592
100188f0:	d9012e17 	ldw	r4,1208(sp)
100188f4:	d8812d15 	stw	r2,1204(sp)
100188f8:	0109c83a 	sub	r4,zero,r4
100188fc:	d9012e15 	stw	r4,1208(sp)
10018900:	84000114 	ori	r16,r16,4
10018904:	ac800007 	ldb	r18,0(r21)
10018908:	003f5006 	br	1001864c <__alt_data_end+0xf801864c>
1001890c:	d9013017 	ldw	r4,1216(sp)
10018910:	d9412917 	ldw	r5,1188(sp)
10018914:	001a3e80 	call	1001a3e8 <__swsetup_r>
10018918:	10003d1e 	bne	r2,zero,10018a10 <___vfprintf_internal_r+0x534>
1001891c:	d8c12917 	ldw	r3,1188(sp)
10018920:	1880030b 	ldhu	r2,12(r3)
10018924:	00c00284 	movi	r3,10
10018928:	1100068c 	andi	r4,r2,26
1001892c:	20ff101e 	bne	r4,r3,10018570 <__alt_data_end+0xf8018570>
10018930:	d9012917 	ldw	r4,1188(sp)
10018934:	20c0038b 	ldhu	r3,14(r4)
10018938:	193fffcc 	andi	r4,r3,65535
1001893c:	2120001c 	xori	r4,r4,32768
10018940:	21200004 	addi	r4,r4,-32768
10018944:	203f0a16 	blt	r4,zero,10018570 <__alt_data_end+0xf8018570>
10018948:	d9012917 	ldw	r4,1188(sp)
1001894c:	d9c12d17 	ldw	r7,1204(sp)
10018950:	10bfff4c 	andi	r2,r2,65533
10018954:	22800717 	ldw	r10,28(r4)
10018958:	22400917 	ldw	r9,36(r4)
1001895c:	d9013017 	ldw	r4,1216(sp)
10018960:	02010004 	movi	r8,1024
10018964:	d881070d 	sth	r2,1052(sp)
10018968:	d9410404 	addi	r5,sp,1040
1001896c:	d8800404 	addi	r2,sp,16
10018970:	800d883a 	mov	r6,r16
10018974:	d8c1078d 	sth	r3,1054(sp)
10018978:	da810b15 	stw	r10,1068(sp)
1001897c:	da410d15 	stw	r9,1076(sp)
10018980:	d8810415 	stw	r2,1040(sp)
10018984:	d8810815 	stw	r2,1056(sp)
10018988:	da010615 	stw	r8,1048(sp)
1001898c:	da010915 	stw	r8,1060(sp)
10018990:	d8010a15 	stw	zero,1064(sp)
10018994:	00184dc0 	call	100184dc <___vfprintf_internal_r>
10018998:	d8812c15 	stw	r2,1200(sp)
1001899c:	10000416 	blt	r2,zero,100189b0 <___vfprintf_internal_r+0x4d4>
100189a0:	d9013017 	ldw	r4,1216(sp)
100189a4:	d9410404 	addi	r5,sp,1040
100189a8:	0014ce00 	call	10014ce0 <_fflush_r>
100189ac:	1006501e 	bne	r2,zero,1001a2f0 <___vfprintf_internal_r+0x1e14>
100189b0:	d881070b 	ldhu	r2,1052(sp)
100189b4:	1080100c 	andi	r2,r2,64
100189b8:	10bfffcc 	andi	r2,r2,65535
100189bc:	10a0001c 	xori	r2,r2,32768
100189c0:	10a00004 	addi	r2,r2,-32768
100189c4:	10001426 	beq	r2,zero,10018a18 <___vfprintf_internal_r+0x53c>
100189c8:	d8c12917 	ldw	r3,1188(sp)
100189cc:	1880030b 	ldhu	r2,12(r3)
100189d0:	10801014 	ori	r2,r2,64
100189d4:	1880030d 	sth	r2,12(r3)
100189d8:	00000f06 	br	10018a18 <___vfprintf_internal_r+0x53c>
100189dc:	d8811d17 	ldw	r2,1140(sp)
100189e0:	10000426 	beq	r2,zero,100189f4 <___vfprintf_internal_r+0x518>
100189e4:	d9013017 	ldw	r4,1216(sp)
100189e8:	d9412917 	ldw	r5,1188(sp)
100189ec:	d9811b04 	addi	r6,sp,1132
100189f0:	00184a80 	call	100184a8 <__sprint_r>
100189f4:	d8c12917 	ldw	r3,1188(sp)
100189f8:	1880030b 	ldhu	r2,12(r3)
100189fc:	1080100c 	andi	r2,r2,64
10018a00:	10bfffcc 	andi	r2,r2,65535
10018a04:	10a0001c 	xori	r2,r2,32768
10018a08:	10a00004 	addi	r2,r2,-32768
10018a0c:	10000226 	beq	r2,zero,10018a18 <___vfprintf_internal_r+0x53c>
10018a10:	00bfffc4 	movi	r2,-1
10018a14:	d8812c15 	stw	r2,1200(sp)
10018a18:	d8812c17 	ldw	r2,1200(sp)
10018a1c:	dfc14617 	ldw	ra,1304(sp)
10018a20:	df014517 	ldw	fp,1300(sp)
10018a24:	ddc14417 	ldw	r23,1296(sp)
10018a28:	dd814317 	ldw	r22,1292(sp)
10018a2c:	dd414217 	ldw	r21,1288(sp)
10018a30:	dd014117 	ldw	r20,1284(sp)
10018a34:	dcc14017 	ldw	r19,1280(sp)
10018a38:	dc813f17 	ldw	r18,1276(sp)
10018a3c:	dc413e17 	ldw	r17,1272(sp)
10018a40:	dc013d17 	ldw	r16,1268(sp)
10018a44:	dec14704 	addi	sp,sp,1308
10018a48:	f800283a 	ret
10018a4c:	d9412917 	ldw	r5,1188(sp)
10018a50:	8809883a 	mov	r4,r17
10018a54:	d9811b04 	addi	r6,sp,1132
10018a58:	00184a80 	call	100184a8 <__sprint_r>
10018a5c:	103fe51e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
10018a60:	da400404 	addi	r9,sp,16
10018a64:	003eea06 	br	10018610 <__alt_data_end+0xf8018610>
10018a68:	00150fc0 	call	100150fc <__sinit>
10018a6c:	003eb306 	br	1001853c <__alt_data_end+0xf801853c>
10018a70:	e013883a 	mov	r9,fp
10018a74:	84000414 	ori	r16,r16,16
10018a78:	1839883a 	mov	fp,r3
10018a7c:	8080080c 	andi	r2,r16,32
10018a80:	10034426 	beq	r2,zero,10019794 <___vfprintf_internal_r+0x12b8>
10018a84:	d8c12d17 	ldw	r3,1204(sp)
10018a88:	18800117 	ldw	r2,4(r3)
10018a8c:	1dc00017 	ldw	r23,0(r3)
10018a90:	18c00204 	addi	r3,r3,8
10018a94:	d8c12d15 	stw	r3,1204(sp)
10018a98:	102d883a 	mov	r22,r2
10018a9c:	1003020e 	bge	r2,zero,100196a8 <___vfprintf_internal_r+0x11cc>
10018aa0:	05efc83a 	sub	r23,zero,r23
10018aa4:	b804c03a 	cmpne	r2,r23,zero
10018aa8:	05adc83a 	sub	r22,zero,r22
10018aac:	b0adc83a 	sub	r22,r22,r2
10018ab0:	00800b44 	movi	r2,45
10018ab4:	d8812585 	stb	r2,1174(sp)
10018ab8:	00c00044 	movi	r3,1
10018abc:	bd84b03a 	or	r2,r23,r22
10018ac0:	e0000216 	blt	fp,zero,10018acc <___vfprintf_internal_r+0x5f0>
10018ac4:	013fdfc4 	movi	r4,-129
10018ac8:	8120703a 	and	r16,r16,r4
10018acc:	1001cc1e 	bne	r2,zero,10019200 <___vfprintf_internal_r+0xd24>
10018ad0:	e001cb1e 	bne	fp,zero,10019200 <___vfprintf_internal_r+0xd24>
10018ad4:	18c03fcc 	andi	r3,r3,255
10018ad8:	1802ca1e 	bne	r3,zero,10019604 <___vfprintf_internal_r+0x1128>
10018adc:	8080004c 	andi	r2,r16,1
10018ae0:	1002c826 	beq	r2,zero,10019604 <___vfprintf_internal_r+0x1128>
10018ae4:	d8c13917 	ldw	r3,1252(sp)
10018ae8:	00800c04 	movi	r2,48
10018aec:	d8810dc5 	stb	r2,1079(sp)
10018af0:	d8c12b15 	stw	r3,1196(sp)
10018af4:	dcc10dc4 	addi	r19,sp,1079
10018af8:	d8812b17 	ldw	r2,1196(sp)
10018afc:	d8812815 	stw	r2,1184(sp)
10018b00:	1700010e 	bge	r2,fp,10018b08 <___vfprintf_internal_r+0x62c>
10018b04:	df012815 	stw	fp,1184(sp)
10018b08:	d8812583 	ldbu	r2,1174(sp)
10018b0c:	df013115 	stw	fp,1220(sp)
10018b10:	10803fcc 	andi	r2,r2,255
10018b14:	1080201c 	xori	r2,r2,128
10018b18:	10bfe004 	addi	r2,r2,-128
10018b1c:	103ed726 	beq	r2,zero,1001867c <__alt_data_end+0xf801867c>
10018b20:	d8c12817 	ldw	r3,1184(sp)
10018b24:	18c00044 	addi	r3,r3,1
10018b28:	d8c12815 	stw	r3,1184(sp)
10018b2c:	003ed306 	br	1001867c <__alt_data_end+0xf801867c>
10018b30:	8080020c 	andi	r2,r16,8
10018b34:	e013883a 	mov	r9,fp
10018b38:	1839883a 	mov	fp,r3
10018b3c:	1003a626 	beq	r2,zero,100199d8 <___vfprintf_internal_r+0x14fc>
10018b40:	d9012d17 	ldw	r4,1204(sp)
10018b44:	25800017 	ldw	r22,0(r4)
10018b48:	25000117 	ldw	r20,4(r4)
10018b4c:	21000204 	addi	r4,r4,8
10018b50:	d9012d15 	stw	r4,1204(sp)
10018b54:	dd813315 	stw	r22,1228(sp)
10018b58:	dd013415 	stw	r20,1232(sp)
10018b5c:	b009883a 	mov	r4,r22
10018b60:	a00b883a 	mov	r5,r20
10018b64:	da413c15 	stw	r9,1264(sp)
10018b68:	001d9340 	call	1001d934 <__isinfd>
10018b6c:	da413c17 	ldw	r9,1264(sp)
10018b70:	b009883a 	mov	r4,r22
10018b74:	a00b883a 	mov	r5,r20
10018b78:	10041d26 	beq	r2,zero,10019bf0 <___vfprintf_internal_r+0x1714>
10018b7c:	000d883a 	mov	r6,zero
10018b80:	000f883a 	mov	r7,zero
10018b84:	001f2540 	call	1001f254 <__ltdf2>
10018b88:	da413c17 	ldw	r9,1264(sp)
10018b8c:	1004da16 	blt	r2,zero,10019ef8 <___vfprintf_internal_r+0x1a1c>
10018b90:	d8812583 	ldbu	r2,1174(sp)
10018b94:	00c011c4 	movi	r3,71
10018b98:	1c83d116 	blt	r3,r18,10019ae0 <___vfprintf_internal_r+0x1604>
10018b9c:	04c400b4 	movhi	r19,4098
10018ba0:	9ccecf04 	addi	r19,r19,15164
10018ba4:	00c000c4 	movi	r3,3
10018ba8:	d8c12815 	stw	r3,1184(sp)
10018bac:	00ffdfc4 	movi	r3,-129
10018bb0:	80e0703a 	and	r16,r16,r3
10018bb4:	d8c12817 	ldw	r3,1184(sp)
10018bb8:	d8013115 	stw	zero,1220(sp)
10018bbc:	d8c12b15 	stw	r3,1196(sp)
10018bc0:	003fd306 	br	10018b10 <__alt_data_end+0xf8018b10>
10018bc4:	84000214 	ori	r16,r16,8
10018bc8:	ac800007 	ldb	r18,0(r21)
10018bcc:	003e9f06 	br	1001864c <__alt_data_end+0xf801864c>
10018bd0:	e013883a 	mov	r9,fp
10018bd4:	84000414 	ori	r16,r16,16
10018bd8:	1839883a 	mov	fp,r3
10018bdc:	8080080c 	andi	r2,r16,32
10018be0:	10031d26 	beq	r2,zero,10019858 <___vfprintf_internal_r+0x137c>
10018be4:	d8812d17 	ldw	r2,1204(sp)
10018be8:	0007883a 	mov	r3,zero
10018bec:	15c00017 	ldw	r23,0(r2)
10018bf0:	15800117 	ldw	r22,4(r2)
10018bf4:	10800204 	addi	r2,r2,8
10018bf8:	d8812d15 	stw	r2,1204(sp)
10018bfc:	d8012585 	stb	zero,1174(sp)
10018c00:	bd84b03a 	or	r2,r23,r22
10018c04:	003fae06 	br	10018ac0 <__alt_data_end+0xf8018ac0>
10018c08:	e013883a 	mov	r9,fp
10018c0c:	84000414 	ori	r16,r16,16
10018c10:	1839883a 	mov	fp,r3
10018c14:	8080080c 	andi	r2,r16,32
10018c18:	1002e726 	beq	r2,zero,100197b8 <___vfprintf_internal_r+0x12dc>
10018c1c:	d8c12d17 	ldw	r3,1204(sp)
10018c20:	d9012d17 	ldw	r4,1204(sp)
10018c24:	1dc00017 	ldw	r23,0(r3)
10018c28:	1d800117 	ldw	r22,4(r3)
10018c2c:	21000204 	addi	r4,r4,8
10018c30:	00c00044 	movi	r3,1
10018c34:	d9012d15 	stw	r4,1204(sp)
10018c38:	bd84b03a 	or	r2,r23,r22
10018c3c:	d8012585 	stb	zero,1174(sp)
10018c40:	003f9f06 	br	10018ac0 <__alt_data_end+0xf8018ac0>
10018c44:	e013883a 	mov	r9,fp
10018c48:	1839883a 	mov	fp,r3
10018c4c:	00c400b4 	movhi	r3,4098
10018c50:	18ced304 	addi	r3,r3,15180
10018c54:	d8c13615 	stw	r3,1240(sp)
10018c58:	8080080c 	andi	r2,r16,32
10018c5c:	10007726 	beq	r2,zero,10018e3c <___vfprintf_internal_r+0x960>
10018c60:	d9012d17 	ldw	r4,1204(sp)
10018c64:	25c00017 	ldw	r23,0(r4)
10018c68:	25800117 	ldw	r22,4(r4)
10018c6c:	21000204 	addi	r4,r4,8
10018c70:	d9012d15 	stw	r4,1204(sp)
10018c74:	8080004c 	andi	r2,r16,1
10018c78:	1002c226 	beq	r2,zero,10019784 <___vfprintf_internal_r+0x12a8>
10018c7c:	bd84b03a 	or	r2,r23,r22
10018c80:	10035d26 	beq	r2,zero,100199f8 <___vfprintf_internal_r+0x151c>
10018c84:	00c00c04 	movi	r3,48
10018c88:	d8c12505 	stb	r3,1172(sp)
10018c8c:	dc812545 	stb	r18,1173(sp)
10018c90:	84000094 	ori	r16,r16,2
10018c94:	00c00084 	movi	r3,2
10018c98:	d8012585 	stb	zero,1174(sp)
10018c9c:	003f8806 	br	10018ac0 <__alt_data_end+0xf8018ac0>
10018ca0:	ac800007 	ldb	r18,0(r21)
10018ca4:	00c00a84 	movi	r3,42
10018ca8:	adc00044 	addi	r23,r21,1
10018cac:	90c57526 	beq	r18,r3,1001a284 <___vfprintf_internal_r+0x1da8>
10018cb0:	95bff404 	addi	r22,r18,-48
10018cb4:	0009883a 	mov	r4,zero
10018cb8:	9d84ff36 	bltu	r19,r22,1001a0b8 <___vfprintf_internal_r+0x1bdc>
10018cbc:	01400284 	movi	r5,10
10018cc0:	00146fc0 	call	100146fc <__mulsi3>
10018cc4:	bc800007 	ldb	r18,0(r23)
10018cc8:	b089883a 	add	r4,r22,r2
10018ccc:	bdc00044 	addi	r23,r23,1
10018cd0:	95bff404 	addi	r22,r18,-48
10018cd4:	9dbff92e 	bgeu	r19,r22,10018cbc <__alt_data_end+0xf8018cbc>
10018cd8:	2007883a 	mov	r3,r4
10018cdc:	20044316 	blt	r4,zero,10019dec <___vfprintf_internal_r+0x1910>
10018ce0:	b82b883a 	mov	r21,r23
10018ce4:	003e5a06 	br	10018650 <__alt_data_end+0xf8018650>
10018ce8:	ac800007 	ldb	r18,0(r21)
10018cec:	01001b04 	movi	r4,108
10018cf0:	a805883a 	mov	r2,r21
10018cf4:	91045526 	beq	r18,r4,10019e4c <___vfprintf_internal_r+0x1970>
10018cf8:	84000414 	ori	r16,r16,16
10018cfc:	003e5306 	br	1001864c <__alt_data_end+0xf801864c>
10018d00:	8080080c 	andi	r2,r16,32
10018d04:	e013883a 	mov	r9,fp
10018d08:	10034026 	beq	r2,zero,10019a0c <___vfprintf_internal_r+0x1530>
10018d0c:	d9012d17 	ldw	r4,1204(sp)
10018d10:	20800017 	ldw	r2,0(r4)
10018d14:	d9012c17 	ldw	r4,1200(sp)
10018d18:	2007d7fa 	srai	r3,r4,31
10018d1c:	d9012d17 	ldw	r4,1204(sp)
10018d20:	10c00115 	stw	r3,4(r2)
10018d24:	21000104 	addi	r4,r4,4
10018d28:	d9012d15 	stw	r4,1204(sp)
10018d2c:	d9012c17 	ldw	r4,1200(sp)
10018d30:	11000015 	stw	r4,0(r2)
10018d34:	003e1f06 	br	100185b4 <__alt_data_end+0xf80185b4>
10018d38:	d9012d17 	ldw	r4,1204(sp)
10018d3c:	21000017 	ldw	r4,0(r4)
10018d40:	d9012e15 	stw	r4,1208(sp)
10018d44:	d9012d17 	ldw	r4,1204(sp)
10018d48:	20800104 	addi	r2,r4,4
10018d4c:	d9012e17 	ldw	r4,1208(sp)
10018d50:	203ee716 	blt	r4,zero,100188f0 <__alt_data_end+0xf80188f0>
10018d54:	d8812d15 	stw	r2,1204(sp)
10018d58:	ac800007 	ldb	r18,0(r21)
10018d5c:	003e3b06 	br	1001864c <__alt_data_end+0xf801864c>
10018d60:	e013883a 	mov	r9,fp
10018d64:	1839883a 	mov	fp,r3
10018d68:	d8c12d17 	ldw	r3,1204(sp)
10018d6c:	00800c04 	movi	r2,48
10018d70:	010400b4 	movhi	r4,4098
10018d74:	210ed804 	addi	r4,r4,15200
10018d78:	1dc00017 	ldw	r23,0(r3)
10018d7c:	18c00104 	addi	r3,r3,4
10018d80:	d8812505 	stb	r2,1172(sp)
10018d84:	00801e04 	movi	r2,120
10018d88:	d8812545 	stb	r2,1173(sp)
10018d8c:	d8c12d15 	stw	r3,1204(sp)
10018d90:	002d883a 	mov	r22,zero
10018d94:	84000094 	ori	r16,r16,2
10018d98:	d9013615 	stw	r4,1240(sp)
10018d9c:	00c00084 	movi	r3,2
10018da0:	04801e04 	movi	r18,120
10018da4:	b805883a 	mov	r2,r23
10018da8:	d8012585 	stb	zero,1174(sp)
10018dac:	003f4406 	br	10018ac0 <__alt_data_end+0xf8018ac0>
10018db0:	84000814 	ori	r16,r16,32
10018db4:	ac800007 	ldb	r18,0(r21)
10018db8:	003e2406 	br	1001864c <__alt_data_end+0xf801864c>
10018dbc:	d8812d17 	ldw	r2,1204(sp)
10018dc0:	d8012585 	stb	zero,1174(sp)
10018dc4:	e013883a 	mov	r9,fp
10018dc8:	14c00017 	ldw	r19,0(r2)
10018dcc:	1839883a 	mov	fp,r3
10018dd0:	15c00104 	addi	r23,r2,4
10018dd4:	98045526 	beq	r19,zero,10019f2c <___vfprintf_internal_r+0x1a50>
10018dd8:	9809883a 	mov	r4,r19
10018ddc:	18043116 	blt	r3,zero,10019ea4 <___vfprintf_internal_r+0x19c8>
10018de0:	000b883a 	mov	r5,zero
10018de4:	180d883a 	mov	r6,r3
10018de8:	da413c15 	stw	r9,1264(sp)
10018dec:	0016ce00 	call	10016ce0 <memchr>
10018df0:	da413c17 	ldw	r9,1264(sp)
10018df4:	10047a26 	beq	r2,zero,10019fe0 <___vfprintf_internal_r+0x1b04>
10018df8:	14c5c83a 	sub	r2,r2,r19
10018dfc:	d8812b15 	stw	r2,1196(sp)
10018e00:	e083d40e 	bge	fp,r2,10019d54 <___vfprintf_internal_r+0x1878>
10018e04:	df012815 	stw	fp,1184(sp)
10018e08:	e004e416 	blt	fp,zero,1001a19c <___vfprintf_internal_r+0x1cc0>
10018e0c:	d8812583 	ldbu	r2,1174(sp)
10018e10:	df012b15 	stw	fp,1196(sp)
10018e14:	ddc12d15 	stw	r23,1204(sp)
10018e18:	d8013115 	stw	zero,1220(sp)
10018e1c:	003f3c06 	br	10018b10 <__alt_data_end+0xf8018b10>
10018e20:	008400b4 	movhi	r2,4098
10018e24:	108ed804 	addi	r2,r2,15200
10018e28:	d8813615 	stw	r2,1240(sp)
10018e2c:	8080080c 	andi	r2,r16,32
10018e30:	e013883a 	mov	r9,fp
10018e34:	1839883a 	mov	fp,r3
10018e38:	103f891e 	bne	r2,zero,10018c60 <__alt_data_end+0xf8018c60>
10018e3c:	8080040c 	andi	r2,r16,16
10018e40:	1002c326 	beq	r2,zero,10019950 <___vfprintf_internal_r+0x1474>
10018e44:	d8812d17 	ldw	r2,1204(sp)
10018e48:	002d883a 	mov	r22,zero
10018e4c:	15c00017 	ldw	r23,0(r2)
10018e50:	10800104 	addi	r2,r2,4
10018e54:	d8812d15 	stw	r2,1204(sp)
10018e58:	003f8606 	br	10018c74 <__alt_data_end+0xf8018c74>
10018e5c:	84001014 	ori	r16,r16,64
10018e60:	ac800007 	ldb	r18,0(r21)
10018e64:	003df906 	br	1001864c <__alt_data_end+0xf801864c>
10018e68:	d8812587 	ldb	r2,1174(sp)
10018e6c:	1002e51e 	bne	r2,zero,10019a04 <___vfprintf_internal_r+0x1528>
10018e70:	00800804 	movi	r2,32
10018e74:	d8812585 	stb	r2,1174(sp)
10018e78:	ac800007 	ldb	r18,0(r21)
10018e7c:	003df306 	br	1001864c <__alt_data_end+0xf801864c>
10018e80:	84000054 	ori	r16,r16,1
10018e84:	ac800007 	ldb	r18,0(r21)
10018e88:	003df006 	br	1001864c <__alt_data_end+0xf801864c>
10018e8c:	84002014 	ori	r16,r16,128
10018e90:	ac800007 	ldb	r18,0(r21)
10018e94:	003ded06 	br	1001864c <__alt_data_end+0xf801864c>
10018e98:	0009883a 	mov	r4,zero
10018e9c:	95bff404 	addi	r22,r18,-48
10018ea0:	182f883a 	mov	r23,r3
10018ea4:	01400284 	movi	r5,10
10018ea8:	00146fc0 	call	100146fc <__mulsi3>
10018eac:	ac800007 	ldb	r18,0(r21)
10018eb0:	1589883a 	add	r4,r2,r22
10018eb4:	ad400044 	addi	r21,r21,1
10018eb8:	95bff404 	addi	r22,r18,-48
10018ebc:	9dbff92e 	bgeu	r19,r22,10018ea4 <__alt_data_end+0xf8018ea4>
10018ec0:	b807883a 	mov	r3,r23
10018ec4:	d9012e15 	stw	r4,1208(sp)
10018ec8:	003de106 	br	10018650 <__alt_data_end+0xf8018650>
10018ecc:	00800ac4 	movi	r2,43
10018ed0:	d8812585 	stb	r2,1174(sp)
10018ed4:	ac800007 	ldb	r18,0(r21)
10018ed8:	003ddc06 	br	1001864c <__alt_data_end+0xf801864c>
10018edc:	d8c12d17 	ldw	r3,1204(sp)
10018ee0:	d9012d17 	ldw	r4,1204(sp)
10018ee4:	e013883a 	mov	r9,fp
10018ee8:	18800017 	ldw	r2,0(r3)
10018eec:	21000104 	addi	r4,r4,4
10018ef0:	00c00044 	movi	r3,1
10018ef4:	d8c12815 	stw	r3,1184(sp)
10018ef8:	d8012585 	stb	zero,1174(sp)
10018efc:	d8810405 	stb	r2,1040(sp)
10018f00:	d9012d15 	stw	r4,1204(sp)
10018f04:	d8c12b15 	stw	r3,1196(sp)
10018f08:	dcc10404 	addi	r19,sp,1040
10018f0c:	003dda06 	br	10018678 <__alt_data_end+0xf8018678>
10018f10:	e013883a 	mov	r9,fp
10018f14:	1839883a 	mov	fp,r3
10018f18:	003ed806 	br	10018a7c <__alt_data_end+0xf8018a7c>
10018f1c:	e013883a 	mov	r9,fp
10018f20:	1839883a 	mov	fp,r3
10018f24:	003f2d06 	br	10018bdc <__alt_data_end+0xf8018bdc>
10018f28:	e013883a 	mov	r9,fp
10018f2c:	1839883a 	mov	fp,r3
10018f30:	003f3806 	br	10018c14 <__alt_data_end+0xf8018c14>
10018f34:	da011d17 	ldw	r8,1140(sp)
10018f38:	d8c11c17 	ldw	r3,1136(sp)
10018f3c:	d8812587 	ldb	r2,1174(sp)
10018f40:	10000b26 	beq	r2,zero,10018f70 <___vfprintf_internal_r+0xa94>
10018f44:	d8812584 	addi	r2,sp,1174
10018f48:	48800015 	stw	r2,0(r9)
10018f4c:	00800044 	movi	r2,1
10018f50:	48800115 	stw	r2,4(r9)
10018f54:	4091883a 	add	r8,r8,r2
10018f58:	1887883a 	add	r3,r3,r2
10018f5c:	da011d15 	stw	r8,1140(sp)
10018f60:	d8c11c15 	stw	r3,1136(sp)
10018f64:	008001c4 	movi	r2,7
10018f68:	10c18e16 	blt	r2,r3,100195a4 <___vfprintf_internal_r+0x10c8>
10018f6c:	4a400204 	addi	r9,r9,8
10018f70:	d9012a17 	ldw	r4,1192(sp)
10018f74:	20000b26 	beq	r4,zero,10018fa4 <___vfprintf_internal_r+0xac8>
10018f78:	d8812504 	addi	r2,sp,1172
10018f7c:	48800015 	stw	r2,0(r9)
10018f80:	00800084 	movi	r2,2
10018f84:	48800115 	stw	r2,4(r9)
10018f88:	4091883a 	add	r8,r8,r2
10018f8c:	18c00044 	addi	r3,r3,1
10018f90:	da011d15 	stw	r8,1140(sp)
10018f94:	d8c11c15 	stw	r3,1136(sp)
10018f98:	008001c4 	movi	r2,7
10018f9c:	10c17816 	blt	r2,r3,10019580 <___vfprintf_internal_r+0x10a4>
10018fa0:	4a400204 	addi	r9,r9,8
10018fa4:	d9012f17 	ldw	r4,1212(sp)
10018fa8:	00802004 	movi	r2,128
10018fac:	2080fc26 	beq	r4,r2,100193a0 <___vfprintf_internal_r+0xec4>
10018fb0:	d8813117 	ldw	r2,1220(sp)
10018fb4:	d9012b17 	ldw	r4,1196(sp)
10018fb8:	112fc83a 	sub	r23,r2,r4
10018fbc:	05c02a0e 	bge	zero,r23,10019068 <___vfprintf_internal_r+0xb8c>
10018fc0:	07000404 	movi	fp,16
10018fc4:	050400b4 	movhi	r20,4098
10018fc8:	a50ee384 	addi	r20,r20,15246
10018fcc:	e5c01d0e 	bge	fp,r23,10019044 <___vfprintf_internal_r+0xb68>
10018fd0:	dc812a15 	stw	r18,1192(sp)
10018fd4:	058001c4 	movi	r22,7
10018fd8:	a025883a 	mov	r18,r20
10018fdc:	8029883a 	mov	r20,r16
10018fe0:	dc012917 	ldw	r16,1188(sp)
10018fe4:	00000306 	br	10018ff4 <___vfprintf_internal_r+0xb18>
10018fe8:	bdfffc04 	addi	r23,r23,-16
10018fec:	4a400204 	addi	r9,r9,8
10018ff0:	e5c0110e 	bge	fp,r23,10019038 <___vfprintf_internal_r+0xb5c>
10018ff4:	4c800015 	stw	r18,0(r9)
10018ff8:	4f000115 	stw	fp,4(r9)
10018ffc:	42000404 	addi	r8,r8,16
10019000:	18c00044 	addi	r3,r3,1
10019004:	da011d15 	stw	r8,1140(sp)
10019008:	d8c11c15 	stw	r3,1136(sp)
1001900c:	b0fff60e 	bge	r22,r3,10018fe8 <__alt_data_end+0xf8018fe8>
10019010:	8809883a 	mov	r4,r17
10019014:	800b883a 	mov	r5,r16
10019018:	d9811b04 	addi	r6,sp,1132
1001901c:	00184a80 	call	100184a8 <__sprint_r>
10019020:	103e741e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
10019024:	bdfffc04 	addi	r23,r23,-16
10019028:	da011d17 	ldw	r8,1140(sp)
1001902c:	d8c11c17 	ldw	r3,1136(sp)
10019030:	da400404 	addi	r9,sp,16
10019034:	e5ffef16 	blt	fp,r23,10018ff4 <__alt_data_end+0xf8018ff4>
10019038:	a021883a 	mov	r16,r20
1001903c:	9029883a 	mov	r20,r18
10019040:	dc812a17 	ldw	r18,1192(sp)
10019044:	4d000015 	stw	r20,0(r9)
10019048:	4dc00115 	stw	r23,4(r9)
1001904c:	45d1883a 	add	r8,r8,r23
10019050:	18c00044 	addi	r3,r3,1
10019054:	da011d15 	stw	r8,1140(sp)
10019058:	d8c11c15 	stw	r3,1136(sp)
1001905c:	008001c4 	movi	r2,7
10019060:	10c13e16 	blt	r2,r3,1001955c <___vfprintf_internal_r+0x1080>
10019064:	4a400204 	addi	r9,r9,8
10019068:	8080400c 	andi	r2,r16,256
1001906c:	1000831e 	bne	r2,zero,1001927c <___vfprintf_internal_r+0xda0>
10019070:	d8812b17 	ldw	r2,1196(sp)
10019074:	4cc00015 	stw	r19,0(r9)
10019078:	48800115 	stw	r2,4(r9)
1001907c:	4091883a 	add	r8,r8,r2
10019080:	18c00044 	addi	r3,r3,1
10019084:	da011d15 	stw	r8,1140(sp)
10019088:	d8c11c15 	stw	r3,1136(sp)
1001908c:	008001c4 	movi	r2,7
10019090:	10c05316 	blt	r2,r3,100191e0 <___vfprintf_internal_r+0xd04>
10019094:	4a400204 	addi	r9,r9,8
10019098:	8400010c 	andi	r16,r16,4
1001909c:	80002e26 	beq	r16,zero,10019158 <___vfprintf_internal_r+0xc7c>
100190a0:	d8812e17 	ldw	r2,1208(sp)
100190a4:	d8c12817 	ldw	r3,1184(sp)
100190a8:	10e1c83a 	sub	r16,r2,r3
100190ac:	04002a0e 	bge	zero,r16,10019158 <___vfprintf_internal_r+0xc7c>
100190b0:	04800404 	movi	r18,16
100190b4:	d8c11c17 	ldw	r3,1136(sp)
100190b8:	05c400b4 	movhi	r23,4098
100190bc:	bdcedf84 	addi	r23,r23,15230
100190c0:	9400170e 	bge	r18,r16,10019120 <___vfprintf_internal_r+0xc44>
100190c4:	04c001c4 	movi	r19,7
100190c8:	dd012917 	ldw	r20,1188(sp)
100190cc:	00000306 	br	100190dc <___vfprintf_internal_r+0xc00>
100190d0:	843ffc04 	addi	r16,r16,-16
100190d4:	4a400204 	addi	r9,r9,8
100190d8:	9400110e 	bge	r18,r16,10019120 <___vfprintf_internal_r+0xc44>
100190dc:	4dc00015 	stw	r23,0(r9)
100190e0:	4c800115 	stw	r18,4(r9)
100190e4:	42000404 	addi	r8,r8,16
100190e8:	18c00044 	addi	r3,r3,1
100190ec:	da011d15 	stw	r8,1140(sp)
100190f0:	d8c11c15 	stw	r3,1136(sp)
100190f4:	98fff60e 	bge	r19,r3,100190d0 <__alt_data_end+0xf80190d0>
100190f8:	8809883a 	mov	r4,r17
100190fc:	a00b883a 	mov	r5,r20
10019100:	d9811b04 	addi	r6,sp,1132
10019104:	00184a80 	call	100184a8 <__sprint_r>
10019108:	103e3a1e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
1001910c:	843ffc04 	addi	r16,r16,-16
10019110:	da011d17 	ldw	r8,1140(sp)
10019114:	d8c11c17 	ldw	r3,1136(sp)
10019118:	da400404 	addi	r9,sp,16
1001911c:	943fef16 	blt	r18,r16,100190dc <__alt_data_end+0xf80190dc>
10019120:	4dc00015 	stw	r23,0(r9)
10019124:	4c000115 	stw	r16,4(r9)
10019128:	8211883a 	add	r8,r16,r8
1001912c:	18c00044 	addi	r3,r3,1
10019130:	da011d15 	stw	r8,1140(sp)
10019134:	d8c11c15 	stw	r3,1136(sp)
10019138:	008001c4 	movi	r2,7
1001913c:	10c0060e 	bge	r2,r3,10019158 <___vfprintf_internal_r+0xc7c>
10019140:	d9412917 	ldw	r5,1188(sp)
10019144:	8809883a 	mov	r4,r17
10019148:	d9811b04 	addi	r6,sp,1132
1001914c:	00184a80 	call	100184a8 <__sprint_r>
10019150:	103e281e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
10019154:	da011d17 	ldw	r8,1140(sp)
10019158:	dd012817 	ldw	r20,1184(sp)
1001915c:	d9012e17 	ldw	r4,1208(sp)
10019160:	a100010e 	bge	r20,r4,10019168 <___vfprintf_internal_r+0xc8c>
10019164:	2029883a 	mov	r20,r4
10019168:	d8812c17 	ldw	r2,1200(sp)
1001916c:	1505883a 	add	r2,r2,r20
10019170:	d8812c15 	stw	r2,1200(sp)
10019174:	4000b91e 	bne	r8,zero,1001945c <___vfprintf_internal_r+0xf80>
10019178:	d8011c15 	stw	zero,1136(sp)
1001917c:	a8800007 	ldb	r2,0(r21)
10019180:	da400404 	addi	r9,sp,16
10019184:	103d0d1e 	bne	r2,zero,100185bc <__alt_data_end+0xf80185bc>
10019188:	a825883a 	mov	r18,r21
1001918c:	003d2306 	br	1001861c <__alt_data_end+0xf801861c>
10019190:	d9412917 	ldw	r5,1188(sp)
10019194:	8809883a 	mov	r4,r17
10019198:	d9811b04 	addi	r6,sp,1132
1001919c:	00184a80 	call	100184a8 <__sprint_r>
100191a0:	103e141e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
100191a4:	da011d17 	ldw	r8,1140(sp)
100191a8:	da400404 	addi	r9,sp,16
100191ac:	8080004c 	andi	r2,r16,1
100191b0:	103fb926 	beq	r2,zero,10019098 <__alt_data_end+0xf8019098>
100191b4:	d8c11c17 	ldw	r3,1136(sp)
100191b8:	d9013717 	ldw	r4,1244(sp)
100191bc:	00800044 	movi	r2,1
100191c0:	48800115 	stw	r2,4(r9)
100191c4:	49000015 	stw	r4,0(r9)
100191c8:	4091883a 	add	r8,r8,r2
100191cc:	1887883a 	add	r3,r3,r2
100191d0:	da011d15 	stw	r8,1140(sp)
100191d4:	d8c11c15 	stw	r3,1136(sp)
100191d8:	008001c4 	movi	r2,7
100191dc:	10ffad0e 	bge	r2,r3,10019094 <__alt_data_end+0xf8019094>
100191e0:	d9412917 	ldw	r5,1188(sp)
100191e4:	8809883a 	mov	r4,r17
100191e8:	d9811b04 	addi	r6,sp,1132
100191ec:	00184a80 	call	100184a8 <__sprint_r>
100191f0:	103e001e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
100191f4:	da400404 	addi	r9,sp,16
100191f8:	da011d17 	ldw	r8,1140(sp)
100191fc:	003fa606 	br	10019098 <__alt_data_end+0xf8019098>
10019200:	18803fcc 	andi	r2,r3,255
10019204:	00c00044 	movi	r3,1
10019208:	10c10126 	beq	r2,r3,10019610 <___vfprintf_internal_r+0x1134>
1001920c:	00c00084 	movi	r3,2
10019210:	10c0ed26 	beq	r2,r3,100195c8 <___vfprintf_internal_r+0x10ec>
10019214:	d8c10dc4 	addi	r3,sp,1079
10019218:	b808d0fa 	srli	r4,r23,3
1001921c:	b00a977a 	slli	r5,r22,29
10019220:	b02cd0fa 	srli	r22,r22,3
10019224:	bdc001cc 	andi	r23,r23,7
10019228:	b8800c04 	addi	r2,r23,48
1001922c:	292eb03a 	or	r23,r5,r4
10019230:	18800005 	stb	r2,0(r3)
10019234:	bd88b03a 	or	r4,r23,r22
10019238:	1827883a 	mov	r19,r3
1001923c:	18ffffc4 	addi	r3,r3,-1
10019240:	203ff51e 	bne	r4,zero,10019218 <__alt_data_end+0xf8019218>
10019244:	8100004c 	andi	r4,r16,1
10019248:	980b883a 	mov	r5,r19
1001924c:	20000726 	beq	r4,zero,1001926c <___vfprintf_internal_r+0xd90>
10019250:	10803fcc 	andi	r2,r2,255
10019254:	1080201c 	xori	r2,r2,128
10019258:	10bfe004 	addi	r2,r2,-128
1001925c:	01000c04 	movi	r4,48
10019260:	11000226 	beq	r2,r4,1001926c <___vfprintf_internal_r+0xd90>
10019264:	1827883a 	mov	r19,r3
10019268:	293fffc5 	stb	r4,-1(r5)
1001926c:	d8812717 	ldw	r2,1180(sp)
10019270:	14c5c83a 	sub	r2,r2,r19
10019274:	d8812b15 	stw	r2,1196(sp)
10019278:	003e1f06 	br	10018af8 <__alt_data_end+0xf8018af8>
1001927c:	00801944 	movi	r2,101
10019280:	14807c0e 	bge	r2,r18,10019474 <___vfprintf_internal_r+0xf98>
10019284:	d9013317 	ldw	r4,1228(sp)
10019288:	d9413417 	ldw	r5,1232(sp)
1001928c:	000d883a 	mov	r6,zero
10019290:	000f883a 	mov	r7,zero
10019294:	d8c13b15 	stw	r3,1260(sp)
10019298:	da013a15 	stw	r8,1256(sp)
1001929c:	da413c15 	stw	r9,1264(sp)
100192a0:	001f1300 	call	1001f130 <__nedf2>
100192a4:	d8c13b17 	ldw	r3,1260(sp)
100192a8:	da013a17 	ldw	r8,1256(sp)
100192ac:	da413c17 	ldw	r9,1264(sp)
100192b0:	1001001e 	bne	r2,zero,100196b4 <___vfprintf_internal_r+0x11d8>
100192b4:	008400b4 	movhi	r2,4098
100192b8:	108edf04 	addi	r2,r2,15228
100192bc:	48800015 	stw	r2,0(r9)
100192c0:	00800044 	movi	r2,1
100192c4:	48800115 	stw	r2,4(r9)
100192c8:	4091883a 	add	r8,r8,r2
100192cc:	1887883a 	add	r3,r3,r2
100192d0:	da011d15 	stw	r8,1140(sp)
100192d4:	d8c11c15 	stw	r3,1136(sp)
100192d8:	008001c4 	movi	r2,7
100192dc:	10c20316 	blt	r2,r3,10019aec <___vfprintf_internal_r+0x1610>
100192e0:	4a400204 	addi	r9,r9,8
100192e4:	d8812417 	ldw	r2,1168(sp)
100192e8:	d8c13217 	ldw	r3,1224(sp)
100192ec:	10c00216 	blt	r2,r3,100192f8 <___vfprintf_internal_r+0xe1c>
100192f0:	8080004c 	andi	r2,r16,1
100192f4:	103f6826 	beq	r2,zero,10019098 <__alt_data_end+0xf8019098>
100192f8:	d8c11c17 	ldw	r3,1136(sp)
100192fc:	d9013717 	ldw	r4,1244(sp)
10019300:	00800044 	movi	r2,1
10019304:	48800115 	stw	r2,4(r9)
10019308:	49000015 	stw	r4,0(r9)
1001930c:	4091883a 	add	r8,r8,r2
10019310:	1887883a 	add	r3,r3,r2
10019314:	da011d15 	stw	r8,1140(sp)
10019318:	d8c11c15 	stw	r3,1136(sp)
1001931c:	008001c4 	movi	r2,7
10019320:	10c2ce16 	blt	r2,r3,10019e5c <___vfprintf_internal_r+0x1980>
10019324:	4a400204 	addi	r9,r9,8
10019328:	d8813217 	ldw	r2,1224(sp)
1001932c:	14bfffc4 	addi	r18,r2,-1
10019330:	04bf590e 	bge	zero,r18,10019098 <__alt_data_end+0xf8019098>
10019334:	04c00404 	movi	r19,16
10019338:	d8c11c17 	ldw	r3,1136(sp)
1001933c:	050400b4 	movhi	r20,4098
10019340:	a50ee384 	addi	r20,r20,15246
10019344:	9c818a0e 	bge	r19,r18,10019970 <___vfprintf_internal_r+0x1494>
10019348:	058001c4 	movi	r22,7
1001934c:	ddc12917 	ldw	r23,1188(sp)
10019350:	00000306 	br	10019360 <___vfprintf_internal_r+0xe84>
10019354:	4a400204 	addi	r9,r9,8
10019358:	94bffc04 	addi	r18,r18,-16
1001935c:	9c81840e 	bge	r19,r18,10019970 <___vfprintf_internal_r+0x1494>
10019360:	4d000015 	stw	r20,0(r9)
10019364:	4cc00115 	stw	r19,4(r9)
10019368:	42000404 	addi	r8,r8,16
1001936c:	18c00044 	addi	r3,r3,1
10019370:	da011d15 	stw	r8,1140(sp)
10019374:	d8c11c15 	stw	r3,1136(sp)
10019378:	b0fff60e 	bge	r22,r3,10019354 <__alt_data_end+0xf8019354>
1001937c:	8809883a 	mov	r4,r17
10019380:	b80b883a 	mov	r5,r23
10019384:	d9811b04 	addi	r6,sp,1132
10019388:	00184a80 	call	100184a8 <__sprint_r>
1001938c:	103d991e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
10019390:	da011d17 	ldw	r8,1140(sp)
10019394:	d8c11c17 	ldw	r3,1136(sp)
10019398:	da400404 	addi	r9,sp,16
1001939c:	003fee06 	br	10019358 <__alt_data_end+0xf8019358>
100193a0:	d8812e17 	ldw	r2,1208(sp)
100193a4:	d9012817 	ldw	r4,1184(sp)
100193a8:	112fc83a 	sub	r23,r2,r4
100193ac:	05ff000e 	bge	zero,r23,10018fb0 <__alt_data_end+0xf8018fb0>
100193b0:	07000404 	movi	fp,16
100193b4:	050400b4 	movhi	r20,4098
100193b8:	a50ee384 	addi	r20,r20,15246
100193bc:	e5c01d0e 	bge	fp,r23,10019434 <___vfprintf_internal_r+0xf58>
100193c0:	dc812a15 	stw	r18,1192(sp)
100193c4:	058001c4 	movi	r22,7
100193c8:	a025883a 	mov	r18,r20
100193cc:	8029883a 	mov	r20,r16
100193d0:	dc012917 	ldw	r16,1188(sp)
100193d4:	00000306 	br	100193e4 <___vfprintf_internal_r+0xf08>
100193d8:	bdfffc04 	addi	r23,r23,-16
100193dc:	4a400204 	addi	r9,r9,8
100193e0:	e5c0110e 	bge	fp,r23,10019428 <___vfprintf_internal_r+0xf4c>
100193e4:	4c800015 	stw	r18,0(r9)
100193e8:	4f000115 	stw	fp,4(r9)
100193ec:	42000404 	addi	r8,r8,16
100193f0:	18c00044 	addi	r3,r3,1
100193f4:	da011d15 	stw	r8,1140(sp)
100193f8:	d8c11c15 	stw	r3,1136(sp)
100193fc:	b0fff60e 	bge	r22,r3,100193d8 <__alt_data_end+0xf80193d8>
10019400:	8809883a 	mov	r4,r17
10019404:	800b883a 	mov	r5,r16
10019408:	d9811b04 	addi	r6,sp,1132
1001940c:	00184a80 	call	100184a8 <__sprint_r>
10019410:	103d781e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
10019414:	bdfffc04 	addi	r23,r23,-16
10019418:	da011d17 	ldw	r8,1140(sp)
1001941c:	d8c11c17 	ldw	r3,1136(sp)
10019420:	da400404 	addi	r9,sp,16
10019424:	e5ffef16 	blt	fp,r23,100193e4 <__alt_data_end+0xf80193e4>
10019428:	a021883a 	mov	r16,r20
1001942c:	9029883a 	mov	r20,r18
10019430:	dc812a17 	ldw	r18,1192(sp)
10019434:	4d000015 	stw	r20,0(r9)
10019438:	4dc00115 	stw	r23,4(r9)
1001943c:	45d1883a 	add	r8,r8,r23
10019440:	18c00044 	addi	r3,r3,1
10019444:	da011d15 	stw	r8,1140(sp)
10019448:	d8c11c15 	stw	r3,1136(sp)
1001944c:	008001c4 	movi	r2,7
10019450:	10c13616 	blt	r2,r3,1001992c <___vfprintf_internal_r+0x1450>
10019454:	4a400204 	addi	r9,r9,8
10019458:	003ed506 	br	10018fb0 <__alt_data_end+0xf8018fb0>
1001945c:	d9412917 	ldw	r5,1188(sp)
10019460:	8809883a 	mov	r4,r17
10019464:	d9811b04 	addi	r6,sp,1132
10019468:	00184a80 	call	100184a8 <__sprint_r>
1001946c:	103f4226 	beq	r2,zero,10019178 <__alt_data_end+0xf8019178>
10019470:	003d6006 	br	100189f4 <__alt_data_end+0xf80189f4>
10019474:	d9013217 	ldw	r4,1224(sp)
10019478:	00800044 	movi	r2,1
1001947c:	4cc00015 	stw	r19,0(r9)
10019480:	1101000e 	bge	r2,r4,10019884 <___vfprintf_internal_r+0x13a8>
10019484:	00800044 	movi	r2,1
10019488:	48800115 	stw	r2,4(r9)
1001948c:	4091883a 	add	r8,r8,r2
10019490:	1887883a 	add	r3,r3,r2
10019494:	da011d15 	stw	r8,1140(sp)
10019498:	d8c11c15 	stw	r3,1136(sp)
1001949c:	008001c4 	movi	r2,7
100194a0:	10c10c16 	blt	r2,r3,100198d4 <___vfprintf_internal_r+0x13f8>
100194a4:	4a400204 	addi	r9,r9,8
100194a8:	d8813717 	ldw	r2,1244(sp)
100194ac:	48800015 	stw	r2,0(r9)
100194b0:	00800044 	movi	r2,1
100194b4:	48800115 	stw	r2,4(r9)
100194b8:	4091883a 	add	r8,r8,r2
100194bc:	1887883a 	add	r3,r3,r2
100194c0:	da011d15 	stw	r8,1140(sp)
100194c4:	d8c11c15 	stw	r3,1136(sp)
100194c8:	008001c4 	movi	r2,7
100194cc:	10c10a16 	blt	r2,r3,100198f8 <___vfprintf_internal_r+0x141c>
100194d0:	4c800204 	addi	r18,r9,8
100194d4:	d9013317 	ldw	r4,1228(sp)
100194d8:	d9413417 	ldw	r5,1232(sp)
100194dc:	000d883a 	mov	r6,zero
100194e0:	000f883a 	mov	r7,zero
100194e4:	d8c13b15 	stw	r3,1260(sp)
100194e8:	da013a15 	stw	r8,1256(sp)
100194ec:	001f0d40 	call	1001f0d4 <__eqdf2>
100194f0:	d8c13b17 	ldw	r3,1260(sp)
100194f4:	da013a17 	ldw	r8,1256(sp)
100194f8:	1000ba26 	beq	r2,zero,100197e4 <___vfprintf_internal_r+0x1308>
100194fc:	d9013217 	ldw	r4,1224(sp)
10019500:	9cc00044 	addi	r19,r19,1
10019504:	94c00015 	stw	r19,0(r18)
10019508:	20bfffc4 	addi	r2,r4,-1
1001950c:	90800115 	stw	r2,4(r18)
10019510:	4091883a 	add	r8,r8,r2
10019514:	18c00044 	addi	r3,r3,1
10019518:	da011d15 	stw	r8,1140(sp)
1001951c:	d8c11c15 	stw	r3,1136(sp)
10019520:	008001c4 	movi	r2,7
10019524:	10c0e216 	blt	r2,r3,100198b0 <___vfprintf_internal_r+0x13d4>
10019528:	94800204 	addi	r18,r18,8
1001952c:	d9013517 	ldw	r4,1236(sp)
10019530:	d8811fc4 	addi	r2,sp,1151
10019534:	90800015 	stw	r2,0(r18)
10019538:	91000115 	stw	r4,4(r18)
1001953c:	4111883a 	add	r8,r8,r4
10019540:	18c00044 	addi	r3,r3,1
10019544:	da011d15 	stw	r8,1140(sp)
10019548:	d8c11c15 	stw	r3,1136(sp)
1001954c:	008001c4 	movi	r2,7
10019550:	10ff2316 	blt	r2,r3,100191e0 <__alt_data_end+0xf80191e0>
10019554:	92400204 	addi	r9,r18,8
10019558:	003ecf06 	br	10019098 <__alt_data_end+0xf8019098>
1001955c:	d9412917 	ldw	r5,1188(sp)
10019560:	8809883a 	mov	r4,r17
10019564:	d9811b04 	addi	r6,sp,1132
10019568:	00184a80 	call	100184a8 <__sprint_r>
1001956c:	103d211e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
10019570:	da011d17 	ldw	r8,1140(sp)
10019574:	d8c11c17 	ldw	r3,1136(sp)
10019578:	da400404 	addi	r9,sp,16
1001957c:	003eba06 	br	10019068 <__alt_data_end+0xf8019068>
10019580:	d9412917 	ldw	r5,1188(sp)
10019584:	8809883a 	mov	r4,r17
10019588:	d9811b04 	addi	r6,sp,1132
1001958c:	00184a80 	call	100184a8 <__sprint_r>
10019590:	103d181e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
10019594:	da011d17 	ldw	r8,1140(sp)
10019598:	d8c11c17 	ldw	r3,1136(sp)
1001959c:	da400404 	addi	r9,sp,16
100195a0:	003e8006 	br	10018fa4 <__alt_data_end+0xf8018fa4>
100195a4:	d9412917 	ldw	r5,1188(sp)
100195a8:	8809883a 	mov	r4,r17
100195ac:	d9811b04 	addi	r6,sp,1132
100195b0:	00184a80 	call	100184a8 <__sprint_r>
100195b4:	103d0f1e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
100195b8:	da011d17 	ldw	r8,1140(sp)
100195bc:	d8c11c17 	ldw	r3,1136(sp)
100195c0:	da400404 	addi	r9,sp,16
100195c4:	003e6a06 	br	10018f70 <__alt_data_end+0xf8018f70>
100195c8:	d9413617 	ldw	r5,1240(sp)
100195cc:	d8810dc4 	addi	r2,sp,1079
100195d0:	b8c003cc 	andi	r3,r23,15
100195d4:	b008973a 	slli	r4,r22,28
100195d8:	28c7883a 	add	r3,r5,r3
100195dc:	b82ed13a 	srli	r23,r23,4
100195e0:	18c00003 	ldbu	r3,0(r3)
100195e4:	b02cd13a 	srli	r22,r22,4
100195e8:	25eeb03a 	or	r23,r4,r23
100195ec:	10c00005 	stb	r3,0(r2)
100195f0:	bd86b03a 	or	r3,r23,r22
100195f4:	1027883a 	mov	r19,r2
100195f8:	10bfffc4 	addi	r2,r2,-1
100195fc:	183ff41e 	bne	r3,zero,100195d0 <__alt_data_end+0xf80195d0>
10019600:	003f1a06 	br	1001926c <__alt_data_end+0xf801926c>
10019604:	d8012b15 	stw	zero,1196(sp)
10019608:	dcc10e04 	addi	r19,sp,1080
1001960c:	003d3a06 	br	10018af8 <__alt_data_end+0xf8018af8>
10019610:	b0025426 	beq	r22,zero,10019f64 <___vfprintf_internal_r+0x1a88>
10019614:	b807883a 	mov	r3,r23
10019618:	d8810dc4 	addi	r2,sp,1079
1001961c:	882f883a 	mov	r23,r17
10019620:	04c00244 	movi	r19,9
10019624:	8023883a 	mov	r17,r16
10019628:	da412815 	stw	r9,1184(sp)
1001962c:	1821883a 	mov	r16,r3
10019630:	8009883a 	mov	r4,r16
10019634:	b00b883a 	mov	r5,r22
10019638:	01800284 	movi	r6,10
1001963c:	000f883a 	mov	r7,zero
10019640:	1029883a 	mov	r20,r2
10019644:	001e20c0 	call	1001e20c <__umoddi3>
10019648:	10800c04 	addi	r2,r2,48
1001964c:	8009883a 	mov	r4,r16
10019650:	b00b883a 	mov	r5,r22
10019654:	a0800005 	stb	r2,0(r20)
10019658:	01800284 	movi	r6,10
1001965c:	000f883a 	mov	r7,zero
10019660:	001dbbc0 	call	1001dbbc <__udivdi3>
10019664:	1021883a 	mov	r16,r2
10019668:	182d883a 	mov	r22,r3
1001966c:	a0bfffc4 	addi	r2,r20,-1
10019670:	183fef1e 	bne	r3,zero,10019630 <__alt_data_end+0xf8019630>
10019674:	9c3fee36 	bltu	r19,r16,10019630 <__alt_data_end+0xf8019630>
10019678:	da412817 	ldw	r9,1184(sp)
1001967c:	8005883a 	mov	r2,r16
10019680:	8821883a 	mov	r16,r17
10019684:	b823883a 	mov	r17,r23
10019688:	102f883a 	mov	r23,r2
1001968c:	d8812717 	ldw	r2,1180(sp)
10019690:	a4ffffc4 	addi	r19,r20,-1
10019694:	bdc00c04 	addi	r23,r23,48
10019698:	14c5c83a 	sub	r2,r2,r19
1001969c:	a5ffffc5 	stb	r23,-1(r20)
100196a0:	d8812b15 	stw	r2,1196(sp)
100196a4:	003d1406 	br	10018af8 <__alt_data_end+0xf8018af8>
100196a8:	00c00044 	movi	r3,1
100196ac:	bd84b03a 	or	r2,r23,r22
100196b0:	003d0306 	br	10018ac0 <__alt_data_end+0xf8018ac0>
100196b4:	dc812417 	ldw	r18,1168(sp)
100196b8:	0481140e 	bge	zero,r18,10019b0c <___vfprintf_internal_r+0x1630>
100196bc:	d9013217 	ldw	r4,1224(sp)
100196c0:	4cc00015 	stw	r19,0(r9)
100196c4:	9100ec16 	blt	r18,r4,10019a78 <___vfprintf_internal_r+0x159c>
100196c8:	49000115 	stw	r4,4(r9)
100196cc:	4111883a 	add	r8,r8,r4
100196d0:	18c00044 	addi	r3,r3,1
100196d4:	da011d15 	stw	r8,1140(sp)
100196d8:	d8c11c15 	stw	r3,1136(sp)
100196dc:	008001c4 	movi	r2,7
100196e0:	10c23616 	blt	r2,r3,10019fbc <___vfprintf_internal_r+0x1ae0>
100196e4:	4a400204 	addi	r9,r9,8
100196e8:	d8813217 	ldw	r2,1224(sp)
100196ec:	90a5c83a 	sub	r18,r18,r2
100196f0:	04beae0e 	bge	zero,r18,100191ac <__alt_data_end+0xf80191ac>
100196f4:	04c00404 	movi	r19,16
100196f8:	d8c11c17 	ldw	r3,1136(sp)
100196fc:	050400b4 	movhi	r20,4098
10019700:	a50ee384 	addi	r20,r20,15246
10019704:	9c81dd0e 	bge	r19,r18,10019e7c <___vfprintf_internal_r+0x19a0>
10019708:	058001c4 	movi	r22,7
1001970c:	ddc12917 	ldw	r23,1188(sp)
10019710:	00000306 	br	10019720 <___vfprintf_internal_r+0x1244>
10019714:	4a400204 	addi	r9,r9,8
10019718:	94bffc04 	addi	r18,r18,-16
1001971c:	9c81d70e 	bge	r19,r18,10019e7c <___vfprintf_internal_r+0x19a0>
10019720:	4d000015 	stw	r20,0(r9)
10019724:	4cc00115 	stw	r19,4(r9)
10019728:	42000404 	addi	r8,r8,16
1001972c:	18c00044 	addi	r3,r3,1
10019730:	da011d15 	stw	r8,1140(sp)
10019734:	d8c11c15 	stw	r3,1136(sp)
10019738:	b0fff60e 	bge	r22,r3,10019714 <__alt_data_end+0xf8019714>
1001973c:	8809883a 	mov	r4,r17
10019740:	b80b883a 	mov	r5,r23
10019744:	d9811b04 	addi	r6,sp,1132
10019748:	00184a80 	call	100184a8 <__sprint_r>
1001974c:	103ca91e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
10019750:	da011d17 	ldw	r8,1140(sp)
10019754:	d8c11c17 	ldw	r3,1136(sp)
10019758:	da400404 	addi	r9,sp,16
1001975c:	003fee06 	br	10019718 <__alt_data_end+0xf8019718>
10019760:	d9412917 	ldw	r5,1188(sp)
10019764:	8809883a 	mov	r4,r17
10019768:	d9811b04 	addi	r6,sp,1132
1001976c:	00184a80 	call	100184a8 <__sprint_r>
10019770:	103ca01e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
10019774:	da011d17 	ldw	r8,1140(sp)
10019778:	d8c11c17 	ldw	r3,1136(sp)
1001977c:	da400404 	addi	r9,sp,16
10019780:	003dee06 	br	10018f3c <__alt_data_end+0xf8018f3c>
10019784:	00c00084 	movi	r3,2
10019788:	bd84b03a 	or	r2,r23,r22
1001978c:	d8012585 	stb	zero,1174(sp)
10019790:	003ccb06 	br	10018ac0 <__alt_data_end+0xf8018ac0>
10019794:	8080040c 	andi	r2,r16,16
10019798:	1000ae26 	beq	r2,zero,10019a54 <___vfprintf_internal_r+0x1578>
1001979c:	d9012d17 	ldw	r4,1204(sp)
100197a0:	25c00017 	ldw	r23,0(r4)
100197a4:	21000104 	addi	r4,r4,4
100197a8:	d9012d15 	stw	r4,1204(sp)
100197ac:	b82dd7fa 	srai	r22,r23,31
100197b0:	b005883a 	mov	r2,r22
100197b4:	003cb906 	br	10018a9c <__alt_data_end+0xf8018a9c>
100197b8:	8080040c 	andi	r2,r16,16
100197bc:	10007026 	beq	r2,zero,10019980 <___vfprintf_internal_r+0x14a4>
100197c0:	d8812d17 	ldw	r2,1204(sp)
100197c4:	002d883a 	mov	r22,zero
100197c8:	00c00044 	movi	r3,1
100197cc:	15c00017 	ldw	r23,0(r2)
100197d0:	10800104 	addi	r2,r2,4
100197d4:	d8812d15 	stw	r2,1204(sp)
100197d8:	d8012585 	stb	zero,1174(sp)
100197dc:	b805883a 	mov	r2,r23
100197e0:	003cb706 	br	10018ac0 <__alt_data_end+0xf8018ac0>
100197e4:	d8813217 	ldw	r2,1224(sp)
100197e8:	14ffffc4 	addi	r19,r2,-1
100197ec:	04ff4f0e 	bge	zero,r19,1001952c <__alt_data_end+0xf801952c>
100197f0:	05800404 	movi	r22,16
100197f4:	050400b4 	movhi	r20,4098
100197f8:	a50ee384 	addi	r20,r20,15246
100197fc:	b4c0470e 	bge	r22,r19,1001991c <___vfprintf_internal_r+0x1440>
10019800:	05c001c4 	movi	r23,7
10019804:	df012917 	ldw	fp,1188(sp)
10019808:	00000306 	br	10019818 <___vfprintf_internal_r+0x133c>
1001980c:	94800204 	addi	r18,r18,8
10019810:	9cfffc04 	addi	r19,r19,-16
10019814:	b4c0410e 	bge	r22,r19,1001991c <___vfprintf_internal_r+0x1440>
10019818:	95000015 	stw	r20,0(r18)
1001981c:	95800115 	stw	r22,4(r18)
10019820:	42000404 	addi	r8,r8,16
10019824:	18c00044 	addi	r3,r3,1
10019828:	da011d15 	stw	r8,1140(sp)
1001982c:	d8c11c15 	stw	r3,1136(sp)
10019830:	b8fff60e 	bge	r23,r3,1001980c <__alt_data_end+0xf801980c>
10019834:	8809883a 	mov	r4,r17
10019838:	e00b883a 	mov	r5,fp
1001983c:	d9811b04 	addi	r6,sp,1132
10019840:	00184a80 	call	100184a8 <__sprint_r>
10019844:	103c6b1e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
10019848:	da011d17 	ldw	r8,1140(sp)
1001984c:	d8c11c17 	ldw	r3,1136(sp)
10019850:	dc800404 	addi	r18,sp,16
10019854:	003fee06 	br	10019810 <__alt_data_end+0xf8019810>
10019858:	8080040c 	andi	r2,r16,16
1001985c:	10005326 	beq	r2,zero,100199ac <___vfprintf_internal_r+0x14d0>
10019860:	d8c12d17 	ldw	r3,1204(sp)
10019864:	002d883a 	mov	r22,zero
10019868:	1dc00017 	ldw	r23,0(r3)
1001986c:	18c00104 	addi	r3,r3,4
10019870:	d8c12d15 	stw	r3,1204(sp)
10019874:	b805883a 	mov	r2,r23
10019878:	0007883a 	mov	r3,zero
1001987c:	d8012585 	stb	zero,1174(sp)
10019880:	003c8f06 	br	10018ac0 <__alt_data_end+0xf8018ac0>
10019884:	8088703a 	and	r4,r16,r2
10019888:	203efe1e 	bne	r4,zero,10019484 <__alt_data_end+0xf8019484>
1001988c:	48800115 	stw	r2,4(r9)
10019890:	42000044 	addi	r8,r8,1
10019894:	18c00044 	addi	r3,r3,1
10019898:	da011d15 	stw	r8,1140(sp)
1001989c:	d8c11c15 	stw	r3,1136(sp)
100198a0:	008001c4 	movi	r2,7
100198a4:	10c00216 	blt	r2,r3,100198b0 <___vfprintf_internal_r+0x13d4>
100198a8:	4c800204 	addi	r18,r9,8
100198ac:	003f1f06 	br	1001952c <__alt_data_end+0xf801952c>
100198b0:	d9412917 	ldw	r5,1188(sp)
100198b4:	8809883a 	mov	r4,r17
100198b8:	d9811b04 	addi	r6,sp,1132
100198bc:	00184a80 	call	100184a8 <__sprint_r>
100198c0:	103c4c1e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
100198c4:	dc800404 	addi	r18,sp,16
100198c8:	da011d17 	ldw	r8,1140(sp)
100198cc:	d8c11c17 	ldw	r3,1136(sp)
100198d0:	003f1606 	br	1001952c <__alt_data_end+0xf801952c>
100198d4:	d9412917 	ldw	r5,1188(sp)
100198d8:	8809883a 	mov	r4,r17
100198dc:	d9811b04 	addi	r6,sp,1132
100198e0:	00184a80 	call	100184a8 <__sprint_r>
100198e4:	103c431e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
100198e8:	da011d17 	ldw	r8,1140(sp)
100198ec:	d8c11c17 	ldw	r3,1136(sp)
100198f0:	da400404 	addi	r9,sp,16
100198f4:	003eec06 	br	100194a8 <__alt_data_end+0xf80194a8>
100198f8:	d9412917 	ldw	r5,1188(sp)
100198fc:	8809883a 	mov	r4,r17
10019900:	d9811b04 	addi	r6,sp,1132
10019904:	00184a80 	call	100184a8 <__sprint_r>
10019908:	103c3a1e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
1001990c:	da011d17 	ldw	r8,1140(sp)
10019910:	d8c11c17 	ldw	r3,1136(sp)
10019914:	dc800404 	addi	r18,sp,16
10019918:	003eee06 	br	100194d4 <__alt_data_end+0xf80194d4>
1001991c:	95000015 	stw	r20,0(r18)
10019920:	94c00115 	stw	r19,4(r18)
10019924:	44d1883a 	add	r8,r8,r19
10019928:	003efa06 	br	10019514 <__alt_data_end+0xf8019514>
1001992c:	d9412917 	ldw	r5,1188(sp)
10019930:	8809883a 	mov	r4,r17
10019934:	d9811b04 	addi	r6,sp,1132
10019938:	00184a80 	call	100184a8 <__sprint_r>
1001993c:	103c2d1e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
10019940:	da011d17 	ldw	r8,1140(sp)
10019944:	d8c11c17 	ldw	r3,1136(sp)
10019948:	da400404 	addi	r9,sp,16
1001994c:	003d9806 	br	10018fb0 <__alt_data_end+0xf8018fb0>
10019950:	8080100c 	andi	r2,r16,64
10019954:	10011626 	beq	r2,zero,10019db0 <___vfprintf_internal_r+0x18d4>
10019958:	d8c12d17 	ldw	r3,1204(sp)
1001995c:	002d883a 	mov	r22,zero
10019960:	1dc0000b 	ldhu	r23,0(r3)
10019964:	18c00104 	addi	r3,r3,4
10019968:	d8c12d15 	stw	r3,1204(sp)
1001996c:	003cc106 	br	10018c74 <__alt_data_end+0xf8018c74>
10019970:	4d000015 	stw	r20,0(r9)
10019974:	4c800115 	stw	r18,4(r9)
10019978:	4491883a 	add	r8,r8,r18
1001997c:	003dc006 	br	10019080 <__alt_data_end+0xf8019080>
10019980:	8080100c 	andi	r2,r16,64
10019984:	10010126 	beq	r2,zero,10019d8c <___vfprintf_internal_r+0x18b0>
10019988:	d8c12d17 	ldw	r3,1204(sp)
1001998c:	002d883a 	mov	r22,zero
10019990:	1dc0000b 	ldhu	r23,0(r3)
10019994:	18c00104 	addi	r3,r3,4
10019998:	d8c12d15 	stw	r3,1204(sp)
1001999c:	b805883a 	mov	r2,r23
100199a0:	00c00044 	movi	r3,1
100199a4:	d8012585 	stb	zero,1174(sp)
100199a8:	003c4506 	br	10018ac0 <__alt_data_end+0xf8018ac0>
100199ac:	8080100c 	andi	r2,r16,64
100199b0:	10010526 	beq	r2,zero,10019dc8 <___vfprintf_internal_r+0x18ec>
100199b4:	d9012d17 	ldw	r4,1204(sp)
100199b8:	002d883a 	mov	r22,zero
100199bc:	0007883a 	mov	r3,zero
100199c0:	25c0000b 	ldhu	r23,0(r4)
100199c4:	21000104 	addi	r4,r4,4
100199c8:	d9012d15 	stw	r4,1204(sp)
100199cc:	b805883a 	mov	r2,r23
100199d0:	d8012585 	stb	zero,1174(sp)
100199d4:	003c3a06 	br	10018ac0 <__alt_data_end+0xf8018ac0>
100199d8:	d8812d17 	ldw	r2,1204(sp)
100199dc:	15800017 	ldw	r22,0(r2)
100199e0:	15000117 	ldw	r20,4(r2)
100199e4:	10800204 	addi	r2,r2,8
100199e8:	d8812d15 	stw	r2,1204(sp)
100199ec:	dd813315 	stw	r22,1228(sp)
100199f0:	dd013415 	stw	r20,1232(sp)
100199f4:	003c5906 	br	10018b5c <__alt_data_end+0xf8018b5c>
100199f8:	00c00084 	movi	r3,2
100199fc:	d8012585 	stb	zero,1174(sp)
10019a00:	003c2f06 	br	10018ac0 <__alt_data_end+0xf8018ac0>
10019a04:	ac800007 	ldb	r18,0(r21)
10019a08:	003b1006 	br	1001864c <__alt_data_end+0xf801864c>
10019a0c:	8080040c 	andi	r2,r16,16
10019a10:	1000091e 	bne	r2,zero,10019a38 <___vfprintf_internal_r+0x155c>
10019a14:	8400100c 	andi	r16,r16,64
10019a18:	80000726 	beq	r16,zero,10019a38 <___vfprintf_internal_r+0x155c>
10019a1c:	d8c12d17 	ldw	r3,1204(sp)
10019a20:	d9012c17 	ldw	r4,1200(sp)
10019a24:	18800017 	ldw	r2,0(r3)
10019a28:	18c00104 	addi	r3,r3,4
10019a2c:	d8c12d15 	stw	r3,1204(sp)
10019a30:	1100000d 	sth	r4,0(r2)
10019a34:	003adf06 	br	100185b4 <__alt_data_end+0xf80185b4>
10019a38:	d8c12d17 	ldw	r3,1204(sp)
10019a3c:	d9012c17 	ldw	r4,1200(sp)
10019a40:	18800017 	ldw	r2,0(r3)
10019a44:	18c00104 	addi	r3,r3,4
10019a48:	d8c12d15 	stw	r3,1204(sp)
10019a4c:	11000015 	stw	r4,0(r2)
10019a50:	003ad806 	br	100185b4 <__alt_data_end+0xf80185b4>
10019a54:	8080100c 	andi	r2,r16,64
10019a58:	1000c526 	beq	r2,zero,10019d70 <___vfprintf_internal_r+0x1894>
10019a5c:	d8812d17 	ldw	r2,1204(sp)
10019a60:	15c0000f 	ldh	r23,0(r2)
10019a64:	10800104 	addi	r2,r2,4
10019a68:	d8812d15 	stw	r2,1204(sp)
10019a6c:	b82dd7fa 	srai	r22,r23,31
10019a70:	b005883a 	mov	r2,r22
10019a74:	003c0906 	br	10018a9c <__alt_data_end+0xf8018a9c>
10019a78:	4c800115 	stw	r18,4(r9)
10019a7c:	9211883a 	add	r8,r18,r8
10019a80:	18c00044 	addi	r3,r3,1
10019a84:	da011d15 	stw	r8,1140(sp)
10019a88:	d8c11c15 	stw	r3,1136(sp)
10019a8c:	008001c4 	movi	r2,7
10019a90:	10c14016 	blt	r2,r3,10019f94 <___vfprintf_internal_r+0x1ab8>
10019a94:	4a400204 	addi	r9,r9,8
10019a98:	d8813717 	ldw	r2,1244(sp)
10019a9c:	9ca7883a 	add	r19,r19,r18
10019aa0:	48800015 	stw	r2,0(r9)
10019aa4:	00800044 	movi	r2,1
10019aa8:	48800115 	stw	r2,4(r9)
10019aac:	4091883a 	add	r8,r8,r2
10019ab0:	1887883a 	add	r3,r3,r2
10019ab4:	da011d15 	stw	r8,1140(sp)
10019ab8:	d8c11c15 	stw	r3,1136(sp)
10019abc:	008001c4 	movi	r2,7
10019ac0:	10c12c16 	blt	r2,r3,10019f74 <___vfprintf_internal_r+0x1a98>
10019ac4:	4a400204 	addi	r9,r9,8
10019ac8:	d9013217 	ldw	r4,1224(sp)
10019acc:	da011d17 	ldw	r8,1140(sp)
10019ad0:	d8c11c17 	ldw	r3,1136(sp)
10019ad4:	24a5c83a 	sub	r18,r4,r18
10019ad8:	4cc00015 	stw	r19,0(r9)
10019adc:	003fa506 	br	10019974 <__alt_data_end+0xf8019974>
10019ae0:	04c400b4 	movhi	r19,4098
10019ae4:	9cced004 	addi	r19,r19,15168
10019ae8:	003c2e06 	br	10018ba4 <__alt_data_end+0xf8018ba4>
10019aec:	d9412917 	ldw	r5,1188(sp)
10019af0:	8809883a 	mov	r4,r17
10019af4:	d9811b04 	addi	r6,sp,1132
10019af8:	00184a80 	call	100184a8 <__sprint_r>
10019afc:	103bbd1e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
10019b00:	da011d17 	ldw	r8,1140(sp)
10019b04:	da400404 	addi	r9,sp,16
10019b08:	003df606 	br	100192e4 <__alt_data_end+0xf80192e4>
10019b0c:	008400b4 	movhi	r2,4098
10019b10:	108edf04 	addi	r2,r2,15228
10019b14:	48800015 	stw	r2,0(r9)
10019b18:	00800044 	movi	r2,1
10019b1c:	48800115 	stw	r2,4(r9)
10019b20:	4091883a 	add	r8,r8,r2
10019b24:	1887883a 	add	r3,r3,r2
10019b28:	da011d15 	stw	r8,1140(sp)
10019b2c:	d8c11c15 	stw	r3,1136(sp)
10019b30:	008001c4 	movi	r2,7
10019b34:	10c0bc16 	blt	r2,r3,10019e28 <___vfprintf_internal_r+0x194c>
10019b38:	4a400204 	addi	r9,r9,8
10019b3c:	9000041e 	bne	r18,zero,10019b50 <___vfprintf_internal_r+0x1674>
10019b40:	d8c13217 	ldw	r3,1224(sp)
10019b44:	1800021e 	bne	r3,zero,10019b50 <___vfprintf_internal_r+0x1674>
10019b48:	8080004c 	andi	r2,r16,1
10019b4c:	103d5226 	beq	r2,zero,10019098 <__alt_data_end+0xf8019098>
10019b50:	d8c11c17 	ldw	r3,1136(sp)
10019b54:	d9013717 	ldw	r4,1244(sp)
10019b58:	00800044 	movi	r2,1
10019b5c:	48800115 	stw	r2,4(r9)
10019b60:	49000015 	stw	r4,0(r9)
10019b64:	4091883a 	add	r8,r8,r2
10019b68:	1887883a 	add	r3,r3,r2
10019b6c:	da011d15 	stw	r8,1140(sp)
10019b70:	d8c11c15 	stw	r3,1136(sp)
10019b74:	008001c4 	movi	r2,7
10019b78:	10c14516 	blt	r2,r3,1001a090 <___vfprintf_internal_r+0x1bb4>
10019b7c:	4a400204 	addi	r9,r9,8
10019b80:	04a5c83a 	sub	r18,zero,r18
10019b84:	0480d70e 	bge	zero,r18,10019ee4 <___vfprintf_internal_r+0x1a08>
10019b88:	05800404 	movi	r22,16
10019b8c:	050400b4 	movhi	r20,4098
10019b90:	a50ee384 	addi	r20,r20,15246
10019b94:	b480db0e 	bge	r22,r18,10019f04 <___vfprintf_internal_r+0x1a28>
10019b98:	05c001c4 	movi	r23,7
10019b9c:	df012917 	ldw	fp,1188(sp)
10019ba0:	00000306 	br	10019bb0 <___vfprintf_internal_r+0x16d4>
10019ba4:	4a400204 	addi	r9,r9,8
10019ba8:	94bffc04 	addi	r18,r18,-16
10019bac:	b480d50e 	bge	r22,r18,10019f04 <___vfprintf_internal_r+0x1a28>
10019bb0:	4d000015 	stw	r20,0(r9)
10019bb4:	4d800115 	stw	r22,4(r9)
10019bb8:	42000404 	addi	r8,r8,16
10019bbc:	18c00044 	addi	r3,r3,1
10019bc0:	da011d15 	stw	r8,1140(sp)
10019bc4:	d8c11c15 	stw	r3,1136(sp)
10019bc8:	b8fff60e 	bge	r23,r3,10019ba4 <__alt_data_end+0xf8019ba4>
10019bcc:	8809883a 	mov	r4,r17
10019bd0:	e00b883a 	mov	r5,fp
10019bd4:	d9811b04 	addi	r6,sp,1132
10019bd8:	00184a80 	call	100184a8 <__sprint_r>
10019bdc:	103b851e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
10019be0:	da011d17 	ldw	r8,1140(sp)
10019be4:	d8c11c17 	ldw	r3,1136(sp)
10019be8:	da400404 	addi	r9,sp,16
10019bec:	003fee06 	br	10019ba8 <__alt_data_end+0xf8019ba8>
10019bf0:	da413c15 	stw	r9,1264(sp)
10019bf4:	001d96c0 	call	1001d96c <__isnand>
10019bf8:	da413c17 	ldw	r9,1264(sp)
10019bfc:	10007e1e 	bne	r2,zero,10019df8 <___vfprintf_internal_r+0x191c>
10019c00:	00bfffc4 	movi	r2,-1
10019c04:	e0816a26 	beq	fp,r2,1001a1b0 <___vfprintf_internal_r+0x1cd4>
10019c08:	008019c4 	movi	r2,103
10019c0c:	90816526 	beq	r18,r2,1001a1a4 <___vfprintf_internal_r+0x1cc8>
10019c10:	008011c4 	movi	r2,71
10019c14:	90816326 	beq	r18,r2,1001a1a4 <___vfprintf_internal_r+0x1cc8>
10019c18:	80c04014 	ori	r3,r16,256
10019c1c:	d8c12a15 	stw	r3,1192(sp)
10019c20:	a0016516 	blt	r20,zero,1001a1b8 <___vfprintf_internal_r+0x1cdc>
10019c24:	d8012f05 	stb	zero,1212(sp)
10019c28:	00801984 	movi	r2,102
10019c2c:	9080f226 	beq	r18,r2,10019ff8 <___vfprintf_internal_r+0x1b1c>
10019c30:	00801184 	movi	r2,70
10019c34:	9080f026 	beq	r18,r2,10019ff8 <___vfprintf_internal_r+0x1b1c>
10019c38:	00801944 	movi	r2,101
10019c3c:	90818d26 	beq	r18,r2,1001a274 <___vfprintf_internal_r+0x1d98>
10019c40:	00801144 	movi	r2,69
10019c44:	90818b26 	beq	r18,r2,1001a274 <___vfprintf_internal_r+0x1d98>
10019c48:	e02f883a 	mov	r23,fp
10019c4c:	d8812404 	addi	r2,sp,1168
10019c50:	d8800115 	stw	r2,4(sp)
10019c54:	d8812304 	addi	r2,sp,1164
10019c58:	d8800215 	stw	r2,8(sp)
10019c5c:	d8812204 	addi	r2,sp,1160
10019c60:	ddc00015 	stw	r23,0(sp)
10019c64:	d8800315 	stw	r2,12(sp)
10019c68:	8809883a 	mov	r4,r17
10019c6c:	b00b883a 	mov	r5,r22
10019c70:	a00d883a 	mov	r6,r20
10019c74:	01c00084 	movi	r7,2
10019c78:	da413c15 	stw	r9,1264(sp)
10019c7c:	001a7fc0 	call	1001a7fc <_dtoa_r>
10019c80:	1027883a 	mov	r19,r2
10019c84:	008019c4 	movi	r2,103
10019c88:	da413c17 	ldw	r9,1264(sp)
10019c8c:	9081951e 	bne	r18,r2,1001a2e4 <___vfprintf_internal_r+0x1e08>
10019c90:	8080004c 	andi	r2,r16,1
10019c94:	10017926 	beq	r2,zero,1001a27c <___vfprintf_internal_r+0x1da0>
10019c98:	00801184 	movi	r2,70
10019c9c:	9dc7883a 	add	r3,r19,r23
10019ca0:	9080e626 	beq	r18,r2,1001a03c <___vfprintf_internal_r+0x1b60>
10019ca4:	b009883a 	mov	r4,r22
10019ca8:	a00b883a 	mov	r5,r20
10019cac:	000d883a 	mov	r6,zero
10019cb0:	000f883a 	mov	r7,zero
10019cb4:	d8c13b15 	stw	r3,1260(sp)
10019cb8:	da413c15 	stw	r9,1264(sp)
10019cbc:	001f0d40 	call	1001f0d4 <__eqdf2>
10019cc0:	d8c13b17 	ldw	r3,1260(sp)
10019cc4:	da413c17 	ldw	r9,1264(sp)
10019cc8:	10000726 	beq	r2,zero,10019ce8 <___vfprintf_internal_r+0x180c>
10019ccc:	d8812217 	ldw	r2,1160(sp)
10019cd0:	10c18a2e 	bgeu	r2,r3,1001a2fc <___vfprintf_internal_r+0x1e20>
10019cd4:	01000c04 	movi	r4,48
10019cd8:	11000005 	stb	r4,0(r2)
10019cdc:	10800044 	addi	r2,r2,1
10019ce0:	d8812215 	stw	r2,1160(sp)
10019ce4:	10fffc1e 	bne	r2,r3,10019cd8 <__alt_data_end+0xf8019cd8>
10019ce8:	1cc7c83a 	sub	r3,r3,r19
10019cec:	d8c13215 	stw	r3,1224(sp)
10019cf0:	008019c4 	movi	r2,103
10019cf4:	9080fa26 	beq	r18,r2,1001a0e0 <___vfprintf_internal_r+0x1c04>
10019cf8:	008011c4 	movi	r2,71
10019cfc:	9080f826 	beq	r18,r2,1001a0e0 <___vfprintf_internal_r+0x1c04>
10019d00:	00801984 	movi	r2,102
10019d04:	90818e1e 	bne	r18,r2,1001a340 <___vfprintf_internal_r+0x1e64>
10019d08:	d8812417 	ldw	r2,1168(sp)
10019d0c:	d8812b15 	stw	r2,1196(sp)
10019d10:	00817c0e 	bge	zero,r2,1001a304 <___vfprintf_internal_r+0x1e28>
10019d14:	e000021e 	bne	fp,zero,10019d20 <___vfprintf_internal_r+0x1844>
10019d18:	8400004c 	andi	r16,r16,1
10019d1c:	80000426 	beq	r16,zero,10019d30 <___vfprintf_internal_r+0x1854>
10019d20:	d8812b17 	ldw	r2,1196(sp)
10019d24:	e2000044 	addi	r8,fp,1
10019d28:	1205883a 	add	r2,r2,r8
10019d2c:	d8812b15 	stw	r2,1196(sp)
10019d30:	d8812815 	stw	r2,1184(sp)
10019d34:	10010b16 	blt	r2,zero,1001a164 <___vfprintf_internal_r+0x1c88>
10019d38:	ddc12f07 	ldb	r23,1212(sp)
10019d3c:	b800e426 	beq	r23,zero,1001a0d0 <___vfprintf_internal_r+0x1bf4>
10019d40:	00800b44 	movi	r2,45
10019d44:	d8812585 	stb	r2,1174(sp)
10019d48:	dc012a17 	ldw	r16,1192(sp)
10019d4c:	d8013115 	stw	zero,1220(sp)
10019d50:	003b7306 	br	10018b20 <__alt_data_end+0xf8018b20>
10019d54:	d8812b17 	ldw	r2,1196(sp)
10019d58:	d8812815 	stw	r2,1184(sp)
10019d5c:	10005716 	blt	r2,zero,10019ebc <___vfprintf_internal_r+0x19e0>
10019d60:	d8812583 	ldbu	r2,1174(sp)
10019d64:	ddc12d15 	stw	r23,1204(sp)
10019d68:	d8013115 	stw	zero,1220(sp)
10019d6c:	003b6806 	br	10018b10 <__alt_data_end+0xf8018b10>
10019d70:	d8c12d17 	ldw	r3,1204(sp)
10019d74:	1dc00017 	ldw	r23,0(r3)
10019d78:	18c00104 	addi	r3,r3,4
10019d7c:	d8c12d15 	stw	r3,1204(sp)
10019d80:	b82dd7fa 	srai	r22,r23,31
10019d84:	b005883a 	mov	r2,r22
10019d88:	003b4406 	br	10018a9c <__alt_data_end+0xf8018a9c>
10019d8c:	d9012d17 	ldw	r4,1204(sp)
10019d90:	002d883a 	mov	r22,zero
10019d94:	00c00044 	movi	r3,1
10019d98:	25c00017 	ldw	r23,0(r4)
10019d9c:	21000104 	addi	r4,r4,4
10019da0:	d9012d15 	stw	r4,1204(sp)
10019da4:	b805883a 	mov	r2,r23
10019da8:	d8012585 	stb	zero,1174(sp)
10019dac:	003b4406 	br	10018ac0 <__alt_data_end+0xf8018ac0>
10019db0:	d9012d17 	ldw	r4,1204(sp)
10019db4:	002d883a 	mov	r22,zero
10019db8:	25c00017 	ldw	r23,0(r4)
10019dbc:	21000104 	addi	r4,r4,4
10019dc0:	d9012d15 	stw	r4,1204(sp)
10019dc4:	003bab06 	br	10018c74 <__alt_data_end+0xf8018c74>
10019dc8:	d8812d17 	ldw	r2,1204(sp)
10019dcc:	002d883a 	mov	r22,zero
10019dd0:	0007883a 	mov	r3,zero
10019dd4:	15c00017 	ldw	r23,0(r2)
10019dd8:	10800104 	addi	r2,r2,4
10019ddc:	d8812d15 	stw	r2,1204(sp)
10019de0:	d8012585 	stb	zero,1174(sp)
10019de4:	b805883a 	mov	r2,r23
10019de8:	003b3506 	br	10018ac0 <__alt_data_end+0xf8018ac0>
10019dec:	00ffffc4 	movi	r3,-1
10019df0:	b82b883a 	mov	r21,r23
10019df4:	003a1606 	br	10018650 <__alt_data_end+0xf8018650>
10019df8:	008011c4 	movi	r2,71
10019dfc:	1480b116 	blt	r2,r18,1001a0c4 <___vfprintf_internal_r+0x1be8>
10019e00:	04c400b4 	movhi	r19,4098
10019e04:	9cced104 	addi	r19,r19,15172
10019e08:	00c000c4 	movi	r3,3
10019e0c:	00bfdfc4 	movi	r2,-129
10019e10:	80a0703a 	and	r16,r16,r2
10019e14:	d8c12815 	stw	r3,1184(sp)
10019e18:	d8812583 	ldbu	r2,1174(sp)
10019e1c:	d8c12b15 	stw	r3,1196(sp)
10019e20:	d8013115 	stw	zero,1220(sp)
10019e24:	003b3a06 	br	10018b10 <__alt_data_end+0xf8018b10>
10019e28:	d9412917 	ldw	r5,1188(sp)
10019e2c:	8809883a 	mov	r4,r17
10019e30:	d9811b04 	addi	r6,sp,1132
10019e34:	00184a80 	call	100184a8 <__sprint_r>
10019e38:	103aee1e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
10019e3c:	dc812417 	ldw	r18,1168(sp)
10019e40:	da011d17 	ldw	r8,1140(sp)
10019e44:	da400404 	addi	r9,sp,16
10019e48:	003f3c06 	br	10019b3c <__alt_data_end+0xf8019b3c>
10019e4c:	ad400044 	addi	r21,r21,1
10019e50:	84000814 	ori	r16,r16,32
10019e54:	14800047 	ldb	r18,1(r2)
10019e58:	0039fc06 	br	1001864c <__alt_data_end+0xf801864c>
10019e5c:	d9412917 	ldw	r5,1188(sp)
10019e60:	8809883a 	mov	r4,r17
10019e64:	d9811b04 	addi	r6,sp,1132
10019e68:	00184a80 	call	100184a8 <__sprint_r>
10019e6c:	103ae11e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
10019e70:	da011d17 	ldw	r8,1140(sp)
10019e74:	da400404 	addi	r9,sp,16
10019e78:	003d2b06 	br	10019328 <__alt_data_end+0xf8019328>
10019e7c:	4d000015 	stw	r20,0(r9)
10019e80:	4c800115 	stw	r18,4(r9)
10019e84:	4491883a 	add	r8,r8,r18
10019e88:	18c00044 	addi	r3,r3,1
10019e8c:	da011d15 	stw	r8,1140(sp)
10019e90:	d8c11c15 	stw	r3,1136(sp)
10019e94:	008001c4 	movi	r2,7
10019e98:	10fcbd16 	blt	r2,r3,10019190 <__alt_data_end+0xf8019190>
10019e9c:	4a400204 	addi	r9,r9,8
10019ea0:	003cc206 	br	100191ac <__alt_data_end+0xf80191ac>
10019ea4:	da413c15 	stw	r9,1264(sp)
10019ea8:	001841c0 	call	1001841c <strlen>
10019eac:	d8812b15 	stw	r2,1196(sp)
10019eb0:	d8812815 	stw	r2,1184(sp)
10019eb4:	da413c17 	ldw	r9,1264(sp)
10019eb8:	103fa90e 	bge	r2,zero,10019d60 <__alt_data_end+0xf8019d60>
10019ebc:	d8012815 	stw	zero,1184(sp)
10019ec0:	003fa706 	br	10019d60 <__alt_data_end+0xf8019d60>
10019ec4:	d9412917 	ldw	r5,1188(sp)
10019ec8:	8809883a 	mov	r4,r17
10019ecc:	d9811b04 	addi	r6,sp,1132
10019ed0:	00184a80 	call	100184a8 <__sprint_r>
10019ed4:	103ac71e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
10019ed8:	da011d17 	ldw	r8,1140(sp)
10019edc:	d8c11c17 	ldw	r3,1136(sp)
10019ee0:	da400404 	addi	r9,sp,16
10019ee4:	d8813217 	ldw	r2,1224(sp)
10019ee8:	4cc00015 	stw	r19,0(r9)
10019eec:	48800115 	stw	r2,4(r9)
10019ef0:	4091883a 	add	r8,r8,r2
10019ef4:	003c6206 	br	10019080 <__alt_data_end+0xf8019080>
10019ef8:	00800b44 	movi	r2,45
10019efc:	d8812585 	stb	r2,1174(sp)
10019f00:	003b2406 	br	10018b94 <__alt_data_end+0xf8018b94>
10019f04:	4d000015 	stw	r20,0(r9)
10019f08:	4c800115 	stw	r18,4(r9)
10019f0c:	4491883a 	add	r8,r8,r18
10019f10:	18c00044 	addi	r3,r3,1
10019f14:	da011d15 	stw	r8,1140(sp)
10019f18:	d8c11c15 	stw	r3,1136(sp)
10019f1c:	008001c4 	movi	r2,7
10019f20:	10ffe816 	blt	r2,r3,10019ec4 <__alt_data_end+0xf8019ec4>
10019f24:	4a400204 	addi	r9,r9,8
10019f28:	003fee06 	br	10019ee4 <__alt_data_end+0xf8019ee4>
10019f2c:	d8c12b15 	stw	r3,1196(sp)
10019f30:	00800184 	movi	r2,6
10019f34:	10c0062e 	bgeu	r2,r3,10019f50 <___vfprintf_internal_r+0x1a74>
10019f38:	d8812b15 	stw	r2,1196(sp)
10019f3c:	d8812815 	stw	r2,1184(sp)
10019f40:	ddc12d15 	stw	r23,1204(sp)
10019f44:	04c400b4 	movhi	r19,4098
10019f48:	9ccedd04 	addi	r19,r19,15220
10019f4c:	0039ca06 	br	10018678 <__alt_data_end+0xf8018678>
10019f50:	d8812b17 	ldw	r2,1196(sp)
10019f54:	d8812815 	stw	r2,1184(sp)
10019f58:	103ff90e 	bge	r2,zero,10019f40 <__alt_data_end+0xf8019f40>
10019f5c:	d8012815 	stw	zero,1184(sp)
10019f60:	003ff706 	br	10019f40 <__alt_data_end+0xf8019f40>
10019f64:	00800244 	movi	r2,9
10019f68:	15fdaa36 	bltu	r2,r23,10019614 <__alt_data_end+0xf8019614>
10019f6c:	dd010e04 	addi	r20,sp,1080
10019f70:	003dc606 	br	1001968c <__alt_data_end+0xf801968c>
10019f74:	d9412917 	ldw	r5,1188(sp)
10019f78:	8809883a 	mov	r4,r17
10019f7c:	d9811b04 	addi	r6,sp,1132
10019f80:	00184a80 	call	100184a8 <__sprint_r>
10019f84:	103a9b1e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
10019f88:	dc812417 	ldw	r18,1168(sp)
10019f8c:	da400404 	addi	r9,sp,16
10019f90:	003ecd06 	br	10019ac8 <__alt_data_end+0xf8019ac8>
10019f94:	d9412917 	ldw	r5,1188(sp)
10019f98:	8809883a 	mov	r4,r17
10019f9c:	d9811b04 	addi	r6,sp,1132
10019fa0:	00184a80 	call	100184a8 <__sprint_r>
10019fa4:	103a931e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
10019fa8:	dc812417 	ldw	r18,1168(sp)
10019fac:	da011d17 	ldw	r8,1140(sp)
10019fb0:	d8c11c17 	ldw	r3,1136(sp)
10019fb4:	da400404 	addi	r9,sp,16
10019fb8:	003eb706 	br	10019a98 <__alt_data_end+0xf8019a98>
10019fbc:	d9412917 	ldw	r5,1188(sp)
10019fc0:	8809883a 	mov	r4,r17
10019fc4:	d9811b04 	addi	r6,sp,1132
10019fc8:	00184a80 	call	100184a8 <__sprint_r>
10019fcc:	103a891e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
10019fd0:	dc812417 	ldw	r18,1168(sp)
10019fd4:	da011d17 	ldw	r8,1140(sp)
10019fd8:	da400404 	addi	r9,sp,16
10019fdc:	003dc206 	br	100196e8 <__alt_data_end+0xf80196e8>
10019fe0:	df012815 	stw	fp,1184(sp)
10019fe4:	d8812583 	ldbu	r2,1174(sp)
10019fe8:	df012b15 	stw	fp,1196(sp)
10019fec:	ddc12d15 	stw	r23,1204(sp)
10019ff0:	d8013115 	stw	zero,1220(sp)
10019ff4:	003ac606 	br	10018b10 <__alt_data_end+0xf8018b10>
10019ff8:	d8812404 	addi	r2,sp,1168
10019ffc:	d8800115 	stw	r2,4(sp)
1001a000:	d8812304 	addi	r2,sp,1164
1001a004:	d8800215 	stw	r2,8(sp)
1001a008:	d8812204 	addi	r2,sp,1160
1001a00c:	df000015 	stw	fp,0(sp)
1001a010:	d8800315 	stw	r2,12(sp)
1001a014:	8809883a 	mov	r4,r17
1001a018:	b00b883a 	mov	r5,r22
1001a01c:	a00d883a 	mov	r6,r20
1001a020:	01c000c4 	movi	r7,3
1001a024:	da413c15 	stw	r9,1264(sp)
1001a028:	001a7fc0 	call	1001a7fc <_dtoa_r>
1001a02c:	da413c17 	ldw	r9,1264(sp)
1001a030:	1027883a 	mov	r19,r2
1001a034:	1707883a 	add	r3,r2,fp
1001a038:	e02f883a 	mov	r23,fp
1001a03c:	99000007 	ldb	r4,0(r19)
1001a040:	00800c04 	movi	r2,48
1001a044:	20800326 	beq	r4,r2,1001a054 <___vfprintf_internal_r+0x1b78>
1001a048:	da812417 	ldw	r10,1168(sp)
1001a04c:	1a87883a 	add	r3,r3,r10
1001a050:	003f1406 	br	10019ca4 <__alt_data_end+0xf8019ca4>
1001a054:	b009883a 	mov	r4,r22
1001a058:	a00b883a 	mov	r5,r20
1001a05c:	000d883a 	mov	r6,zero
1001a060:	000f883a 	mov	r7,zero
1001a064:	d8c13b15 	stw	r3,1260(sp)
1001a068:	da413c15 	stw	r9,1264(sp)
1001a06c:	001f1300 	call	1001f130 <__nedf2>
1001a070:	d8c13b17 	ldw	r3,1260(sp)
1001a074:	da413c17 	ldw	r9,1264(sp)
1001a078:	103ff326 	beq	r2,zero,1001a048 <__alt_data_end+0xf801a048>
1001a07c:	00800044 	movi	r2,1
1001a080:	15d5c83a 	sub	r10,r2,r23
1001a084:	da812415 	stw	r10,1168(sp)
1001a088:	1a87883a 	add	r3,r3,r10
1001a08c:	003f0506 	br	10019ca4 <__alt_data_end+0xf8019ca4>
1001a090:	d9412917 	ldw	r5,1188(sp)
1001a094:	8809883a 	mov	r4,r17
1001a098:	d9811b04 	addi	r6,sp,1132
1001a09c:	00184a80 	call	100184a8 <__sprint_r>
1001a0a0:	103a541e 	bne	r2,zero,100189f4 <__alt_data_end+0xf80189f4>
1001a0a4:	dc812417 	ldw	r18,1168(sp)
1001a0a8:	da011d17 	ldw	r8,1140(sp)
1001a0ac:	d8c11c17 	ldw	r3,1136(sp)
1001a0b0:	da400404 	addi	r9,sp,16
1001a0b4:	003eb206 	br	10019b80 <__alt_data_end+0xf8019b80>
1001a0b8:	b82b883a 	mov	r21,r23
1001a0bc:	0007883a 	mov	r3,zero
1001a0c0:	00396306 	br	10018650 <__alt_data_end+0xf8018650>
1001a0c4:	04c400b4 	movhi	r19,4098
1001a0c8:	9cced204 	addi	r19,r19,15176
1001a0cc:	003f4e06 	br	10019e08 <__alt_data_end+0xf8019e08>
1001a0d0:	d8812583 	ldbu	r2,1174(sp)
1001a0d4:	dc012a17 	ldw	r16,1192(sp)
1001a0d8:	d8013115 	stw	zero,1220(sp)
1001a0dc:	003a8c06 	br	10018b10 <__alt_data_end+0xf8018b10>
1001a0e0:	d8812417 	ldw	r2,1168(sp)
1001a0e4:	d8812b15 	stw	r2,1196(sp)
1001a0e8:	1029883a 	mov	r20,r2
1001a0ec:	00bfff44 	movi	r2,-3
1001a0f0:	a0800116 	blt	r20,r2,1001a0f8 <___vfprintf_internal_r+0x1c1c>
1001a0f4:	e5001d0e 	bge	fp,r20,1001a16c <___vfprintf_internal_r+0x1c90>
1001a0f8:	94bfff84 	addi	r18,r18,-2
1001a0fc:	a53fffc4 	addi	r20,r20,-1
1001a100:	dd012415 	stw	r20,1168(sp)
1001a104:	dc811fc5 	stb	r18,1151(sp)
1001a108:	a0007216 	blt	r20,zero,1001a2d4 <___vfprintf_internal_r+0x1df8>
1001a10c:	00800ac4 	movi	r2,43
1001a110:	d8812005 	stb	r2,1152(sp)
1001a114:	00800244 	movi	r2,9
1001a118:	15003516 	blt	r2,r20,1001a1f0 <___vfprintf_internal_r+0x1d14>
1001a11c:	00800c04 	movi	r2,48
1001a120:	a5000c04 	addi	r20,r20,48
1001a124:	d8812045 	stb	r2,1153(sp)
1001a128:	dd012085 	stb	r20,1154(sp)
1001a12c:	d8c120c4 	addi	r3,sp,1155
1001a130:	d8811fc4 	addi	r2,sp,1151
1001a134:	1885c83a 	sub	r2,r3,r2
1001a138:	d8c13217 	ldw	r3,1224(sp)
1001a13c:	d8813515 	stw	r2,1236(sp)
1001a140:	1885883a 	add	r2,r3,r2
1001a144:	d8812b15 	stw	r2,1196(sp)
1001a148:	00800044 	movi	r2,1
1001a14c:	10c0580e 	bge	r2,r3,1001a2b0 <___vfprintf_internal_r+0x1dd4>
1001a150:	d8812b17 	ldw	r2,1196(sp)
1001a154:	10800044 	addi	r2,r2,1
1001a158:	d8812b15 	stw	r2,1196(sp)
1001a15c:	d8812815 	stw	r2,1184(sp)
1001a160:	103ef50e 	bge	r2,zero,10019d38 <__alt_data_end+0xf8019d38>
1001a164:	d8012815 	stw	zero,1184(sp)
1001a168:	003ef306 	br	10019d38 <__alt_data_end+0xf8019d38>
1001a16c:	d8812b17 	ldw	r2,1196(sp)
1001a170:	d8c13217 	ldw	r3,1224(sp)
1001a174:	10c01416 	blt	r2,r3,1001a1c8 <___vfprintf_internal_r+0x1cec>
1001a178:	8400004c 	andi	r16,r16,1
1001a17c:	80000326 	beq	r16,zero,1001a18c <___vfprintf_internal_r+0x1cb0>
1001a180:	d8812b17 	ldw	r2,1196(sp)
1001a184:	10800044 	addi	r2,r2,1
1001a188:	d8812b15 	stw	r2,1196(sp)
1001a18c:	d8812815 	stw	r2,1184(sp)
1001a190:	10001416 	blt	r2,zero,1001a1e4 <___vfprintf_internal_r+0x1d08>
1001a194:	048019c4 	movi	r18,103
1001a198:	003ee706 	br	10019d38 <__alt_data_end+0xf8019d38>
1001a19c:	d8012815 	stw	zero,1184(sp)
1001a1a0:	003b1a06 	br	10018e0c <__alt_data_end+0xf8018e0c>
1001a1a4:	e03e9c1e 	bne	fp,zero,10019c18 <__alt_data_end+0xf8019c18>
1001a1a8:	07000044 	movi	fp,1
1001a1ac:	003e9a06 	br	10019c18 <__alt_data_end+0xf8019c18>
1001a1b0:	07000184 	movi	fp,6
1001a1b4:	003e9806 	br	10019c18 <__alt_data_end+0xf8019c18>
1001a1b8:	00c00b44 	movi	r3,45
1001a1bc:	a520003c 	xorhi	r20,r20,32768
1001a1c0:	d8c12f05 	stb	r3,1212(sp)
1001a1c4:	003e9806 	br	10019c28 <__alt_data_end+0xf8019c28>
1001a1c8:	05003f0e 	bge	zero,r20,1001a2c8 <___vfprintf_internal_r+0x1dec>
1001a1cc:	05000044 	movi	r20,1
1001a1d0:	d8c13217 	ldw	r3,1224(sp)
1001a1d4:	a0e9883a 	add	r20,r20,r3
1001a1d8:	dd012b15 	stw	r20,1196(sp)
1001a1dc:	dd012815 	stw	r20,1184(sp)
1001a1e0:	a03fec0e 	bge	r20,zero,1001a194 <__alt_data_end+0xf801a194>
1001a1e4:	d8012815 	stw	zero,1184(sp)
1001a1e8:	048019c4 	movi	r18,103
1001a1ec:	003ed206 	br	10019d38 <__alt_data_end+0xf8019d38>
1001a1f0:	d8c11f84 	addi	r3,sp,1150
1001a1f4:	102f883a 	mov	r23,r2
1001a1f8:	4839883a 	mov	fp,r9
1001a1fc:	a009883a 	mov	r4,r20
1001a200:	01400284 	movi	r5,10
1001a204:	182d883a 	mov	r22,r3
1001a208:	00146900 	call	10014690 <__modsi3>
1001a20c:	10800c04 	addi	r2,r2,48
1001a210:	a009883a 	mov	r4,r20
1001a214:	b0800005 	stb	r2,0(r22)
1001a218:	01400284 	movi	r5,10
1001a21c:	00146400 	call	10014640 <__divsi3>
1001a220:	1029883a 	mov	r20,r2
1001a224:	b0ffffc4 	addi	r3,r22,-1
1001a228:	b8bff416 	blt	r23,r2,1001a1fc <__alt_data_end+0xf801a1fc>
1001a22c:	11400c04 	addi	r5,r2,48
1001a230:	b17fffc5 	stb	r5,-1(r22)
1001a234:	d8811fc4 	addi	r2,sp,1151
1001a238:	e013883a 	mov	r9,fp
1001a23c:	18803e2e 	bgeu	r3,r2,1001a338 <___vfprintf_internal_r+0x1e5c>
1001a240:	b007883a 	mov	r3,r22
1001a244:	d9012044 	addi	r4,sp,1153
1001a248:	00000206 	br	1001a254 <___vfprintf_internal_r+0x1d78>
1001a24c:	19400003 	ldbu	r5,0(r3)
1001a250:	18c00044 	addi	r3,r3,1
1001a254:	21400005 	stb	r5,0(r4)
1001a258:	21000044 	addi	r4,r4,1
1001a25c:	10fffb1e 	bne	r2,r3,1001a24c <__alt_data_end+0xf801a24c>
1001a260:	d8c12004 	addi	r3,sp,1152
1001a264:	1d87c83a 	sub	r3,r3,r22
1001a268:	d9012044 	addi	r4,sp,1153
1001a26c:	20c7883a 	add	r3,r4,r3
1001a270:	003fb006 	br	1001a134 <__alt_data_end+0xf801a134>
1001a274:	e5c00044 	addi	r23,fp,1
1001a278:	003e7406 	br	10019c4c <__alt_data_end+0xf8019c4c>
1001a27c:	d8c12217 	ldw	r3,1160(sp)
1001a280:	003e9906 	br	10019ce8 <__alt_data_end+0xf8019ce8>
1001a284:	d9012d17 	ldw	r4,1204(sp)
1001a288:	ac800043 	ldbu	r18,1(r21)
1001a28c:	b82b883a 	mov	r21,r23
1001a290:	20c00017 	ldw	r3,0(r4)
1001a294:	20800104 	addi	r2,r4,4
1001a298:	d8812d15 	stw	r2,1204(sp)
1001a29c:	18002116 	blt	r3,zero,1001a324 <___vfprintf_internal_r+0x1e48>
1001a2a0:	94803fcc 	andi	r18,r18,255
1001a2a4:	9480201c 	xori	r18,r18,128
1001a2a8:	94bfe004 	addi	r18,r18,-128
1001a2ac:	0038e706 	br	1001864c <__alt_data_end+0xf801864c>
1001a2b0:	80a0703a 	and	r16,r16,r2
1001a2b4:	803fa61e 	bne	r16,zero,1001a150 <__alt_data_end+0xf801a150>
1001a2b8:	d8812b17 	ldw	r2,1196(sp)
1001a2bc:	d8812815 	stw	r2,1184(sp)
1001a2c0:	103e9d0e 	bge	r2,zero,10019d38 <__alt_data_end+0xf8019d38>
1001a2c4:	003fa706 	br	1001a164 <__alt_data_end+0xf801a164>
1001a2c8:	00800084 	movi	r2,2
1001a2cc:	1529c83a 	sub	r20,r2,r20
1001a2d0:	003fbf06 	br	1001a1d0 <__alt_data_end+0xf801a1d0>
1001a2d4:	00800b44 	movi	r2,45
1001a2d8:	0529c83a 	sub	r20,zero,r20
1001a2dc:	d8812005 	stb	r2,1152(sp)
1001a2e0:	003f8c06 	br	1001a114 <__alt_data_end+0xf801a114>
1001a2e4:	008011c4 	movi	r2,71
1001a2e8:	90be6926 	beq	r18,r2,10019c90 <__alt_data_end+0xf8019c90>
1001a2ec:	003e6a06 	br	10019c98 <__alt_data_end+0xf8019c98>
1001a2f0:	00bfffc4 	movi	r2,-1
1001a2f4:	d8812c15 	stw	r2,1200(sp)
1001a2f8:	0039ad06 	br	100189b0 <__alt_data_end+0xf80189b0>
1001a2fc:	1007883a 	mov	r3,r2
1001a300:	003e7906 	br	10019ce8 <__alt_data_end+0xf8019ce8>
1001a304:	e000021e 	bne	fp,zero,1001a310 <___vfprintf_internal_r+0x1e34>
1001a308:	8400004c 	andi	r16,r16,1
1001a30c:	80000e26 	beq	r16,zero,1001a348 <___vfprintf_internal_r+0x1e6c>
1001a310:	e7000084 	addi	fp,fp,2
1001a314:	df012b15 	stw	fp,1196(sp)
1001a318:	df012815 	stw	fp,1184(sp)
1001a31c:	e03e860e 	bge	fp,zero,10019d38 <__alt_data_end+0xf8019d38>
1001a320:	003f9006 	br	1001a164 <__alt_data_end+0xf801a164>
1001a324:	94803fcc 	andi	r18,r18,255
1001a328:	9480201c 	xori	r18,r18,128
1001a32c:	00ffffc4 	movi	r3,-1
1001a330:	94bfe004 	addi	r18,r18,-128
1001a334:	0038c506 	br	1001864c <__alt_data_end+0xf801864c>
1001a338:	d8c12044 	addi	r3,sp,1153
1001a33c:	003f7d06 	br	1001a134 <__alt_data_end+0xf801a134>
1001a340:	dd012417 	ldw	r20,1168(sp)
1001a344:	003f6d06 	br	1001a0fc <__alt_data_end+0xf801a0fc>
1001a348:	00c00044 	movi	r3,1
1001a34c:	d8c12815 	stw	r3,1184(sp)
1001a350:	d8c12b15 	stw	r3,1196(sp)
1001a354:	003e7806 	br	10019d38 <__alt_data_end+0xf8019d38>

1001a358 <__vfprintf_internal>:
1001a358:	008400b4 	movhi	r2,4098
1001a35c:	1096f004 	addi	r2,r2,23488
1001a360:	2007883a 	mov	r3,r4
1001a364:	11000017 	ldw	r4,0(r2)
1001a368:	2805883a 	mov	r2,r5
1001a36c:	300f883a 	mov	r7,r6
1001a370:	180b883a 	mov	r5,r3
1001a374:	100d883a 	mov	r6,r2
1001a378:	00184dc1 	jmpi	100184dc <___vfprintf_internal_r>

1001a37c <_write_r>:
1001a37c:	defffd04 	addi	sp,sp,-12
1001a380:	dc400115 	stw	r17,4(sp)
1001a384:	dc000015 	stw	r16,0(sp)
1001a388:	2023883a 	mov	r17,r4
1001a38c:	040400b4 	movhi	r16,4098
1001a390:	841ec604 	addi	r16,r16,31512
1001a394:	2809883a 	mov	r4,r5
1001a398:	300b883a 	mov	r5,r6
1001a39c:	380d883a 	mov	r6,r7
1001a3a0:	dfc00215 	stw	ra,8(sp)
1001a3a4:	80000015 	stw	zero,0(r16)
1001a3a8:	00205440 	call	10020544 <write>
1001a3ac:	00ffffc4 	movi	r3,-1
1001a3b0:	10c00526 	beq	r2,r3,1001a3c8 <_write_r+0x4c>
1001a3b4:	dfc00217 	ldw	ra,8(sp)
1001a3b8:	dc400117 	ldw	r17,4(sp)
1001a3bc:	dc000017 	ldw	r16,0(sp)
1001a3c0:	dec00304 	addi	sp,sp,12
1001a3c4:	f800283a 	ret
1001a3c8:	80c00017 	ldw	r3,0(r16)
1001a3cc:	183ff926 	beq	r3,zero,1001a3b4 <__alt_data_end+0xf801a3b4>
1001a3d0:	88c00015 	stw	r3,0(r17)
1001a3d4:	dfc00217 	ldw	ra,8(sp)
1001a3d8:	dc400117 	ldw	r17,4(sp)
1001a3dc:	dc000017 	ldw	r16,0(sp)
1001a3e0:	dec00304 	addi	sp,sp,12
1001a3e4:	f800283a 	ret

1001a3e8 <__swsetup_r>:
1001a3e8:	008400b4 	movhi	r2,4098
1001a3ec:	1096f004 	addi	r2,r2,23488
1001a3f0:	10800017 	ldw	r2,0(r2)
1001a3f4:	defffd04 	addi	sp,sp,-12
1001a3f8:	dc400115 	stw	r17,4(sp)
1001a3fc:	dc000015 	stw	r16,0(sp)
1001a400:	dfc00215 	stw	ra,8(sp)
1001a404:	2023883a 	mov	r17,r4
1001a408:	2821883a 	mov	r16,r5
1001a40c:	10000226 	beq	r2,zero,1001a418 <__swsetup_r+0x30>
1001a410:	10c00e17 	ldw	r3,56(r2)
1001a414:	18003d26 	beq	r3,zero,1001a50c <__swsetup_r+0x124>
1001a418:	8080030b 	ldhu	r2,12(r16)
1001a41c:	10c0020c 	andi	r3,r2,8
1001a420:	18ffffcc 	andi	r3,r3,65535
1001a424:	18e0001c 	xori	r3,r3,32768
1001a428:	18e00004 	addi	r3,r3,-32768
1001a42c:	18001226 	beq	r3,zero,1001a478 <__swsetup_r+0x90>
1001a430:	80c00417 	ldw	r3,16(r16)
1001a434:	18001f26 	beq	r3,zero,1001a4b4 <__swsetup_r+0xcc>
1001a438:	1100004c 	andi	r4,r2,1
1001a43c:	2000261e 	bne	r4,zero,1001a4d8 <__swsetup_r+0xf0>
1001a440:	1080008c 	andi	r2,r2,2
1001a444:	10bfffcc 	andi	r2,r2,65535
1001a448:	10a0001c 	xori	r2,r2,32768
1001a44c:	10a00004 	addi	r2,r2,-32768
1001a450:	1000311e 	bne	r2,zero,1001a518 <__swsetup_r+0x130>
1001a454:	80800517 	ldw	r2,20(r16)
1001a458:	80800215 	stw	r2,8(r16)
1001a45c:	18002326 	beq	r3,zero,1001a4ec <__swsetup_r+0x104>
1001a460:	0005883a 	mov	r2,zero
1001a464:	dfc00217 	ldw	ra,8(sp)
1001a468:	dc400117 	ldw	r17,4(sp)
1001a46c:	dc000017 	ldw	r16,0(sp)
1001a470:	dec00304 	addi	sp,sp,12
1001a474:	f800283a 	ret
1001a478:	10c0040c 	andi	r3,r2,16
1001a47c:	18ffffcc 	andi	r3,r3,65535
1001a480:	18e0001c 	xori	r3,r3,32768
1001a484:	18e00004 	addi	r3,r3,-32768
1001a488:	18001e26 	beq	r3,zero,1001a504 <__swsetup_r+0x11c>
1001a48c:	10c0010c 	andi	r3,r2,4
1001a490:	18ffffcc 	andi	r3,r3,65535
1001a494:	18e0001c 	xori	r3,r3,32768
1001a498:	18e00004 	addi	r3,r3,-32768
1001a49c:	1800211e 	bne	r3,zero,1001a524 <__swsetup_r+0x13c>
1001a4a0:	80c00417 	ldw	r3,16(r16)
1001a4a4:	11400214 	ori	r5,r2,8
1001a4a8:	8140030d 	sth	r5,12(r16)
1001a4ac:	2805883a 	mov	r2,r5
1001a4b0:	183fe11e 	bne	r3,zero,1001a438 <__alt_data_end+0xf801a438>
1001a4b4:	1140a00c 	andi	r5,r2,640
1001a4b8:	01008004 	movi	r4,512
1001a4bc:	293fde26 	beq	r5,r4,1001a438 <__alt_data_end+0xf801a438>
1001a4c0:	8809883a 	mov	r4,r17
1001a4c4:	800b883a 	mov	r5,r16
1001a4c8:	001638c0 	call	1001638c <__smakebuf_r>
1001a4cc:	8080030b 	ldhu	r2,12(r16)
1001a4d0:	80c00417 	ldw	r3,16(r16)
1001a4d4:	003fd806 	br	1001a438 <__alt_data_end+0xf801a438>
1001a4d8:	80800517 	ldw	r2,20(r16)
1001a4dc:	80000215 	stw	zero,8(r16)
1001a4e0:	0085c83a 	sub	r2,zero,r2
1001a4e4:	80800615 	stw	r2,24(r16)
1001a4e8:	183fdd1e 	bne	r3,zero,1001a460 <__alt_data_end+0xf801a460>
1001a4ec:	8080030b 	ldhu	r2,12(r16)
1001a4f0:	1080200c 	andi	r2,r2,128
1001a4f4:	10bfffcc 	andi	r2,r2,65535
1001a4f8:	10a0001c 	xori	r2,r2,32768
1001a4fc:	10a00004 	addi	r2,r2,-32768
1001a500:	103fd826 	beq	r2,zero,1001a464 <__alt_data_end+0xf801a464>
1001a504:	00bfffc4 	movi	r2,-1
1001a508:	003fd606 	br	1001a464 <__alt_data_end+0xf801a464>
1001a50c:	1009883a 	mov	r4,r2
1001a510:	00150fc0 	call	100150fc <__sinit>
1001a514:	003fc006 	br	1001a418 <__alt_data_end+0xf801a418>
1001a518:	0005883a 	mov	r2,zero
1001a51c:	80800215 	stw	r2,8(r16)
1001a520:	003fce06 	br	1001a45c <__alt_data_end+0xf801a45c>
1001a524:	81400c17 	ldw	r5,48(r16)
1001a528:	28000626 	beq	r5,zero,1001a544 <__swsetup_r+0x15c>
1001a52c:	80c01004 	addi	r3,r16,64
1001a530:	28c00326 	beq	r5,r3,1001a540 <__swsetup_r+0x158>
1001a534:	8809883a 	mov	r4,r17
1001a538:	00158480 	call	10015848 <_free_r>
1001a53c:	8080030b 	ldhu	r2,12(r16)
1001a540:	80000c15 	stw	zero,48(r16)
1001a544:	80c00417 	ldw	r3,16(r16)
1001a548:	013ff6c4 	movi	r4,-37
1001a54c:	2084703a 	and	r2,r4,r2
1001a550:	80000115 	stw	zero,4(r16)
1001a554:	80c00015 	stw	r3,0(r16)
1001a558:	003fd206 	br	1001a4a4 <__alt_data_end+0xf801a4a4>

1001a55c <_close_r>:
1001a55c:	defffd04 	addi	sp,sp,-12
1001a560:	dc400115 	stw	r17,4(sp)
1001a564:	dc000015 	stw	r16,0(sp)
1001a568:	2023883a 	mov	r17,r4
1001a56c:	040400b4 	movhi	r16,4098
1001a570:	841ec604 	addi	r16,r16,31512
1001a574:	2809883a 	mov	r4,r5
1001a578:	dfc00215 	stw	ra,8(sp)
1001a57c:	80000015 	stw	zero,0(r16)
1001a580:	001fa340 	call	1001fa34 <close>
1001a584:	00ffffc4 	movi	r3,-1
1001a588:	10c00526 	beq	r2,r3,1001a5a0 <_close_r+0x44>
1001a58c:	dfc00217 	ldw	ra,8(sp)
1001a590:	dc400117 	ldw	r17,4(sp)
1001a594:	dc000017 	ldw	r16,0(sp)
1001a598:	dec00304 	addi	sp,sp,12
1001a59c:	f800283a 	ret
1001a5a0:	80c00017 	ldw	r3,0(r16)
1001a5a4:	183ff926 	beq	r3,zero,1001a58c <__alt_data_end+0xf801a58c>
1001a5a8:	88c00015 	stw	r3,0(r17)
1001a5ac:	dfc00217 	ldw	ra,8(sp)
1001a5b0:	dc400117 	ldw	r17,4(sp)
1001a5b4:	dc000017 	ldw	r16,0(sp)
1001a5b8:	dec00304 	addi	sp,sp,12
1001a5bc:	f800283a 	ret

1001a5c0 <quorem>:
1001a5c0:	defff204 	addi	sp,sp,-56
1001a5c4:	dd000815 	stw	r20,32(sp)
1001a5c8:	20800417 	ldw	r2,16(r4)
1001a5cc:	2d000417 	ldw	r20,16(r5)
1001a5d0:	dcc00715 	stw	r19,28(sp)
1001a5d4:	dfc00d15 	stw	ra,52(sp)
1001a5d8:	df000c15 	stw	fp,48(sp)
1001a5dc:	ddc00b15 	stw	r23,44(sp)
1001a5e0:	dd800a15 	stw	r22,40(sp)
1001a5e4:	dd400915 	stw	r21,36(sp)
1001a5e8:	dc800615 	stw	r18,24(sp)
1001a5ec:	dc400515 	stw	r17,20(sp)
1001a5f0:	dc000415 	stw	r16,16(sp)
1001a5f4:	d9400015 	stw	r5,0(sp)
1001a5f8:	2027883a 	mov	r19,r4
1001a5fc:	15007d16 	blt	r2,r20,1001a7f4 <quorem+0x234>
1001a600:	a0800104 	addi	r2,r20,4
1001a604:	1085883a 	add	r2,r2,r2
1001a608:	1085883a 	add	r2,r2,r2
1001a60c:	28ad883a 	add	r22,r5,r2
1001a610:	2085883a 	add	r2,r4,r2
1001a614:	10800017 	ldw	r2,0(r2)
1001a618:	b1400017 	ldw	r5,0(r22)
1001a61c:	a53fffc4 	addi	r20,r20,-1
1001a620:	1009883a 	mov	r4,r2
1001a624:	29400044 	addi	r5,r5,1
1001a628:	d8800115 	stw	r2,4(sp)
1001a62c:	00146ec0 	call	100146ec <__udivsi3>
1001a630:	1025883a 	mov	r18,r2
1001a634:	d8800017 	ldw	r2,0(sp)
1001a638:	9f000504 	addi	fp,r19,20
1001a63c:	14000504 	addi	r16,r2,20
1001a640:	90003626 	beq	r18,zero,1001a71c <quorem+0x15c>
1001a644:	802b883a 	mov	r21,r16
1001a648:	e023883a 	mov	r17,fp
1001a64c:	0007883a 	mov	r3,zero
1001a650:	002f883a 	mov	r23,zero
1001a654:	a9800017 	ldw	r6,0(r21)
1001a658:	900b883a 	mov	r5,r18
1001a65c:	d8c00315 	stw	r3,12(sp)
1001a660:	313fffcc 	andi	r4,r6,65535
1001a664:	d9800215 	stw	r6,8(sp)
1001a668:	00146fc0 	call	100146fc <__mulsi3>
1001a66c:	d9800217 	ldw	r6,8(sp)
1001a670:	d8c00317 	ldw	r3,12(sp)
1001a674:	900b883a 	mov	r5,r18
1001a678:	3008d43a 	srli	r4,r6,16
1001a67c:	1887883a 	add	r3,r3,r2
1001a680:	d8c00315 	stw	r3,12(sp)
1001a684:	00146fc0 	call	100146fc <__mulsi3>
1001a688:	89400017 	ldw	r5,0(r17)
1001a68c:	d8c00317 	ldw	r3,12(sp)
1001a690:	ad400104 	addi	r21,r21,4
1001a694:	293fffcc 	andi	r4,r5,65535
1001a698:	1810d43a 	srli	r8,r3,16
1001a69c:	25c9883a 	add	r4,r4,r23
1001a6a0:	18ffffcc 	andi	r3,r3,65535
1001a6a4:	20c9c83a 	sub	r4,r4,r3
1001a6a8:	280cd43a 	srli	r6,r5,16
1001a6ac:	4085883a 	add	r2,r8,r2
1001a6b0:	2007d43a 	srai	r3,r4,16
1001a6b4:	117fffcc 	andi	r5,r2,65535
1001a6b8:	314bc83a 	sub	r5,r6,r5
1001a6bc:	28cb883a 	add	r5,r5,r3
1001a6c0:	8940008d 	sth	r5,2(r17)
1001a6c4:	8900000d 	sth	r4,0(r17)
1001a6c8:	1006d43a 	srli	r3,r2,16
1001a6cc:	282fd43a 	srai	r23,r5,16
1001a6d0:	8c400104 	addi	r17,r17,4
1001a6d4:	b57fdf2e 	bgeu	r22,r21,1001a654 <__alt_data_end+0xf801a654>
1001a6d8:	d8c00117 	ldw	r3,4(sp)
1001a6dc:	18000f1e 	bne	r3,zero,1001a71c <quorem+0x15c>
1001a6e0:	a0800144 	addi	r2,r20,5
1001a6e4:	1085883a 	add	r2,r2,r2
1001a6e8:	1085883a 	add	r2,r2,r2
1001a6ec:	9887883a 	add	r3,r19,r2
1001a6f0:	18bfff04 	addi	r2,r3,-4
1001a6f4:	e080082e 	bgeu	fp,r2,1001a718 <quorem+0x158>
1001a6f8:	18ffff17 	ldw	r3,-4(r3)
1001a6fc:	18000326 	beq	r3,zero,1001a70c <quorem+0x14c>
1001a700:	00000506 	br	1001a718 <quorem+0x158>
1001a704:	10c00017 	ldw	r3,0(r2)
1001a708:	1800031e 	bne	r3,zero,1001a718 <quorem+0x158>
1001a70c:	10bfff04 	addi	r2,r2,-4
1001a710:	a53fffc4 	addi	r20,r20,-1
1001a714:	e0bffb36 	bltu	fp,r2,1001a704 <__alt_data_end+0xf801a704>
1001a718:	9d000415 	stw	r20,16(r19)
1001a71c:	d9400017 	ldw	r5,0(sp)
1001a720:	9809883a 	mov	r4,r19
1001a724:	001d0180 	call	1001d018 <__mcmp>
1001a728:	10002516 	blt	r2,zero,1001a7c0 <quorem+0x200>
1001a72c:	94800044 	addi	r18,r18,1
1001a730:	e007883a 	mov	r3,fp
1001a734:	000d883a 	mov	r6,zero
1001a738:	18800017 	ldw	r2,0(r3)
1001a73c:	82000017 	ldw	r8,0(r16)
1001a740:	84000104 	addi	r16,r16,4
1001a744:	11ffffcc 	andi	r7,r2,65535
1001a748:	413fffcc 	andi	r4,r8,65535
1001a74c:	398d883a 	add	r6,r7,r6
1001a750:	310fc83a 	sub	r7,r6,r4
1001a754:	4010d43a 	srli	r8,r8,16
1001a758:	100cd43a 	srli	r6,r2,16
1001a75c:	3809d43a 	srai	r4,r7,16
1001a760:	19c0000d 	sth	r7,0(r3)
1001a764:	320dc83a 	sub	r6,r6,r8
1001a768:	310d883a 	add	r6,r6,r4
1001a76c:	1980008d 	sth	r6,2(r3)
1001a770:	300dd43a 	srai	r6,r6,16
1001a774:	18c00104 	addi	r3,r3,4
1001a778:	b43fef2e 	bgeu	r22,r16,1001a738 <__alt_data_end+0xf801a738>
1001a77c:	a0800144 	addi	r2,r20,5
1001a780:	1085883a 	add	r2,r2,r2
1001a784:	1085883a 	add	r2,r2,r2
1001a788:	9885883a 	add	r2,r19,r2
1001a78c:	10c00017 	ldw	r3,0(r2)
1001a790:	18000b1e 	bne	r3,zero,1001a7c0 <quorem+0x200>
1001a794:	10ffff04 	addi	r3,r2,-4
1001a798:	e0c0082e 	bgeu	fp,r3,1001a7bc <quorem+0x1fc>
1001a79c:	10bfff17 	ldw	r2,-4(r2)
1001a7a0:	10000326 	beq	r2,zero,1001a7b0 <quorem+0x1f0>
1001a7a4:	00000506 	br	1001a7bc <quorem+0x1fc>
1001a7a8:	18800017 	ldw	r2,0(r3)
1001a7ac:	1000031e 	bne	r2,zero,1001a7bc <quorem+0x1fc>
1001a7b0:	18ffff04 	addi	r3,r3,-4
1001a7b4:	a53fffc4 	addi	r20,r20,-1
1001a7b8:	e0fffb36 	bltu	fp,r3,1001a7a8 <__alt_data_end+0xf801a7a8>
1001a7bc:	9d000415 	stw	r20,16(r19)
1001a7c0:	9005883a 	mov	r2,r18
1001a7c4:	dfc00d17 	ldw	ra,52(sp)
1001a7c8:	df000c17 	ldw	fp,48(sp)
1001a7cc:	ddc00b17 	ldw	r23,44(sp)
1001a7d0:	dd800a17 	ldw	r22,40(sp)
1001a7d4:	dd400917 	ldw	r21,36(sp)
1001a7d8:	dd000817 	ldw	r20,32(sp)
1001a7dc:	dcc00717 	ldw	r19,28(sp)
1001a7e0:	dc800617 	ldw	r18,24(sp)
1001a7e4:	dc400517 	ldw	r17,20(sp)
1001a7e8:	dc000417 	ldw	r16,16(sp)
1001a7ec:	dec00e04 	addi	sp,sp,56
1001a7f0:	f800283a 	ret
1001a7f4:	0005883a 	mov	r2,zero
1001a7f8:	003ff206 	br	1001a7c4 <__alt_data_end+0xf801a7c4>

1001a7fc <_dtoa_r>:
1001a7fc:	20801017 	ldw	r2,64(r4)
1001a800:	deffdf04 	addi	sp,sp,-132
1001a804:	dcc01a15 	stw	r19,104(sp)
1001a808:	dc801915 	stw	r18,100(sp)
1001a80c:	dc401815 	stw	r17,96(sp)
1001a810:	dc001715 	stw	r16,92(sp)
1001a814:	dfc02015 	stw	ra,128(sp)
1001a818:	df001f15 	stw	fp,124(sp)
1001a81c:	ddc01e15 	stw	r23,120(sp)
1001a820:	dd801d15 	stw	r22,116(sp)
1001a824:	dd401c15 	stw	r21,112(sp)
1001a828:	dd001b15 	stw	r20,108(sp)
1001a82c:	d9400315 	stw	r5,12(sp)
1001a830:	d9c00415 	stw	r7,16(sp)
1001a834:	2021883a 	mov	r16,r4
1001a838:	3025883a 	mov	r18,r6
1001a83c:	dcc02317 	ldw	r19,140(sp)
1001a840:	3023883a 	mov	r17,r6
1001a844:	10000826 	beq	r2,zero,1001a868 <_dtoa_r+0x6c>
1001a848:	20c01117 	ldw	r3,68(r4)
1001a84c:	01800044 	movi	r6,1
1001a850:	100b883a 	mov	r5,r2
1001a854:	30cc983a 	sll	r6,r6,r3
1001a858:	10c00115 	stw	r3,4(r2)
1001a85c:	11800215 	stw	r6,8(r2)
1001a860:	001c7740 	call	1001c774 <_Bfree>
1001a864:	80001015 	stw	zero,64(r16)
1001a868:	90002f16 	blt	r18,zero,1001a928 <_dtoa_r+0x12c>
1001a86c:	98000015 	stw	zero,0(r19)
1001a870:	90dffc2c 	andhi	r3,r18,32752
1001a874:	009ffc34 	movhi	r2,32752
1001a878:	18801c26 	beq	r3,r2,1001a8ec <_dtoa_r+0xf0>
1001a87c:	d9000317 	ldw	r4,12(sp)
1001a880:	880b883a 	mov	r5,r17
1001a884:	000d883a 	mov	r6,zero
1001a888:	000f883a 	mov	r7,zero
1001a88c:	001f1300 	call	1001f130 <__nedf2>
1001a890:	10002c1e 	bne	r2,zero,1001a944 <_dtoa_r+0x148>
1001a894:	d9002217 	ldw	r4,136(sp)
1001a898:	d9c02417 	ldw	r7,144(sp)
1001a89c:	00800044 	movi	r2,1
1001a8a0:	20800015 	stw	r2,0(r4)
1001a8a4:	38019426 	beq	r7,zero,1001aef8 <_dtoa_r+0x6fc>
1001a8a8:	008400b4 	movhi	r2,4098
1001a8ac:	108edf44 	addi	r2,r2,15229
1001a8b0:	38800015 	stw	r2,0(r7)
1001a8b4:	15ffffc4 	addi	r23,r2,-1
1001a8b8:	b805883a 	mov	r2,r23
1001a8bc:	dfc02017 	ldw	ra,128(sp)
1001a8c0:	df001f17 	ldw	fp,124(sp)
1001a8c4:	ddc01e17 	ldw	r23,120(sp)
1001a8c8:	dd801d17 	ldw	r22,116(sp)
1001a8cc:	dd401c17 	ldw	r21,112(sp)
1001a8d0:	dd001b17 	ldw	r20,108(sp)
1001a8d4:	dcc01a17 	ldw	r19,104(sp)
1001a8d8:	dc801917 	ldw	r18,100(sp)
1001a8dc:	dc401817 	ldw	r17,96(sp)
1001a8e0:	dc001717 	ldw	r16,92(sp)
1001a8e4:	dec02104 	addi	sp,sp,132
1001a8e8:	f800283a 	ret
1001a8ec:	d8c02217 	ldw	r3,136(sp)
1001a8f0:	d9000317 	ldw	r4,12(sp)
1001a8f4:	0089c3c4 	movi	r2,9999
1001a8f8:	18800015 	stw	r2,0(r3)
1001a8fc:	20016c26 	beq	r4,zero,1001aeb0 <_dtoa_r+0x6b4>
1001a900:	05c400b4 	movhi	r23,4098
1001a904:	bdceeb04 	addi	r23,r23,15276
1001a908:	d9c02417 	ldw	r7,144(sp)
1001a90c:	383fea26 	beq	r7,zero,1001a8b8 <__alt_data_end+0xf801a8b8>
1001a910:	b88000c7 	ldb	r2,3(r23)
1001a914:	10016d1e 	bne	r2,zero,1001aecc <_dtoa_r+0x6d0>
1001a918:	b88000c4 	addi	r2,r23,3
1001a91c:	d8c02417 	ldw	r3,144(sp)
1001a920:	18800015 	stw	r2,0(r3)
1001a924:	003fe406 	br	1001a8b8 <__alt_data_end+0xf801a8b8>
1001a928:	04600034 	movhi	r17,32768
1001a92c:	8c7fffc4 	addi	r17,r17,-1
1001a930:	9462703a 	and	r17,r18,r17
1001a934:	00800044 	movi	r2,1
1001a938:	98800015 	stw	r2,0(r19)
1001a93c:	8825883a 	mov	r18,r17
1001a940:	003fcb06 	br	1001a870 <__alt_data_end+0xf801a870>
1001a944:	d9400317 	ldw	r5,12(sp)
1001a948:	9028d53a 	srli	r20,r18,20
1001a94c:	d8800204 	addi	r2,sp,8
1001a950:	d8800015 	stw	r2,0(sp)
1001a954:	8009883a 	mov	r4,r16
1001a958:	880d883a 	mov	r6,r17
1001a95c:	d9c00104 	addi	r7,sp,4
1001a960:	001d3c00 	call	1001d3c0 <__d2b>
1001a964:	a501ffcc 	andi	r20,r20,2047
1001a968:	1039883a 	mov	fp,r2
1001a96c:	a001591e 	bne	r20,zero,1001aed4 <_dtoa_r+0x6d8>
1001a970:	dd400217 	ldw	r21,8(sp)
1001a974:	dd000117 	ldw	r20,4(sp)
1001a978:	00befbc4 	movi	r2,-1041
1001a97c:	ad29883a 	add	r20,r21,r20
1001a980:	a082d216 	blt	r20,r2,1001b4cc <_dtoa_r+0xcd0>
1001a984:	d8c00317 	ldw	r3,12(sp)
1001a988:	013f0384 	movi	r4,-1010
1001a98c:	2509c83a 	sub	r4,r4,r20
1001a990:	a0810484 	addi	r2,r20,1042
1001a994:	9124983a 	sll	r18,r18,r4
1001a998:	1884d83a 	srl	r2,r3,r2
1001a99c:	9088b03a 	or	r4,r18,r2
1001a9a0:	001f4480 	call	1001f448 <__floatunsidf>
1001a9a4:	1009883a 	mov	r4,r2
1001a9a8:	017f8434 	movhi	r5,65040
1001a9ac:	00800044 	movi	r2,1
1001a9b0:	194b883a 	add	r5,r3,r5
1001a9b4:	a53fffc4 	addi	r20,r20,-1
1001a9b8:	d8800f15 	stw	r2,60(sp)
1001a9bc:	000d883a 	mov	r6,zero
1001a9c0:	01cffe34 	movhi	r7,16376
1001a9c4:	001ebdc0 	call	1001ebdc <__subdf3>
1001a9c8:	1009883a 	mov	r4,r2
1001a9cc:	180b883a 	mov	r5,r3
1001a9d0:	0198dbf4 	movhi	r6,25455
1001a9d4:	3190d844 	addi	r6,r6,17249
1001a9d8:	01cff4f4 	movhi	r7,16339
1001a9dc:	39e1e9c4 	addi	r7,r7,-30809
1001a9e0:	001ec3c0 	call	1001ec3c <__muldf3>
1001a9e4:	180b883a 	mov	r5,r3
1001a9e8:	01a2d874 	movhi	r6,35681
1001a9ec:	31b22cc4 	addi	r6,r6,-14157
1001a9f0:	01cff1f4 	movhi	r7,16327
1001a9f4:	39e28a04 	addi	r7,r7,-30168
1001a9f8:	1009883a 	mov	r4,r2
1001a9fc:	001eb880 	call	1001eb88 <__adddf3>
1001aa00:	a009883a 	mov	r4,r20
1001aa04:	1027883a 	mov	r19,r2
1001aa08:	1825883a 	mov	r18,r3
1001aa0c:	001f2b00 	call	1001f2b0 <__floatsidf>
1001aa10:	1009883a 	mov	r4,r2
1001aa14:	180b883a 	mov	r5,r3
1001aa18:	019427f4 	movhi	r6,20639
1001aa1c:	319e7ec4 	addi	r6,r6,31227
1001aa20:	01cff4f4 	movhi	r7,16339
1001aa24:	39d104c4 	addi	r7,r7,17427
1001aa28:	001ec3c0 	call	1001ec3c <__muldf3>
1001aa2c:	9809883a 	mov	r4,r19
1001aa30:	900b883a 	mov	r5,r18
1001aa34:	100d883a 	mov	r6,r2
1001aa38:	180f883a 	mov	r7,r3
1001aa3c:	001eb880 	call	1001eb88 <__adddf3>
1001aa40:	1009883a 	mov	r4,r2
1001aa44:	180b883a 	mov	r5,r3
1001aa48:	1027883a 	mov	r19,r2
1001aa4c:	1825883a 	mov	r18,r3
1001aa50:	001f3840 	call	1001f384 <__fixdfsi>
1001aa54:	9809883a 	mov	r4,r19
1001aa58:	900b883a 	mov	r5,r18
1001aa5c:	000d883a 	mov	r6,zero
1001aa60:	000f883a 	mov	r7,zero
1001aa64:	d8800615 	stw	r2,24(sp)
1001aa68:	001f2540 	call	1001f254 <__ltdf2>
1001aa6c:	10027e16 	blt	r2,zero,1001b468 <_dtoa_r+0xc6c>
1001aa70:	d8c00617 	ldw	r3,24(sp)
1001aa74:	00800584 	movi	r2,22
1001aa78:	10c26c36 	bltu	r2,r3,1001b42c <_dtoa_r+0xc30>
1001aa7c:	180490fa 	slli	r2,r3,3
1001aa80:	00c400b4 	movhi	r3,4098
1001aa84:	18cf1004 	addi	r3,r3,15424
1001aa88:	d9800317 	ldw	r6,12(sp)
1001aa8c:	1885883a 	add	r2,r3,r2
1001aa90:	11000017 	ldw	r4,0(r2)
1001aa94:	11400117 	ldw	r5,4(r2)
1001aa98:	880f883a 	mov	r7,r17
1001aa9c:	001f18c0 	call	1001f18c <__gtdf2>
1001aaa0:	00828f0e 	bge	zero,r2,1001b4e0 <_dtoa_r+0xce4>
1001aaa4:	d8800617 	ldw	r2,24(sp)
1001aaa8:	d8000d15 	stw	zero,52(sp)
1001aaac:	10bfffc4 	addi	r2,r2,-1
1001aab0:	d8800615 	stw	r2,24(sp)
1001aab4:	ad29c83a 	sub	r20,r21,r20
1001aab8:	a53fffc4 	addi	r20,r20,-1
1001aabc:	a0026616 	blt	r20,zero,1001b458 <_dtoa_r+0xc5c>
1001aac0:	dd000715 	stw	r20,28(sp)
1001aac4:	d8000815 	stw	zero,32(sp)
1001aac8:	d8800617 	ldw	r2,24(sp)
1001aacc:	10025a16 	blt	r2,zero,1001b438 <_dtoa_r+0xc3c>
1001aad0:	d8c00717 	ldw	r3,28(sp)
1001aad4:	d8800b15 	stw	r2,44(sp)
1001aad8:	d8000a15 	stw	zero,40(sp)
1001aadc:	1887883a 	add	r3,r3,r2
1001aae0:	d8c00715 	stw	r3,28(sp)
1001aae4:	d9c00417 	ldw	r7,16(sp)
1001aae8:	00800244 	movi	r2,9
1001aaec:	11c10536 	bltu	r2,r7,1001af04 <_dtoa_r+0x708>
1001aaf0:	00800144 	movi	r2,5
1001aaf4:	11c4c60e 	bge	r2,r7,1001be10 <_dtoa_r+0x1614>
1001aaf8:	39ffff04 	addi	r7,r7,-4
1001aafc:	d9c00415 	stw	r7,16(sp)
1001ab00:	0027883a 	mov	r19,zero
1001ab04:	d9c00417 	ldw	r7,16(sp)
1001ab08:	008000c4 	movi	r2,3
1001ab0c:	3883a226 	beq	r7,r2,1001b998 <_dtoa_r+0x119c>
1001ab10:	11c2bc16 	blt	r2,r7,1001b604 <_dtoa_r+0xe08>
1001ab14:	00800084 	movi	r2,2
1001ab18:	3880fb1e 	bne	r7,r2,1001af08 <_dtoa_r+0x70c>
1001ab1c:	d8000c15 	stw	zero,48(sp)
1001ab20:	d9002117 	ldw	r4,132(sp)
1001ab24:	0103ae0e 	bge	zero,r4,1001b9e0 <_dtoa_r+0x11e4>
1001ab28:	2025883a 	mov	r18,r4
1001ab2c:	d9000e15 	stw	r4,56(sp)
1001ab30:	d9000915 	stw	r4,36(sp)
1001ab34:	80001115 	stw	zero,68(r16)
1001ab38:	008005c4 	movi	r2,23
1001ab3c:	1484b22e 	bgeu	r2,r18,1001be08 <_dtoa_r+0x160c>
1001ab40:	00c00044 	movi	r3,1
1001ab44:	00800104 	movi	r2,4
1001ab48:	1085883a 	add	r2,r2,r2
1001ab4c:	11000504 	addi	r4,r2,20
1001ab50:	180b883a 	mov	r5,r3
1001ab54:	18c00044 	addi	r3,r3,1
1001ab58:	913ffb2e 	bgeu	r18,r4,1001ab48 <__alt_data_end+0xf801ab48>
1001ab5c:	81401115 	stw	r5,68(r16)
1001ab60:	8009883a 	mov	r4,r16
1001ab64:	001c6cc0 	call	1001c6cc <_Balloc>
1001ab68:	102f883a 	mov	r23,r2
1001ab6c:	80801015 	stw	r2,64(r16)
1001ab70:	00800384 	movi	r2,14
1001ab74:	1480f036 	bltu	r2,r18,1001af38 <_dtoa_r+0x73c>
1001ab78:	9800ef26 	beq	r19,zero,1001af38 <_dtoa_r+0x73c>
1001ab7c:	d8800617 	ldw	r2,24(sp)
1001ab80:	00839c0e 	bge	zero,r2,1001b9f4 <_dtoa_r+0x11f8>
1001ab84:	d8c00617 	ldw	r3,24(sp)
1001ab88:	108003cc 	andi	r2,r2,15
1001ab8c:	100490fa 	slli	r2,r2,3
1001ab90:	182bd13a 	srai	r21,r3,4
1001ab94:	00c400b4 	movhi	r3,4098
1001ab98:	18cf1004 	addi	r3,r3,15424
1001ab9c:	1885883a 	add	r2,r3,r2
1001aba0:	a8c0040c 	andi	r3,r21,16
1001aba4:	12800017 	ldw	r10,0(r2)
1001aba8:	15800117 	ldw	r22,4(r2)
1001abac:	18038726 	beq	r3,zero,1001b9cc <_dtoa_r+0x11d0>
1001abb0:	008400b4 	movhi	r2,4098
1001abb4:	108f0604 	addi	r2,r2,15384
1001abb8:	11800817 	ldw	r6,32(r2)
1001abbc:	11c00917 	ldw	r7,36(r2)
1001abc0:	d9000317 	ldw	r4,12(sp)
1001abc4:	880b883a 	mov	r5,r17
1001abc8:	da801515 	stw	r10,84(sp)
1001abcc:	001ef200 	call	1001ef20 <__divdf3>
1001abd0:	da801517 	ldw	r10,84(sp)
1001abd4:	d8801015 	stw	r2,64(sp)
1001abd8:	1829883a 	mov	r20,r3
1001abdc:	ad4003cc 	andi	r21,r21,15
1001abe0:	048000c4 	movi	r18,3
1001abe4:	a8001126 	beq	r21,zero,1001ac2c <_dtoa_r+0x430>
1001abe8:	04c400b4 	movhi	r19,4098
1001abec:	9ccf0604 	addi	r19,r19,15384
1001abf0:	5005883a 	mov	r2,r10
1001abf4:	b007883a 	mov	r3,r22
1001abf8:	a980004c 	andi	r6,r21,1
1001abfc:	1009883a 	mov	r4,r2
1001ac00:	a82bd07a 	srai	r21,r21,1
1001ac04:	180b883a 	mov	r5,r3
1001ac08:	30000426 	beq	r6,zero,1001ac1c <_dtoa_r+0x420>
1001ac0c:	99800017 	ldw	r6,0(r19)
1001ac10:	99c00117 	ldw	r7,4(r19)
1001ac14:	94800044 	addi	r18,r18,1
1001ac18:	001ec3c0 	call	1001ec3c <__muldf3>
1001ac1c:	9cc00204 	addi	r19,r19,8
1001ac20:	a83ff51e 	bne	r21,zero,1001abf8 <__alt_data_end+0xf801abf8>
1001ac24:	1015883a 	mov	r10,r2
1001ac28:	182d883a 	mov	r22,r3
1001ac2c:	d9001017 	ldw	r4,64(sp)
1001ac30:	a00b883a 	mov	r5,r20
1001ac34:	500d883a 	mov	r6,r10
1001ac38:	b00f883a 	mov	r7,r22
1001ac3c:	001ef200 	call	1001ef20 <__divdf3>
1001ac40:	1027883a 	mov	r19,r2
1001ac44:	1829883a 	mov	r20,r3
1001ac48:	d8c00d17 	ldw	r3,52(sp)
1001ac4c:	18000626 	beq	r3,zero,1001ac68 <_dtoa_r+0x46c>
1001ac50:	9809883a 	mov	r4,r19
1001ac54:	a00b883a 	mov	r5,r20
1001ac58:	000d883a 	mov	r6,zero
1001ac5c:	01cffc34 	movhi	r7,16368
1001ac60:	001f2540 	call	1001f254 <__ltdf2>
1001ac64:	10040e16 	blt	r2,zero,1001bca0 <_dtoa_r+0x14a4>
1001ac68:	9009883a 	mov	r4,r18
1001ac6c:	001f2b00 	call	1001f2b0 <__floatsidf>
1001ac70:	1009883a 	mov	r4,r2
1001ac74:	180b883a 	mov	r5,r3
1001ac78:	980d883a 	mov	r6,r19
1001ac7c:	a00f883a 	mov	r7,r20
1001ac80:	001ec3c0 	call	1001ec3c <__muldf3>
1001ac84:	1009883a 	mov	r4,r2
1001ac88:	180b883a 	mov	r5,r3
1001ac8c:	000d883a 	mov	r6,zero
1001ac90:	01d00734 	movhi	r7,16412
1001ac94:	001eb880 	call	1001eb88 <__adddf3>
1001ac98:	057f3034 	movhi	r21,64704
1001ac9c:	1d6b883a 	add	r21,r3,r21
1001aca0:	d8c00917 	ldw	r3,36(sp)
1001aca4:	1025883a 	mov	r18,r2
1001aca8:	18031f26 	beq	r3,zero,1001b928 <_dtoa_r+0x112c>
1001acac:	d8800617 	ldw	r2,24(sp)
1001acb0:	dac00917 	ldw	r11,36(sp)
1001acb4:	d8801315 	stw	r2,76(sp)
1001acb8:	d8c00c17 	ldw	r3,48(sp)
1001acbc:	18039026 	beq	r3,zero,1001bb00 <_dtoa_r+0x1304>
1001acc0:	58bfffc4 	addi	r2,r11,-1
1001acc4:	100490fa 	slli	r2,r2,3
1001acc8:	00c400b4 	movhi	r3,4098
1001accc:	18cf1004 	addi	r3,r3,15424
1001acd0:	0009883a 	mov	r4,zero
1001acd4:	1885883a 	add	r2,r3,r2
1001acd8:	11800017 	ldw	r6,0(r2)
1001acdc:	11c00117 	ldw	r7,4(r2)
1001ace0:	014ff834 	movhi	r5,16352
1001ace4:	dac01615 	stw	r11,88(sp)
1001ace8:	001ef200 	call	1001ef20 <__divdf3>
1001acec:	900d883a 	mov	r6,r18
1001acf0:	a80f883a 	mov	r7,r21
1001acf4:	1009883a 	mov	r4,r2
1001acf8:	180b883a 	mov	r5,r3
1001acfc:	001ebdc0 	call	1001ebdc <__subdf3>
1001ad00:	a00b883a 	mov	r5,r20
1001ad04:	9809883a 	mov	r4,r19
1001ad08:	182b883a 	mov	r21,r3
1001ad0c:	d8801015 	stw	r2,64(sp)
1001ad10:	001f3840 	call	1001f384 <__fixdfsi>
1001ad14:	1009883a 	mov	r4,r2
1001ad18:	d8801515 	stw	r2,84(sp)
1001ad1c:	001f2b00 	call	1001f2b0 <__floatsidf>
1001ad20:	9809883a 	mov	r4,r19
1001ad24:	a00b883a 	mov	r5,r20
1001ad28:	100d883a 	mov	r6,r2
1001ad2c:	180f883a 	mov	r7,r3
1001ad30:	001ebdc0 	call	1001ebdc <__subdf3>
1001ad34:	da401517 	ldw	r9,84(sp)
1001ad38:	d9001017 	ldw	r4,64(sp)
1001ad3c:	a80b883a 	mov	r5,r21
1001ad40:	4d000c04 	addi	r20,r9,48
1001ad44:	bd000005 	stb	r20,0(r23)
1001ad48:	100d883a 	mov	r6,r2
1001ad4c:	180f883a 	mov	r7,r3
1001ad50:	bd800044 	addi	r22,r23,1
1001ad54:	1025883a 	mov	r18,r2
1001ad58:	1827883a 	mov	r19,r3
1001ad5c:	001f18c0 	call	1001f18c <__gtdf2>
1001ad60:	00842216 	blt	zero,r2,1001bdec <_dtoa_r+0x15f0>
1001ad64:	0009883a 	mov	r4,zero
1001ad68:	014ffc34 	movhi	r5,16368
1001ad6c:	900d883a 	mov	r6,r18
1001ad70:	980f883a 	mov	r7,r19
1001ad74:	001ebdc0 	call	1001ebdc <__subdf3>
1001ad78:	d9001017 	ldw	r4,64(sp)
1001ad7c:	a80b883a 	mov	r5,r21
1001ad80:	100d883a 	mov	r6,r2
1001ad84:	180f883a 	mov	r7,r3
1001ad88:	001f18c0 	call	1001f18c <__gtdf2>
1001ad8c:	dac01617 	ldw	r11,88(sp)
1001ad90:	00841316 	blt	zero,r2,1001bde0 <_dtoa_r+0x15e4>
1001ad94:	00800044 	movi	r2,1
1001ad98:	12c0670e 	bge	r2,r11,1001af38 <_dtoa_r+0x73c>
1001ad9c:	bad7883a 	add	r11,r23,r11
1001ada0:	df001115 	stw	fp,68(sp)
1001ada4:	dc401215 	stw	r17,72(sp)
1001ada8:	5839883a 	mov	fp,r11
1001adac:	dc401017 	ldw	r17,64(sp)
1001adb0:	00000806 	br	1001add4 <_dtoa_r+0x5d8>
1001adb4:	001ebdc0 	call	1001ebdc <__subdf3>
1001adb8:	1009883a 	mov	r4,r2
1001adbc:	180b883a 	mov	r5,r3
1001adc0:	880d883a 	mov	r6,r17
1001adc4:	a80f883a 	mov	r7,r21
1001adc8:	001f2540 	call	1001f254 <__ltdf2>
1001adcc:	1003ee16 	blt	r2,zero,1001bd88 <_dtoa_r+0x158c>
1001add0:	b703f126 	beq	r22,fp,1001bd98 <_dtoa_r+0x159c>
1001add4:	8809883a 	mov	r4,r17
1001add8:	a80b883a 	mov	r5,r21
1001addc:	000d883a 	mov	r6,zero
1001ade0:	01d00934 	movhi	r7,16420
1001ade4:	001ec3c0 	call	1001ec3c <__muldf3>
1001ade8:	000d883a 	mov	r6,zero
1001adec:	01d00934 	movhi	r7,16420
1001adf0:	9009883a 	mov	r4,r18
1001adf4:	980b883a 	mov	r5,r19
1001adf8:	1023883a 	mov	r17,r2
1001adfc:	182b883a 	mov	r21,r3
1001ae00:	001ec3c0 	call	1001ec3c <__muldf3>
1001ae04:	180b883a 	mov	r5,r3
1001ae08:	1009883a 	mov	r4,r2
1001ae0c:	1825883a 	mov	r18,r3
1001ae10:	1027883a 	mov	r19,r2
1001ae14:	001f3840 	call	1001f384 <__fixdfsi>
1001ae18:	1009883a 	mov	r4,r2
1001ae1c:	1029883a 	mov	r20,r2
1001ae20:	001f2b00 	call	1001f2b0 <__floatsidf>
1001ae24:	9809883a 	mov	r4,r19
1001ae28:	900b883a 	mov	r5,r18
1001ae2c:	100d883a 	mov	r6,r2
1001ae30:	180f883a 	mov	r7,r3
1001ae34:	001ebdc0 	call	1001ebdc <__subdf3>
1001ae38:	a5000c04 	addi	r20,r20,48
1001ae3c:	b5000005 	stb	r20,0(r22)
1001ae40:	1009883a 	mov	r4,r2
1001ae44:	180b883a 	mov	r5,r3
1001ae48:	880d883a 	mov	r6,r17
1001ae4c:	a80f883a 	mov	r7,r21
1001ae50:	1025883a 	mov	r18,r2
1001ae54:	1827883a 	mov	r19,r3
1001ae58:	001f2540 	call	1001f254 <__ltdf2>
1001ae5c:	b5800044 	addi	r22,r22,1
1001ae60:	0009883a 	mov	r4,zero
1001ae64:	014ffc34 	movhi	r5,16368
1001ae68:	900d883a 	mov	r6,r18
1001ae6c:	980f883a 	mov	r7,r19
1001ae70:	103fd00e 	bge	r2,zero,1001adb4 <__alt_data_end+0xf801adb4>
1001ae74:	d9001317 	ldw	r4,76(sp)
1001ae78:	df001117 	ldw	fp,68(sp)
1001ae7c:	d9000615 	stw	r4,24(sp)
1001ae80:	8009883a 	mov	r4,r16
1001ae84:	e00b883a 	mov	r5,fp
1001ae88:	001c7740 	call	1001c774 <_Bfree>
1001ae8c:	d9c00617 	ldw	r7,24(sp)
1001ae90:	d8c02217 	ldw	r3,136(sp)
1001ae94:	d9002417 	ldw	r4,144(sp)
1001ae98:	b0000005 	stb	zero,0(r22)
1001ae9c:	38800044 	addi	r2,r7,1
1001aea0:	18800015 	stw	r2,0(r3)
1001aea4:	203e8426 	beq	r4,zero,1001a8b8 <__alt_data_end+0xf801a8b8>
1001aea8:	25800015 	stw	r22,0(r4)
1001aeac:	003e8206 	br	1001a8b8 <__alt_data_end+0xf801a8b8>
1001aeb0:	00800434 	movhi	r2,16
1001aeb4:	10bfffc4 	addi	r2,r2,-1
1001aeb8:	90a4703a 	and	r18,r18,r2
1001aebc:	903e901e 	bne	r18,zero,1001a900 <__alt_data_end+0xf801a900>
1001aec0:	05c400b4 	movhi	r23,4098
1001aec4:	bdcee804 	addi	r23,r23,15264
1001aec8:	003e8f06 	br	1001a908 <__alt_data_end+0xf801a908>
1001aecc:	b8800204 	addi	r2,r23,8
1001aed0:	003e9206 	br	1001a91c <__alt_data_end+0xf801a91c>
1001aed4:	01400434 	movhi	r5,16
1001aed8:	297fffc4 	addi	r5,r5,-1
1001aedc:	894a703a 	and	r5,r17,r5
1001aee0:	d9000317 	ldw	r4,12(sp)
1001aee4:	294ffc34 	orhi	r5,r5,16368
1001aee8:	a53f0044 	addi	r20,r20,-1023
1001aeec:	dd400217 	ldw	r21,8(sp)
1001aef0:	d8000f15 	stw	zero,60(sp)
1001aef4:	003eb106 	br	1001a9bc <__alt_data_end+0xf801a9bc>
1001aef8:	05c400b4 	movhi	r23,4098
1001aefc:	bdcedf04 	addi	r23,r23,15228
1001af00:	003e6d06 	br	1001a8b8 <__alt_data_end+0xf801a8b8>
1001af04:	d8000415 	stw	zero,16(sp)
1001af08:	80001115 	stw	zero,68(r16)
1001af0c:	8009883a 	mov	r4,r16
1001af10:	000b883a 	mov	r5,zero
1001af14:	001c6cc0 	call	1001c6cc <_Balloc>
1001af18:	01ffffc4 	movi	r7,-1
1001af1c:	102f883a 	mov	r23,r2
1001af20:	80801015 	stw	r2,64(r16)
1001af24:	00800044 	movi	r2,1
1001af28:	d9c00915 	stw	r7,36(sp)
1001af2c:	d8002115 	stw	zero,132(sp)
1001af30:	d9c00e15 	stw	r7,56(sp)
1001af34:	d8800c15 	stw	r2,48(sp)
1001af38:	d8800117 	ldw	r2,4(sp)
1001af3c:	10008b16 	blt	r2,zero,1001b16c <_dtoa_r+0x970>
1001af40:	d9000617 	ldw	r4,24(sp)
1001af44:	00c00384 	movi	r3,14
1001af48:	19008816 	blt	r3,r4,1001b16c <_dtoa_r+0x970>
1001af4c:	200490fa 	slli	r2,r4,3
1001af50:	d9c02117 	ldw	r7,132(sp)
1001af54:	00c400b4 	movhi	r3,4098
1001af58:	18cf1004 	addi	r3,r3,15424
1001af5c:	1885883a 	add	r2,r3,r2
1001af60:	14800017 	ldw	r18,0(r2)
1001af64:	14c00117 	ldw	r19,4(r2)
1001af68:	3801c916 	blt	r7,zero,1001b690 <_dtoa_r+0xe94>
1001af6c:	d9000317 	ldw	r4,12(sp)
1001af70:	900d883a 	mov	r6,r18
1001af74:	980f883a 	mov	r7,r19
1001af78:	880b883a 	mov	r5,r17
1001af7c:	001ef200 	call	1001ef20 <__divdf3>
1001af80:	180b883a 	mov	r5,r3
1001af84:	1009883a 	mov	r4,r2
1001af88:	001f3840 	call	1001f384 <__fixdfsi>
1001af8c:	1009883a 	mov	r4,r2
1001af90:	102b883a 	mov	r21,r2
1001af94:	001f2b00 	call	1001f2b0 <__floatsidf>
1001af98:	1009883a 	mov	r4,r2
1001af9c:	180b883a 	mov	r5,r3
1001afa0:	900d883a 	mov	r6,r18
1001afa4:	980f883a 	mov	r7,r19
1001afa8:	001ec3c0 	call	1001ec3c <__muldf3>
1001afac:	d9000317 	ldw	r4,12(sp)
1001afb0:	880b883a 	mov	r5,r17
1001afb4:	100d883a 	mov	r6,r2
1001afb8:	180f883a 	mov	r7,r3
1001afbc:	001ebdc0 	call	1001ebdc <__subdf3>
1001afc0:	d9c00917 	ldw	r7,36(sp)
1001afc4:	1009883a 	mov	r4,r2
1001afc8:	a8800c04 	addi	r2,r21,48
1001afcc:	b8800005 	stb	r2,0(r23)
1001afd0:	01800044 	movi	r6,1
1001afd4:	180b883a 	mov	r5,r3
1001afd8:	2005883a 	mov	r2,r4
1001afdc:	bd800044 	addi	r22,r23,1
1001afe0:	39803726 	beq	r7,r6,1001b0c0 <_dtoa_r+0x8c4>
1001afe4:	000d883a 	mov	r6,zero
1001afe8:	01d00934 	movhi	r7,16420
1001afec:	001ec3c0 	call	1001ec3c <__muldf3>
1001aff0:	1009883a 	mov	r4,r2
1001aff4:	180b883a 	mov	r5,r3
1001aff8:	000d883a 	mov	r6,zero
1001affc:	000f883a 	mov	r7,zero
1001b000:	1029883a 	mov	r20,r2
1001b004:	1823883a 	mov	r17,r3
1001b008:	001f0d40 	call	1001f0d4 <__eqdf2>
1001b00c:	103f9c26 	beq	r2,zero,1001ae80 <__alt_data_end+0xf801ae80>
1001b010:	dd400917 	ldw	r21,36(sp)
1001b014:	dc000415 	stw	r16,16(sp)
1001b018:	00000906 	br	1001b040 <_dtoa_r+0x844>
1001b01c:	001ec3c0 	call	1001ec3c <__muldf3>
1001b020:	1009883a 	mov	r4,r2
1001b024:	180b883a 	mov	r5,r3
1001b028:	000d883a 	mov	r6,zero
1001b02c:	000f883a 	mov	r7,zero
1001b030:	1029883a 	mov	r20,r2
1001b034:	1823883a 	mov	r17,r3
1001b038:	001f0d40 	call	1001f0d4 <__eqdf2>
1001b03c:	10022926 	beq	r2,zero,1001b8e4 <_dtoa_r+0x10e8>
1001b040:	900d883a 	mov	r6,r18
1001b044:	980f883a 	mov	r7,r19
1001b048:	a009883a 	mov	r4,r20
1001b04c:	880b883a 	mov	r5,r17
1001b050:	001ef200 	call	1001ef20 <__divdf3>
1001b054:	180b883a 	mov	r5,r3
1001b058:	1009883a 	mov	r4,r2
1001b05c:	001f3840 	call	1001f384 <__fixdfsi>
1001b060:	1009883a 	mov	r4,r2
1001b064:	1021883a 	mov	r16,r2
1001b068:	001f2b00 	call	1001f2b0 <__floatsidf>
1001b06c:	1009883a 	mov	r4,r2
1001b070:	180b883a 	mov	r5,r3
1001b074:	900d883a 	mov	r6,r18
1001b078:	980f883a 	mov	r7,r19
1001b07c:	001ec3c0 	call	1001ec3c <__muldf3>
1001b080:	a009883a 	mov	r4,r20
1001b084:	880b883a 	mov	r5,r17
1001b088:	100d883a 	mov	r6,r2
1001b08c:	180f883a 	mov	r7,r3
1001b090:	001ebdc0 	call	1001ebdc <__subdf3>
1001b094:	82400c04 	addi	r9,r16,48
1001b098:	b2400005 	stb	r9,0(r22)
1001b09c:	b5800044 	addi	r22,r22,1
1001b0a0:	b5d3c83a 	sub	r9,r22,r23
1001b0a4:	000d883a 	mov	r6,zero
1001b0a8:	01d00934 	movhi	r7,16420
1001b0ac:	1009883a 	mov	r4,r2
1001b0b0:	180b883a 	mov	r5,r3
1001b0b4:	aa7fd91e 	bne	r21,r9,1001b01c <__alt_data_end+0xf801b01c>
1001b0b8:	802b883a 	mov	r21,r16
1001b0bc:	dc000417 	ldw	r16,16(sp)
1001b0c0:	1009883a 	mov	r4,r2
1001b0c4:	180b883a 	mov	r5,r3
1001b0c8:	100d883a 	mov	r6,r2
1001b0cc:	180f883a 	mov	r7,r3
1001b0d0:	001eb880 	call	1001eb88 <__adddf3>
1001b0d4:	9009883a 	mov	r4,r18
1001b0d8:	980b883a 	mov	r5,r19
1001b0dc:	100d883a 	mov	r6,r2
1001b0e0:	180f883a 	mov	r7,r3
1001b0e4:	1023883a 	mov	r17,r2
1001b0e8:	1829883a 	mov	r20,r3
1001b0ec:	001f2540 	call	1001f254 <__ltdf2>
1001b0f0:	10000816 	blt	r2,zero,1001b114 <_dtoa_r+0x918>
1001b0f4:	9009883a 	mov	r4,r18
1001b0f8:	980b883a 	mov	r5,r19
1001b0fc:	880d883a 	mov	r6,r17
1001b100:	a00f883a 	mov	r7,r20
1001b104:	001f1300 	call	1001f130 <__nedf2>
1001b108:	103f5d1e 	bne	r2,zero,1001ae80 <__alt_data_end+0xf801ae80>
1001b10c:	ad40004c 	andi	r21,r21,1
1001b110:	a83f5b26 	beq	r21,zero,1001ae80 <__alt_data_end+0xf801ae80>
1001b114:	b53fffc3 	ldbu	r20,-1(r22)
1001b118:	b0ffff84 	addi	r3,r22,-2
1001b11c:	01400e44 	movi	r5,57
1001b120:	00000306 	br	1001b130 <_dtoa_r+0x934>
1001b124:	1d000003 	ldbu	r20,0(r3)
1001b128:	102d883a 	mov	r22,r2
1001b12c:	18ffffc4 	addi	r3,r3,-1
1001b130:	a1003fcc 	andi	r4,r20,255
1001b134:	2100201c 	xori	r4,r4,128
1001b138:	213fe004 	addi	r4,r4,-128
1001b13c:	b0bfffc4 	addi	r2,r22,-1
1001b140:	2142ca1e 	bne	r4,r5,1001bc6c <_dtoa_r+0x1470>
1001b144:	b8bff71e 	bne	r23,r2,1001b124 <__alt_data_end+0xf801b124>
1001b148:	d8800617 	ldw	r2,24(sp)
1001b14c:	05000c44 	movi	r20,49
1001b150:	10800044 	addi	r2,r2,1
1001b154:	d8800615 	stw	r2,24(sp)
1001b158:	00800c04 	movi	r2,48
1001b15c:	b8800005 	stb	r2,0(r23)
1001b160:	b805883a 	mov	r2,r23
1001b164:	15000005 	stb	r20,0(r2)
1001b168:	003f4506 	br	1001ae80 <__alt_data_end+0xf801ae80>
1001b16c:	d9c00c17 	ldw	r7,48(sp)
1001b170:	3800c926 	beq	r7,zero,1001b498 <_dtoa_r+0xc9c>
1001b174:	d9c00417 	ldw	r7,16(sp)
1001b178:	00c00044 	movi	r3,1
1001b17c:	19c16c0e 	bge	r3,r7,1001b730 <_dtoa_r+0xf34>
1001b180:	d9000917 	ldw	r4,36(sp)
1001b184:	d9c00a17 	ldw	r7,40(sp)
1001b188:	24ffffc4 	addi	r19,r4,-1
1001b18c:	3cc20716 	blt	r7,r19,1001b9ac <_dtoa_r+0x11b0>
1001b190:	3ce7c83a 	sub	r19,r7,r19
1001b194:	d9c00917 	ldw	r7,36(sp)
1001b198:	3802ae16 	blt	r7,zero,1001bc54 <_dtoa_r+0x1458>
1001b19c:	dc800817 	ldw	r18,32(sp)
1001b1a0:	d8800917 	ldw	r2,36(sp)
1001b1a4:	d8c00817 	ldw	r3,32(sp)
1001b1a8:	d9c00717 	ldw	r7,28(sp)
1001b1ac:	8009883a 	mov	r4,r16
1001b1b0:	1887883a 	add	r3,r3,r2
1001b1b4:	388f883a 	add	r7,r7,r2
1001b1b8:	01400044 	movi	r5,1
1001b1bc:	d8c00815 	stw	r3,32(sp)
1001b1c0:	d9c00715 	stw	r7,28(sp)
1001b1c4:	001cafc0 	call	1001cafc <__i2b>
1001b1c8:	102b883a 	mov	r21,r2
1001b1cc:	90000a26 	beq	r18,zero,1001b1f8 <_dtoa_r+0x9fc>
1001b1d0:	d8800717 	ldw	r2,28(sp)
1001b1d4:	0080080e 	bge	zero,r2,1001b1f8 <_dtoa_r+0x9fc>
1001b1d8:	90812b16 	blt	r18,r2,1001b688 <_dtoa_r+0xe8c>
1001b1dc:	d8c00817 	ldw	r3,32(sp)
1001b1e0:	d9000717 	ldw	r4,28(sp)
1001b1e4:	90a5c83a 	sub	r18,r18,r2
1001b1e8:	1887c83a 	sub	r3,r3,r2
1001b1ec:	2089c83a 	sub	r4,r4,r2
1001b1f0:	d8c00815 	stw	r3,32(sp)
1001b1f4:	d9000715 	stw	r4,28(sp)
1001b1f8:	d9c00a17 	ldw	r7,40(sp)
1001b1fc:	01c0140e 	bge	zero,r7,1001b250 <_dtoa_r+0xa54>
1001b200:	d8800c17 	ldw	r2,48(sp)
1001b204:	1001de26 	beq	r2,zero,1001b980 <_dtoa_r+0x1184>
1001b208:	04c00e0e 	bge	zero,r19,1001b244 <_dtoa_r+0xa48>
1001b20c:	a80b883a 	mov	r5,r21
1001b210:	8009883a 	mov	r4,r16
1001b214:	980d883a 	mov	r6,r19
1001b218:	001cd900 	call	1001cd90 <__pow5mult>
1001b21c:	e00d883a 	mov	r6,fp
1001b220:	8009883a 	mov	r4,r16
1001b224:	100b883a 	mov	r5,r2
1001b228:	102b883a 	mov	r21,r2
1001b22c:	001cb380 	call	1001cb38 <__multiply>
1001b230:	1029883a 	mov	r20,r2
1001b234:	e00b883a 	mov	r5,fp
1001b238:	8009883a 	mov	r4,r16
1001b23c:	001c7740 	call	1001c774 <_Bfree>
1001b240:	a039883a 	mov	fp,r20
1001b244:	d8c00a17 	ldw	r3,40(sp)
1001b248:	1ccdc83a 	sub	r6,r3,r19
1001b24c:	3001291e 	bne	r6,zero,1001b6f4 <_dtoa_r+0xef8>
1001b250:	8009883a 	mov	r4,r16
1001b254:	01400044 	movi	r5,1
1001b258:	001cafc0 	call	1001cafc <__i2b>
1001b25c:	d9000b17 	ldw	r4,44(sp)
1001b260:	1029883a 	mov	r20,r2
1001b264:	0100050e 	bge	zero,r4,1001b27c <_dtoa_r+0xa80>
1001b268:	d9800b17 	ldw	r6,44(sp)
1001b26c:	8009883a 	mov	r4,r16
1001b270:	100b883a 	mov	r5,r2
1001b274:	001cd900 	call	1001cd90 <__pow5mult>
1001b278:	1029883a 	mov	r20,r2
1001b27c:	d9c00417 	ldw	r7,16(sp)
1001b280:	00800044 	movi	r2,1
1001b284:	11c0f00e 	bge	r2,r7,1001b648 <_dtoa_r+0xe4c>
1001b288:	0023883a 	mov	r17,zero
1001b28c:	d8800b17 	ldw	r2,44(sp)
1001b290:	1001741e 	bne	r2,zero,1001b864 <_dtoa_r+0x1068>
1001b294:	00800044 	movi	r2,1
1001b298:	d8c00717 	ldw	r3,28(sp)
1001b29c:	10c5883a 	add	r2,r2,r3
1001b2a0:	108007cc 	andi	r2,r2,31
1001b2a4:	10008026 	beq	r2,zero,1001b4a8 <_dtoa_r+0xcac>
1001b2a8:	01000804 	movi	r4,32
1001b2ac:	2089c83a 	sub	r4,r4,r2
1001b2b0:	00c00104 	movi	r3,4
1001b2b4:	1902d00e 	bge	r3,r4,1001bdf8 <_dtoa_r+0x15fc>
1001b2b8:	d9000817 	ldw	r4,32(sp)
1001b2bc:	d9c00717 	ldw	r7,28(sp)
1001b2c0:	00c00704 	movi	r3,28
1001b2c4:	1885c83a 	sub	r2,r3,r2
1001b2c8:	2089883a 	add	r4,r4,r2
1001b2cc:	388f883a 	add	r7,r7,r2
1001b2d0:	d9000815 	stw	r4,32(sp)
1001b2d4:	90a5883a 	add	r18,r18,r2
1001b2d8:	d9c00715 	stw	r7,28(sp)
1001b2dc:	d9c00817 	ldw	r7,32(sp)
1001b2e0:	01c0050e 	bge	zero,r7,1001b2f8 <_dtoa_r+0xafc>
1001b2e4:	e00b883a 	mov	r5,fp
1001b2e8:	8009883a 	mov	r4,r16
1001b2ec:	380d883a 	mov	r6,r7
1001b2f0:	001cebc0 	call	1001cebc <__lshift>
1001b2f4:	1039883a 	mov	fp,r2
1001b2f8:	d8800717 	ldw	r2,28(sp)
1001b2fc:	0080050e 	bge	zero,r2,1001b314 <_dtoa_r+0xb18>
1001b300:	a00b883a 	mov	r5,r20
1001b304:	8009883a 	mov	r4,r16
1001b308:	100d883a 	mov	r6,r2
1001b30c:	001cebc0 	call	1001cebc <__lshift>
1001b310:	1029883a 	mov	r20,r2
1001b314:	d8c00d17 	ldw	r3,52(sp)
1001b318:	1801401e 	bne	r3,zero,1001b81c <_dtoa_r+0x1020>
1001b31c:	d8800917 	ldw	r2,36(sp)
1001b320:	00815a0e 	bge	zero,r2,1001b88c <_dtoa_r+0x1090>
1001b324:	d8c00c17 	ldw	r3,48(sp)
1001b328:	18006f1e 	bne	r3,zero,1001b4e8 <_dtoa_r+0xcec>
1001b32c:	b823883a 	mov	r17,r23
1001b330:	dc800917 	ldw	r18,36(sp)
1001b334:	00000206 	br	1001b340 <_dtoa_r+0xb44>
1001b338:	001c79c0 	call	1001c79c <__multadd>
1001b33c:	1039883a 	mov	fp,r2
1001b340:	e009883a 	mov	r4,fp
1001b344:	a00b883a 	mov	r5,r20
1001b348:	001a5c00 	call	1001a5c0 <quorem>
1001b34c:	10800c04 	addi	r2,r2,48
1001b350:	88800005 	stb	r2,0(r17)
1001b354:	8c400044 	addi	r17,r17,1
1001b358:	8dc7c83a 	sub	r3,r17,r23
1001b35c:	8009883a 	mov	r4,r16
1001b360:	e00b883a 	mov	r5,fp
1001b364:	01800284 	movi	r6,10
1001b368:	000f883a 	mov	r7,zero
1001b36c:	1cbff216 	blt	r3,r18,1001b338 <__alt_data_end+0xf801b338>
1001b370:	dd800917 	ldw	r22,36(sp)
1001b374:	1007883a 	mov	r3,r2
1001b378:	05823a0e 	bge	zero,r22,1001bc64 <_dtoa_r+0x1468>
1001b37c:	bdad883a 	add	r22,r23,r22
1001b380:	0023883a 	mov	r17,zero
1001b384:	e00b883a 	mov	r5,fp
1001b388:	01800044 	movi	r6,1
1001b38c:	8009883a 	mov	r4,r16
1001b390:	d8c01515 	stw	r3,84(sp)
1001b394:	001cebc0 	call	1001cebc <__lshift>
1001b398:	1009883a 	mov	r4,r2
1001b39c:	a00b883a 	mov	r5,r20
1001b3a0:	1039883a 	mov	fp,r2
1001b3a4:	001d0180 	call	1001d018 <__mcmp>
1001b3a8:	d8c01517 	ldw	r3,84(sp)
1001b3ac:	0080d60e 	bge	zero,r2,1001b708 <_dtoa_r+0xf0c>
1001b3b0:	b13fffc3 	ldbu	r4,-1(r22)
1001b3b4:	b0ffff84 	addi	r3,r22,-2
1001b3b8:	01800e44 	movi	r6,57
1001b3bc:	00000306 	br	1001b3cc <_dtoa_r+0xbd0>
1001b3c0:	19000003 	ldbu	r4,0(r3)
1001b3c4:	102d883a 	mov	r22,r2
1001b3c8:	18ffffc4 	addi	r3,r3,-1
1001b3cc:	21403fcc 	andi	r5,r4,255
1001b3d0:	2940201c 	xori	r5,r5,128
1001b3d4:	297fe004 	addi	r5,r5,-128
1001b3d8:	b0bfffc4 	addi	r2,r22,-1
1001b3dc:	2981a71e 	bne	r5,r6,1001ba7c <_dtoa_r+0x1280>
1001b3e0:	b8bff71e 	bne	r23,r2,1001b3c0 <__alt_data_end+0xf801b3c0>
1001b3e4:	d8800617 	ldw	r2,24(sp)
1001b3e8:	10800044 	addi	r2,r2,1
1001b3ec:	d8800615 	stw	r2,24(sp)
1001b3f0:	00800c44 	movi	r2,49
1001b3f4:	b8800005 	stb	r2,0(r23)
1001b3f8:	8009883a 	mov	r4,r16
1001b3fc:	a00b883a 	mov	r5,r20
1001b400:	001c7740 	call	1001c774 <_Bfree>
1001b404:	a83e9e26 	beq	r21,zero,1001ae80 <__alt_data_end+0xf801ae80>
1001b408:	88000426 	beq	r17,zero,1001b41c <_dtoa_r+0xc20>
1001b40c:	8d400326 	beq	r17,r21,1001b41c <_dtoa_r+0xc20>
1001b410:	8009883a 	mov	r4,r16
1001b414:	880b883a 	mov	r5,r17
1001b418:	001c7740 	call	1001c774 <_Bfree>
1001b41c:	8009883a 	mov	r4,r16
1001b420:	a80b883a 	mov	r5,r21
1001b424:	001c7740 	call	1001c774 <_Bfree>
1001b428:	003e9506 	br	1001ae80 <__alt_data_end+0xf801ae80>
1001b42c:	00c00044 	movi	r3,1
1001b430:	d8c00d15 	stw	r3,52(sp)
1001b434:	003d9f06 	br	1001aab4 <__alt_data_end+0xf801aab4>
1001b438:	d9000817 	ldw	r4,32(sp)
1001b43c:	d8800617 	ldw	r2,24(sp)
1001b440:	d8000b15 	stw	zero,44(sp)
1001b444:	2089c83a 	sub	r4,r4,r2
1001b448:	0087c83a 	sub	r3,zero,r2
1001b44c:	d9000815 	stw	r4,32(sp)
1001b450:	d8c00a15 	stw	r3,40(sp)
1001b454:	003da306 	br	1001aae4 <__alt_data_end+0xf801aae4>
1001b458:	0529c83a 	sub	r20,zero,r20
1001b45c:	dd000815 	stw	r20,32(sp)
1001b460:	d8000715 	stw	zero,28(sp)
1001b464:	003d9806 	br	1001aac8 <__alt_data_end+0xf801aac8>
1001b468:	d9000617 	ldw	r4,24(sp)
1001b46c:	001f2b00 	call	1001f2b0 <__floatsidf>
1001b470:	1009883a 	mov	r4,r2
1001b474:	180b883a 	mov	r5,r3
1001b478:	980d883a 	mov	r6,r19
1001b47c:	900f883a 	mov	r7,r18
1001b480:	001f0d40 	call	1001f0d4 <__eqdf2>
1001b484:	103d7a26 	beq	r2,zero,1001aa70 <__alt_data_end+0xf801aa70>
1001b488:	d8800617 	ldw	r2,24(sp)
1001b48c:	10bfffc4 	addi	r2,r2,-1
1001b490:	d8800615 	stw	r2,24(sp)
1001b494:	003d7606 	br	1001aa70 <__alt_data_end+0xf801aa70>
1001b498:	dcc00a17 	ldw	r19,40(sp)
1001b49c:	dc800817 	ldw	r18,32(sp)
1001b4a0:	002b883a 	mov	r21,zero
1001b4a4:	003f4906 	br	1001b1cc <__alt_data_end+0xf801b1cc>
1001b4a8:	00800704 	movi	r2,28
1001b4ac:	d8c00817 	ldw	r3,32(sp)
1001b4b0:	d9000717 	ldw	r4,28(sp)
1001b4b4:	90a5883a 	add	r18,r18,r2
1001b4b8:	1887883a 	add	r3,r3,r2
1001b4bc:	2089883a 	add	r4,r4,r2
1001b4c0:	d8c00815 	stw	r3,32(sp)
1001b4c4:	d9000715 	stw	r4,28(sp)
1001b4c8:	003f8406 	br	1001b2dc <__alt_data_end+0xf801b2dc>
1001b4cc:	d9c00317 	ldw	r7,12(sp)
1001b4d0:	013efb84 	movi	r4,-1042
1001b4d4:	2509c83a 	sub	r4,r4,r20
1001b4d8:	3908983a 	sll	r4,r7,r4
1001b4dc:	003d3006 	br	1001a9a0 <__alt_data_end+0xf801a9a0>
1001b4e0:	d8000d15 	stw	zero,52(sp)
1001b4e4:	003d7306 	br	1001aab4 <__alt_data_end+0xf801aab4>
1001b4e8:	0480050e 	bge	zero,r18,1001b500 <_dtoa_r+0xd04>
1001b4ec:	a80b883a 	mov	r5,r21
1001b4f0:	8009883a 	mov	r4,r16
1001b4f4:	900d883a 	mov	r6,r18
1001b4f8:	001cebc0 	call	1001cebc <__lshift>
1001b4fc:	102b883a 	mov	r21,r2
1001b500:	8801611e 	bne	r17,zero,1001ba88 <_dtoa_r+0x128c>
1001b504:	a827883a 	mov	r19,r21
1001b508:	d8c00317 	ldw	r3,12(sp)
1001b50c:	d9000917 	ldw	r4,36(sp)
1001b510:	b8bfffc4 	addi	r2,r23,-1
1001b514:	18c0004c 	andi	r3,r3,1
1001b518:	1105883a 	add	r2,r2,r4
1001b51c:	b825883a 	mov	r18,r23
1001b520:	d8800515 	stw	r2,20(sp)
1001b524:	a823883a 	mov	r17,r21
1001b528:	d8c00315 	stw	r3,12(sp)
1001b52c:	ddc00715 	stw	r23,28(sp)
1001b530:	e009883a 	mov	r4,fp
1001b534:	a00b883a 	mov	r5,r20
1001b538:	001a5c00 	call	1001a5c0 <quorem>
1001b53c:	e009883a 	mov	r4,fp
1001b540:	880b883a 	mov	r5,r17
1001b544:	102d883a 	mov	r22,r2
1001b548:	001d0180 	call	1001d018 <__mcmp>
1001b54c:	980d883a 	mov	r6,r19
1001b550:	8009883a 	mov	r4,r16
1001b554:	a00b883a 	mov	r5,r20
1001b558:	102b883a 	mov	r21,r2
1001b55c:	001d0700 	call	1001d070 <__mdiff>
1001b560:	100d883a 	mov	r6,r2
1001b564:	10800317 	ldw	r2,12(r2)
1001b568:	b5c00c04 	addi	r23,r22,48
1001b56c:	10008c26 	beq	r2,zero,1001b7a0 <_dtoa_r+0xfa4>
1001b570:	8009883a 	mov	r4,r16
1001b574:	300b883a 	mov	r5,r6
1001b578:	001c7740 	call	1001c774 <_Bfree>
1001b57c:	00800044 	movi	r2,1
1001b580:	a8007116 	blt	r21,zero,1001b748 <_dtoa_r+0xf4c>
1001b584:	a800041e 	bne	r21,zero,1001b598 <_dtoa_r+0xd9c>
1001b588:	d9c00417 	ldw	r7,16(sp)
1001b58c:	3800021e 	bne	r7,zero,1001b598 <_dtoa_r+0xd9c>
1001b590:	d8c00317 	ldw	r3,12(sp)
1001b594:	18006c26 	beq	r3,zero,1001b748 <_dtoa_r+0xf4c>
1001b598:	00814c16 	blt	zero,r2,1001bacc <_dtoa_r+0x12d0>
1001b59c:	d8c00517 	ldw	r3,20(sp)
1001b5a0:	95400044 	addi	r21,r18,1
1001b5a4:	95c00005 	stb	r23,0(r18)
1001b5a8:	a82d883a 	mov	r22,r21
1001b5ac:	90c14d26 	beq	r18,r3,1001bae4 <_dtoa_r+0x12e8>
1001b5b0:	e00b883a 	mov	r5,fp
1001b5b4:	8009883a 	mov	r4,r16
1001b5b8:	01800284 	movi	r6,10
1001b5bc:	000f883a 	mov	r7,zero
1001b5c0:	001c79c0 	call	1001c79c <__multadd>
1001b5c4:	1039883a 	mov	fp,r2
1001b5c8:	8cc08b26 	beq	r17,r19,1001b7f8 <_dtoa_r+0xffc>
1001b5cc:	880b883a 	mov	r5,r17
1001b5d0:	01800284 	movi	r6,10
1001b5d4:	000f883a 	mov	r7,zero
1001b5d8:	8009883a 	mov	r4,r16
1001b5dc:	001c79c0 	call	1001c79c <__multadd>
1001b5e0:	980b883a 	mov	r5,r19
1001b5e4:	8009883a 	mov	r4,r16
1001b5e8:	01800284 	movi	r6,10
1001b5ec:	000f883a 	mov	r7,zero
1001b5f0:	1023883a 	mov	r17,r2
1001b5f4:	001c79c0 	call	1001c79c <__multadd>
1001b5f8:	1027883a 	mov	r19,r2
1001b5fc:	a825883a 	mov	r18,r21
1001b600:	003fcb06 	br	1001b530 <__alt_data_end+0xf801b530>
1001b604:	d9c00417 	ldw	r7,16(sp)
1001b608:	00800104 	movi	r2,4
1001b60c:	3880e426 	beq	r7,r2,1001b9a0 <_dtoa_r+0x11a4>
1001b610:	00800144 	movi	r2,5
1001b614:	38be3c1e 	bne	r7,r2,1001af08 <__alt_data_end+0xf801af08>
1001b618:	00c00044 	movi	r3,1
1001b61c:	d8c00c15 	stw	r3,48(sp)
1001b620:	d9c02117 	ldw	r7,132(sp)
1001b624:	d8800617 	ldw	r2,24(sp)
1001b628:	388f883a 	add	r7,r7,r2
1001b62c:	3c800044 	addi	r18,r7,1
1001b630:	d9c00e15 	stw	r7,56(sp)
1001b634:	dc800915 	stw	r18,36(sp)
1001b638:	04bd3e16 	blt	zero,r18,1001ab34 <__alt_data_end+0xf801ab34>
1001b63c:	80001115 	stw	zero,68(r16)
1001b640:	000b883a 	mov	r5,zero
1001b644:	003d4606 	br	1001ab60 <__alt_data_end+0xf801ab60>
1001b648:	d8c00317 	ldw	r3,12(sp)
1001b64c:	183f0e1e 	bne	r3,zero,1001b288 <__alt_data_end+0xf801b288>
1001b650:	00c00434 	movhi	r3,16
1001b654:	18ffffc4 	addi	r3,r3,-1
1001b658:	88c6703a 	and	r3,r17,r3
1001b65c:	183f0a1e 	bne	r3,zero,1001b288 <__alt_data_end+0xf801b288>
1001b660:	8c5ffc2c 	andhi	r17,r17,32752
1001b664:	883f0826 	beq	r17,zero,1001b288 <__alt_data_end+0xf801b288>
1001b668:	d9000817 	ldw	r4,32(sp)
1001b66c:	d9c00717 	ldw	r7,28(sp)
1001b670:	1023883a 	mov	r17,r2
1001b674:	2089883a 	add	r4,r4,r2
1001b678:	388f883a 	add	r7,r7,r2
1001b67c:	d9000815 	stw	r4,32(sp)
1001b680:	d9c00715 	stw	r7,28(sp)
1001b684:	003f0106 	br	1001b28c <__alt_data_end+0xf801b28c>
1001b688:	9005883a 	mov	r2,r18
1001b68c:	003ed306 	br	1001b1dc <__alt_data_end+0xf801b1dc>
1001b690:	d8800917 	ldw	r2,36(sp)
1001b694:	00be3516 	blt	zero,r2,1001af6c <__alt_data_end+0xf801af6c>
1001b698:	1000b61e 	bne	r2,zero,1001b974 <_dtoa_r+0x1178>
1001b69c:	9009883a 	mov	r4,r18
1001b6a0:	980b883a 	mov	r5,r19
1001b6a4:	000d883a 	mov	r6,zero
1001b6a8:	01d00534 	movhi	r7,16404
1001b6ac:	001ec3c0 	call	1001ec3c <__muldf3>
1001b6b0:	d9800317 	ldw	r6,12(sp)
1001b6b4:	1009883a 	mov	r4,r2
1001b6b8:	180b883a 	mov	r5,r3
1001b6bc:	880f883a 	mov	r7,r17
1001b6c0:	001f1f00 	call	1001f1f0 <__gedf2>
1001b6c4:	0029883a 	mov	r20,zero
1001b6c8:	002b883a 	mov	r21,zero
1001b6cc:	10007e16 	blt	r2,zero,1001b8c8 <_dtoa_r+0x10cc>
1001b6d0:	d8802117 	ldw	r2,132(sp)
1001b6d4:	b82d883a 	mov	r22,r23
1001b6d8:	0084303a 	nor	r2,zero,r2
1001b6dc:	d8800615 	stw	r2,24(sp)
1001b6e0:	8009883a 	mov	r4,r16
1001b6e4:	a00b883a 	mov	r5,r20
1001b6e8:	001c7740 	call	1001c774 <_Bfree>
1001b6ec:	a83f4b1e 	bne	r21,zero,1001b41c <__alt_data_end+0xf801b41c>
1001b6f0:	003de306 	br	1001ae80 <__alt_data_end+0xf801ae80>
1001b6f4:	e00b883a 	mov	r5,fp
1001b6f8:	8009883a 	mov	r4,r16
1001b6fc:	001cd900 	call	1001cd90 <__pow5mult>
1001b700:	1039883a 	mov	fp,r2
1001b704:	003ed206 	br	1001b250 <__alt_data_end+0xf801b250>
1001b708:	1000021e 	bne	r2,zero,1001b714 <_dtoa_r+0xf18>
1001b70c:	18c0004c 	andi	r3,r3,1
1001b710:	183f271e 	bne	r3,zero,1001b3b0 <__alt_data_end+0xf801b3b0>
1001b714:	01000c04 	movi	r4,48
1001b718:	00000106 	br	1001b720 <_dtoa_r+0xf24>
1001b71c:	102d883a 	mov	r22,r2
1001b720:	b0bfffc4 	addi	r2,r22,-1
1001b724:	10c00007 	ldb	r3,0(r2)
1001b728:	193ffc26 	beq	r3,r4,1001b71c <__alt_data_end+0xf801b71c>
1001b72c:	003f3206 	br	1001b3f8 <__alt_data_end+0xf801b3f8>
1001b730:	d8c00f17 	ldw	r3,60(sp)
1001b734:	18015026 	beq	r3,zero,1001bc78 <_dtoa_r+0x147c>
1001b738:	10810cc4 	addi	r2,r2,1075
1001b73c:	dcc00a17 	ldw	r19,40(sp)
1001b740:	dc800817 	ldw	r18,32(sp)
1001b744:	003e9706 	br	1001b1a4 <__alt_data_end+0xf801b1a4>
1001b748:	b807883a 	mov	r3,r23
1001b74c:	182b883a 	mov	r21,r3
1001b750:	ddc00717 	ldw	r23,28(sp)
1001b754:	00800e0e 	bge	zero,r2,1001b790 <_dtoa_r+0xf94>
1001b758:	e00b883a 	mov	r5,fp
1001b75c:	01800044 	movi	r6,1
1001b760:	8009883a 	mov	r4,r16
1001b764:	d8c01515 	stw	r3,84(sp)
1001b768:	001cebc0 	call	1001cebc <__lshift>
1001b76c:	1009883a 	mov	r4,r2
1001b770:	a00b883a 	mov	r5,r20
1001b774:	1039883a 	mov	fp,r2
1001b778:	001d0180 	call	1001d018 <__mcmp>
1001b77c:	d8c01517 	ldw	r3,84(sp)
1001b780:	0081880e 	bge	zero,r2,1001bda4 <_dtoa_r+0x15a8>
1001b784:	00800e44 	movi	r2,57
1001b788:	b0c00c44 	addi	r3,r22,49
1001b78c:	a8816326 	beq	r21,r2,1001bd1c <_dtoa_r+0x1520>
1001b790:	90c00005 	stb	r3,0(r18)
1001b794:	95800044 	addi	r22,r18,1
1001b798:	982b883a 	mov	r21,r19
1001b79c:	003f1606 	br	1001b3f8 <__alt_data_end+0xf801b3f8>
1001b7a0:	300b883a 	mov	r5,r6
1001b7a4:	e009883a 	mov	r4,fp
1001b7a8:	d9801515 	stw	r6,84(sp)
1001b7ac:	001d0180 	call	1001d018 <__mcmp>
1001b7b0:	d9801517 	ldw	r6,84(sp)
1001b7b4:	8009883a 	mov	r4,r16
1001b7b8:	d8801515 	stw	r2,84(sp)
1001b7bc:	300b883a 	mov	r5,r6
1001b7c0:	001c7740 	call	1001c774 <_Bfree>
1001b7c4:	d8801517 	ldw	r2,84(sp)
1001b7c8:	103f6d1e 	bne	r2,zero,1001b580 <__alt_data_end+0xf801b580>
1001b7cc:	d9c00417 	ldw	r7,16(sp)
1001b7d0:	383f6b1e 	bne	r7,zero,1001b580 <__alt_data_end+0xf801b580>
1001b7d4:	d8c00317 	ldw	r3,12(sp)
1001b7d8:	183f691e 	bne	r3,zero,1001b580 <__alt_data_end+0xf801b580>
1001b7dc:	b807883a 	mov	r3,r23
1001b7e0:	00800e44 	movi	r2,57
1001b7e4:	ddc00717 	ldw	r23,28(sp)
1001b7e8:	18814c26 	beq	r3,r2,1001bd1c <_dtoa_r+0x1520>
1001b7ec:	057fe80e 	bge	zero,r21,1001b790 <__alt_data_end+0xf801b790>
1001b7f0:	b0c00c44 	addi	r3,r22,49
1001b7f4:	003fe606 	br	1001b790 <__alt_data_end+0xf801b790>
1001b7f8:	880b883a 	mov	r5,r17
1001b7fc:	8009883a 	mov	r4,r16
1001b800:	01800284 	movi	r6,10
1001b804:	000f883a 	mov	r7,zero
1001b808:	001c79c0 	call	1001c79c <__multadd>
1001b80c:	1023883a 	mov	r17,r2
1001b810:	1027883a 	mov	r19,r2
1001b814:	a825883a 	mov	r18,r21
1001b818:	003f4506 	br	1001b530 <__alt_data_end+0xf801b530>
1001b81c:	e009883a 	mov	r4,fp
1001b820:	a00b883a 	mov	r5,r20
1001b824:	001d0180 	call	1001d018 <__mcmp>
1001b828:	103ebc0e 	bge	r2,zero,1001b31c <__alt_data_end+0xf801b31c>
1001b82c:	e00b883a 	mov	r5,fp
1001b830:	8009883a 	mov	r4,r16
1001b834:	01800284 	movi	r6,10
1001b838:	000f883a 	mov	r7,zero
1001b83c:	001c79c0 	call	1001c79c <__multadd>
1001b840:	1039883a 	mov	fp,r2
1001b844:	d8800617 	ldw	r2,24(sp)
1001b848:	d8c00c17 	ldw	r3,48(sp)
1001b84c:	10bfffc4 	addi	r2,r2,-1
1001b850:	d8800615 	stw	r2,24(sp)
1001b854:	1801571e 	bne	r3,zero,1001bdb4 <_dtoa_r+0x15b8>
1001b858:	d9c00e17 	ldw	r7,56(sp)
1001b85c:	d9c00915 	stw	r7,36(sp)
1001b860:	003eae06 	br	1001b31c <__alt_data_end+0xf801b31c>
1001b864:	a0800417 	ldw	r2,16(r20)
1001b868:	10800104 	addi	r2,r2,4
1001b86c:	1085883a 	add	r2,r2,r2
1001b870:	1085883a 	add	r2,r2,r2
1001b874:	a085883a 	add	r2,r20,r2
1001b878:	11000017 	ldw	r4,0(r2)
1001b87c:	001c9e40 	call	1001c9e4 <__hi0bits>
1001b880:	00c00804 	movi	r3,32
1001b884:	1885c83a 	sub	r2,r3,r2
1001b888:	003e8306 	br	1001b298 <__alt_data_end+0xf801b298>
1001b88c:	d9c00417 	ldw	r7,16(sp)
1001b890:	00800084 	movi	r2,2
1001b894:	11fea30e 	bge	r2,r7,1001b324 <__alt_data_end+0xf801b324>
1001b898:	d8800917 	ldw	r2,36(sp)
1001b89c:	103f8c1e 	bne	r2,zero,1001b6d0 <__alt_data_end+0xf801b6d0>
1001b8a0:	a00b883a 	mov	r5,r20
1001b8a4:	8009883a 	mov	r4,r16
1001b8a8:	01800144 	movi	r6,5
1001b8ac:	000f883a 	mov	r7,zero
1001b8b0:	001c79c0 	call	1001c79c <__multadd>
1001b8b4:	e009883a 	mov	r4,fp
1001b8b8:	100b883a 	mov	r5,r2
1001b8bc:	1029883a 	mov	r20,r2
1001b8c0:	001d0180 	call	1001d018 <__mcmp>
1001b8c4:	00bf820e 	bge	zero,r2,1001b6d0 <__alt_data_end+0xf801b6d0>
1001b8c8:	00800c44 	movi	r2,49
1001b8cc:	b8800005 	stb	r2,0(r23)
1001b8d0:	d8800617 	ldw	r2,24(sp)
1001b8d4:	bd800044 	addi	r22,r23,1
1001b8d8:	10800044 	addi	r2,r2,1
1001b8dc:	d8800615 	stw	r2,24(sp)
1001b8e0:	003f7f06 	br	1001b6e0 <__alt_data_end+0xf801b6e0>
1001b8e4:	dc000417 	ldw	r16,16(sp)
1001b8e8:	003d6506 	br	1001ae80 <__alt_data_end+0xf801ae80>
1001b8ec:	9009883a 	mov	r4,r18
1001b8f0:	001f2b00 	call	1001f2b0 <__floatsidf>
1001b8f4:	1009883a 	mov	r4,r2
1001b8f8:	180b883a 	mov	r5,r3
1001b8fc:	980d883a 	mov	r6,r19
1001b900:	a00f883a 	mov	r7,r20
1001b904:	001ec3c0 	call	1001ec3c <__muldf3>
1001b908:	1009883a 	mov	r4,r2
1001b90c:	180b883a 	mov	r5,r3
1001b910:	000d883a 	mov	r6,zero
1001b914:	01d00734 	movhi	r7,16412
1001b918:	001eb880 	call	1001eb88 <__adddf3>
1001b91c:	057f3034 	movhi	r21,64704
1001b920:	1025883a 	mov	r18,r2
1001b924:	1d6b883a 	add	r21,r3,r21
1001b928:	9809883a 	mov	r4,r19
1001b92c:	a00b883a 	mov	r5,r20
1001b930:	000d883a 	mov	r6,zero
1001b934:	01d00534 	movhi	r7,16404
1001b938:	001ebdc0 	call	1001ebdc <__subdf3>
1001b93c:	1009883a 	mov	r4,r2
1001b940:	180b883a 	mov	r5,r3
1001b944:	900d883a 	mov	r6,r18
1001b948:	a80f883a 	mov	r7,r21
1001b94c:	1027883a 	mov	r19,r2
1001b950:	1829883a 	mov	r20,r3
1001b954:	001f18c0 	call	1001f18c <__gtdf2>
1001b958:	00806616 	blt	zero,r2,1001baf4 <_dtoa_r+0x12f8>
1001b95c:	a9e0003c 	xorhi	r7,r21,32768
1001b960:	9809883a 	mov	r4,r19
1001b964:	a00b883a 	mov	r5,r20
1001b968:	900d883a 	mov	r6,r18
1001b96c:	001f2540 	call	1001f254 <__ltdf2>
1001b970:	103d710e 	bge	r2,zero,1001af38 <__alt_data_end+0xf801af38>
1001b974:	0029883a 	mov	r20,zero
1001b978:	002b883a 	mov	r21,zero
1001b97c:	003f5406 	br	1001b6d0 <__alt_data_end+0xf801b6d0>
1001b980:	d9800a17 	ldw	r6,40(sp)
1001b984:	e00b883a 	mov	r5,fp
1001b988:	8009883a 	mov	r4,r16
1001b98c:	001cd900 	call	1001cd90 <__pow5mult>
1001b990:	1039883a 	mov	fp,r2
1001b994:	003e2e06 	br	1001b250 <__alt_data_end+0xf801b250>
1001b998:	d8000c15 	stw	zero,48(sp)
1001b99c:	003f2006 	br	1001b620 <__alt_data_end+0xf801b620>
1001b9a0:	00800044 	movi	r2,1
1001b9a4:	d8800c15 	stw	r2,48(sp)
1001b9a8:	003c5d06 	br	1001ab20 <__alt_data_end+0xf801ab20>
1001b9ac:	d8c00a17 	ldw	r3,40(sp)
1001b9b0:	d9000b17 	ldw	r4,44(sp)
1001b9b4:	dcc00a15 	stw	r19,40(sp)
1001b9b8:	98c5c83a 	sub	r2,r19,r3
1001b9bc:	2089883a 	add	r4,r4,r2
1001b9c0:	d9000b15 	stw	r4,44(sp)
1001b9c4:	0027883a 	mov	r19,zero
1001b9c8:	003df206 	br	1001b194 <__alt_data_end+0xf801b194>
1001b9cc:	d9000317 	ldw	r4,12(sp)
1001b9d0:	8829883a 	mov	r20,r17
1001b9d4:	04800084 	movi	r18,2
1001b9d8:	d9001015 	stw	r4,64(sp)
1001b9dc:	003c8106 	br	1001abe4 <__alt_data_end+0xf801abe4>
1001b9e0:	04800044 	movi	r18,1
1001b9e4:	dc800e15 	stw	r18,56(sp)
1001b9e8:	dc800915 	stw	r18,36(sp)
1001b9ec:	dc802115 	stw	r18,132(sp)
1001b9f0:	003f1206 	br	1001b63c <__alt_data_end+0xf801b63c>
1001b9f4:	d8800617 	ldw	r2,24(sp)
1001b9f8:	00abc83a 	sub	r21,zero,r2
1001b9fc:	a800a426 	beq	r21,zero,1001bc90 <_dtoa_r+0x1494>
1001ba00:	a88003cc 	andi	r2,r21,15
1001ba04:	100490fa 	slli	r2,r2,3
1001ba08:	00c400b4 	movhi	r3,4098
1001ba0c:	18cf1004 	addi	r3,r3,15424
1001ba10:	d9000317 	ldw	r4,12(sp)
1001ba14:	1885883a 	add	r2,r3,r2
1001ba18:	11800017 	ldw	r6,0(r2)
1001ba1c:	11c00117 	ldw	r7,4(r2)
1001ba20:	a82bd13a 	srai	r21,r21,4
1001ba24:	880b883a 	mov	r5,r17
1001ba28:	001ec3c0 	call	1001ec3c <__muldf3>
1001ba2c:	1027883a 	mov	r19,r2
1001ba30:	1829883a 	mov	r20,r3
1001ba34:	a800e826 	beq	r21,zero,1001bdd8 <_dtoa_r+0x15dc>
1001ba38:	058400b4 	movhi	r22,4098
1001ba3c:	b58f0604 	addi	r22,r22,15384
1001ba40:	04800084 	movi	r18,2
1001ba44:	a980004c 	andi	r6,r21,1
1001ba48:	1009883a 	mov	r4,r2
1001ba4c:	a82bd07a 	srai	r21,r21,1
1001ba50:	180b883a 	mov	r5,r3
1001ba54:	30000426 	beq	r6,zero,1001ba68 <_dtoa_r+0x126c>
1001ba58:	b1800017 	ldw	r6,0(r22)
1001ba5c:	b1c00117 	ldw	r7,4(r22)
1001ba60:	94800044 	addi	r18,r18,1
1001ba64:	001ec3c0 	call	1001ec3c <__muldf3>
1001ba68:	b5800204 	addi	r22,r22,8
1001ba6c:	a83ff51e 	bne	r21,zero,1001ba44 <__alt_data_end+0xf801ba44>
1001ba70:	1027883a 	mov	r19,r2
1001ba74:	1829883a 	mov	r20,r3
1001ba78:	003c7306 	br	1001ac48 <__alt_data_end+0xf801ac48>
1001ba7c:	21000044 	addi	r4,r4,1
1001ba80:	11000005 	stb	r4,0(r2)
1001ba84:	003e5c06 	br	1001b3f8 <__alt_data_end+0xf801b3f8>
1001ba88:	a9400117 	ldw	r5,4(r21)
1001ba8c:	8009883a 	mov	r4,r16
1001ba90:	001c6cc0 	call	1001c6cc <_Balloc>
1001ba94:	a9800417 	ldw	r6,16(r21)
1001ba98:	11000304 	addi	r4,r2,12
1001ba9c:	a9400304 	addi	r5,r21,12
1001baa0:	31800084 	addi	r6,r6,2
1001baa4:	318d883a 	add	r6,r6,r6
1001baa8:	318d883a 	add	r6,r6,r6
1001baac:	1023883a 	mov	r17,r2
1001bab0:	0016dd80 	call	10016dd8 <memcpy>
1001bab4:	8009883a 	mov	r4,r16
1001bab8:	880b883a 	mov	r5,r17
1001babc:	01800044 	movi	r6,1
1001bac0:	001cebc0 	call	1001cebc <__lshift>
1001bac4:	1027883a 	mov	r19,r2
1001bac8:	003e8f06 	br	1001b508 <__alt_data_end+0xf801b508>
1001bacc:	b807883a 	mov	r3,r23
1001bad0:	00800e44 	movi	r2,57
1001bad4:	ddc00717 	ldw	r23,28(sp)
1001bad8:	18809026 	beq	r3,r2,1001bd1c <_dtoa_r+0x1520>
1001badc:	18c00044 	addi	r3,r3,1
1001bae0:	003f2b06 	br	1001b790 <__alt_data_end+0xf801b790>
1001bae4:	b807883a 	mov	r3,r23
1001bae8:	982b883a 	mov	r21,r19
1001baec:	ddc00717 	ldw	r23,28(sp)
1001baf0:	003e2406 	br	1001b384 <__alt_data_end+0xf801b384>
1001baf4:	0029883a 	mov	r20,zero
1001baf8:	002b883a 	mov	r21,zero
1001bafc:	003f7206 	br	1001b8c8 <__alt_data_end+0xf801b8c8>
1001bb00:	593fffc4 	addi	r4,r11,-1
1001bb04:	200490fa 	slli	r2,r4,3
1001bb08:	00c400b4 	movhi	r3,4098
1001bb0c:	18cf1004 	addi	r3,r3,15424
1001bb10:	d9001015 	stw	r4,64(sp)
1001bb14:	1885883a 	add	r2,r3,r2
1001bb18:	11000017 	ldw	r4,0(r2)
1001bb1c:	11400117 	ldw	r5,4(r2)
1001bb20:	900d883a 	mov	r6,r18
1001bb24:	a80f883a 	mov	r7,r21
1001bb28:	dac01615 	stw	r11,88(sp)
1001bb2c:	001ec3c0 	call	1001ec3c <__muldf3>
1001bb30:	a00b883a 	mov	r5,r20
1001bb34:	9809883a 	mov	r4,r19
1001bb38:	d8c01215 	stw	r3,72(sp)
1001bb3c:	d8801115 	stw	r2,68(sp)
1001bb40:	001f3840 	call	1001f384 <__fixdfsi>
1001bb44:	1009883a 	mov	r4,r2
1001bb48:	1025883a 	mov	r18,r2
1001bb4c:	001f2b00 	call	1001f2b0 <__floatsidf>
1001bb50:	9809883a 	mov	r4,r19
1001bb54:	a00b883a 	mov	r5,r20
1001bb58:	100d883a 	mov	r6,r2
1001bb5c:	180f883a 	mov	r7,r3
1001bb60:	94800c04 	addi	r18,r18,48
1001bb64:	001ebdc0 	call	1001ebdc <__subdf3>
1001bb68:	bc800005 	stb	r18,0(r23)
1001bb6c:	dac01617 	ldw	r11,88(sp)
1001bb70:	102b883a 	mov	r21,r2
1001bb74:	00800044 	movi	r2,1
1001bb78:	bd800044 	addi	r22,r23,1
1001bb7c:	1815883a 	mov	r10,r3
1001bb80:	58802226 	beq	r11,r2,1001bc0c <_dtoa_r+0x1410>
1001bb84:	bad7883a 	add	r11,r23,r11
1001bb88:	dc001415 	stw	r16,80(sp)
1001bb8c:	a805883a 	mov	r2,r21
1001bb90:	b027883a 	mov	r19,r22
1001bb94:	5821883a 	mov	r16,r11
1001bb98:	882b883a 	mov	r21,r17
1001bb9c:	000d883a 	mov	r6,zero
1001bba0:	01d00934 	movhi	r7,16420
1001bba4:	1009883a 	mov	r4,r2
1001bba8:	180b883a 	mov	r5,r3
1001bbac:	001ec3c0 	call	1001ec3c <__muldf3>
1001bbb0:	180b883a 	mov	r5,r3
1001bbb4:	1009883a 	mov	r4,r2
1001bbb8:	1829883a 	mov	r20,r3
1001bbbc:	1023883a 	mov	r17,r2
1001bbc0:	001f3840 	call	1001f384 <__fixdfsi>
1001bbc4:	1009883a 	mov	r4,r2
1001bbc8:	1025883a 	mov	r18,r2
1001bbcc:	001f2b00 	call	1001f2b0 <__floatsidf>
1001bbd0:	8809883a 	mov	r4,r17
1001bbd4:	a00b883a 	mov	r5,r20
1001bbd8:	100d883a 	mov	r6,r2
1001bbdc:	180f883a 	mov	r7,r3
1001bbe0:	94800c04 	addi	r18,r18,48
1001bbe4:	001ebdc0 	call	1001ebdc <__subdf3>
1001bbe8:	9cc00044 	addi	r19,r19,1
1001bbec:	9cbfffc5 	stb	r18,-1(r19)
1001bbf0:	9c3fea1e 	bne	r19,r16,1001bb9c <__alt_data_end+0xf801bb9c>
1001bbf4:	1815883a 	mov	r10,r3
1001bbf8:	d8c01017 	ldw	r3,64(sp)
1001bbfc:	dc001417 	ldw	r16,80(sp)
1001bc00:	a823883a 	mov	r17,r21
1001bc04:	b0ed883a 	add	r22,r22,r3
1001bc08:	102b883a 	mov	r21,r2
1001bc0c:	d9001117 	ldw	r4,68(sp)
1001bc10:	d9401217 	ldw	r5,72(sp)
1001bc14:	000d883a 	mov	r6,zero
1001bc18:	01cff834 	movhi	r7,16352
1001bc1c:	da801515 	stw	r10,84(sp)
1001bc20:	001eb880 	call	1001eb88 <__adddf3>
1001bc24:	da801517 	ldw	r10,84(sp)
1001bc28:	1009883a 	mov	r4,r2
1001bc2c:	180b883a 	mov	r5,r3
1001bc30:	500f883a 	mov	r7,r10
1001bc34:	a80d883a 	mov	r6,r21
1001bc38:	001f2540 	call	1001f254 <__ltdf2>
1001bc3c:	da801517 	ldw	r10,84(sp)
1001bc40:	10003b0e 	bge	r2,zero,1001bd30 <_dtoa_r+0x1534>
1001bc44:	d9c01317 	ldw	r7,76(sp)
1001bc48:	b53fffc3 	ldbu	r20,-1(r22)
1001bc4c:	d9c00615 	stw	r7,24(sp)
1001bc50:	003d3106 	br	1001b118 <__alt_data_end+0xf801b118>
1001bc54:	d8800817 	ldw	r2,32(sp)
1001bc58:	11e5c83a 	sub	r18,r2,r7
1001bc5c:	0005883a 	mov	r2,zero
1001bc60:	003d5006 	br	1001b1a4 <__alt_data_end+0xf801b1a4>
1001bc64:	05800044 	movi	r22,1
1001bc68:	003dc406 	br	1001b37c <__alt_data_end+0xf801b37c>
1001bc6c:	a5000044 	addi	r20,r20,1
1001bc70:	15000005 	stb	r20,0(r2)
1001bc74:	003c8206 	br	1001ae80 <__alt_data_end+0xf801ae80>
1001bc78:	d8800217 	ldw	r2,8(sp)
1001bc7c:	00c00d84 	movi	r3,54
1001bc80:	dcc00a17 	ldw	r19,40(sp)
1001bc84:	1885c83a 	sub	r2,r3,r2
1001bc88:	dc800817 	ldw	r18,32(sp)
1001bc8c:	003d4506 	br	1001b1a4 <__alt_data_end+0xf801b1a4>
1001bc90:	dcc00317 	ldw	r19,12(sp)
1001bc94:	8829883a 	mov	r20,r17
1001bc98:	04800084 	movi	r18,2
1001bc9c:	003bea06 	br	1001ac48 <__alt_data_end+0xf801ac48>
1001bca0:	d9000917 	ldw	r4,36(sp)
1001bca4:	203f1126 	beq	r4,zero,1001b8ec <__alt_data_end+0xf801b8ec>
1001bca8:	d9c00e17 	ldw	r7,56(sp)
1001bcac:	01fca20e 	bge	zero,r7,1001af38 <__alt_data_end+0xf801af38>
1001bcb0:	a00b883a 	mov	r5,r20
1001bcb4:	9809883a 	mov	r4,r19
1001bcb8:	000d883a 	mov	r6,zero
1001bcbc:	01d00934 	movhi	r7,16420
1001bcc0:	001ec3c0 	call	1001ec3c <__muldf3>
1001bcc4:	91000044 	addi	r4,r18,1
1001bcc8:	1027883a 	mov	r19,r2
1001bccc:	1829883a 	mov	r20,r3
1001bcd0:	001f2b00 	call	1001f2b0 <__floatsidf>
1001bcd4:	9809883a 	mov	r4,r19
1001bcd8:	a00b883a 	mov	r5,r20
1001bcdc:	100d883a 	mov	r6,r2
1001bce0:	180f883a 	mov	r7,r3
1001bce4:	001ec3c0 	call	1001ec3c <__muldf3>
1001bce8:	1009883a 	mov	r4,r2
1001bcec:	180b883a 	mov	r5,r3
1001bcf0:	000d883a 	mov	r6,zero
1001bcf4:	01d00734 	movhi	r7,16412
1001bcf8:	001eb880 	call	1001eb88 <__adddf3>
1001bcfc:	1025883a 	mov	r18,r2
1001bd00:	d8800617 	ldw	r2,24(sp)
1001bd04:	057f3034 	movhi	r21,64704
1001bd08:	1d6b883a 	add	r21,r3,r21
1001bd0c:	10bfffc4 	addi	r2,r2,-1
1001bd10:	d8801315 	stw	r2,76(sp)
1001bd14:	dac00e17 	ldw	r11,56(sp)
1001bd18:	003be706 	br	1001acb8 <__alt_data_end+0xf801acb8>
1001bd1c:	01000e44 	movi	r4,57
1001bd20:	91000005 	stb	r4,0(r18)
1001bd24:	95800044 	addi	r22,r18,1
1001bd28:	982b883a 	mov	r21,r19
1001bd2c:	003da106 	br	1001b3b4 <__alt_data_end+0xf801b3b4>
1001bd30:	d9801117 	ldw	r6,68(sp)
1001bd34:	d9c01217 	ldw	r7,72(sp)
1001bd38:	0009883a 	mov	r4,zero
1001bd3c:	014ff834 	movhi	r5,16352
1001bd40:	da801515 	stw	r10,84(sp)
1001bd44:	001ebdc0 	call	1001ebdc <__subdf3>
1001bd48:	da801517 	ldw	r10,84(sp)
1001bd4c:	1009883a 	mov	r4,r2
1001bd50:	180b883a 	mov	r5,r3
1001bd54:	a80d883a 	mov	r6,r21
1001bd58:	500f883a 	mov	r7,r10
1001bd5c:	001f18c0 	call	1001f18c <__gtdf2>
1001bd60:	00bc750e 	bge	zero,r2,1001af38 <__alt_data_end+0xf801af38>
1001bd64:	01000c04 	movi	r4,48
1001bd68:	00000106 	br	1001bd70 <_dtoa_r+0x1574>
1001bd6c:	102d883a 	mov	r22,r2
1001bd70:	b0bfffc4 	addi	r2,r22,-1
1001bd74:	10c00007 	ldb	r3,0(r2)
1001bd78:	193ffc26 	beq	r3,r4,1001bd6c <__alt_data_end+0xf801bd6c>
1001bd7c:	d8801317 	ldw	r2,76(sp)
1001bd80:	d8800615 	stw	r2,24(sp)
1001bd84:	003c3e06 	br	1001ae80 <__alt_data_end+0xf801ae80>
1001bd88:	d9001317 	ldw	r4,76(sp)
1001bd8c:	df001117 	ldw	fp,68(sp)
1001bd90:	d9000615 	stw	r4,24(sp)
1001bd94:	003ce006 	br	1001b118 <__alt_data_end+0xf801b118>
1001bd98:	df001117 	ldw	fp,68(sp)
1001bd9c:	dc401217 	ldw	r17,72(sp)
1001bda0:	003c6506 	br	1001af38 <__alt_data_end+0xf801af38>
1001bda4:	103e7a1e 	bne	r2,zero,1001b790 <__alt_data_end+0xf801b790>
1001bda8:	1880004c 	andi	r2,r3,1
1001bdac:	103e7826 	beq	r2,zero,1001b790 <__alt_data_end+0xf801b790>
1001bdb0:	003e7406 	br	1001b784 <__alt_data_end+0xf801b784>
1001bdb4:	8009883a 	mov	r4,r16
1001bdb8:	a80b883a 	mov	r5,r21
1001bdbc:	01800284 	movi	r6,10
1001bdc0:	000f883a 	mov	r7,zero
1001bdc4:	001c79c0 	call	1001c79c <__multadd>
1001bdc8:	d9000e17 	ldw	r4,56(sp)
1001bdcc:	102b883a 	mov	r21,r2
1001bdd0:	d9000915 	stw	r4,36(sp)
1001bdd4:	003d5106 	br	1001b31c <__alt_data_end+0xf801b31c>
1001bdd8:	04800084 	movi	r18,2
1001bddc:	003b9a06 	br	1001ac48 <__alt_data_end+0xf801ac48>
1001bde0:	d8c01317 	ldw	r3,76(sp)
1001bde4:	d8c00615 	stw	r3,24(sp)
1001bde8:	003ccb06 	br	1001b118 <__alt_data_end+0xf801b118>
1001bdec:	d8c01317 	ldw	r3,76(sp)
1001bdf0:	d8c00615 	stw	r3,24(sp)
1001bdf4:	003c2206 	br	1001ae80 <__alt_data_end+0xf801ae80>
1001bdf8:	20fd3826 	beq	r4,r3,1001b2dc <__alt_data_end+0xf801b2dc>
1001bdfc:	00c00f04 	movi	r3,60
1001be00:	1885c83a 	sub	r2,r3,r2
1001be04:	003da906 	br	1001b4ac <__alt_data_end+0xf801b4ac>
1001be08:	000b883a 	mov	r5,zero
1001be0c:	003b5406 	br	1001ab60 <__alt_data_end+0xf801ab60>
1001be10:	04c00044 	movi	r19,1
1001be14:	003b3b06 	br	1001ab04 <__alt_data_end+0xf801ab04>

1001be18 <__sflags>:
1001be18:	28800007 	ldb	r2,0(r5)
1001be1c:	00c01c84 	movi	r3,114
1001be20:	10c01826 	beq	r2,r3,1001be84 <__sflags+0x6c>
1001be24:	00c01dc4 	movi	r3,119
1001be28:	10c01226 	beq	r2,r3,1001be74 <__sflags+0x5c>
1001be2c:	00c01844 	movi	r3,97
1001be30:	10c00426 	beq	r2,r3,1001be44 <__sflags+0x2c>
1001be34:	00800584 	movi	r2,22
1001be38:	20800015 	stw	r2,0(r4)
1001be3c:	0005883a 	mov	r2,zero
1001be40:	f800283a 	ret
1001be44:	01c08204 	movi	r7,520
1001be48:	01000044 	movi	r4,1
1001be4c:	00804204 	movi	r2,264
1001be50:	28c00047 	ldb	r3,1(r5)
1001be54:	18000426 	beq	r3,zero,1001be68 <__sflags+0x50>
1001be58:	02000ac4 	movi	r8,43
1001be5c:	1a000d26 	beq	r3,r8,1001be94 <__sflags+0x7c>
1001be60:	28c00087 	ldb	r3,2(r5)
1001be64:	1a000b26 	beq	r3,r8,1001be94 <__sflags+0x7c>
1001be68:	21c8b03a 	or	r4,r4,r7
1001be6c:	31000015 	stw	r4,0(r6)
1001be70:	f800283a 	ret
1001be74:	01c18004 	movi	r7,1536
1001be78:	01000044 	movi	r4,1
1001be7c:	00800204 	movi	r2,8
1001be80:	003ff306 	br	1001be50 <__alt_data_end+0xf801be50>
1001be84:	000f883a 	mov	r7,zero
1001be88:	0009883a 	mov	r4,zero
1001be8c:	00800104 	movi	r2,4
1001be90:	003fef06 	br	1001be50 <__alt_data_end+0xf801be50>
1001be94:	00fff8c4 	movi	r3,-29
1001be98:	01000084 	movi	r4,2
1001be9c:	10c4703a 	and	r2,r2,r3
1001bea0:	21c8b03a 	or	r4,r4,r7
1001bea4:	10800414 	ori	r2,r2,16
1001bea8:	31000015 	stw	r4,0(r6)
1001beac:	f800283a 	ret

1001beb0 <__sfvwrite_r>:
1001beb0:	30800217 	ldw	r2,8(r6)
1001beb4:	defff504 	addi	sp,sp,-44
1001beb8:	dd400615 	stw	r21,24(sp)
1001bebc:	dd000515 	stw	r20,20(sp)
1001bec0:	dc000115 	stw	r16,4(sp)
1001bec4:	dfc00a15 	stw	ra,40(sp)
1001bec8:	df000915 	stw	fp,36(sp)
1001becc:	ddc00815 	stw	r23,32(sp)
1001bed0:	dd800715 	stw	r22,28(sp)
1001bed4:	dcc00415 	stw	r19,16(sp)
1001bed8:	dc800315 	stw	r18,12(sp)
1001bedc:	dc400215 	stw	r17,8(sp)
1001bee0:	3029883a 	mov	r20,r6
1001bee4:	202b883a 	mov	r21,r4
1001bee8:	2821883a 	mov	r16,r5
1001beec:	10002126 	beq	r2,zero,1001bf74 <__sfvwrite_r+0xc4>
1001bef0:	2880030b 	ldhu	r2,12(r5)
1001bef4:	10c0020c 	andi	r3,r2,8
1001bef8:	18ffffcc 	andi	r3,r3,65535
1001befc:	18e0001c 	xori	r3,r3,32768
1001bf00:	18e00004 	addi	r3,r3,-32768
1001bf04:	18002826 	beq	r3,zero,1001bfa8 <__sfvwrite_r+0xf8>
1001bf08:	28c00417 	ldw	r3,16(r5)
1001bf0c:	18002626 	beq	r3,zero,1001bfa8 <__sfvwrite_r+0xf8>
1001bf10:	10c0008c 	andi	r3,r2,2
1001bf14:	18ffffcc 	andi	r3,r3,65535
1001bf18:	18e0001c 	xori	r3,r3,32768
1001bf1c:	18e00004 	addi	r3,r3,-32768
1001bf20:	a4400017 	ldw	r17,0(r20)
1001bf24:	18002b26 	beq	r3,zero,1001bfd4 <__sfvwrite_r+0x124>
1001bf28:	0027883a 	mov	r19,zero
1001bf2c:	0025883a 	mov	r18,zero
1001bf30:	05810004 	movi	r22,1024
1001bf34:	980d883a 	mov	r6,r19
1001bf38:	a809883a 	mov	r4,r21
1001bf3c:	90004f26 	beq	r18,zero,1001c07c <__sfvwrite_r+0x1cc>
1001bf40:	900f883a 	mov	r7,r18
1001bf44:	81400717 	ldw	r5,28(r16)
1001bf48:	b480012e 	bgeu	r22,r18,1001bf50 <__sfvwrite_r+0xa0>
1001bf4c:	01c10004 	movi	r7,1024
1001bf50:	80800917 	ldw	r2,36(r16)
1001bf54:	103ee83a 	callr	r2
1001bf58:	0080540e 	bge	zero,r2,1001c0ac <__sfvwrite_r+0x1fc>
1001bf5c:	a0c00217 	ldw	r3,8(r20)
1001bf60:	98a7883a 	add	r19,r19,r2
1001bf64:	90a5c83a 	sub	r18,r18,r2
1001bf68:	1885c83a 	sub	r2,r3,r2
1001bf6c:	a0800215 	stw	r2,8(r20)
1001bf70:	103ff01e 	bne	r2,zero,1001bf34 <__alt_data_end+0xf801bf34>
1001bf74:	0005883a 	mov	r2,zero
1001bf78:	dfc00a17 	ldw	ra,40(sp)
1001bf7c:	df000917 	ldw	fp,36(sp)
1001bf80:	ddc00817 	ldw	r23,32(sp)
1001bf84:	dd800717 	ldw	r22,28(sp)
1001bf88:	dd400617 	ldw	r21,24(sp)
1001bf8c:	dd000517 	ldw	r20,20(sp)
1001bf90:	dcc00417 	ldw	r19,16(sp)
1001bf94:	dc800317 	ldw	r18,12(sp)
1001bf98:	dc400217 	ldw	r17,8(sp)
1001bf9c:	dc000117 	ldw	r16,4(sp)
1001bfa0:	dec00b04 	addi	sp,sp,44
1001bfa4:	f800283a 	ret
1001bfa8:	a809883a 	mov	r4,r21
1001bfac:	800b883a 	mov	r5,r16
1001bfb0:	001a3e80 	call	1001a3e8 <__swsetup_r>
1001bfb4:	1000f01e 	bne	r2,zero,1001c378 <__sfvwrite_r+0x4c8>
1001bfb8:	8080030b 	ldhu	r2,12(r16)
1001bfbc:	a4400017 	ldw	r17,0(r20)
1001bfc0:	10c0008c 	andi	r3,r2,2
1001bfc4:	18ffffcc 	andi	r3,r3,65535
1001bfc8:	18e0001c 	xori	r3,r3,32768
1001bfcc:	18e00004 	addi	r3,r3,-32768
1001bfd0:	183fd51e 	bne	r3,zero,1001bf28 <__alt_data_end+0xf801bf28>
1001bfd4:	10c0004c 	andi	r3,r2,1
1001bfd8:	002d883a 	mov	r22,zero
1001bfdc:	1800381e 	bne	r3,zero,1001c0c0 <__sfvwrite_r+0x210>
1001bfe0:	0025883a 	mov	r18,zero
1001bfe4:	90002126 	beq	r18,zero,1001c06c <__sfvwrite_r+0x1bc>
1001bfe8:	10c0800c 	andi	r3,r2,512
1001bfec:	18ffffcc 	andi	r3,r3,65535
1001bff0:	18e0001c 	xori	r3,r3,32768
1001bff4:	18e00004 	addi	r3,r3,-32768
1001bff8:	84c00217 	ldw	r19,8(r16)
1001bffc:	18006b26 	beq	r3,zero,1001c1ac <__sfvwrite_r+0x2fc>
1001c000:	980f883a 	mov	r7,r19
1001c004:	94c08636 	bltu	r18,r19,1001c220 <__sfvwrite_r+0x370>
1001c008:	10c1200c 	andi	r3,r2,1152
1001c00c:	18009f1e 	bne	r3,zero,1001c28c <__sfvwrite_r+0x3dc>
1001c010:	81000017 	ldw	r4,0(r16)
1001c014:	982f883a 	mov	r23,r19
1001c018:	9039883a 	mov	fp,r18
1001c01c:	9027883a 	mov	r19,r18
1001c020:	380d883a 	mov	r6,r7
1001c024:	b00b883a 	mov	r5,r22
1001c028:	d9c00015 	stw	r7,0(sp)
1001c02c:	001c5400 	call	1001c540 <memmove>
1001c030:	d9c00017 	ldw	r7,0(sp)
1001c034:	81000217 	ldw	r4,8(r16)
1001c038:	80800017 	ldw	r2,0(r16)
1001c03c:	25efc83a 	sub	r23,r4,r23
1001c040:	11cf883a 	add	r7,r2,r7
1001c044:	85c00215 	stw	r23,8(r16)
1001c048:	81c00015 	stw	r7,0(r16)
1001c04c:	a0800217 	ldw	r2,8(r20)
1001c050:	b72d883a 	add	r22,r22,fp
1001c054:	9725c83a 	sub	r18,r18,fp
1001c058:	14e7c83a 	sub	r19,r2,r19
1001c05c:	a4c00215 	stw	r19,8(r20)
1001c060:	983fc426 	beq	r19,zero,1001bf74 <__alt_data_end+0xf801bf74>
1001c064:	8080030b 	ldhu	r2,12(r16)
1001c068:	903fdf1e 	bne	r18,zero,1001bfe8 <__alt_data_end+0xf801bfe8>
1001c06c:	8d800017 	ldw	r22,0(r17)
1001c070:	8c800117 	ldw	r18,4(r17)
1001c074:	8c400204 	addi	r17,r17,8
1001c078:	003fda06 	br	1001bfe4 <__alt_data_end+0xf801bfe4>
1001c07c:	8cc00017 	ldw	r19,0(r17)
1001c080:	8c800117 	ldw	r18,4(r17)
1001c084:	8c400204 	addi	r17,r17,8
1001c088:	003faa06 	br	1001bf34 <__alt_data_end+0xf801bf34>
1001c08c:	00179840 	call	10017984 <_realloc_r>
1001c090:	102f883a 	mov	r23,r2
1001c094:	10009f1e 	bne	r2,zero,1001c314 <__sfvwrite_r+0x464>
1001c098:	81400417 	ldw	r5,16(r16)
1001c09c:	a809883a 	mov	r4,r21
1001c0a0:	00158480 	call	10015848 <_free_r>
1001c0a4:	00800304 	movi	r2,12
1001c0a8:	a8800015 	stw	r2,0(r21)
1001c0ac:	80c0030b 	ldhu	r3,12(r16)
1001c0b0:	00bfffc4 	movi	r2,-1
1001c0b4:	18c01014 	ori	r3,r3,64
1001c0b8:	80c0030d 	sth	r3,12(r16)
1001c0bc:	003fae06 	br	1001bf78 <__alt_data_end+0xf801bf78>
1001c0c0:	0007883a 	mov	r3,zero
1001c0c4:	0039883a 	mov	fp,zero
1001c0c8:	0025883a 	mov	r18,zero
1001c0cc:	90001e26 	beq	r18,zero,1001c148 <__sfvwrite_r+0x298>
1001c0d0:	18006526 	beq	r3,zero,1001c268 <__sfvwrite_r+0x3b8>
1001c0d4:	b02f883a 	mov	r23,r22
1001c0d8:	9580012e 	bgeu	r18,r22,1001c0e0 <__sfvwrite_r+0x230>
1001c0dc:	902f883a 	mov	r23,r18
1001c0e0:	81000017 	ldw	r4,0(r16)
1001c0e4:	80800417 	ldw	r2,16(r16)
1001c0e8:	84c00217 	ldw	r19,8(r16)
1001c0ec:	81c00517 	ldw	r7,20(r16)
1001c0f0:	1100022e 	bgeu	r2,r4,1001c0fc <__sfvwrite_r+0x24c>
1001c0f4:	99e7883a 	add	r19,r19,r7
1001c0f8:	9dc01816 	blt	r19,r23,1001c15c <__sfvwrite_r+0x2ac>
1001c0fc:	b9c03b16 	blt	r23,r7,1001c1ec <__sfvwrite_r+0x33c>
1001c100:	80800917 	ldw	r2,36(r16)
1001c104:	81400717 	ldw	r5,28(r16)
1001c108:	a809883a 	mov	r4,r21
1001c10c:	d8c00015 	stw	r3,0(sp)
1001c110:	e00d883a 	mov	r6,fp
1001c114:	103ee83a 	callr	r2
1001c118:	1027883a 	mov	r19,r2
1001c11c:	d8c00017 	ldw	r3,0(sp)
1001c120:	00bfe20e 	bge	zero,r2,1001c0ac <__alt_data_end+0xf801c0ac>
1001c124:	b4edc83a 	sub	r22,r22,r19
1001c128:	b0001a26 	beq	r22,zero,1001c194 <__sfvwrite_r+0x2e4>
1001c12c:	a0800217 	ldw	r2,8(r20)
1001c130:	e4f9883a 	add	fp,fp,r19
1001c134:	94e5c83a 	sub	r18,r18,r19
1001c138:	14e7c83a 	sub	r19,r2,r19
1001c13c:	a4c00215 	stw	r19,8(r20)
1001c140:	983f8c26 	beq	r19,zero,1001bf74 <__alt_data_end+0xf801bf74>
1001c144:	903fe21e 	bne	r18,zero,1001c0d0 <__alt_data_end+0xf801c0d0>
1001c148:	8f000017 	ldw	fp,0(r17)
1001c14c:	8c800117 	ldw	r18,4(r17)
1001c150:	0007883a 	mov	r3,zero
1001c154:	8c400204 	addi	r17,r17,8
1001c158:	003fdc06 	br	1001c0cc <__alt_data_end+0xf801c0cc>
1001c15c:	e00b883a 	mov	r5,fp
1001c160:	980d883a 	mov	r6,r19
1001c164:	d8c00015 	stw	r3,0(sp)
1001c168:	001c5400 	call	1001c540 <memmove>
1001c16c:	80800017 	ldw	r2,0(r16)
1001c170:	a809883a 	mov	r4,r21
1001c174:	800b883a 	mov	r5,r16
1001c178:	14c5883a 	add	r2,r2,r19
1001c17c:	80800015 	stw	r2,0(r16)
1001c180:	0014ce00 	call	10014ce0 <_fflush_r>
1001c184:	d8c00017 	ldw	r3,0(sp)
1001c188:	103fc81e 	bne	r2,zero,1001c0ac <__alt_data_end+0xf801c0ac>
1001c18c:	b4edc83a 	sub	r22,r22,r19
1001c190:	b03fe61e 	bne	r22,zero,1001c12c <__alt_data_end+0xf801c12c>
1001c194:	a809883a 	mov	r4,r21
1001c198:	800b883a 	mov	r5,r16
1001c19c:	0014ce00 	call	10014ce0 <_fflush_r>
1001c1a0:	103fc21e 	bne	r2,zero,1001c0ac <__alt_data_end+0xf801c0ac>
1001c1a4:	0007883a 	mov	r3,zero
1001c1a8:	003fe006 	br	1001c12c <__alt_data_end+0xf801c12c>
1001c1ac:	81000017 	ldw	r4,0(r16)
1001c1b0:	80800417 	ldw	r2,16(r16)
1001c1b4:	1100022e 	bgeu	r2,r4,1001c1c0 <__sfvwrite_r+0x310>
1001c1b8:	9839883a 	mov	fp,r19
1001c1bc:	9c806036 	bltu	r19,r18,1001c340 <__sfvwrite_r+0x490>
1001c1c0:	81c00517 	ldw	r7,20(r16)
1001c1c4:	91c01c36 	bltu	r18,r7,1001c238 <__sfvwrite_r+0x388>
1001c1c8:	80800917 	ldw	r2,36(r16)
1001c1cc:	81400717 	ldw	r5,28(r16)
1001c1d0:	a809883a 	mov	r4,r21
1001c1d4:	b00d883a 	mov	r6,r22
1001c1d8:	103ee83a 	callr	r2
1001c1dc:	1027883a 	mov	r19,r2
1001c1e0:	00bfb20e 	bge	zero,r2,1001c0ac <__alt_data_end+0xf801c0ac>
1001c1e4:	1039883a 	mov	fp,r2
1001c1e8:	003f9806 	br	1001c04c <__alt_data_end+0xf801c04c>
1001c1ec:	b80d883a 	mov	r6,r23
1001c1f0:	e00b883a 	mov	r5,fp
1001c1f4:	d8c00015 	stw	r3,0(sp)
1001c1f8:	001c5400 	call	1001c540 <memmove>
1001c1fc:	80800217 	ldw	r2,8(r16)
1001c200:	81000017 	ldw	r4,0(r16)
1001c204:	b827883a 	mov	r19,r23
1001c208:	15c5c83a 	sub	r2,r2,r23
1001c20c:	25ef883a 	add	r23,r4,r23
1001c210:	80800215 	stw	r2,8(r16)
1001c214:	85c00015 	stw	r23,0(r16)
1001c218:	d8c00017 	ldw	r3,0(sp)
1001c21c:	003fc106 	br	1001c124 <__alt_data_end+0xf801c124>
1001c220:	81000017 	ldw	r4,0(r16)
1001c224:	902f883a 	mov	r23,r18
1001c228:	9039883a 	mov	fp,r18
1001c22c:	9027883a 	mov	r19,r18
1001c230:	900f883a 	mov	r7,r18
1001c234:	003f7a06 	br	1001c020 <__alt_data_end+0xf801c020>
1001c238:	b00b883a 	mov	r5,r22
1001c23c:	900d883a 	mov	r6,r18
1001c240:	001c5400 	call	1001c540 <memmove>
1001c244:	80c00217 	ldw	r3,8(r16)
1001c248:	80800017 	ldw	r2,0(r16)
1001c24c:	9027883a 	mov	r19,r18
1001c250:	1c87c83a 	sub	r3,r3,r18
1001c254:	1485883a 	add	r2,r2,r18
1001c258:	80c00215 	stw	r3,8(r16)
1001c25c:	80800015 	stw	r2,0(r16)
1001c260:	9039883a 	mov	fp,r18
1001c264:	003f7906 	br	1001c04c <__alt_data_end+0xf801c04c>
1001c268:	e009883a 	mov	r4,fp
1001c26c:	01400284 	movi	r5,10
1001c270:	900d883a 	mov	r6,r18
1001c274:	0016ce00 	call	10016ce0 <memchr>
1001c278:	10003c26 	beq	r2,zero,1001c36c <__sfvwrite_r+0x4bc>
1001c27c:	15800044 	addi	r22,r2,1
1001c280:	b72dc83a 	sub	r22,r22,fp
1001c284:	00c00044 	movi	r3,1
1001c288:	003f9206 	br	1001c0d4 <__alt_data_end+0xf801c0d4>
1001c28c:	81000517 	ldw	r4,20(r16)
1001c290:	81400417 	ldw	r5,16(r16)
1001c294:	80c00017 	ldw	r3,0(r16)
1001c298:	210d883a 	add	r6,r4,r4
1001c29c:	3109883a 	add	r4,r6,r4
1001c2a0:	2026d7fa 	srli	r19,r4,31
1001c2a4:	1979c83a 	sub	fp,r3,r5
1001c2a8:	e1800044 	addi	r6,fp,1
1001c2ac:	9909883a 	add	r4,r19,r4
1001c2b0:	2027d07a 	srai	r19,r4,1
1001c2b4:	3489883a 	add	r4,r6,r18
1001c2b8:	980d883a 	mov	r6,r19
1001c2bc:	9900022e 	bgeu	r19,r4,1001c2c8 <__sfvwrite_r+0x418>
1001c2c0:	2027883a 	mov	r19,r4
1001c2c4:	200d883a 	mov	r6,r4
1001c2c8:	1081000c 	andi	r2,r2,1024
1001c2cc:	10bfffcc 	andi	r2,r2,65535
1001c2d0:	10a0001c 	xori	r2,r2,32768
1001c2d4:	10a00004 	addi	r2,r2,-32768
1001c2d8:	a809883a 	mov	r4,r21
1001c2dc:	103f6b26 	beq	r2,zero,1001c08c <__alt_data_end+0xf801c08c>
1001c2e0:	300b883a 	mov	r5,r6
1001c2e4:	001655c0 	call	1001655c <_malloc_r>
1001c2e8:	102f883a 	mov	r23,r2
1001c2ec:	103f6d26 	beq	r2,zero,1001c0a4 <__alt_data_end+0xf801c0a4>
1001c2f0:	81400417 	ldw	r5,16(r16)
1001c2f4:	1009883a 	mov	r4,r2
1001c2f8:	e00d883a 	mov	r6,fp
1001c2fc:	0016dd80 	call	10016dd8 <memcpy>
1001c300:	8080030b 	ldhu	r2,12(r16)
1001c304:	00fedfc4 	movi	r3,-1153
1001c308:	10c4703a 	and	r2,r2,r3
1001c30c:	10802014 	ori	r2,r2,128
1001c310:	8080030d 	sth	r2,12(r16)
1001c314:	bf09883a 	add	r4,r23,fp
1001c318:	9f07c83a 	sub	r3,r19,fp
1001c31c:	85c00415 	stw	r23,16(r16)
1001c320:	84c00515 	stw	r19,20(r16)
1001c324:	81000015 	stw	r4,0(r16)
1001c328:	902f883a 	mov	r23,r18
1001c32c:	80c00215 	stw	r3,8(r16)
1001c330:	9039883a 	mov	fp,r18
1001c334:	9027883a 	mov	r19,r18
1001c338:	900f883a 	mov	r7,r18
1001c33c:	003f3806 	br	1001c020 <__alt_data_end+0xf801c020>
1001c340:	b00b883a 	mov	r5,r22
1001c344:	980d883a 	mov	r6,r19
1001c348:	001c5400 	call	1001c540 <memmove>
1001c34c:	80800017 	ldw	r2,0(r16)
1001c350:	a809883a 	mov	r4,r21
1001c354:	800b883a 	mov	r5,r16
1001c358:	14c5883a 	add	r2,r2,r19
1001c35c:	80800015 	stw	r2,0(r16)
1001c360:	0014ce00 	call	10014ce0 <_fflush_r>
1001c364:	103f3926 	beq	r2,zero,1001c04c <__alt_data_end+0xf801c04c>
1001c368:	003f5006 	br	1001c0ac <__alt_data_end+0xf801c0ac>
1001c36c:	95800044 	addi	r22,r18,1
1001c370:	00c00044 	movi	r3,1
1001c374:	003f5706 	br	1001c0d4 <__alt_data_end+0xf801c0d4>
1001c378:	80c0030b 	ldhu	r3,12(r16)
1001c37c:	00bfffc4 	movi	r2,-1
1001c380:	18c01014 	ori	r3,r3,64
1001c384:	80c0030d 	sth	r3,12(r16)
1001c388:	00c00244 	movi	r3,9
1001c38c:	a8c00015 	stw	r3,0(r21)
1001c390:	003ef906 	br	1001bf78 <__alt_data_end+0xf801bf78>

1001c394 <_isatty_r>:
1001c394:	defffd04 	addi	sp,sp,-12
1001c398:	dc400115 	stw	r17,4(sp)
1001c39c:	dc000015 	stw	r16,0(sp)
1001c3a0:	2023883a 	mov	r17,r4
1001c3a4:	040400b4 	movhi	r16,4098
1001c3a8:	841ec604 	addi	r16,r16,31512
1001c3ac:	2809883a 	mov	r4,r5
1001c3b0:	dfc00215 	stw	ra,8(sp)
1001c3b4:	80000015 	stw	zero,0(r16)
1001c3b8:	001fc7c0 	call	1001fc7c <isatty>
1001c3bc:	00ffffc4 	movi	r3,-1
1001c3c0:	10c00526 	beq	r2,r3,1001c3d8 <_isatty_r+0x44>
1001c3c4:	dfc00217 	ldw	ra,8(sp)
1001c3c8:	dc400117 	ldw	r17,4(sp)
1001c3cc:	dc000017 	ldw	r16,0(sp)
1001c3d0:	dec00304 	addi	sp,sp,12
1001c3d4:	f800283a 	ret
1001c3d8:	80c00017 	ldw	r3,0(r16)
1001c3dc:	183ff926 	beq	r3,zero,1001c3c4 <__alt_data_end+0xf801c3c4>
1001c3e0:	88c00015 	stw	r3,0(r17)
1001c3e4:	dfc00217 	ldw	ra,8(sp)
1001c3e8:	dc400117 	ldw	r17,4(sp)
1001c3ec:	dc000017 	ldw	r16,0(sp)
1001c3f0:	dec00304 	addi	sp,sp,12
1001c3f4:	f800283a 	ret

1001c3f8 <_setlocale_r>:
1001c3f8:	defffc04 	addi	sp,sp,-16
1001c3fc:	dc800215 	stw	r18,8(sp)
1001c400:	dc400115 	stw	r17,4(sp)
1001c404:	dc000015 	stw	r16,0(sp)
1001c408:	dfc00315 	stw	ra,12(sp)
1001c40c:	3021883a 	mov	r16,r6
1001c410:	2023883a 	mov	r17,r4
1001c414:	2825883a 	mov	r18,r5
1001c418:	30001626 	beq	r6,zero,1001c474 <_setlocale_r+0x7c>
1001c41c:	3009883a 	mov	r4,r6
1001c420:	014400b4 	movhi	r5,4098
1001c424:	294ecd04 	addi	r5,r5,15156
1001c428:	00183780 	call	10018378 <strcmp>
1001c42c:	10000a1e 	bne	r2,zero,1001c458 <_setlocale_r+0x60>
1001c430:	8c800c15 	stw	r18,48(r17)
1001c434:	8c000d15 	stw	r16,52(r17)
1001c438:	008400b4 	movhi	r2,4098
1001c43c:	108ecd04 	addi	r2,r2,15156
1001c440:	dfc00317 	ldw	ra,12(sp)
1001c444:	dc800217 	ldw	r18,8(sp)
1001c448:	dc400117 	ldw	r17,4(sp)
1001c44c:	dc000017 	ldw	r16,0(sp)
1001c450:	dec00404 	addi	sp,sp,16
1001c454:	f800283a 	ret
1001c458:	8009883a 	mov	r4,r16
1001c45c:	014400b4 	movhi	r5,4098
1001c460:	294ed704 	addi	r5,r5,15196
1001c464:	00183780 	call	10018378 <strcmp>
1001c468:	103ff126 	beq	r2,zero,1001c430 <__alt_data_end+0xf801c430>
1001c46c:	0005883a 	mov	r2,zero
1001c470:	003ff306 	br	1001c440 <__alt_data_end+0xf801c440>
1001c474:	008400b4 	movhi	r2,4098
1001c478:	108ecd04 	addi	r2,r2,15156
1001c47c:	dfc00317 	ldw	ra,12(sp)
1001c480:	dc800217 	ldw	r18,8(sp)
1001c484:	dc400117 	ldw	r17,4(sp)
1001c488:	dc000017 	ldw	r16,0(sp)
1001c48c:	dec00404 	addi	sp,sp,16
1001c490:	f800283a 	ret

1001c494 <__locale_charset>:
1001c494:	008400b4 	movhi	r2,4098
1001c498:	108eec04 	addi	r2,r2,15280
1001c49c:	f800283a 	ret

1001c4a0 <_localeconv_r>:
1001c4a0:	008400b4 	movhi	r2,4098
1001c4a4:	108ef004 	addi	r2,r2,15296
1001c4a8:	f800283a 	ret

1001c4ac <setlocale>:
1001c4ac:	00c400b4 	movhi	r3,4098
1001c4b0:	18d6f004 	addi	r3,r3,23488
1001c4b4:	2005883a 	mov	r2,r4
1001c4b8:	19000017 	ldw	r4,0(r3)
1001c4bc:	280d883a 	mov	r6,r5
1001c4c0:	100b883a 	mov	r5,r2
1001c4c4:	001c3f81 	jmpi	1001c3f8 <_setlocale_r>

1001c4c8 <localeconv>:
1001c4c8:	008400b4 	movhi	r2,4098
1001c4cc:	108ef004 	addi	r2,r2,15296
1001c4d0:	f800283a 	ret

1001c4d4 <_lseek_r>:
1001c4d4:	defffd04 	addi	sp,sp,-12
1001c4d8:	dc400115 	stw	r17,4(sp)
1001c4dc:	dc000015 	stw	r16,0(sp)
1001c4e0:	2023883a 	mov	r17,r4
1001c4e4:	040400b4 	movhi	r16,4098
1001c4e8:	841ec604 	addi	r16,r16,31512
1001c4ec:	2809883a 	mov	r4,r5
1001c4f0:	300b883a 	mov	r5,r6
1001c4f4:	380d883a 	mov	r6,r7
1001c4f8:	dfc00215 	stw	ra,8(sp)
1001c4fc:	80000015 	stw	zero,0(r16)
1001c500:	001fe5c0 	call	1001fe5c <lseek>
1001c504:	00ffffc4 	movi	r3,-1
1001c508:	10c00526 	beq	r2,r3,1001c520 <_lseek_r+0x4c>
1001c50c:	dfc00217 	ldw	ra,8(sp)
1001c510:	dc400117 	ldw	r17,4(sp)
1001c514:	dc000017 	ldw	r16,0(sp)
1001c518:	dec00304 	addi	sp,sp,12
1001c51c:	f800283a 	ret
1001c520:	80c00017 	ldw	r3,0(r16)
1001c524:	183ff926 	beq	r3,zero,1001c50c <__alt_data_end+0xf801c50c>
1001c528:	88c00015 	stw	r3,0(r17)
1001c52c:	dfc00217 	ldw	ra,8(sp)
1001c530:	dc400117 	ldw	r17,4(sp)
1001c534:	dc000017 	ldw	r16,0(sp)
1001c538:	dec00304 	addi	sp,sp,12
1001c53c:	f800283a 	ret

1001c540 <memmove>:
1001c540:	defffb04 	addi	sp,sp,-20
1001c544:	dc000015 	stw	r16,0(sp)
1001c548:	dfc00415 	stw	ra,16(sp)
1001c54c:	dcc00315 	stw	r19,12(sp)
1001c550:	dc800215 	stw	r18,8(sp)
1001c554:	dc400115 	stw	r17,4(sp)
1001c558:	2021883a 	mov	r16,r4
1001c55c:	300f883a 	mov	r7,r6
1001c560:	2900122e 	bgeu	r5,r4,1001c5ac <memmove+0x6c>
1001c564:	2987883a 	add	r3,r5,r6
1001c568:	20c0102e 	bgeu	r4,r3,1001c5ac <memmove+0x6c>
1001c56c:	218b883a 	add	r5,r4,r6
1001c570:	1989c83a 	sub	r4,r3,r6
1001c574:	30000526 	beq	r6,zero,1001c58c <memmove+0x4c>
1001c578:	18ffffc4 	addi	r3,r3,-1
1001c57c:	18800003 	ldbu	r2,0(r3)
1001c580:	297fffc4 	addi	r5,r5,-1
1001c584:	28800005 	stb	r2,0(r5)
1001c588:	193ffb1e 	bne	r3,r4,1001c578 <__alt_data_end+0xf801c578>
1001c58c:	8005883a 	mov	r2,r16
1001c590:	dfc00417 	ldw	ra,16(sp)
1001c594:	dcc00317 	ldw	r19,12(sp)
1001c598:	dc800217 	ldw	r18,8(sp)
1001c59c:	dc400117 	ldw	r17,4(sp)
1001c5a0:	dc000017 	ldw	r16,0(sp)
1001c5a4:	dec00504 	addi	sp,sp,20
1001c5a8:	f800283a 	ret
1001c5ac:	008003c4 	movi	r2,15
1001c5b0:	1180422e 	bgeu	r2,r6,1001c6bc <memmove+0x17c>
1001c5b4:	2c04b03a 	or	r2,r5,r16
1001c5b8:	108000cc 	andi	r2,r2,3
1001c5bc:	10003f1e 	bne	r2,zero,1001c6bc <memmove+0x17c>
1001c5c0:	32bffc04 	addi	r10,r6,-16
1001c5c4:	5014d13a 	srli	r10,r10,4
1001c5c8:	81000404 	addi	r4,r16,16
1001c5cc:	8007883a 	mov	r3,r16
1001c5d0:	5004913a 	slli	r2,r10,4
1001c5d4:	280f883a 	mov	r7,r5
1001c5d8:	2089883a 	add	r4,r4,r2
1001c5dc:	38800017 	ldw	r2,0(r7)
1001c5e0:	18c00404 	addi	r3,r3,16
1001c5e4:	39c00404 	addi	r7,r7,16
1001c5e8:	18bffc15 	stw	r2,-16(r3)
1001c5ec:	38bffd17 	ldw	r2,-12(r7)
1001c5f0:	18bffd15 	stw	r2,-12(r3)
1001c5f4:	38bffe17 	ldw	r2,-8(r7)
1001c5f8:	18bffe15 	stw	r2,-8(r3)
1001c5fc:	38bfff17 	ldw	r2,-4(r7)
1001c600:	18bfff15 	stw	r2,-4(r3)
1001c604:	193ff51e 	bne	r3,r4,1001c5dc <__alt_data_end+0xf801c5dc>
1001c608:	52800044 	addi	r10,r10,1
1001c60c:	5014913a 	slli	r10,r10,4
1001c610:	31c003cc 	andi	r7,r6,15
1001c614:	008000c4 	movi	r2,3
1001c618:	8287883a 	add	r3,r16,r10
1001c61c:	2a95883a 	add	r10,r5,r10
1001c620:	11c0282e 	bgeu	r2,r7,1001c6c4 <memmove+0x184>
1001c624:	3c7fff04 	addi	r17,r7,-4
1001c628:	8808d0ba 	srli	r4,r17,2
1001c62c:	1a400104 	addi	r9,r3,4
1001c630:	180d883a 	mov	r6,r3
1001c634:	2105883a 	add	r2,r4,r4
1001c638:	1085883a 	add	r2,r2,r2
1001c63c:	4893883a 	add	r9,r9,r2
1001c640:	5005883a 	mov	r2,r10
1001c644:	12000017 	ldw	r8,0(r2)
1001c648:	31800104 	addi	r6,r6,4
1001c64c:	10800104 	addi	r2,r2,4
1001c650:	323fff15 	stw	r8,-4(r6)
1001c654:	327ffb1e 	bne	r6,r9,1001c644 <__alt_data_end+0xf801c644>
1001c658:	20800044 	addi	r2,r4,1
1001c65c:	1085883a 	add	r2,r2,r2
1001c660:	1085883a 	add	r2,r2,r2
1001c664:	017fff04 	movi	r5,-4
1001c668:	18a5883a 	add	r18,r3,r2
1001c66c:	50a7883a 	add	r19,r10,r2
1001c670:	00146fc0 	call	100146fc <__mulsi3>
1001c674:	144f883a 	add	r7,r2,r17
1001c678:	980b883a 	mov	r5,r19
1001c67c:	9007883a 	mov	r3,r18
1001c680:	383fc226 	beq	r7,zero,1001c58c <__alt_data_end+0xf801c58c>
1001c684:	19cf883a 	add	r7,r3,r7
1001c688:	29800003 	ldbu	r6,0(r5)
1001c68c:	18c00044 	addi	r3,r3,1
1001c690:	29400044 	addi	r5,r5,1
1001c694:	19bfffc5 	stb	r6,-1(r3)
1001c698:	19fffb1e 	bne	r3,r7,1001c688 <__alt_data_end+0xf801c688>
1001c69c:	8005883a 	mov	r2,r16
1001c6a0:	dfc00417 	ldw	ra,16(sp)
1001c6a4:	dcc00317 	ldw	r19,12(sp)
1001c6a8:	dc800217 	ldw	r18,8(sp)
1001c6ac:	dc400117 	ldw	r17,4(sp)
1001c6b0:	dc000017 	ldw	r16,0(sp)
1001c6b4:	dec00504 	addi	sp,sp,20
1001c6b8:	f800283a 	ret
1001c6bc:	8007883a 	mov	r3,r16
1001c6c0:	003fef06 	br	1001c680 <__alt_data_end+0xf801c680>
1001c6c4:	500b883a 	mov	r5,r10
1001c6c8:	003fed06 	br	1001c680 <__alt_data_end+0xf801c680>

1001c6cc <_Balloc>:
1001c6cc:	20801317 	ldw	r2,76(r4)
1001c6d0:	defffc04 	addi	sp,sp,-16
1001c6d4:	dc400115 	stw	r17,4(sp)
1001c6d8:	dc000015 	stw	r16,0(sp)
1001c6dc:	dfc00315 	stw	ra,12(sp)
1001c6e0:	dc800215 	stw	r18,8(sp)
1001c6e4:	2023883a 	mov	r17,r4
1001c6e8:	2821883a 	mov	r16,r5
1001c6ec:	10000f26 	beq	r2,zero,1001c72c <_Balloc+0x60>
1001c6f0:	8407883a 	add	r3,r16,r16
1001c6f4:	18c7883a 	add	r3,r3,r3
1001c6f8:	10c7883a 	add	r3,r2,r3
1001c6fc:	18800017 	ldw	r2,0(r3)
1001c700:	10001126 	beq	r2,zero,1001c748 <_Balloc+0x7c>
1001c704:	11000017 	ldw	r4,0(r2)
1001c708:	19000015 	stw	r4,0(r3)
1001c70c:	10000415 	stw	zero,16(r2)
1001c710:	10000315 	stw	zero,12(r2)
1001c714:	dfc00317 	ldw	ra,12(sp)
1001c718:	dc800217 	ldw	r18,8(sp)
1001c71c:	dc400117 	ldw	r17,4(sp)
1001c720:	dc000017 	ldw	r16,0(sp)
1001c724:	dec00404 	addi	sp,sp,16
1001c728:	f800283a 	ret
1001c72c:	01400104 	movi	r5,4
1001c730:	01800404 	movi	r6,16
1001c734:	001daf00 	call	1001daf0 <_calloc_r>
1001c738:	88801315 	stw	r2,76(r17)
1001c73c:	103fec1e 	bne	r2,zero,1001c6f0 <__alt_data_end+0xf801c6f0>
1001c740:	0005883a 	mov	r2,zero
1001c744:	003ff306 	br	1001c714 <__alt_data_end+0xf801c714>
1001c748:	01400044 	movi	r5,1
1001c74c:	2c24983a 	sll	r18,r5,r16
1001c750:	8809883a 	mov	r4,r17
1001c754:	91800144 	addi	r6,r18,5
1001c758:	318d883a 	add	r6,r6,r6
1001c75c:	318d883a 	add	r6,r6,r6
1001c760:	001daf00 	call	1001daf0 <_calloc_r>
1001c764:	103ff626 	beq	r2,zero,1001c740 <__alt_data_end+0xf801c740>
1001c768:	14000115 	stw	r16,4(r2)
1001c76c:	14800215 	stw	r18,8(r2)
1001c770:	003fe606 	br	1001c70c <__alt_data_end+0xf801c70c>

1001c774 <_Bfree>:
1001c774:	28000826 	beq	r5,zero,1001c798 <_Bfree+0x24>
1001c778:	28c00117 	ldw	r3,4(r5)
1001c77c:	20801317 	ldw	r2,76(r4)
1001c780:	18c7883a 	add	r3,r3,r3
1001c784:	18c7883a 	add	r3,r3,r3
1001c788:	10c5883a 	add	r2,r2,r3
1001c78c:	10c00017 	ldw	r3,0(r2)
1001c790:	28c00015 	stw	r3,0(r5)
1001c794:	11400015 	stw	r5,0(r2)
1001c798:	f800283a 	ret

1001c79c <__multadd>:
1001c79c:	defff604 	addi	sp,sp,-40
1001c7a0:	dd400515 	stw	r21,20(sp)
1001c7a4:	2d400417 	ldw	r21,16(r5)
1001c7a8:	df000815 	stw	fp,32(sp)
1001c7ac:	ddc00715 	stw	r23,28(sp)
1001c7b0:	dd800615 	stw	r22,24(sp)
1001c7b4:	dd000415 	stw	r20,16(sp)
1001c7b8:	dc400115 	stw	r17,4(sp)
1001c7bc:	dc000015 	stw	r16,0(sp)
1001c7c0:	dfc00915 	stw	ra,36(sp)
1001c7c4:	dcc00315 	stw	r19,12(sp)
1001c7c8:	dc800215 	stw	r18,8(sp)
1001c7cc:	282d883a 	mov	r22,r5
1001c7d0:	202f883a 	mov	r23,r4
1001c7d4:	3029883a 	mov	r20,r6
1001c7d8:	3839883a 	mov	fp,r7
1001c7dc:	2c000504 	addi	r16,r5,20
1001c7e0:	0023883a 	mov	r17,zero
1001c7e4:	84c00017 	ldw	r19,0(r16)
1001c7e8:	a00b883a 	mov	r5,r20
1001c7ec:	8c400044 	addi	r17,r17,1
1001c7f0:	993fffcc 	andi	r4,r19,65535
1001c7f4:	00146fc0 	call	100146fc <__mulsi3>
1001c7f8:	1725883a 	add	r18,r2,fp
1001c7fc:	9808d43a 	srli	r4,r19,16
1001c800:	9026d43a 	srli	r19,r18,16
1001c804:	a00b883a 	mov	r5,r20
1001c808:	00146fc0 	call	100146fc <__mulsi3>
1001c80c:	988f883a 	add	r7,r19,r2
1001c810:	3804943a 	slli	r2,r7,16
1001c814:	94bfffcc 	andi	r18,r18,65535
1001c818:	3838d43a 	srli	fp,r7,16
1001c81c:	14a5883a 	add	r18,r2,r18
1001c820:	84800015 	stw	r18,0(r16)
1001c824:	84000104 	addi	r16,r16,4
1001c828:	8d7fee16 	blt	r17,r21,1001c7e4 <__alt_data_end+0xf801c7e4>
1001c82c:	e0000926 	beq	fp,zero,1001c854 <__multadd+0xb8>
1001c830:	b0800217 	ldw	r2,8(r22)
1001c834:	a880140e 	bge	r21,r2,1001c888 <__multadd+0xec>
1001c838:	a8800144 	addi	r2,r21,5
1001c83c:	1085883a 	add	r2,r2,r2
1001c840:	1085883a 	add	r2,r2,r2
1001c844:	b085883a 	add	r2,r22,r2
1001c848:	ad400044 	addi	r21,r21,1
1001c84c:	17000015 	stw	fp,0(r2)
1001c850:	b5400415 	stw	r21,16(r22)
1001c854:	b005883a 	mov	r2,r22
1001c858:	dfc00917 	ldw	ra,36(sp)
1001c85c:	df000817 	ldw	fp,32(sp)
1001c860:	ddc00717 	ldw	r23,28(sp)
1001c864:	dd800617 	ldw	r22,24(sp)
1001c868:	dd400517 	ldw	r21,20(sp)
1001c86c:	dd000417 	ldw	r20,16(sp)
1001c870:	dcc00317 	ldw	r19,12(sp)
1001c874:	dc800217 	ldw	r18,8(sp)
1001c878:	dc400117 	ldw	r17,4(sp)
1001c87c:	dc000017 	ldw	r16,0(sp)
1001c880:	dec00a04 	addi	sp,sp,40
1001c884:	f800283a 	ret
1001c888:	b1400117 	ldw	r5,4(r22)
1001c88c:	b809883a 	mov	r4,r23
1001c890:	29400044 	addi	r5,r5,1
1001c894:	001c6cc0 	call	1001c6cc <_Balloc>
1001c898:	b1800417 	ldw	r6,16(r22)
1001c89c:	b1400304 	addi	r5,r22,12
1001c8a0:	11000304 	addi	r4,r2,12
1001c8a4:	31800084 	addi	r6,r6,2
1001c8a8:	318d883a 	add	r6,r6,r6
1001c8ac:	318d883a 	add	r6,r6,r6
1001c8b0:	1021883a 	mov	r16,r2
1001c8b4:	0016dd80 	call	10016dd8 <memcpy>
1001c8b8:	b0c00117 	ldw	r3,4(r22)
1001c8bc:	b8801317 	ldw	r2,76(r23)
1001c8c0:	18c7883a 	add	r3,r3,r3
1001c8c4:	18c7883a 	add	r3,r3,r3
1001c8c8:	10c5883a 	add	r2,r2,r3
1001c8cc:	10c00017 	ldw	r3,0(r2)
1001c8d0:	b0c00015 	stw	r3,0(r22)
1001c8d4:	15800015 	stw	r22,0(r2)
1001c8d8:	802d883a 	mov	r22,r16
1001c8dc:	003fd606 	br	1001c838 <__alt_data_end+0xf801c838>

1001c8e0 <__s2b>:
1001c8e0:	defff904 	addi	sp,sp,-28
1001c8e4:	dd000415 	stw	r20,16(sp)
1001c8e8:	dc400115 	stw	r17,4(sp)
1001c8ec:	2829883a 	mov	r20,r5
1001c8f0:	2023883a 	mov	r17,r4
1001c8f4:	01400244 	movi	r5,9
1001c8f8:	39000204 	addi	r4,r7,8
1001c8fc:	dcc00315 	stw	r19,12(sp)
1001c900:	dc800215 	stw	r18,8(sp)
1001c904:	dfc00615 	stw	ra,24(sp)
1001c908:	dd400515 	stw	r21,20(sp)
1001c90c:	dc000015 	stw	r16,0(sp)
1001c910:	3825883a 	mov	r18,r7
1001c914:	3027883a 	mov	r19,r6
1001c918:	00146400 	call	10014640 <__divsi3>
1001c91c:	00c00044 	movi	r3,1
1001c920:	000b883a 	mov	r5,zero
1001c924:	1880030e 	bge	r3,r2,1001c934 <__s2b+0x54>
1001c928:	18c7883a 	add	r3,r3,r3
1001c92c:	29400044 	addi	r5,r5,1
1001c930:	18bffd16 	blt	r3,r2,1001c928 <__alt_data_end+0xf801c928>
1001c934:	8809883a 	mov	r4,r17
1001c938:	001c6cc0 	call	1001c6cc <_Balloc>
1001c93c:	d8c00717 	ldw	r3,28(sp)
1001c940:	10c00515 	stw	r3,20(r2)
1001c944:	00c00044 	movi	r3,1
1001c948:	10c00415 	stw	r3,16(r2)
1001c94c:	00c00244 	movi	r3,9
1001c950:	1cc0210e 	bge	r3,r19,1001c9d8 <__s2b+0xf8>
1001c954:	a0eb883a 	add	r21,r20,r3
1001c958:	a821883a 	mov	r16,r21
1001c95c:	a4e9883a 	add	r20,r20,r19
1001c960:	81c00007 	ldb	r7,0(r16)
1001c964:	8809883a 	mov	r4,r17
1001c968:	84000044 	addi	r16,r16,1
1001c96c:	100b883a 	mov	r5,r2
1001c970:	01800284 	movi	r6,10
1001c974:	39fff404 	addi	r7,r7,-48
1001c978:	001c79c0 	call	1001c79c <__multadd>
1001c97c:	853ff81e 	bne	r16,r20,1001c960 <__alt_data_end+0xf801c960>
1001c980:	ace1883a 	add	r16,r21,r19
1001c984:	843ffe04 	addi	r16,r16,-8
1001c988:	9c800a0e 	bge	r19,r18,1001c9b4 <__s2b+0xd4>
1001c98c:	94e5c83a 	sub	r18,r18,r19
1001c990:	84a5883a 	add	r18,r16,r18
1001c994:	81c00007 	ldb	r7,0(r16)
1001c998:	8809883a 	mov	r4,r17
1001c99c:	84000044 	addi	r16,r16,1
1001c9a0:	100b883a 	mov	r5,r2
1001c9a4:	01800284 	movi	r6,10
1001c9a8:	39fff404 	addi	r7,r7,-48
1001c9ac:	001c79c0 	call	1001c79c <__multadd>
1001c9b0:	84bff81e 	bne	r16,r18,1001c994 <__alt_data_end+0xf801c994>
1001c9b4:	dfc00617 	ldw	ra,24(sp)
1001c9b8:	dd400517 	ldw	r21,20(sp)
1001c9bc:	dd000417 	ldw	r20,16(sp)
1001c9c0:	dcc00317 	ldw	r19,12(sp)
1001c9c4:	dc800217 	ldw	r18,8(sp)
1001c9c8:	dc400117 	ldw	r17,4(sp)
1001c9cc:	dc000017 	ldw	r16,0(sp)
1001c9d0:	dec00704 	addi	sp,sp,28
1001c9d4:	f800283a 	ret
1001c9d8:	a4000284 	addi	r16,r20,10
1001c9dc:	1827883a 	mov	r19,r3
1001c9e0:	003fe906 	br	1001c988 <__alt_data_end+0xf801c988>

1001c9e4 <__hi0bits>:
1001c9e4:	20bfffec 	andhi	r2,r4,65535
1001c9e8:	1000141e 	bne	r2,zero,1001ca3c <__hi0bits+0x58>
1001c9ec:	2008943a 	slli	r4,r4,16
1001c9f0:	00800404 	movi	r2,16
1001c9f4:	20ffc02c 	andhi	r3,r4,65280
1001c9f8:	1800021e 	bne	r3,zero,1001ca04 <__hi0bits+0x20>
1001c9fc:	2008923a 	slli	r4,r4,8
1001ca00:	10800204 	addi	r2,r2,8
1001ca04:	20fc002c 	andhi	r3,r4,61440
1001ca08:	1800021e 	bne	r3,zero,1001ca14 <__hi0bits+0x30>
1001ca0c:	2008913a 	slli	r4,r4,4
1001ca10:	10800104 	addi	r2,r2,4
1001ca14:	20f0002c 	andhi	r3,r4,49152
1001ca18:	1800031e 	bne	r3,zero,1001ca28 <__hi0bits+0x44>
1001ca1c:	2109883a 	add	r4,r4,r4
1001ca20:	10800084 	addi	r2,r2,2
1001ca24:	2109883a 	add	r4,r4,r4
1001ca28:	20000316 	blt	r4,zero,1001ca38 <__hi0bits+0x54>
1001ca2c:	2110002c 	andhi	r4,r4,16384
1001ca30:	2000041e 	bne	r4,zero,1001ca44 <__hi0bits+0x60>
1001ca34:	00800804 	movi	r2,32
1001ca38:	f800283a 	ret
1001ca3c:	0005883a 	mov	r2,zero
1001ca40:	003fec06 	br	1001c9f4 <__alt_data_end+0xf801c9f4>
1001ca44:	10800044 	addi	r2,r2,1
1001ca48:	f800283a 	ret

1001ca4c <__lo0bits>:
1001ca4c:	20c00017 	ldw	r3,0(r4)
1001ca50:	188001cc 	andi	r2,r3,7
1001ca54:	10000826 	beq	r2,zero,1001ca78 <__lo0bits+0x2c>
1001ca58:	1880004c 	andi	r2,r3,1
1001ca5c:	1000211e 	bne	r2,zero,1001cae4 <__lo0bits+0x98>
1001ca60:	1880008c 	andi	r2,r3,2
1001ca64:	1000211e 	bne	r2,zero,1001caec <__lo0bits+0xa0>
1001ca68:	1806d0ba 	srli	r3,r3,2
1001ca6c:	00800084 	movi	r2,2
1001ca70:	20c00015 	stw	r3,0(r4)
1001ca74:	f800283a 	ret
1001ca78:	18bfffcc 	andi	r2,r3,65535
1001ca7c:	10001326 	beq	r2,zero,1001cacc <__lo0bits+0x80>
1001ca80:	0005883a 	mov	r2,zero
1001ca84:	19403fcc 	andi	r5,r3,255
1001ca88:	2800021e 	bne	r5,zero,1001ca94 <__lo0bits+0x48>
1001ca8c:	1806d23a 	srli	r3,r3,8
1001ca90:	10800204 	addi	r2,r2,8
1001ca94:	194003cc 	andi	r5,r3,15
1001ca98:	2800021e 	bne	r5,zero,1001caa4 <__lo0bits+0x58>
1001ca9c:	1806d13a 	srli	r3,r3,4
1001caa0:	10800104 	addi	r2,r2,4
1001caa4:	194000cc 	andi	r5,r3,3
1001caa8:	2800021e 	bne	r5,zero,1001cab4 <__lo0bits+0x68>
1001caac:	1806d0ba 	srli	r3,r3,2
1001cab0:	10800084 	addi	r2,r2,2
1001cab4:	1940004c 	andi	r5,r3,1
1001cab8:	2800081e 	bne	r5,zero,1001cadc <__lo0bits+0x90>
1001cabc:	1806d07a 	srli	r3,r3,1
1001cac0:	1800051e 	bne	r3,zero,1001cad8 <__lo0bits+0x8c>
1001cac4:	00800804 	movi	r2,32
1001cac8:	f800283a 	ret
1001cacc:	1806d43a 	srli	r3,r3,16
1001cad0:	00800404 	movi	r2,16
1001cad4:	003feb06 	br	1001ca84 <__alt_data_end+0xf801ca84>
1001cad8:	10800044 	addi	r2,r2,1
1001cadc:	20c00015 	stw	r3,0(r4)
1001cae0:	f800283a 	ret
1001cae4:	0005883a 	mov	r2,zero
1001cae8:	f800283a 	ret
1001caec:	1806d07a 	srli	r3,r3,1
1001caf0:	00800044 	movi	r2,1
1001caf4:	20c00015 	stw	r3,0(r4)
1001caf8:	f800283a 	ret

1001cafc <__i2b>:
1001cafc:	defffd04 	addi	sp,sp,-12
1001cb00:	dc000015 	stw	r16,0(sp)
1001cb04:	04000044 	movi	r16,1
1001cb08:	dc400115 	stw	r17,4(sp)
1001cb0c:	2823883a 	mov	r17,r5
1001cb10:	800b883a 	mov	r5,r16
1001cb14:	dfc00215 	stw	ra,8(sp)
1001cb18:	001c6cc0 	call	1001c6cc <_Balloc>
1001cb1c:	14400515 	stw	r17,20(r2)
1001cb20:	14000415 	stw	r16,16(r2)
1001cb24:	dfc00217 	ldw	ra,8(sp)
1001cb28:	dc400117 	ldw	r17,4(sp)
1001cb2c:	dc000017 	ldw	r16,0(sp)
1001cb30:	dec00304 	addi	sp,sp,12
1001cb34:	f800283a 	ret

1001cb38 <__multiply>:
1001cb38:	defff004 	addi	sp,sp,-64
1001cb3c:	dc800815 	stw	r18,32(sp)
1001cb40:	dc400715 	stw	r17,28(sp)
1001cb44:	34800417 	ldw	r18,16(r6)
1001cb48:	2c400417 	ldw	r17,16(r5)
1001cb4c:	ddc00d15 	stw	r23,52(sp)
1001cb50:	dc000615 	stw	r16,24(sp)
1001cb54:	dfc00f15 	stw	ra,60(sp)
1001cb58:	df000e15 	stw	fp,56(sp)
1001cb5c:	dd800c15 	stw	r22,48(sp)
1001cb60:	dd400b15 	stw	r21,44(sp)
1001cb64:	dd000a15 	stw	r20,40(sp)
1001cb68:	dcc00915 	stw	r19,36(sp)
1001cb6c:	2821883a 	mov	r16,r5
1001cb70:	302f883a 	mov	r23,r6
1001cb74:	8c80050e 	bge	r17,r18,1001cb8c <__multiply+0x54>
1001cb78:	8807883a 	mov	r3,r17
1001cb7c:	3021883a 	mov	r16,r6
1001cb80:	9023883a 	mov	r17,r18
1001cb84:	282f883a 	mov	r23,r5
1001cb88:	1825883a 	mov	r18,r3
1001cb8c:	80800217 	ldw	r2,8(r16)
1001cb90:	8c87883a 	add	r3,r17,r18
1001cb94:	d8c00115 	stw	r3,4(sp)
1001cb98:	81400117 	ldw	r5,4(r16)
1001cb9c:	10c0010e 	bge	r2,r3,1001cba4 <__multiply+0x6c>
1001cba0:	29400044 	addi	r5,r5,1
1001cba4:	001c6cc0 	call	1001c6cc <_Balloc>
1001cba8:	d8c00117 	ldw	r3,4(sp)
1001cbac:	d8800515 	stw	r2,20(sp)
1001cbb0:	14c00504 	addi	r19,r2,20
1001cbb4:	1d400144 	addi	r21,r3,5
1001cbb8:	ad6b883a 	add	r21,r21,r21
1001cbbc:	ad6b883a 	add	r21,r21,r21
1001cbc0:	156b883a 	add	r21,r2,r21
1001cbc4:	dd400215 	stw	r21,8(sp)
1001cbc8:	9805883a 	mov	r2,r19
1001cbcc:	9d40042e 	bgeu	r19,r21,1001cbe0 <__multiply+0xa8>
1001cbd0:	d8c00217 	ldw	r3,8(sp)
1001cbd4:	10000015 	stw	zero,0(r2)
1001cbd8:	10800104 	addi	r2,r2,4
1001cbdc:	10fffc36 	bltu	r2,r3,1001cbd0 <__alt_data_end+0xf801cbd0>
1001cbe0:	94800144 	addi	r18,r18,5
1001cbe4:	94a5883a 	add	r18,r18,r18
1001cbe8:	94ad883a 	add	r22,r18,r18
1001cbec:	8c400144 	addi	r17,r17,5
1001cbf0:	8c63883a 	add	r17,r17,r17
1001cbf4:	bdad883a 	add	r22,r23,r22
1001cbf8:	80c00504 	addi	r3,r16,20
1001cbfc:	8c63883a 	add	r17,r17,r17
1001cc00:	bc800504 	addi	r18,r23,20
1001cc04:	dd800315 	stw	r22,12(sp)
1001cc08:	d8c00415 	stw	r3,16(sp)
1001cc0c:	dcc00015 	stw	r19,0(sp)
1001cc10:	8463883a 	add	r17,r16,r17
1001cc14:	9580412e 	bgeu	r18,r22,1001cd1c <__multiply+0x1e4>
1001cc18:	90800017 	ldw	r2,0(r18)
1001cc1c:	173fffcc 	andi	fp,r2,65535
1001cc20:	e0001a26 	beq	fp,zero,1001cc8c <__multiply+0x154>
1001cc24:	dd000017 	ldw	r20,0(sp)
1001cc28:	dd800417 	ldw	r22,16(sp)
1001cc2c:	002b883a 	mov	r21,zero
1001cc30:	b4c00017 	ldw	r19,0(r22)
1001cc34:	a4000017 	ldw	r16,0(r20)
1001cc38:	e00b883a 	mov	r5,fp
1001cc3c:	993fffcc 	andi	r4,r19,65535
1001cc40:	00146fc0 	call	100146fc <__mulsi3>
1001cc44:	9808d43a 	srli	r4,r19,16
1001cc48:	817fffcc 	andi	r5,r16,65535
1001cc4c:	1145883a 	add	r2,r2,r5
1001cc50:	e00b883a 	mov	r5,fp
1001cc54:	1567883a 	add	r19,r2,r21
1001cc58:	8020d43a 	srli	r16,r16,16
1001cc5c:	00146fc0 	call	100146fc <__mulsi3>
1001cc60:	9808d43a 	srli	r4,r19,16
1001cc64:	1405883a 	add	r2,r2,r16
1001cc68:	a4c0000d 	sth	r19,0(r20)
1001cc6c:	110f883a 	add	r7,r2,r4
1001cc70:	a1c0008d 	sth	r7,2(r20)
1001cc74:	b5800104 	addi	r22,r22,4
1001cc78:	382ad43a 	srli	r21,r7,16
1001cc7c:	a5000104 	addi	r20,r20,4
1001cc80:	b47feb36 	bltu	r22,r17,1001cc30 <__alt_data_end+0xf801cc30>
1001cc84:	a5400015 	stw	r21,0(r20)
1001cc88:	90800017 	ldw	r2,0(r18)
1001cc8c:	1038d43a 	srli	fp,r2,16
1001cc90:	e0001c26 	beq	fp,zero,1001cd04 <__multiply+0x1cc>
1001cc94:	d8c00017 	ldw	r3,0(sp)
1001cc98:	dd000417 	ldw	r20,16(sp)
1001cc9c:	002b883a 	mov	r21,zero
1001cca0:	1d800017 	ldw	r22,0(r3)
1001cca4:	182f883a 	mov	r23,r3
1001cca8:	b021883a 	mov	r16,r22
1001ccac:	a4c00017 	ldw	r19,0(r20)
1001ccb0:	8020d43a 	srli	r16,r16,16
1001ccb4:	e00b883a 	mov	r5,fp
1001ccb8:	993fffcc 	andi	r4,r19,65535
1001ccbc:	00146fc0 	call	100146fc <__mulsi3>
1001ccc0:	1405883a 	add	r2,r2,r16
1001ccc4:	9808d43a 	srli	r4,r19,16
1001ccc8:	156b883a 	add	r21,r2,r21
1001cccc:	bdc00104 	addi	r23,r23,4
1001ccd0:	bdbfff0d 	sth	r22,-4(r23)
1001ccd4:	bd7fff8d 	sth	r21,-2(r23)
1001ccd8:	bc000017 	ldw	r16,0(r23)
1001ccdc:	e00b883a 	mov	r5,fp
1001cce0:	00146fc0 	call	100146fc <__mulsi3>
1001cce4:	a80ed43a 	srli	r7,r21,16
1001cce8:	813fffcc 	andi	r4,r16,65535
1001ccec:	2085883a 	add	r2,r4,r2
1001ccf0:	11ed883a 	add	r22,r2,r7
1001ccf4:	a5000104 	addi	r20,r20,4
1001ccf8:	b02ad43a 	srli	r21,r22,16
1001ccfc:	a47feb36 	bltu	r20,r17,1001ccac <__alt_data_end+0xf801ccac>
1001cd00:	bd800015 	stw	r22,0(r23)
1001cd04:	d8c00017 	ldw	r3,0(sp)
1001cd08:	94800104 	addi	r18,r18,4
1001cd0c:	18c00104 	addi	r3,r3,4
1001cd10:	d8c00015 	stw	r3,0(sp)
1001cd14:	d8c00317 	ldw	r3,12(sp)
1001cd18:	90ffbf36 	bltu	r18,r3,1001cc18 <__alt_data_end+0xf801cc18>
1001cd1c:	d8c00117 	ldw	r3,4(sp)
1001cd20:	00c00c0e 	bge	zero,r3,1001cd54 <__multiply+0x21c>
1001cd24:	d8c00217 	ldw	r3,8(sp)
1001cd28:	18bfff17 	ldw	r2,-4(r3)
1001cd2c:	1d7fff04 	addi	r21,r3,-4
1001cd30:	10000326 	beq	r2,zero,1001cd40 <__multiply+0x208>
1001cd34:	00000706 	br	1001cd54 <__multiply+0x21c>
1001cd38:	a8800017 	ldw	r2,0(r21)
1001cd3c:	1000051e 	bne	r2,zero,1001cd54 <__multiply+0x21c>
1001cd40:	d8c00117 	ldw	r3,4(sp)
1001cd44:	ad7fff04 	addi	r21,r21,-4
1001cd48:	18ffffc4 	addi	r3,r3,-1
1001cd4c:	d8c00115 	stw	r3,4(sp)
1001cd50:	183ff91e 	bne	r3,zero,1001cd38 <__alt_data_end+0xf801cd38>
1001cd54:	d8800517 	ldw	r2,20(sp)
1001cd58:	d8c00117 	ldw	r3,4(sp)
1001cd5c:	10c00415 	stw	r3,16(r2)
1001cd60:	dfc00f17 	ldw	ra,60(sp)
1001cd64:	df000e17 	ldw	fp,56(sp)
1001cd68:	ddc00d17 	ldw	r23,52(sp)
1001cd6c:	dd800c17 	ldw	r22,48(sp)
1001cd70:	dd400b17 	ldw	r21,44(sp)
1001cd74:	dd000a17 	ldw	r20,40(sp)
1001cd78:	dcc00917 	ldw	r19,36(sp)
1001cd7c:	dc800817 	ldw	r18,32(sp)
1001cd80:	dc400717 	ldw	r17,28(sp)
1001cd84:	dc000617 	ldw	r16,24(sp)
1001cd88:	dec01004 	addi	sp,sp,64
1001cd8c:	f800283a 	ret

1001cd90 <__pow5mult>:
1001cd90:	defffb04 	addi	sp,sp,-20
1001cd94:	dcc00315 	stw	r19,12(sp)
1001cd98:	dc800215 	stw	r18,8(sp)
1001cd9c:	dc000015 	stw	r16,0(sp)
1001cda0:	dfc00415 	stw	ra,16(sp)
1001cda4:	dc400115 	stw	r17,4(sp)
1001cda8:	308000cc 	andi	r2,r6,3
1001cdac:	3021883a 	mov	r16,r6
1001cdb0:	2027883a 	mov	r19,r4
1001cdb4:	2825883a 	mov	r18,r5
1001cdb8:	10002e1e 	bne	r2,zero,1001ce74 <__pow5mult+0xe4>
1001cdbc:	8021d0ba 	srai	r16,r16,2
1001cdc0:	80001a26 	beq	r16,zero,1001ce2c <__pow5mult+0x9c>
1001cdc4:	9c401217 	ldw	r17,72(r19)
1001cdc8:	8800061e 	bne	r17,zero,1001cde4 <__pow5mult+0x54>
1001cdcc:	00003406 	br	1001cea0 <__pow5mult+0x110>
1001cdd0:	8021d07a 	srai	r16,r16,1
1001cdd4:	80001526 	beq	r16,zero,1001ce2c <__pow5mult+0x9c>
1001cdd8:	88c00017 	ldw	r3,0(r17)
1001cddc:	18001b26 	beq	r3,zero,1001ce4c <__pow5mult+0xbc>
1001cde0:	1823883a 	mov	r17,r3
1001cde4:	80c0004c 	andi	r3,r16,1
1001cde8:	183ff926 	beq	r3,zero,1001cdd0 <__alt_data_end+0xf801cdd0>
1001cdec:	900b883a 	mov	r5,r18
1001cdf0:	880d883a 	mov	r6,r17
1001cdf4:	9809883a 	mov	r4,r19
1001cdf8:	001cb380 	call	1001cb38 <__multiply>
1001cdfc:	90001b26 	beq	r18,zero,1001ce6c <__pow5mult+0xdc>
1001ce00:	91000117 	ldw	r4,4(r18)
1001ce04:	98c01317 	ldw	r3,76(r19)
1001ce08:	8021d07a 	srai	r16,r16,1
1001ce0c:	2109883a 	add	r4,r4,r4
1001ce10:	2109883a 	add	r4,r4,r4
1001ce14:	1907883a 	add	r3,r3,r4
1001ce18:	19000017 	ldw	r4,0(r3)
1001ce1c:	91000015 	stw	r4,0(r18)
1001ce20:	1c800015 	stw	r18,0(r3)
1001ce24:	1025883a 	mov	r18,r2
1001ce28:	803feb1e 	bne	r16,zero,1001cdd8 <__alt_data_end+0xf801cdd8>
1001ce2c:	9005883a 	mov	r2,r18
1001ce30:	dfc00417 	ldw	ra,16(sp)
1001ce34:	dcc00317 	ldw	r19,12(sp)
1001ce38:	dc800217 	ldw	r18,8(sp)
1001ce3c:	dc400117 	ldw	r17,4(sp)
1001ce40:	dc000017 	ldw	r16,0(sp)
1001ce44:	dec00504 	addi	sp,sp,20
1001ce48:	f800283a 	ret
1001ce4c:	880b883a 	mov	r5,r17
1001ce50:	880d883a 	mov	r6,r17
1001ce54:	9809883a 	mov	r4,r19
1001ce58:	001cb380 	call	1001cb38 <__multiply>
1001ce5c:	88800015 	stw	r2,0(r17)
1001ce60:	10000015 	stw	zero,0(r2)
1001ce64:	1023883a 	mov	r17,r2
1001ce68:	003fde06 	br	1001cde4 <__alt_data_end+0xf801cde4>
1001ce6c:	1025883a 	mov	r18,r2
1001ce70:	003fd706 	br	1001cdd0 <__alt_data_end+0xf801cdd0>
1001ce74:	10bfffc4 	addi	r2,r2,-1
1001ce78:	1085883a 	add	r2,r2,r2
1001ce7c:	00c400b4 	movhi	r3,4098
1001ce80:	18cf4204 	addi	r3,r3,15624
1001ce84:	1085883a 	add	r2,r2,r2
1001ce88:	1885883a 	add	r2,r3,r2
1001ce8c:	11800017 	ldw	r6,0(r2)
1001ce90:	000f883a 	mov	r7,zero
1001ce94:	001c79c0 	call	1001c79c <__multadd>
1001ce98:	1025883a 	mov	r18,r2
1001ce9c:	003fc706 	br	1001cdbc <__alt_data_end+0xf801cdbc>
1001cea0:	9809883a 	mov	r4,r19
1001cea4:	01409c44 	movi	r5,625
1001cea8:	001cafc0 	call	1001cafc <__i2b>
1001ceac:	98801215 	stw	r2,72(r19)
1001ceb0:	1023883a 	mov	r17,r2
1001ceb4:	10000015 	stw	zero,0(r2)
1001ceb8:	003fca06 	br	1001cde4 <__alt_data_end+0xf801cde4>

1001cebc <__lshift>:
1001cebc:	defff904 	addi	sp,sp,-28
1001cec0:	dd400515 	stw	r21,20(sp)
1001cec4:	dc400115 	stw	r17,4(sp)
1001cec8:	2d400417 	ldw	r21,16(r5)
1001cecc:	3023d17a 	srai	r17,r6,5
1001ced0:	28800217 	ldw	r2,8(r5)
1001ced4:	dd000415 	stw	r20,16(sp)
1001ced8:	8d6b883a 	add	r21,r17,r21
1001cedc:	dcc00315 	stw	r19,12(sp)
1001cee0:	dc800215 	stw	r18,8(sp)
1001cee4:	dc000015 	stw	r16,0(sp)
1001cee8:	dfc00615 	stw	ra,24(sp)
1001ceec:	ac000044 	addi	r16,r21,1
1001cef0:	2825883a 	mov	r18,r5
1001cef4:	3029883a 	mov	r20,r6
1001cef8:	2027883a 	mov	r19,r4
1001cefc:	29400117 	ldw	r5,4(r5)
1001cf00:	1400030e 	bge	r2,r16,1001cf10 <__lshift+0x54>
1001cf04:	1085883a 	add	r2,r2,r2
1001cf08:	29400044 	addi	r5,r5,1
1001cf0c:	143ffd16 	blt	r2,r16,1001cf04 <__alt_data_end+0xf801cf04>
1001cf10:	9809883a 	mov	r4,r19
1001cf14:	001c6cc0 	call	1001c6cc <_Balloc>
1001cf18:	10c00504 	addi	r3,r2,20
1001cf1c:	0440090e 	bge	zero,r17,1001cf44 <__lshift+0x88>
1001cf20:	000f883a 	mov	r7,zero
1001cf24:	18000015 	stw	zero,0(r3)
1001cf28:	39c00044 	addi	r7,r7,1
1001cf2c:	18c00104 	addi	r3,r3,4
1001cf30:	3c7ffc1e 	bne	r7,r17,1001cf24 <__alt_data_end+0xf801cf24>
1001cf34:	38c00144 	addi	r3,r7,5
1001cf38:	18c7883a 	add	r3,r3,r3
1001cf3c:	18c7883a 	add	r3,r3,r3
1001cf40:	10c7883a 	add	r3,r2,r3
1001cf44:	92000417 	ldw	r8,16(r18)
1001cf48:	a18007cc 	andi	r6,r20,31
1001cf4c:	91c00504 	addi	r7,r18,20
1001cf50:	42000144 	addi	r8,r8,5
1001cf54:	4211883a 	add	r8,r8,r8
1001cf58:	4211883a 	add	r8,r8,r8
1001cf5c:	9211883a 	add	r8,r18,r8
1001cf60:	30002226 	beq	r6,zero,1001cfec <__lshift+0x130>
1001cf64:	02800804 	movi	r10,32
1001cf68:	5195c83a 	sub	r10,r10,r6
1001cf6c:	000b883a 	mov	r5,zero
1001cf70:	3a400017 	ldw	r9,0(r7)
1001cf74:	18c00104 	addi	r3,r3,4
1001cf78:	39c00104 	addi	r7,r7,4
1001cf7c:	4992983a 	sll	r9,r9,r6
1001cf80:	2a4ab03a 	or	r5,r5,r9
1001cf84:	197fff15 	stw	r5,-4(r3)
1001cf88:	397fff17 	ldw	r5,-4(r7)
1001cf8c:	2a8ad83a 	srl	r5,r5,r10
1001cf90:	3a3ff736 	bltu	r7,r8,1001cf70 <__alt_data_end+0xf801cf70>
1001cf94:	19400015 	stw	r5,0(r3)
1001cf98:	28000126 	beq	r5,zero,1001cfa0 <__lshift+0xe4>
1001cf9c:	ac000084 	addi	r16,r21,2
1001cfa0:	91000117 	ldw	r4,4(r18)
1001cfa4:	98c01317 	ldw	r3,76(r19)
1001cfa8:	843fffc4 	addi	r16,r16,-1
1001cfac:	2109883a 	add	r4,r4,r4
1001cfb0:	2109883a 	add	r4,r4,r4
1001cfb4:	1907883a 	add	r3,r3,r4
1001cfb8:	19000017 	ldw	r4,0(r3)
1001cfbc:	14000415 	stw	r16,16(r2)
1001cfc0:	91000015 	stw	r4,0(r18)
1001cfc4:	1c800015 	stw	r18,0(r3)
1001cfc8:	dfc00617 	ldw	ra,24(sp)
1001cfcc:	dd400517 	ldw	r21,20(sp)
1001cfd0:	dd000417 	ldw	r20,16(sp)
1001cfd4:	dcc00317 	ldw	r19,12(sp)
1001cfd8:	dc800217 	ldw	r18,8(sp)
1001cfdc:	dc400117 	ldw	r17,4(sp)
1001cfe0:	dc000017 	ldw	r16,0(sp)
1001cfe4:	dec00704 	addi	sp,sp,28
1001cfe8:	f800283a 	ret
1001cfec:	39400017 	ldw	r5,0(r7)
1001cff0:	18c00104 	addi	r3,r3,4
1001cff4:	39c00104 	addi	r7,r7,4
1001cff8:	197fff15 	stw	r5,-4(r3)
1001cffc:	3a3fe82e 	bgeu	r7,r8,1001cfa0 <__alt_data_end+0xf801cfa0>
1001d000:	39400017 	ldw	r5,0(r7)
1001d004:	18c00104 	addi	r3,r3,4
1001d008:	39c00104 	addi	r7,r7,4
1001d00c:	197fff15 	stw	r5,-4(r3)
1001d010:	3a3ff636 	bltu	r7,r8,1001cfec <__alt_data_end+0xf801cfec>
1001d014:	003fe206 	br	1001cfa0 <__alt_data_end+0xf801cfa0>

1001d018 <__mcmp>:
1001d018:	20800417 	ldw	r2,16(r4)
1001d01c:	28c00417 	ldw	r3,16(r5)
1001d020:	10c5c83a 	sub	r2,r2,r3
1001d024:	10000f1e 	bne	r2,zero,1001d064 <__mcmp+0x4c>
1001d028:	18c00144 	addi	r3,r3,5
1001d02c:	18c7883a 	add	r3,r3,r3
1001d030:	18c7883a 	add	r3,r3,r3
1001d034:	21c00504 	addi	r7,r4,20
1001d038:	28cb883a 	add	r5,r5,r3
1001d03c:	20c9883a 	add	r4,r4,r3
1001d040:	213fff04 	addi	r4,r4,-4
1001d044:	297fff04 	addi	r5,r5,-4
1001d048:	21800017 	ldw	r6,0(r4)
1001d04c:	28c00017 	ldw	r3,0(r5)
1001d050:	30c0021e 	bne	r6,r3,1001d05c <__mcmp+0x44>
1001d054:	393ffa36 	bltu	r7,r4,1001d040 <__alt_data_end+0xf801d040>
1001d058:	f800283a 	ret
1001d05c:	30c00236 	bltu	r6,r3,1001d068 <__mcmp+0x50>
1001d060:	00800044 	movi	r2,1
1001d064:	f800283a 	ret
1001d068:	00bfffc4 	movi	r2,-1
1001d06c:	f800283a 	ret

1001d070 <__mdiff>:
1001d070:	defffb04 	addi	sp,sp,-20
1001d074:	dc000015 	stw	r16,0(sp)
1001d078:	2821883a 	mov	r16,r5
1001d07c:	dc800215 	stw	r18,8(sp)
1001d080:	300b883a 	mov	r5,r6
1001d084:	2025883a 	mov	r18,r4
1001d088:	8009883a 	mov	r4,r16
1001d08c:	dc400115 	stw	r17,4(sp)
1001d090:	dfc00415 	stw	ra,16(sp)
1001d094:	dcc00315 	stw	r19,12(sp)
1001d098:	3023883a 	mov	r17,r6
1001d09c:	001d0180 	call	1001d018 <__mcmp>
1001d0a0:	10005026 	beq	r2,zero,1001d1e4 <__mdiff+0x174>
1001d0a4:	10004a16 	blt	r2,zero,1001d1d0 <__mdiff+0x160>
1001d0a8:	0027883a 	mov	r19,zero
1001d0ac:	81400117 	ldw	r5,4(r16)
1001d0b0:	9009883a 	mov	r4,r18
1001d0b4:	001c6cc0 	call	1001c6cc <_Balloc>
1001d0b8:	82400417 	ldw	r9,16(r16)
1001d0bc:	89800417 	ldw	r6,16(r17)
1001d0c0:	14c00315 	stw	r19,12(r2)
1001d0c4:	4b800144 	addi	r14,r9,5
1001d0c8:	31800144 	addi	r6,r6,5
1001d0cc:	739d883a 	add	r14,r14,r14
1001d0d0:	318d883a 	add	r6,r6,r6
1001d0d4:	739d883a 	add	r14,r14,r14
1001d0d8:	318d883a 	add	r6,r6,r6
1001d0dc:	81c00504 	addi	r7,r16,20
1001d0e0:	839d883a 	add	r14,r16,r14
1001d0e4:	8a000504 	addi	r8,r17,20
1001d0e8:	898d883a 	add	r6,r17,r6
1001d0ec:	10c00504 	addi	r3,r2,20
1001d0f0:	0009883a 	mov	r4,zero
1001d0f4:	3b000017 	ldw	r12,0(r7)
1001d0f8:	42c00017 	ldw	r11,0(r8)
1001d0fc:	42000104 	addi	r8,r8,4
1001d100:	62bfffcc 	andi	r10,r12,65535
1001d104:	5b7fffcc 	andi	r13,r11,65535
1001d108:	5109883a 	add	r4,r10,r4
1001d10c:	2355c83a 	sub	r10,r4,r13
1001d110:	5816d43a 	srli	r11,r11,16
1001d114:	6008d43a 	srli	r4,r12,16
1001d118:	501bd43a 	srai	r13,r10,16
1001d11c:	1a80000d 	sth	r10,0(r3)
1001d120:	22c9c83a 	sub	r4,r4,r11
1001d124:	2349883a 	add	r4,r4,r13
1001d128:	1900008d 	sth	r4,2(r3)
1001d12c:	39c00104 	addi	r7,r7,4
1001d130:	2009d43a 	srai	r4,r4,16
1001d134:	18c00104 	addi	r3,r3,4
1001d138:	41bfee36 	bltu	r8,r6,1001d0f4 <__alt_data_end+0xf801d0f4>
1001d13c:	180b883a 	mov	r5,r3
1001d140:	3815883a 	mov	r10,r7
1001d144:	3b80132e 	bgeu	r7,r14,1001d194 <__mdiff+0x124>
1001d148:	3a000017 	ldw	r8,0(r7)
1001d14c:	18c00104 	addi	r3,r3,4
1001d150:	39c00104 	addi	r7,r7,4
1001d154:	41bfffcc 	andi	r6,r8,65535
1001d158:	310d883a 	add	r6,r6,r4
1001d15c:	3009d43a 	srai	r4,r6,16
1001d160:	4010d43a 	srli	r8,r8,16
1001d164:	19bfff0d 	sth	r6,-4(r3)
1001d168:	2209883a 	add	r4,r4,r8
1001d16c:	193fff8d 	sth	r4,-2(r3)
1001d170:	2009d43a 	srai	r4,r4,16
1001d174:	3bbff436 	bltu	r7,r14,1001d148 <__alt_data_end+0xf801d148>
1001d178:	0286303a 	nor	r3,zero,r10
1001d17c:	1b87883a 	add	r3,r3,r14
1001d180:	1806d0ba 	srli	r3,r3,2
1001d184:	18c00044 	addi	r3,r3,1
1001d188:	18c7883a 	add	r3,r3,r3
1001d18c:	18c7883a 	add	r3,r3,r3
1001d190:	28c7883a 	add	r3,r5,r3
1001d194:	193fff17 	ldw	r4,-4(r3)
1001d198:	18ffff04 	addi	r3,r3,-4
1001d19c:	2000041e 	bne	r4,zero,1001d1b0 <__mdiff+0x140>
1001d1a0:	18ffff04 	addi	r3,r3,-4
1001d1a4:	19000017 	ldw	r4,0(r3)
1001d1a8:	4a7fffc4 	addi	r9,r9,-1
1001d1ac:	203ffc26 	beq	r4,zero,1001d1a0 <__alt_data_end+0xf801d1a0>
1001d1b0:	12400415 	stw	r9,16(r2)
1001d1b4:	dfc00417 	ldw	ra,16(sp)
1001d1b8:	dcc00317 	ldw	r19,12(sp)
1001d1bc:	dc800217 	ldw	r18,8(sp)
1001d1c0:	dc400117 	ldw	r17,4(sp)
1001d1c4:	dc000017 	ldw	r16,0(sp)
1001d1c8:	dec00504 	addi	sp,sp,20
1001d1cc:	f800283a 	ret
1001d1d0:	8005883a 	mov	r2,r16
1001d1d4:	04c00044 	movi	r19,1
1001d1d8:	8821883a 	mov	r16,r17
1001d1dc:	1023883a 	mov	r17,r2
1001d1e0:	003fb206 	br	1001d0ac <__alt_data_end+0xf801d0ac>
1001d1e4:	9009883a 	mov	r4,r18
1001d1e8:	000b883a 	mov	r5,zero
1001d1ec:	001c6cc0 	call	1001c6cc <_Balloc>
1001d1f0:	00c00044 	movi	r3,1
1001d1f4:	10c00415 	stw	r3,16(r2)
1001d1f8:	10000515 	stw	zero,20(r2)
1001d1fc:	dfc00417 	ldw	ra,16(sp)
1001d200:	dcc00317 	ldw	r19,12(sp)
1001d204:	dc800217 	ldw	r18,8(sp)
1001d208:	dc400117 	ldw	r17,4(sp)
1001d20c:	dc000017 	ldw	r16,0(sp)
1001d210:	dec00504 	addi	sp,sp,20
1001d214:	f800283a 	ret

1001d218 <__ulp>:
1001d218:	295ffc2c 	andhi	r5,r5,32752
1001d21c:	00bf3034 	movhi	r2,64704
1001d220:	2887883a 	add	r3,r5,r2
1001d224:	00c0020e 	bge	zero,r3,1001d230 <__ulp+0x18>
1001d228:	0005883a 	mov	r2,zero
1001d22c:	f800283a 	ret
1001d230:	00c7c83a 	sub	r3,zero,r3
1001d234:	1805d53a 	srai	r2,r3,20
1001d238:	00c004c4 	movi	r3,19
1001d23c:	18800a0e 	bge	r3,r2,1001d268 <__ulp+0x50>
1001d240:	01000c84 	movi	r4,50
1001d244:	0007883a 	mov	r3,zero
1001d248:	20800516 	blt	r4,r2,1001d260 <__ulp+0x48>
1001d24c:	01000cc4 	movi	r4,51
1001d250:	2085c83a 	sub	r2,r4,r2
1001d254:	01000044 	movi	r4,1
1001d258:	2084983a 	sll	r2,r4,r2
1001d25c:	f800283a 	ret
1001d260:	00800044 	movi	r2,1
1001d264:	f800283a 	ret
1001d268:	00c00234 	movhi	r3,8
1001d26c:	1887d83a 	sra	r3,r3,r2
1001d270:	0005883a 	mov	r2,zero
1001d274:	f800283a 	ret

1001d278 <__b2d>:
1001d278:	defffa04 	addi	sp,sp,-24
1001d27c:	dc000015 	stw	r16,0(sp)
1001d280:	24000417 	ldw	r16,16(r4)
1001d284:	dc400115 	stw	r17,4(sp)
1001d288:	dcc00315 	stw	r19,12(sp)
1001d28c:	84000144 	addi	r16,r16,5
1001d290:	8421883a 	add	r16,r16,r16
1001d294:	8421883a 	add	r16,r16,r16
1001d298:	2421883a 	add	r16,r4,r16
1001d29c:	847fff17 	ldw	r17,-4(r16)
1001d2a0:	24c00504 	addi	r19,r4,20
1001d2a4:	dd000415 	stw	r20,16(sp)
1001d2a8:	8809883a 	mov	r4,r17
1001d2ac:	dc800215 	stw	r18,8(sp)
1001d2b0:	2829883a 	mov	r20,r5
1001d2b4:	dfc00515 	stw	ra,20(sp)
1001d2b8:	001c9e40 	call	1001c9e4 <__hi0bits>
1001d2bc:	00c00804 	movi	r3,32
1001d2c0:	1887c83a 	sub	r3,r3,r2
1001d2c4:	a0c00015 	stw	r3,0(r20)
1001d2c8:	00c00284 	movi	r3,10
1001d2cc:	84bfff04 	addi	r18,r16,-4
1001d2d0:	18801216 	blt	r3,r2,1001d31c <__b2d+0xa4>
1001d2d4:	010002c4 	movi	r4,11
1001d2d8:	2089c83a 	sub	r4,r4,r2
1001d2dc:	8906d83a 	srl	r3,r17,r4
1001d2e0:	18cffc34 	orhi	r3,r3,16368
1001d2e4:	9c80322e 	bgeu	r19,r18,1001d3b0 <__b2d+0x138>
1001d2e8:	817ffe17 	ldw	r5,-8(r16)
1001d2ec:	2908d83a 	srl	r4,r5,r4
1001d2f0:	10800544 	addi	r2,r2,21
1001d2f4:	88a2983a 	sll	r17,r17,r2
1001d2f8:	2444b03a 	or	r2,r4,r17
1001d2fc:	dfc00517 	ldw	ra,20(sp)
1001d300:	dd000417 	ldw	r20,16(sp)
1001d304:	dcc00317 	ldw	r19,12(sp)
1001d308:	dc800217 	ldw	r18,8(sp)
1001d30c:	dc400117 	ldw	r17,4(sp)
1001d310:	dc000017 	ldw	r16,0(sp)
1001d314:	dec00604 	addi	sp,sp,24
1001d318:	f800283a 	ret
1001d31c:	9c801636 	bltu	r19,r18,1001d378 <__b2d+0x100>
1001d320:	113ffd44 	addi	r4,r2,-11
1001d324:	000b883a 	mov	r5,zero
1001d328:	20001726 	beq	r4,zero,1001d388 <__b2d+0x110>
1001d32c:	00c00ac4 	movi	r3,43
1001d330:	1885c83a 	sub	r2,r3,r2
1001d334:	8906983a 	sll	r3,r17,r4
1001d338:	288cd83a 	srl	r6,r5,r2
1001d33c:	18cffc34 	orhi	r3,r3,16368
1001d340:	1986b03a 	or	r3,r3,r6
1001d344:	9c801c2e 	bgeu	r19,r18,1001d3b8 <__b2d+0x140>
1001d348:	91bfff17 	ldw	r6,-4(r18)
1001d34c:	3084d83a 	srl	r2,r6,r2
1001d350:	2908983a 	sll	r4,r5,r4
1001d354:	1104b03a 	or	r2,r2,r4
1001d358:	dfc00517 	ldw	ra,20(sp)
1001d35c:	dd000417 	ldw	r20,16(sp)
1001d360:	dcc00317 	ldw	r19,12(sp)
1001d364:	dc800217 	ldw	r18,8(sp)
1001d368:	dc400117 	ldw	r17,4(sp)
1001d36c:	dc000017 	ldw	r16,0(sp)
1001d370:	dec00604 	addi	sp,sp,24
1001d374:	f800283a 	ret
1001d378:	113ffd44 	addi	r4,r2,-11
1001d37c:	84bffe04 	addi	r18,r16,-8
1001d380:	817ffe17 	ldw	r5,-8(r16)
1001d384:	203fe91e 	bne	r4,zero,1001d32c <__alt_data_end+0xf801d32c>
1001d388:	88cffc34 	orhi	r3,r17,16368
1001d38c:	2805883a 	mov	r2,r5
1001d390:	dfc00517 	ldw	ra,20(sp)
1001d394:	dd000417 	ldw	r20,16(sp)
1001d398:	dcc00317 	ldw	r19,12(sp)
1001d39c:	dc800217 	ldw	r18,8(sp)
1001d3a0:	dc400117 	ldw	r17,4(sp)
1001d3a4:	dc000017 	ldw	r16,0(sp)
1001d3a8:	dec00604 	addi	sp,sp,24
1001d3ac:	f800283a 	ret
1001d3b0:	0009883a 	mov	r4,zero
1001d3b4:	003fce06 	br	1001d2f0 <__alt_data_end+0xf801d2f0>
1001d3b8:	0005883a 	mov	r2,zero
1001d3bc:	003fe406 	br	1001d350 <__alt_data_end+0xf801d350>

1001d3c0 <__d2b>:
1001d3c0:	defff804 	addi	sp,sp,-32
1001d3c4:	dc400315 	stw	r17,12(sp)
1001d3c8:	3023883a 	mov	r17,r6
1001d3cc:	dc800415 	stw	r18,16(sp)
1001d3d0:	8824907a 	slli	r18,r17,1
1001d3d4:	dcc00515 	stw	r19,20(sp)
1001d3d8:	2827883a 	mov	r19,r5
1001d3dc:	9024d57a 	srli	r18,r18,21
1001d3e0:	01400044 	movi	r5,1
1001d3e4:	dd000615 	stw	r20,24(sp)
1001d3e8:	dc000215 	stw	r16,8(sp)
1001d3ec:	dfc00715 	stw	ra,28(sp)
1001d3f0:	3829883a 	mov	r20,r7
1001d3f4:	001c6cc0 	call	1001c6cc <_Balloc>
1001d3f8:	1021883a 	mov	r16,r2
1001d3fc:	00800434 	movhi	r2,16
1001d400:	10bfffc4 	addi	r2,r2,-1
1001d404:	88a2703a 	and	r17,r17,r2
1001d408:	90000126 	beq	r18,zero,1001d410 <__d2b+0x50>
1001d40c:	8c400434 	orhi	r17,r17,16
1001d410:	dc400015 	stw	r17,0(sp)
1001d414:	98002226 	beq	r19,zero,1001d4a0 <__d2b+0xe0>
1001d418:	d9000104 	addi	r4,sp,4
1001d41c:	dcc00115 	stw	r19,4(sp)
1001d420:	001ca4c0 	call	1001ca4c <__lo0bits>
1001d424:	d8c00017 	ldw	r3,0(sp)
1001d428:	10002d1e 	bne	r2,zero,1001d4e0 <__d2b+0x120>
1001d42c:	d9000117 	ldw	r4,4(sp)
1001d430:	81000515 	stw	r4,20(r16)
1001d434:	1823003a 	cmpeq	r17,r3,zero
1001d438:	01000084 	movi	r4,2
1001d43c:	2463c83a 	sub	r17,r4,r17
1001d440:	80c00615 	stw	r3,24(r16)
1001d444:	84400415 	stw	r17,16(r16)
1001d448:	90001d1e 	bne	r18,zero,1001d4c0 <__d2b+0x100>
1001d44c:	88c00104 	addi	r3,r17,4
1001d450:	18c7883a 	add	r3,r3,r3
1001d454:	18c7883a 	add	r3,r3,r3
1001d458:	80c7883a 	add	r3,r16,r3
1001d45c:	19000017 	ldw	r4,0(r3)
1001d460:	10bef384 	addi	r2,r2,-1074
1001d464:	a0800015 	stw	r2,0(r20)
1001d468:	001c9e40 	call	1001c9e4 <__hi0bits>
1001d46c:	8822917a 	slli	r17,r17,5
1001d470:	d8c00817 	ldw	r3,32(sp)
1001d474:	8885c83a 	sub	r2,r17,r2
1001d478:	18800015 	stw	r2,0(r3)
1001d47c:	8005883a 	mov	r2,r16
1001d480:	dfc00717 	ldw	ra,28(sp)
1001d484:	dd000617 	ldw	r20,24(sp)
1001d488:	dcc00517 	ldw	r19,20(sp)
1001d48c:	dc800417 	ldw	r18,16(sp)
1001d490:	dc400317 	ldw	r17,12(sp)
1001d494:	dc000217 	ldw	r16,8(sp)
1001d498:	dec00804 	addi	sp,sp,32
1001d49c:	f800283a 	ret
1001d4a0:	d809883a 	mov	r4,sp
1001d4a4:	001ca4c0 	call	1001ca4c <__lo0bits>
1001d4a8:	d8c00017 	ldw	r3,0(sp)
1001d4ac:	04400044 	movi	r17,1
1001d4b0:	84400415 	stw	r17,16(r16)
1001d4b4:	80c00515 	stw	r3,20(r16)
1001d4b8:	10800804 	addi	r2,r2,32
1001d4bc:	903fe326 	beq	r18,zero,1001d44c <__alt_data_end+0xf801d44c>
1001d4c0:	00c00d44 	movi	r3,53
1001d4c4:	94bef344 	addi	r18,r18,-1075
1001d4c8:	90a5883a 	add	r18,r18,r2
1001d4cc:	1885c83a 	sub	r2,r3,r2
1001d4d0:	d8c00817 	ldw	r3,32(sp)
1001d4d4:	a4800015 	stw	r18,0(r20)
1001d4d8:	18800015 	stw	r2,0(r3)
1001d4dc:	003fe706 	br	1001d47c <__alt_data_end+0xf801d47c>
1001d4e0:	01000804 	movi	r4,32
1001d4e4:	2089c83a 	sub	r4,r4,r2
1001d4e8:	1908983a 	sll	r4,r3,r4
1001d4ec:	d9400117 	ldw	r5,4(sp)
1001d4f0:	1886d83a 	srl	r3,r3,r2
1001d4f4:	2148b03a 	or	r4,r4,r5
1001d4f8:	81000515 	stw	r4,20(r16)
1001d4fc:	d8c00015 	stw	r3,0(sp)
1001d500:	003fcc06 	br	1001d434 <__alt_data_end+0xf801d434>

1001d504 <__ratio>:
1001d504:	defff904 	addi	sp,sp,-28
1001d508:	dc400315 	stw	r17,12(sp)
1001d50c:	2823883a 	mov	r17,r5
1001d510:	d9400104 	addi	r5,sp,4
1001d514:	dfc00615 	stw	ra,24(sp)
1001d518:	dcc00515 	stw	r19,20(sp)
1001d51c:	dc800415 	stw	r18,16(sp)
1001d520:	2027883a 	mov	r19,r4
1001d524:	dc000215 	stw	r16,8(sp)
1001d528:	001d2780 	call	1001d278 <__b2d>
1001d52c:	8809883a 	mov	r4,r17
1001d530:	d80b883a 	mov	r5,sp
1001d534:	1025883a 	mov	r18,r2
1001d538:	1821883a 	mov	r16,r3
1001d53c:	001d2780 	call	1001d278 <__b2d>
1001d540:	99400417 	ldw	r5,16(r19)
1001d544:	89000417 	ldw	r4,16(r17)
1001d548:	d9800117 	ldw	r6,4(sp)
1001d54c:	2909c83a 	sub	r4,r5,r4
1001d550:	d9400017 	ldw	r5,0(sp)
1001d554:	2008917a 	slli	r4,r4,5
1001d558:	314bc83a 	sub	r5,r6,r5
1001d55c:	290b883a 	add	r5,r5,r4
1001d560:	01400e0e 	bge	zero,r5,1001d59c <__ratio+0x98>
1001d564:	280a953a 	slli	r5,r5,20
1001d568:	2c21883a 	add	r16,r5,r16
1001d56c:	9009883a 	mov	r4,r18
1001d570:	800b883a 	mov	r5,r16
1001d574:	100d883a 	mov	r6,r2
1001d578:	180f883a 	mov	r7,r3
1001d57c:	001ef200 	call	1001ef20 <__divdf3>
1001d580:	dfc00617 	ldw	ra,24(sp)
1001d584:	dcc00517 	ldw	r19,20(sp)
1001d588:	dc800417 	ldw	r18,16(sp)
1001d58c:	dc400317 	ldw	r17,12(sp)
1001d590:	dc000217 	ldw	r16,8(sp)
1001d594:	dec00704 	addi	sp,sp,28
1001d598:	f800283a 	ret
1001d59c:	280a953a 	slli	r5,r5,20
1001d5a0:	1947c83a 	sub	r3,r3,r5
1001d5a4:	003ff106 	br	1001d56c <__alt_data_end+0xf801d56c>

1001d5a8 <_mprec_log10>:
1001d5a8:	defffe04 	addi	sp,sp,-8
1001d5ac:	dc000015 	stw	r16,0(sp)
1001d5b0:	dfc00115 	stw	ra,4(sp)
1001d5b4:	008005c4 	movi	r2,23
1001d5b8:	2021883a 	mov	r16,r4
1001d5bc:	11000d0e 	bge	r2,r4,1001d5f4 <_mprec_log10+0x4c>
1001d5c0:	0005883a 	mov	r2,zero
1001d5c4:	00cffc34 	movhi	r3,16368
1001d5c8:	843fffc4 	addi	r16,r16,-1
1001d5cc:	1009883a 	mov	r4,r2
1001d5d0:	180b883a 	mov	r5,r3
1001d5d4:	000d883a 	mov	r6,zero
1001d5d8:	01d00934 	movhi	r7,16420
1001d5dc:	001ec3c0 	call	1001ec3c <__muldf3>
1001d5e0:	803ff91e 	bne	r16,zero,1001d5c8 <__alt_data_end+0xf801d5c8>
1001d5e4:	dfc00117 	ldw	ra,4(sp)
1001d5e8:	dc000017 	ldw	r16,0(sp)
1001d5ec:	dec00204 	addi	sp,sp,8
1001d5f0:	f800283a 	ret
1001d5f4:	202090fa 	slli	r16,r4,3
1001d5f8:	008400b4 	movhi	r2,4098
1001d5fc:	108f1004 	addi	r2,r2,15424
1001d600:	1421883a 	add	r16,r2,r16
1001d604:	80800017 	ldw	r2,0(r16)
1001d608:	80c00117 	ldw	r3,4(r16)
1001d60c:	dfc00117 	ldw	ra,4(sp)
1001d610:	dc000017 	ldw	r16,0(sp)
1001d614:	dec00204 	addi	sp,sp,8
1001d618:	f800283a 	ret

1001d61c <__copybits>:
1001d61c:	297fffc4 	addi	r5,r5,-1
1001d620:	31c00417 	ldw	r7,16(r6)
1001d624:	2811d17a 	srai	r8,r5,5
1001d628:	30800504 	addi	r2,r6,20
1001d62c:	39c00144 	addi	r7,r7,5
1001d630:	42000044 	addi	r8,r8,1
1001d634:	39cf883a 	add	r7,r7,r7
1001d638:	4211883a 	add	r8,r8,r8
1001d63c:	39cf883a 	add	r7,r7,r7
1001d640:	4211883a 	add	r8,r8,r8
1001d644:	31cf883a 	add	r7,r6,r7
1001d648:	2211883a 	add	r8,r4,r8
1001d64c:	11c00d2e 	bgeu	r2,r7,1001d684 <__copybits+0x68>
1001d650:	2007883a 	mov	r3,r4
1001d654:	11400017 	ldw	r5,0(r2)
1001d658:	18c00104 	addi	r3,r3,4
1001d65c:	10800104 	addi	r2,r2,4
1001d660:	197fff15 	stw	r5,-4(r3)
1001d664:	11fffb36 	bltu	r2,r7,1001d654 <__alt_data_end+0xf801d654>
1001d668:	3985c83a 	sub	r2,r7,r6
1001d66c:	10bffac4 	addi	r2,r2,-21
1001d670:	1004d0ba 	srli	r2,r2,2
1001d674:	10800044 	addi	r2,r2,1
1001d678:	1085883a 	add	r2,r2,r2
1001d67c:	1085883a 	add	r2,r2,r2
1001d680:	2089883a 	add	r4,r4,r2
1001d684:	2200032e 	bgeu	r4,r8,1001d694 <__copybits+0x78>
1001d688:	20000015 	stw	zero,0(r4)
1001d68c:	21000104 	addi	r4,r4,4
1001d690:	223ffd36 	bltu	r4,r8,1001d688 <__alt_data_end+0xf801d688>
1001d694:	f800283a 	ret

1001d698 <__any_on>:
1001d698:	21800417 	ldw	r6,16(r4)
1001d69c:	2805d17a 	srai	r2,r5,5
1001d6a0:	20c00504 	addi	r3,r4,20
1001d6a4:	30800f0e 	bge	r6,r2,1001d6e4 <__any_on+0x4c>
1001d6a8:	3005883a 	mov	r2,r6
1001d6ac:	10800144 	addi	r2,r2,5
1001d6b0:	1085883a 	add	r2,r2,r2
1001d6b4:	1085883a 	add	r2,r2,r2
1001d6b8:	2089883a 	add	r4,r4,r2
1001d6bc:	1900152e 	bgeu	r3,r4,1001d714 <__any_on+0x7c>
1001d6c0:	20bfff17 	ldw	r2,-4(r4)
1001d6c4:	213fff04 	addi	r4,r4,-4
1001d6c8:	1000041e 	bne	r2,zero,1001d6dc <__any_on+0x44>
1001d6cc:	1900112e 	bgeu	r3,r4,1001d714 <__any_on+0x7c>
1001d6d0:	213fff04 	addi	r4,r4,-4
1001d6d4:	20800017 	ldw	r2,0(r4)
1001d6d8:	103ffc26 	beq	r2,zero,1001d6cc <__alt_data_end+0xf801d6cc>
1001d6dc:	00800044 	movi	r2,1
1001d6e0:	f800283a 	ret
1001d6e4:	11bff10e 	bge	r2,r6,1001d6ac <__alt_data_end+0xf801d6ac>
1001d6e8:	294007cc 	andi	r5,r5,31
1001d6ec:	283fef26 	beq	r5,zero,1001d6ac <__alt_data_end+0xf801d6ac>
1001d6f0:	11800144 	addi	r6,r2,5
1001d6f4:	318d883a 	add	r6,r6,r6
1001d6f8:	318d883a 	add	r6,r6,r6
1001d6fc:	218d883a 	add	r6,r4,r6
1001d700:	31800017 	ldw	r6,0(r6)
1001d704:	314ed83a 	srl	r7,r6,r5
1001d708:	394a983a 	sll	r5,r7,r5
1001d70c:	29bff31e 	bne	r5,r6,1001d6dc <__alt_data_end+0xf801d6dc>
1001d710:	003fe606 	br	1001d6ac <__alt_data_end+0xf801d6ac>
1001d714:	0005883a 	mov	r2,zero
1001d718:	f800283a 	ret

1001d71c <_putc_r>:
1001d71c:	defffc04 	addi	sp,sp,-16
1001d720:	dc000215 	stw	r16,8(sp)
1001d724:	dfc00315 	stw	ra,12(sp)
1001d728:	2021883a 	mov	r16,r4
1001d72c:	20000226 	beq	r4,zero,1001d738 <_putc_r+0x1c>
1001d730:	20800e17 	ldw	r2,56(r4)
1001d734:	10001d26 	beq	r2,zero,1001d7ac <_putc_r+0x90>
1001d738:	30800217 	ldw	r2,8(r6)
1001d73c:	10bfffc4 	addi	r2,r2,-1
1001d740:	30800215 	stw	r2,8(r6)
1001d744:	10000a16 	blt	r2,zero,1001d770 <_putc_r+0x54>
1001d748:	30800017 	ldw	r2,0(r6)
1001d74c:	11400005 	stb	r5,0(r2)
1001d750:	30800017 	ldw	r2,0(r6)
1001d754:	10c00044 	addi	r3,r2,1
1001d758:	10800003 	ldbu	r2,0(r2)
1001d75c:	30c00015 	stw	r3,0(r6)
1001d760:	dfc00317 	ldw	ra,12(sp)
1001d764:	dc000217 	ldw	r16,8(sp)
1001d768:	dec00404 	addi	sp,sp,16
1001d76c:	f800283a 	ret
1001d770:	30c00617 	ldw	r3,24(r6)
1001d774:	10c01316 	blt	r2,r3,1001d7c4 <_putc_r+0xa8>
1001d778:	30800017 	ldw	r2,0(r6)
1001d77c:	01000284 	movi	r4,10
1001d780:	11400005 	stb	r5,0(r2)
1001d784:	30c00017 	ldw	r3,0(r6)
1001d788:	19400003 	ldbu	r5,0(r3)
1001d78c:	29000d26 	beq	r5,r4,1001d7c4 <_putc_r+0xa8>
1001d790:	18c00044 	addi	r3,r3,1
1001d794:	2805883a 	mov	r2,r5
1001d798:	30c00015 	stw	r3,0(r6)
1001d79c:	dfc00317 	ldw	ra,12(sp)
1001d7a0:	dc000217 	ldw	r16,8(sp)
1001d7a4:	dec00404 	addi	sp,sp,16
1001d7a8:	f800283a 	ret
1001d7ac:	d9400015 	stw	r5,0(sp)
1001d7b0:	d9800115 	stw	r6,4(sp)
1001d7b4:	00150fc0 	call	100150fc <__sinit>
1001d7b8:	d9800117 	ldw	r6,4(sp)
1001d7bc:	d9400017 	ldw	r5,0(sp)
1001d7c0:	003fdd06 	br	1001d738 <__alt_data_end+0xf801d738>
1001d7c4:	8009883a 	mov	r4,r16
1001d7c8:	dfc00317 	ldw	ra,12(sp)
1001d7cc:	dc000217 	ldw	r16,8(sp)
1001d7d0:	dec00404 	addi	sp,sp,16
1001d7d4:	001d9981 	jmpi	1001d998 <__swbuf_r>

1001d7d8 <putc>:
1001d7d8:	defffc04 	addi	sp,sp,-16
1001d7dc:	dc400115 	stw	r17,4(sp)
1001d7e0:	044400b4 	movhi	r17,4098
1001d7e4:	8c56f004 	addi	r17,r17,23488
1001d7e8:	88800017 	ldw	r2,0(r17)
1001d7ec:	dc800215 	stw	r18,8(sp)
1001d7f0:	dc000015 	stw	r16,0(sp)
1001d7f4:	dfc00315 	stw	ra,12(sp)
1001d7f8:	2025883a 	mov	r18,r4
1001d7fc:	2821883a 	mov	r16,r5
1001d800:	10000226 	beq	r2,zero,1001d80c <putc+0x34>
1001d804:	10c00e17 	ldw	r3,56(r2)
1001d808:	18002126 	beq	r3,zero,1001d890 <putc+0xb8>
1001d80c:	80800217 	ldw	r2,8(r16)
1001d810:	10bfffc4 	addi	r2,r2,-1
1001d814:	80800215 	stw	r2,8(r16)
1001d818:	10000c16 	blt	r2,zero,1001d84c <putc+0x74>
1001d81c:	80800017 	ldw	r2,0(r16)
1001d820:	14800005 	stb	r18,0(r2)
1001d824:	80800017 	ldw	r2,0(r16)
1001d828:	10c00044 	addi	r3,r2,1
1001d82c:	10800003 	ldbu	r2,0(r2)
1001d830:	80c00015 	stw	r3,0(r16)
1001d834:	dfc00317 	ldw	ra,12(sp)
1001d838:	dc800217 	ldw	r18,8(sp)
1001d83c:	dc400117 	ldw	r17,4(sp)
1001d840:	dc000017 	ldw	r16,0(sp)
1001d844:	dec00404 	addi	sp,sp,16
1001d848:	f800283a 	ret
1001d84c:	80c00617 	ldw	r3,24(r16)
1001d850:	10c01216 	blt	r2,r3,1001d89c <putc+0xc4>
1001d854:	80800017 	ldw	r2,0(r16)
1001d858:	01000284 	movi	r4,10
1001d85c:	14800005 	stb	r18,0(r2)
1001d860:	80c00017 	ldw	r3,0(r16)
1001d864:	19400003 	ldbu	r5,0(r3)
1001d868:	29001526 	beq	r5,r4,1001d8c0 <putc+0xe8>
1001d86c:	18c00044 	addi	r3,r3,1
1001d870:	2805883a 	mov	r2,r5
1001d874:	80c00015 	stw	r3,0(r16)
1001d878:	dfc00317 	ldw	ra,12(sp)
1001d87c:	dc800217 	ldw	r18,8(sp)
1001d880:	dc400117 	ldw	r17,4(sp)
1001d884:	dc000017 	ldw	r16,0(sp)
1001d888:	dec00404 	addi	sp,sp,16
1001d88c:	f800283a 	ret
1001d890:	1009883a 	mov	r4,r2
1001d894:	00150fc0 	call	100150fc <__sinit>
1001d898:	003fdc06 	br	1001d80c <__alt_data_end+0xf801d80c>
1001d89c:	89000017 	ldw	r4,0(r17)
1001d8a0:	900b883a 	mov	r5,r18
1001d8a4:	800d883a 	mov	r6,r16
1001d8a8:	dfc00317 	ldw	ra,12(sp)
1001d8ac:	dc800217 	ldw	r18,8(sp)
1001d8b0:	dc400117 	ldw	r17,4(sp)
1001d8b4:	dc000017 	ldw	r16,0(sp)
1001d8b8:	dec00404 	addi	sp,sp,16
1001d8bc:	001d9981 	jmpi	1001d998 <__swbuf_r>
1001d8c0:	89000017 	ldw	r4,0(r17)
1001d8c4:	003ff706 	br	1001d8a4 <__alt_data_end+0xf801d8a4>

1001d8c8 <_read_r>:
1001d8c8:	defffd04 	addi	sp,sp,-12
1001d8cc:	dc400115 	stw	r17,4(sp)
1001d8d0:	dc000015 	stw	r16,0(sp)
1001d8d4:	2023883a 	mov	r17,r4
1001d8d8:	040400b4 	movhi	r16,4098
1001d8dc:	841ec604 	addi	r16,r16,31512
1001d8e0:	2809883a 	mov	r4,r5
1001d8e4:	300b883a 	mov	r5,r6
1001d8e8:	380d883a 	mov	r6,r7
1001d8ec:	dfc00215 	stw	ra,8(sp)
1001d8f0:	80000015 	stw	zero,0(r16)
1001d8f4:	00202d00 	call	100202d0 <read>
1001d8f8:	00ffffc4 	movi	r3,-1
1001d8fc:	10c00526 	beq	r2,r3,1001d914 <_read_r+0x4c>
1001d900:	dfc00217 	ldw	ra,8(sp)
1001d904:	dc400117 	ldw	r17,4(sp)
1001d908:	dc000017 	ldw	r16,0(sp)
1001d90c:	dec00304 	addi	sp,sp,12
1001d910:	f800283a 	ret
1001d914:	80c00017 	ldw	r3,0(r16)
1001d918:	183ff926 	beq	r3,zero,1001d900 <__alt_data_end+0xf801d900>
1001d91c:	88c00015 	stw	r3,0(r17)
1001d920:	dfc00217 	ldw	ra,8(sp)
1001d924:	dc400117 	ldw	r17,4(sp)
1001d928:	dc000017 	ldw	r16,0(sp)
1001d92c:	dec00304 	addi	sp,sp,12
1001d930:	f800283a 	ret

1001d934 <__isinfd>:
1001d934:	0105c83a 	sub	r2,zero,r4
1001d938:	1108b03a 	or	r4,r2,r4
1001d93c:	2004d7fa 	srli	r2,r4,31
1001d940:	00e00034 	movhi	r3,32768
1001d944:	18ffffc4 	addi	r3,r3,-1
1001d948:	28ca703a 	and	r5,r5,r3
1001d94c:	1144b03a 	or	r2,r2,r5
1001d950:	00dffc34 	movhi	r3,32752
1001d954:	1885c83a 	sub	r2,r3,r2
1001d958:	0087c83a 	sub	r3,zero,r2
1001d95c:	1884b03a 	or	r2,r3,r2
1001d960:	1005d7fa 	srai	r2,r2,31
1001d964:	10800044 	addi	r2,r2,1
1001d968:	f800283a 	ret

1001d96c <__isnand>:
1001d96c:	0105c83a 	sub	r2,zero,r4
1001d970:	1108b03a 	or	r4,r2,r4
1001d974:	2004d7fa 	srli	r2,r4,31
1001d978:	00e00034 	movhi	r3,32768
1001d97c:	18ffffc4 	addi	r3,r3,-1
1001d980:	28ca703a 	and	r5,r5,r3
1001d984:	1144b03a 	or	r2,r2,r5
1001d988:	00dffc34 	movhi	r3,32752
1001d98c:	1885c83a 	sub	r2,r3,r2
1001d990:	1004d7fa 	srli	r2,r2,31
1001d994:	f800283a 	ret

1001d998 <__swbuf_r>:
1001d998:	defffc04 	addi	sp,sp,-16
1001d99c:	dc800215 	stw	r18,8(sp)
1001d9a0:	dc400115 	stw	r17,4(sp)
1001d9a4:	dc000015 	stw	r16,0(sp)
1001d9a8:	dfc00315 	stw	ra,12(sp)
1001d9ac:	2023883a 	mov	r17,r4
1001d9b0:	2825883a 	mov	r18,r5
1001d9b4:	3021883a 	mov	r16,r6
1001d9b8:	20000226 	beq	r4,zero,1001d9c4 <__swbuf_r+0x2c>
1001d9bc:	20800e17 	ldw	r2,56(r4)
1001d9c0:	10003b26 	beq	r2,zero,1001dab0 <__swbuf_r+0x118>
1001d9c4:	8080030b 	ldhu	r2,12(r16)
1001d9c8:	80c00617 	ldw	r3,24(r16)
1001d9cc:	1080020c 	andi	r2,r2,8
1001d9d0:	10bfffcc 	andi	r2,r2,65535
1001d9d4:	10a0001c 	xori	r2,r2,32768
1001d9d8:	80c00215 	stw	r3,8(r16)
1001d9dc:	10a00004 	addi	r2,r2,-32768
1001d9e0:	10002226 	beq	r2,zero,1001da6c <__swbuf_r+0xd4>
1001d9e4:	80800417 	ldw	r2,16(r16)
1001d9e8:	10002026 	beq	r2,zero,1001da6c <__swbuf_r+0xd4>
1001d9ec:	80c00017 	ldw	r3,0(r16)
1001d9f0:	81000517 	ldw	r4,20(r16)
1001d9f4:	94803fcc 	andi	r18,r18,255
1001d9f8:	1885c83a 	sub	r2,r3,r2
1001d9fc:	1100250e 	bge	r2,r4,1001da94 <__swbuf_r+0xfc>
1001da00:	10800044 	addi	r2,r2,1
1001da04:	81400217 	ldw	r5,8(r16)
1001da08:	19000044 	addi	r4,r3,1
1001da0c:	297fffc4 	addi	r5,r5,-1
1001da10:	81400215 	stw	r5,8(r16)
1001da14:	1c800005 	stb	r18,0(r3)
1001da18:	80c00517 	ldw	r3,20(r16)
1001da1c:	81000015 	stw	r4,0(r16)
1001da20:	18800c26 	beq	r3,r2,1001da54 <__swbuf_r+0xbc>
1001da24:	8080030b 	ldhu	r2,12(r16)
1001da28:	1080004c 	andi	r2,r2,1
1001da2c:	10000226 	beq	r2,zero,1001da38 <__swbuf_r+0xa0>
1001da30:	00800284 	movi	r2,10
1001da34:	90800726 	beq	r18,r2,1001da54 <__swbuf_r+0xbc>
1001da38:	9005883a 	mov	r2,r18
1001da3c:	dfc00317 	ldw	ra,12(sp)
1001da40:	dc800217 	ldw	r18,8(sp)
1001da44:	dc400117 	ldw	r17,4(sp)
1001da48:	dc000017 	ldw	r16,0(sp)
1001da4c:	dec00404 	addi	sp,sp,16
1001da50:	f800283a 	ret
1001da54:	8809883a 	mov	r4,r17
1001da58:	800b883a 	mov	r5,r16
1001da5c:	0014ce00 	call	10014ce0 <_fflush_r>
1001da60:	103ff526 	beq	r2,zero,1001da38 <__alt_data_end+0xf801da38>
1001da64:	04bfffc4 	movi	r18,-1
1001da68:	003ff306 	br	1001da38 <__alt_data_end+0xf801da38>
1001da6c:	8809883a 	mov	r4,r17
1001da70:	800b883a 	mov	r5,r16
1001da74:	001a3e80 	call	1001a3e8 <__swsetup_r>
1001da78:	10000f1e 	bne	r2,zero,1001dab8 <__swbuf_r+0x120>
1001da7c:	80800417 	ldw	r2,16(r16)
1001da80:	80c00017 	ldw	r3,0(r16)
1001da84:	81000517 	ldw	r4,20(r16)
1001da88:	94803fcc 	andi	r18,r18,255
1001da8c:	1885c83a 	sub	r2,r3,r2
1001da90:	113fdb16 	blt	r2,r4,1001da00 <__alt_data_end+0xf801da00>
1001da94:	8809883a 	mov	r4,r17
1001da98:	800b883a 	mov	r5,r16
1001da9c:	0014ce00 	call	10014ce0 <_fflush_r>
1001daa0:	103ff01e 	bne	r2,zero,1001da64 <__alt_data_end+0xf801da64>
1001daa4:	80c00017 	ldw	r3,0(r16)
1001daa8:	00800044 	movi	r2,1
1001daac:	003fd506 	br	1001da04 <__alt_data_end+0xf801da04>
1001dab0:	00150fc0 	call	100150fc <__sinit>
1001dab4:	003fc306 	br	1001d9c4 <__alt_data_end+0xf801d9c4>
1001dab8:	8080030b 	ldhu	r2,12(r16)
1001dabc:	04bfffc4 	movi	r18,-1
1001dac0:	10801014 	ori	r2,r2,64
1001dac4:	8080030d 	sth	r2,12(r16)
1001dac8:	00800244 	movi	r2,9
1001dacc:	88800015 	stw	r2,0(r17)
1001dad0:	003fd906 	br	1001da38 <__alt_data_end+0xf801da38>

1001dad4 <__swbuf>:
1001dad4:	00c400b4 	movhi	r3,4098
1001dad8:	18d6f004 	addi	r3,r3,23488
1001dadc:	2005883a 	mov	r2,r4
1001dae0:	19000017 	ldw	r4,0(r3)
1001dae4:	280d883a 	mov	r6,r5
1001dae8:	100b883a 	mov	r5,r2
1001daec:	001d9981 	jmpi	1001d998 <__swbuf_r>

1001daf0 <_calloc_r>:
1001daf0:	defffe04 	addi	sp,sp,-8
1001daf4:	dc000015 	stw	r16,0(sp)
1001daf8:	2021883a 	mov	r16,r4
1001dafc:	3009883a 	mov	r4,r6
1001db00:	dfc00115 	stw	ra,4(sp)
1001db04:	00146fc0 	call	100146fc <__mulsi3>
1001db08:	8009883a 	mov	r4,r16
1001db0c:	100b883a 	mov	r5,r2
1001db10:	001655c0 	call	1001655c <_malloc_r>
1001db14:	1021883a 	mov	r16,r2
1001db18:	10000c26 	beq	r2,zero,1001db4c <_calloc_r+0x5c>
1001db1c:	11bfff17 	ldw	r6,-4(r2)
1001db20:	00ffff04 	movi	r3,-4
1001db24:	00800904 	movi	r2,36
1001db28:	30cc703a 	and	r6,r6,r3
1001db2c:	30cd883a 	add	r6,r6,r3
1001db30:	11801436 	bltu	r2,r6,1001db84 <_calloc_r+0x94>
1001db34:	00c004c4 	movi	r3,19
1001db38:	19800936 	bltu	r3,r6,1001db60 <_calloc_r+0x70>
1001db3c:	8005883a 	mov	r2,r16
1001db40:	10000015 	stw	zero,0(r2)
1001db44:	10000115 	stw	zero,4(r2)
1001db48:	10000215 	stw	zero,8(r2)
1001db4c:	8005883a 	mov	r2,r16
1001db50:	dfc00117 	ldw	ra,4(sp)
1001db54:	dc000017 	ldw	r16,0(sp)
1001db58:	dec00204 	addi	sp,sp,8
1001db5c:	f800283a 	ret
1001db60:	80000015 	stw	zero,0(r16)
1001db64:	80000115 	stw	zero,4(r16)
1001db68:	00c006c4 	movi	r3,27
1001db6c:	19800d2e 	bgeu	r3,r6,1001dba4 <_calloc_r+0xb4>
1001db70:	80000215 	stw	zero,8(r16)
1001db74:	80000315 	stw	zero,12(r16)
1001db78:	30800c26 	beq	r6,r2,1001dbac <_calloc_r+0xbc>
1001db7c:	80800404 	addi	r2,r16,16
1001db80:	003fef06 	br	1001db40 <__alt_data_end+0xf801db40>
1001db84:	8009883a 	mov	r4,r16
1001db88:	000b883a 	mov	r5,zero
1001db8c:	0016f180 	call	10016f18 <memset>
1001db90:	8005883a 	mov	r2,r16
1001db94:	dfc00117 	ldw	ra,4(sp)
1001db98:	dc000017 	ldw	r16,0(sp)
1001db9c:	dec00204 	addi	sp,sp,8
1001dba0:	f800283a 	ret
1001dba4:	80800204 	addi	r2,r16,8
1001dba8:	003fe506 	br	1001db40 <__alt_data_end+0xf801db40>
1001dbac:	80000415 	stw	zero,16(r16)
1001dbb0:	80000515 	stw	zero,20(r16)
1001dbb4:	80800604 	addi	r2,r16,24
1001dbb8:	003fe106 	br	1001db40 <__alt_data_end+0xf801db40>

1001dbbc <__udivdi3>:
1001dbbc:	defff504 	addi	sp,sp,-44
1001dbc0:	dd000515 	stw	r20,20(sp)
1001dbc4:	dcc00415 	stw	r19,16(sp)
1001dbc8:	dc800315 	stw	r18,12(sp)
1001dbcc:	dc400215 	stw	r17,8(sp)
1001dbd0:	dc000115 	stw	r16,4(sp)
1001dbd4:	dfc00a15 	stw	ra,40(sp)
1001dbd8:	df000915 	stw	fp,36(sp)
1001dbdc:	ddc00815 	stw	r23,32(sp)
1001dbe0:	dd800715 	stw	r22,28(sp)
1001dbe4:	dd400615 	stw	r21,24(sp)
1001dbe8:	2025883a 	mov	r18,r4
1001dbec:	2823883a 	mov	r17,r5
1001dbf0:	3021883a 	mov	r16,r6
1001dbf4:	2027883a 	mov	r19,r4
1001dbf8:	2829883a 	mov	r20,r5
1001dbfc:	3800451e 	bne	r7,zero,1001dd14 <__udivdi3+0x158>
1001dc00:	2980652e 	bgeu	r5,r6,1001dd98 <__udivdi3+0x1dc>
1001dc04:	00bfffd4 	movui	r2,65535
1001dc08:	1180b436 	bltu	r2,r6,1001dedc <__udivdi3+0x320>
1001dc0c:	00803fc4 	movi	r2,255
1001dc10:	11816636 	bltu	r2,r6,1001e1ac <__udivdi3+0x5f0>
1001dc14:	0005883a 	mov	r2,zero
1001dc18:	0007883a 	mov	r3,zero
1001dc1c:	3084d83a 	srl	r2,r6,r2
1001dc20:	010400b4 	movhi	r4,4098
1001dc24:	210e8d04 	addi	r4,r4,14900
1001dc28:	2085883a 	add	r2,r4,r2
1001dc2c:	10800003 	ldbu	r2,0(r2)
1001dc30:	10c7883a 	add	r3,r2,r3
1001dc34:	00800804 	movi	r2,32
1001dc38:	10c5c83a 	sub	r2,r2,r3
1001dc3c:	10000526 	beq	r2,zero,1001dc54 <__udivdi3+0x98>
1001dc40:	88a2983a 	sll	r17,r17,r2
1001dc44:	90c6d83a 	srl	r3,r18,r3
1001dc48:	30a0983a 	sll	r16,r6,r2
1001dc4c:	90a6983a 	sll	r19,r18,r2
1001dc50:	88e8b03a 	or	r20,r17,r3
1001dc54:	8022d43a 	srli	r17,r16,16
1001dc58:	a009883a 	mov	r4,r20
1001dc5c:	857fffcc 	andi	r21,r16,65535
1001dc60:	880b883a 	mov	r5,r17
1001dc64:	00146f40 	call	100146f4 <__umodsi3>
1001dc68:	a009883a 	mov	r4,r20
1001dc6c:	880b883a 	mov	r5,r17
1001dc70:	102d883a 	mov	r22,r2
1001dc74:	00146ec0 	call	100146ec <__udivsi3>
1001dc78:	1009883a 	mov	r4,r2
1001dc7c:	a80b883a 	mov	r5,r21
1001dc80:	1025883a 	mov	r18,r2
1001dc84:	00146fc0 	call	100146fc <__mulsi3>
1001dc88:	1009883a 	mov	r4,r2
1001dc8c:	b006943a 	slli	r3,r22,16
1001dc90:	9804d43a 	srli	r2,r19,16
1001dc94:	1886b03a 	or	r3,r3,r2
1001dc98:	1900052e 	bgeu	r3,r4,1001dcb0 <__udivdi3+0xf4>
1001dc9c:	1c07883a 	add	r3,r3,r16
1001dca0:	90bfffc4 	addi	r2,r18,-1
1001dca4:	1c000136 	bltu	r3,r16,1001dcac <__udivdi3+0xf0>
1001dca8:	19015536 	bltu	r3,r4,1001e200 <__udivdi3+0x644>
1001dcac:	1025883a 	mov	r18,r2
1001dcb0:	1929c83a 	sub	r20,r3,r4
1001dcb4:	880b883a 	mov	r5,r17
1001dcb8:	a009883a 	mov	r4,r20
1001dcbc:	00146f40 	call	100146f4 <__umodsi3>
1001dcc0:	102d883a 	mov	r22,r2
1001dcc4:	880b883a 	mov	r5,r17
1001dcc8:	a009883a 	mov	r4,r20
1001dccc:	b02c943a 	slli	r22,r22,16
1001dcd0:	00146ec0 	call	100146ec <__udivsi3>
1001dcd4:	1009883a 	mov	r4,r2
1001dcd8:	a80b883a 	mov	r5,r21
1001dcdc:	9cffffcc 	andi	r19,r19,65535
1001dce0:	1023883a 	mov	r17,r2
1001dce4:	b4e6b03a 	or	r19,r22,r19
1001dce8:	00146fc0 	call	100146fc <__mulsi3>
1001dcec:	9880052e 	bgeu	r19,r2,1001dd04 <__udivdi3+0x148>
1001dcf0:	9c27883a 	add	r19,r19,r16
1001dcf4:	88ffffc4 	addi	r3,r17,-1
1001dcf8:	9c011436 	bltu	r19,r16,1001e14c <__udivdi3+0x590>
1001dcfc:	9881132e 	bgeu	r19,r2,1001e14c <__udivdi3+0x590>
1001dd00:	8c7fff84 	addi	r17,r17,-2
1001dd04:	9004943a 	slli	r2,r18,16
1001dd08:	0007883a 	mov	r3,zero
1001dd0c:	8884b03a 	or	r2,r17,r2
1001dd10:	00001506 	br	1001dd68 <__udivdi3+0x1ac>
1001dd14:	29c06a36 	bltu	r5,r7,1001dec0 <__udivdi3+0x304>
1001dd18:	00bfffd4 	movui	r2,65535
1001dd1c:	11c06a2e 	bgeu	r2,r7,1001dec8 <__udivdi3+0x30c>
1001dd20:	00804034 	movhi	r2,256
1001dd24:	10bfffc4 	addi	r2,r2,-1
1001dd28:	11c11436 	bltu	r2,r7,1001e17c <__udivdi3+0x5c0>
1001dd2c:	00c00404 	movi	r3,16
1001dd30:	180b883a 	mov	r5,r3
1001dd34:	38c6d83a 	srl	r3,r7,r3
1001dd38:	010400b4 	movhi	r4,4098
1001dd3c:	210e8d04 	addi	r4,r4,14900
1001dd40:	04000804 	movi	r16,32
1001dd44:	20c7883a 	add	r3,r4,r3
1001dd48:	18800003 	ldbu	r2,0(r3)
1001dd4c:	1145883a 	add	r2,r2,r5
1001dd50:	80a1c83a 	sub	r16,r16,r2
1001dd54:	80006e1e 	bne	r16,zero,1001df10 <__udivdi3+0x354>
1001dd58:	0007883a 	mov	r3,zero
1001dd5c:	3c406a36 	bltu	r7,r17,1001df08 <__udivdi3+0x34c>
1001dd60:	9180692e 	bgeu	r18,r6,1001df08 <__udivdi3+0x34c>
1001dd64:	0005883a 	mov	r2,zero
1001dd68:	dfc00a17 	ldw	ra,40(sp)
1001dd6c:	df000917 	ldw	fp,36(sp)
1001dd70:	ddc00817 	ldw	r23,32(sp)
1001dd74:	dd800717 	ldw	r22,28(sp)
1001dd78:	dd400617 	ldw	r21,24(sp)
1001dd7c:	dd000517 	ldw	r20,20(sp)
1001dd80:	dcc00417 	ldw	r19,16(sp)
1001dd84:	dc800317 	ldw	r18,12(sp)
1001dd88:	dc400217 	ldw	r17,8(sp)
1001dd8c:	dc000117 	ldw	r16,4(sp)
1001dd90:	dec00b04 	addi	sp,sp,44
1001dd94:	f800283a 	ret
1001dd98:	3000041e 	bne	r6,zero,1001ddac <__udivdi3+0x1f0>
1001dd9c:	01000044 	movi	r4,1
1001dda0:	000b883a 	mov	r5,zero
1001dda4:	00146ec0 	call	100146ec <__udivsi3>
1001dda8:	1021883a 	mov	r16,r2
1001ddac:	00bfffd4 	movui	r2,65535
1001ddb0:	1400502e 	bgeu	r2,r16,1001def4 <__udivdi3+0x338>
1001ddb4:	00804034 	movhi	r2,256
1001ddb8:	10bfffc4 	addi	r2,r2,-1
1001ddbc:	1400f536 	bltu	r2,r16,1001e194 <__udivdi3+0x5d8>
1001ddc0:	00800404 	movi	r2,16
1001ddc4:	1007883a 	mov	r3,r2
1001ddc8:	8084d83a 	srl	r2,r16,r2
1001ddcc:	010400b4 	movhi	r4,4098
1001ddd0:	210e8d04 	addi	r4,r4,14900
1001ddd4:	2085883a 	add	r2,r4,r2
1001ddd8:	10800003 	ldbu	r2,0(r2)
1001dddc:	10c7883a 	add	r3,r2,r3
1001dde0:	00800804 	movi	r2,32
1001dde4:	10c5c83a 	sub	r2,r2,r3
1001dde8:	1000a01e 	bne	r2,zero,1001e06c <__udivdi3+0x4b0>
1001ddec:	8028d43a 	srli	r20,r16,16
1001ddf0:	8c23c83a 	sub	r17,r17,r16
1001ddf4:	857fffcc 	andi	r21,r16,65535
1001ddf8:	00c00044 	movi	r3,1
1001ddfc:	8809883a 	mov	r4,r17
1001de00:	a00b883a 	mov	r5,r20
1001de04:	d8c00015 	stw	r3,0(sp)
1001de08:	00146f40 	call	100146f4 <__umodsi3>
1001de0c:	8809883a 	mov	r4,r17
1001de10:	a00b883a 	mov	r5,r20
1001de14:	102d883a 	mov	r22,r2
1001de18:	00146ec0 	call	100146ec <__udivsi3>
1001de1c:	1009883a 	mov	r4,r2
1001de20:	a80b883a 	mov	r5,r21
1001de24:	1025883a 	mov	r18,r2
1001de28:	00146fc0 	call	100146fc <__mulsi3>
1001de2c:	1009883a 	mov	r4,r2
1001de30:	b00c943a 	slli	r6,r22,16
1001de34:	9804d43a 	srli	r2,r19,16
1001de38:	d8c00017 	ldw	r3,0(sp)
1001de3c:	308cb03a 	or	r6,r6,r2
1001de40:	3100052e 	bgeu	r6,r4,1001de58 <__udivdi3+0x29c>
1001de44:	340d883a 	add	r6,r6,r16
1001de48:	90bfffc4 	addi	r2,r18,-1
1001de4c:	34000136 	bltu	r6,r16,1001de54 <__udivdi3+0x298>
1001de50:	3100e836 	bltu	r6,r4,1001e1f4 <__udivdi3+0x638>
1001de54:	1025883a 	mov	r18,r2
1001de58:	3123c83a 	sub	r17,r6,r4
1001de5c:	8809883a 	mov	r4,r17
1001de60:	a00b883a 	mov	r5,r20
1001de64:	d8c00015 	stw	r3,0(sp)
1001de68:	00146f40 	call	100146f4 <__umodsi3>
1001de6c:	102d883a 	mov	r22,r2
1001de70:	8809883a 	mov	r4,r17
1001de74:	a00b883a 	mov	r5,r20
1001de78:	b02c943a 	slli	r22,r22,16
1001de7c:	00146ec0 	call	100146ec <__udivsi3>
1001de80:	1009883a 	mov	r4,r2
1001de84:	a80b883a 	mov	r5,r21
1001de88:	9cffffcc 	andi	r19,r19,65535
1001de8c:	1023883a 	mov	r17,r2
1001de90:	b4e6b03a 	or	r19,r22,r19
1001de94:	00146fc0 	call	100146fc <__mulsi3>
1001de98:	d8c00017 	ldw	r3,0(sp)
1001de9c:	9880052e 	bgeu	r19,r2,1001deb4 <__udivdi3+0x2f8>
1001dea0:	9c27883a 	add	r19,r19,r16
1001dea4:	893fffc4 	addi	r4,r17,-1
1001dea8:	9c00aa36 	bltu	r19,r16,1001e154 <__udivdi3+0x598>
1001deac:	9880a92e 	bgeu	r19,r2,1001e154 <__udivdi3+0x598>
1001deb0:	8c7fff84 	addi	r17,r17,-2
1001deb4:	9004943a 	slli	r2,r18,16
1001deb8:	8884b03a 	or	r2,r17,r2
1001debc:	003faa06 	br	1001dd68 <__alt_data_end+0xf801dd68>
1001dec0:	0007883a 	mov	r3,zero
1001dec4:	003fa706 	br	1001dd64 <__alt_data_end+0xf801dd64>
1001dec8:	00803fc4 	movi	r2,255
1001decc:	11c0ae36 	bltu	r2,r7,1001e188 <__udivdi3+0x5cc>
1001ded0:	0007883a 	mov	r3,zero
1001ded4:	000b883a 	mov	r5,zero
1001ded8:	003f9606 	br	1001dd34 <__alt_data_end+0xf801dd34>
1001dedc:	00804034 	movhi	r2,256
1001dee0:	10bfffc4 	addi	r2,r2,-1
1001dee4:	1180ae36 	bltu	r2,r6,1001e1a0 <__udivdi3+0x5e4>
1001dee8:	00800404 	movi	r2,16
1001deec:	1007883a 	mov	r3,r2
1001def0:	003f4a06 	br	1001dc1c <__alt_data_end+0xf801dc1c>
1001def4:	00803fc4 	movi	r2,255
1001def8:	1400af36 	bltu	r2,r16,1001e1b8 <__udivdi3+0x5fc>
1001defc:	0005883a 	mov	r2,zero
1001df00:	0007883a 	mov	r3,zero
1001df04:	003fb006 	br	1001ddc8 <__alt_data_end+0xf801ddc8>
1001df08:	00800044 	movi	r2,1
1001df0c:	003f9606 	br	1001dd68 <__alt_data_end+0xf801dd68>
1001df10:	3c0e983a 	sll	r7,r7,r16
1001df14:	3086d83a 	srl	r3,r6,r2
1001df18:	88aed83a 	srl	r23,r17,r2
1001df1c:	9084d83a 	srl	r2,r18,r2
1001df20:	38e6b03a 	or	r19,r7,r3
1001df24:	9828d43a 	srli	r20,r19,16
1001df28:	8c22983a 	sll	r17,r17,r16
1001df2c:	b809883a 	mov	r4,r23
1001df30:	a00b883a 	mov	r5,r20
1001df34:	342a983a 	sll	r21,r6,r16
1001df38:	88a2b03a 	or	r17,r17,r2
1001df3c:	00146f40 	call	100146f4 <__umodsi3>
1001df40:	b809883a 	mov	r4,r23
1001df44:	a00b883a 	mov	r5,r20
1001df48:	1039883a 	mov	fp,r2
1001df4c:	9dbfffcc 	andi	r22,r19,65535
1001df50:	00146ec0 	call	100146ec <__udivsi3>
1001df54:	1009883a 	mov	r4,r2
1001df58:	b00b883a 	mov	r5,r22
1001df5c:	102f883a 	mov	r23,r2
1001df60:	00146fc0 	call	100146fc <__mulsi3>
1001df64:	1009883a 	mov	r4,r2
1001df68:	e00e943a 	slli	r7,fp,16
1001df6c:	8804d43a 	srli	r2,r17,16
1001df70:	388eb03a 	or	r7,r7,r2
1001df74:	3900042e 	bgeu	r7,r4,1001df88 <__udivdi3+0x3cc>
1001df78:	3ccf883a 	add	r7,r7,r19
1001df7c:	b8bfffc4 	addi	r2,r23,-1
1001df80:	3cc0942e 	bgeu	r7,r19,1001e1d4 <__udivdi3+0x618>
1001df84:	102f883a 	mov	r23,r2
1001df88:	3939c83a 	sub	fp,r7,r4
1001df8c:	a00b883a 	mov	r5,r20
1001df90:	e009883a 	mov	r4,fp
1001df94:	00146f40 	call	100146f4 <__umodsi3>
1001df98:	a00b883a 	mov	r5,r20
1001df9c:	e009883a 	mov	r4,fp
1001dfa0:	d8800015 	stw	r2,0(sp)
1001dfa4:	00146ec0 	call	100146ec <__udivsi3>
1001dfa8:	1009883a 	mov	r4,r2
1001dfac:	b00b883a 	mov	r5,r22
1001dfb0:	1029883a 	mov	r20,r2
1001dfb4:	00146fc0 	call	100146fc <__mulsi3>
1001dfb8:	d8c00017 	ldw	r3,0(sp)
1001dfbc:	8c7fffcc 	andi	r17,r17,65535
1001dfc0:	1806943a 	slli	r3,r3,16
1001dfc4:	1c46b03a 	or	r3,r3,r17
1001dfc8:	1880042e 	bgeu	r3,r2,1001dfdc <__udivdi3+0x420>
1001dfcc:	1cc7883a 	add	r3,r3,r19
1001dfd0:	a13fffc4 	addi	r4,r20,-1
1001dfd4:	1cc07b2e 	bgeu	r3,r19,1001e1c4 <__udivdi3+0x608>
1001dfd8:	2029883a 	mov	r20,r4
1001dfdc:	b82e943a 	slli	r23,r23,16
1001dfe0:	a822d43a 	srli	r17,r21,16
1001dfe4:	ad7fffcc 	andi	r21,r21,65535
1001dfe8:	a5e8b03a 	or	r20,r20,r23
1001dfec:	a5bfffcc 	andi	r22,r20,65535
1001dff0:	b009883a 	mov	r4,r22
1001dff4:	a80b883a 	mov	r5,r21
1001dff8:	18afc83a 	sub	r23,r3,r2
1001dffc:	a026d43a 	srli	r19,r20,16
1001e000:	00146fc0 	call	100146fc <__mulsi3>
1001e004:	b009883a 	mov	r4,r22
1001e008:	880b883a 	mov	r5,r17
1001e00c:	1039883a 	mov	fp,r2
1001e010:	00146fc0 	call	100146fc <__mulsi3>
1001e014:	a80b883a 	mov	r5,r21
1001e018:	9809883a 	mov	r4,r19
1001e01c:	102d883a 	mov	r22,r2
1001e020:	00146fc0 	call	100146fc <__mulsi3>
1001e024:	9809883a 	mov	r4,r19
1001e028:	880b883a 	mov	r5,r17
1001e02c:	102b883a 	mov	r21,r2
1001e030:	00146fc0 	call	100146fc <__mulsi3>
1001e034:	100b883a 	mov	r5,r2
1001e038:	e004d43a 	srli	r2,fp,16
1001e03c:	ad89883a 	add	r4,r21,r22
1001e040:	2089883a 	add	r4,r4,r2
1001e044:	2540022e 	bgeu	r4,r21,1001e050 <__udivdi3+0x494>
1001e048:	00800074 	movhi	r2,1
1001e04c:	288b883a 	add	r5,r5,r2
1001e050:	2004d43a 	srli	r2,r4,16
1001e054:	288b883a 	add	r5,r5,r2
1001e058:	b9404536 	bltu	r23,r5,1001e170 <__udivdi3+0x5b4>
1001e05c:	b9403f26 	beq	r23,r5,1001e15c <__udivdi3+0x5a0>
1001e060:	a005883a 	mov	r2,r20
1001e064:	0007883a 	mov	r3,zero
1001e068:	003f3f06 	br	1001dd68 <__alt_data_end+0xf801dd68>
1001e06c:	80a0983a 	sll	r16,r16,r2
1001e070:	88eed83a 	srl	r23,r17,r3
1001e074:	90c6d83a 	srl	r3,r18,r3
1001e078:	8028d43a 	srli	r20,r16,16
1001e07c:	88a2983a 	sll	r17,r17,r2
1001e080:	b809883a 	mov	r4,r23
1001e084:	a00b883a 	mov	r5,r20
1001e088:	88ecb03a 	or	r22,r17,r3
1001e08c:	90a6983a 	sll	r19,r18,r2
1001e090:	00146f40 	call	100146f4 <__umodsi3>
1001e094:	b809883a 	mov	r4,r23
1001e098:	a00b883a 	mov	r5,r20
1001e09c:	1023883a 	mov	r17,r2
1001e0a0:	857fffcc 	andi	r21,r16,65535
1001e0a4:	00146ec0 	call	100146ec <__udivsi3>
1001e0a8:	1009883a 	mov	r4,r2
1001e0ac:	a80b883a 	mov	r5,r21
1001e0b0:	102f883a 	mov	r23,r2
1001e0b4:	00146fc0 	call	100146fc <__mulsi3>
1001e0b8:	1009883a 	mov	r4,r2
1001e0bc:	880a943a 	slli	r5,r17,16
1001e0c0:	b004d43a 	srli	r2,r22,16
1001e0c4:	288ab03a 	or	r5,r5,r2
1001e0c8:	2900062e 	bgeu	r5,r4,1001e0e4 <__udivdi3+0x528>
1001e0cc:	2c0b883a 	add	r5,r5,r16
1001e0d0:	b8bfffc4 	addi	r2,r23,-1
1001e0d4:	2c004536 	bltu	r5,r16,1001e1ec <__udivdi3+0x630>
1001e0d8:	2900442e 	bgeu	r5,r4,1001e1ec <__udivdi3+0x630>
1001e0dc:	bdffff84 	addi	r23,r23,-2
1001e0e0:	2c0b883a 	add	r5,r5,r16
1001e0e4:	2925c83a 	sub	r18,r5,r4
1001e0e8:	9009883a 	mov	r4,r18
1001e0ec:	a00b883a 	mov	r5,r20
1001e0f0:	00146f40 	call	100146f4 <__umodsi3>
1001e0f4:	1023883a 	mov	r17,r2
1001e0f8:	9009883a 	mov	r4,r18
1001e0fc:	a00b883a 	mov	r5,r20
1001e100:	8822943a 	slli	r17,r17,16
1001e104:	00146ec0 	call	100146ec <__udivsi3>
1001e108:	1009883a 	mov	r4,r2
1001e10c:	a80b883a 	mov	r5,r21
1001e110:	b5bfffcc 	andi	r22,r22,65535
1001e114:	1025883a 	mov	r18,r2
1001e118:	8da2b03a 	or	r17,r17,r22
1001e11c:	00146fc0 	call	100146fc <__mulsi3>
1001e120:	8880062e 	bgeu	r17,r2,1001e13c <__udivdi3+0x580>
1001e124:	8c23883a 	add	r17,r17,r16
1001e128:	90ffffc4 	addi	r3,r18,-1
1001e12c:	8c002d36 	bltu	r17,r16,1001e1e4 <__udivdi3+0x628>
1001e130:	88802c2e 	bgeu	r17,r2,1001e1e4 <__udivdi3+0x628>
1001e134:	94bfff84 	addi	r18,r18,-2
1001e138:	8c23883a 	add	r17,r17,r16
1001e13c:	b806943a 	slli	r3,r23,16
1001e140:	88a3c83a 	sub	r17,r17,r2
1001e144:	90c6b03a 	or	r3,r18,r3
1001e148:	003f2c06 	br	1001ddfc <__alt_data_end+0xf801ddfc>
1001e14c:	1823883a 	mov	r17,r3
1001e150:	003eec06 	br	1001dd04 <__alt_data_end+0xf801dd04>
1001e154:	2023883a 	mov	r17,r4
1001e158:	003f5606 	br	1001deb4 <__alt_data_end+0xf801deb4>
1001e15c:	2008943a 	slli	r4,r4,16
1001e160:	9420983a 	sll	r16,r18,r16
1001e164:	e73fffcc 	andi	fp,fp,65535
1001e168:	2709883a 	add	r4,r4,fp
1001e16c:	813fbc2e 	bgeu	r16,r4,1001e060 <__alt_data_end+0xf801e060>
1001e170:	a0bfffc4 	addi	r2,r20,-1
1001e174:	0007883a 	mov	r3,zero
1001e178:	003efb06 	br	1001dd68 <__alt_data_end+0xf801dd68>
1001e17c:	00c00604 	movi	r3,24
1001e180:	180b883a 	mov	r5,r3
1001e184:	003eeb06 	br	1001dd34 <__alt_data_end+0xf801dd34>
1001e188:	00c00204 	movi	r3,8
1001e18c:	180b883a 	mov	r5,r3
1001e190:	003ee806 	br	1001dd34 <__alt_data_end+0xf801dd34>
1001e194:	00800604 	movi	r2,24
1001e198:	1007883a 	mov	r3,r2
1001e19c:	003f0a06 	br	1001ddc8 <__alt_data_end+0xf801ddc8>
1001e1a0:	00800604 	movi	r2,24
1001e1a4:	1007883a 	mov	r3,r2
1001e1a8:	003e9c06 	br	1001dc1c <__alt_data_end+0xf801dc1c>
1001e1ac:	00800204 	movi	r2,8
1001e1b0:	1007883a 	mov	r3,r2
1001e1b4:	003e9906 	br	1001dc1c <__alt_data_end+0xf801dc1c>
1001e1b8:	00800204 	movi	r2,8
1001e1bc:	1007883a 	mov	r3,r2
1001e1c0:	003f0106 	br	1001ddc8 <__alt_data_end+0xf801ddc8>
1001e1c4:	18bf842e 	bgeu	r3,r2,1001dfd8 <__alt_data_end+0xf801dfd8>
1001e1c8:	a53fff84 	addi	r20,r20,-2
1001e1cc:	1cc7883a 	add	r3,r3,r19
1001e1d0:	003f8206 	br	1001dfdc <__alt_data_end+0xf801dfdc>
1001e1d4:	393f6b2e 	bgeu	r7,r4,1001df84 <__alt_data_end+0xf801df84>
1001e1d8:	bdffff84 	addi	r23,r23,-2
1001e1dc:	3ccf883a 	add	r7,r7,r19
1001e1e0:	003f6906 	br	1001df88 <__alt_data_end+0xf801df88>
1001e1e4:	1825883a 	mov	r18,r3
1001e1e8:	003fd406 	br	1001e13c <__alt_data_end+0xf801e13c>
1001e1ec:	102f883a 	mov	r23,r2
1001e1f0:	003fbc06 	br	1001e0e4 <__alt_data_end+0xf801e0e4>
1001e1f4:	94bfff84 	addi	r18,r18,-2
1001e1f8:	340d883a 	add	r6,r6,r16
1001e1fc:	003f1606 	br	1001de58 <__alt_data_end+0xf801de58>
1001e200:	94bfff84 	addi	r18,r18,-2
1001e204:	1c07883a 	add	r3,r3,r16
1001e208:	003ea906 	br	1001dcb0 <__alt_data_end+0xf801dcb0>

1001e20c <__umoddi3>:
1001e20c:	defff304 	addi	sp,sp,-52
1001e210:	dd000715 	stw	r20,28(sp)
1001e214:	dcc00615 	stw	r19,24(sp)
1001e218:	dc800515 	stw	r18,20(sp)
1001e21c:	dc400415 	stw	r17,16(sp)
1001e220:	dc000315 	stw	r16,12(sp)
1001e224:	dfc00c15 	stw	ra,48(sp)
1001e228:	df000b15 	stw	fp,44(sp)
1001e22c:	ddc00a15 	stw	r23,40(sp)
1001e230:	dd800915 	stw	r22,36(sp)
1001e234:	dd400815 	stw	r21,32(sp)
1001e238:	2025883a 	mov	r18,r4
1001e23c:	2823883a 	mov	r17,r5
1001e240:	3021883a 	mov	r16,r6
1001e244:	2027883a 	mov	r19,r4
1001e248:	2829883a 	mov	r20,r5
1001e24c:	38003a1e 	bne	r7,zero,1001e338 <__umoddi3+0x12c>
1001e250:	2980522e 	bgeu	r5,r6,1001e39c <__umoddi3+0x190>
1001e254:	00bfffd4 	movui	r2,65535
1001e258:	1180a436 	bltu	r2,r6,1001e4ec <__umoddi3+0x2e0>
1001e25c:	00803fc4 	movi	r2,255
1001e260:	11816036 	bltu	r2,r6,1001e7e4 <__umoddi3+0x5d8>
1001e264:	0005883a 	mov	r2,zero
1001e268:	0009883a 	mov	r4,zero
1001e26c:	3084d83a 	srl	r2,r6,r2
1001e270:	00c400b4 	movhi	r3,4098
1001e274:	18ce8d04 	addi	r3,r3,14900
1001e278:	05400804 	movi	r21,32
1001e27c:	1885883a 	add	r2,r3,r2
1001e280:	10800003 	ldbu	r2,0(r2)
1001e284:	1109883a 	add	r4,r2,r4
1001e288:	a92bc83a 	sub	r21,r21,r4
1001e28c:	a8010e26 	beq	r21,zero,1001e6c8 <__umoddi3+0x4bc>
1001e290:	8d62983a 	sll	r17,r17,r21
1001e294:	9108d83a 	srl	r4,r18,r4
1001e298:	3560983a 	sll	r16,r6,r21
1001e29c:	9566983a 	sll	r19,r18,r21
1001e2a0:	8928b03a 	or	r20,r17,r4
1001e2a4:	8022d43a 	srli	r17,r16,16
1001e2a8:	a009883a 	mov	r4,r20
1001e2ac:	84bfffcc 	andi	r18,r16,65535
1001e2b0:	880b883a 	mov	r5,r17
1001e2b4:	00146f40 	call	100146f4 <__umodsi3>
1001e2b8:	a009883a 	mov	r4,r20
1001e2bc:	880b883a 	mov	r5,r17
1001e2c0:	102d883a 	mov	r22,r2
1001e2c4:	00146ec0 	call	100146ec <__udivsi3>
1001e2c8:	1009883a 	mov	r4,r2
1001e2cc:	900b883a 	mov	r5,r18
1001e2d0:	00146fc0 	call	100146fc <__mulsi3>
1001e2d4:	1009883a 	mov	r4,r2
1001e2d8:	b006943a 	slli	r3,r22,16
1001e2dc:	9804d43a 	srli	r2,r19,16
1001e2e0:	1886b03a 	or	r3,r3,r2
1001e2e4:	1900042e 	bgeu	r3,r4,1001e2f8 <__umoddi3+0xec>
1001e2e8:	1c07883a 	add	r3,r3,r16
1001e2ec:	1c000236 	bltu	r3,r16,1001e2f8 <__umoddi3+0xec>
1001e2f0:	1900012e 	bgeu	r3,r4,1001e2f8 <__umoddi3+0xec>
1001e2f4:	1c07883a 	add	r3,r3,r16
1001e2f8:	1929c83a 	sub	r20,r3,r4
1001e2fc:	a009883a 	mov	r4,r20
1001e300:	880b883a 	mov	r5,r17
1001e304:	00146f40 	call	100146f4 <__umodsi3>
1001e308:	102d883a 	mov	r22,r2
1001e30c:	a009883a 	mov	r4,r20
1001e310:	880b883a 	mov	r5,r17
1001e314:	b02c943a 	slli	r22,r22,16
1001e318:	00146ec0 	call	100146ec <__udivsi3>
1001e31c:	1009883a 	mov	r4,r2
1001e320:	900b883a 	mov	r5,r18
1001e324:	9cffffcc 	andi	r19,r19,65535
1001e328:	00146fc0 	call	100146fc <__mulsi3>
1001e32c:	b4e6b03a 	or	r19,r22,r19
1001e330:	9880572e 	bgeu	r19,r2,1001e490 <__umoddi3+0x284>
1001e334:	00005206 	br	1001e480 <__umoddi3+0x274>
1001e338:	29c05936 	bltu	r5,r7,1001e4a0 <__umoddi3+0x294>
1001e33c:	00bfffd4 	movui	r2,65535
1001e340:	11c0652e 	bgeu	r2,r7,1001e4d8 <__umoddi3+0x2cc>
1001e344:	00804034 	movhi	r2,256
1001e348:	10bfffc4 	addi	r2,r2,-1
1001e34c:	11c11936 	bltu	r2,r7,1001e7b4 <__umoddi3+0x5a8>
1001e350:	00c00404 	movi	r3,16
1001e354:	1827883a 	mov	r19,r3
1001e358:	38c6d83a 	srl	r3,r7,r3
1001e35c:	010400b4 	movhi	r4,4098
1001e360:	210e8d04 	addi	r4,r4,14900
1001e364:	04000804 	movi	r16,32
1001e368:	20c7883a 	add	r3,r4,r3
1001e36c:	18800003 	ldbu	r2,0(r3)
1001e370:	14e7883a 	add	r19,r2,r19
1001e374:	84e1c83a 	sub	r16,r16,r19
1001e378:	8000671e 	bne	r16,zero,1001e518 <__umoddi3+0x30c>
1001e37c:	3c400136 	bltu	r7,r17,1001e384 <__umoddi3+0x178>
1001e380:	91812536 	bltu	r18,r6,1001e818 <__umoddi3+0x60c>
1001e384:	9185c83a 	sub	r2,r18,r6
1001e388:	89e3c83a 	sub	r17,r17,r7
1001e38c:	90a5803a 	cmpltu	r18,r18,r2
1001e390:	8ca9c83a 	sub	r20,r17,r18
1001e394:	a007883a 	mov	r3,r20
1001e398:	00004306 	br	1001e4a8 <__umoddi3+0x29c>
1001e39c:	3000041e 	bne	r6,zero,1001e3b0 <__umoddi3+0x1a4>
1001e3a0:	01000044 	movi	r4,1
1001e3a4:	000b883a 	mov	r5,zero
1001e3a8:	00146ec0 	call	100146ec <__udivsi3>
1001e3ac:	1021883a 	mov	r16,r2
1001e3b0:	00bfffd4 	movui	r2,65535
1001e3b4:	1400532e 	bgeu	r2,r16,1001e504 <__umoddi3+0x2f8>
1001e3b8:	00804034 	movhi	r2,256
1001e3bc:	10bfffc4 	addi	r2,r2,-1
1001e3c0:	14010536 	bltu	r2,r16,1001e7d8 <__umoddi3+0x5cc>
1001e3c4:	00800404 	movi	r2,16
1001e3c8:	1007883a 	mov	r3,r2
1001e3cc:	8084d83a 	srl	r2,r16,r2
1001e3d0:	010400b4 	movhi	r4,4098
1001e3d4:	210e8d04 	addi	r4,r4,14900
1001e3d8:	05400804 	movi	r21,32
1001e3dc:	2085883a 	add	r2,r4,r2
1001e3e0:	10800003 	ldbu	r2,0(r2)
1001e3e4:	10c7883a 	add	r3,r2,r3
1001e3e8:	a8ebc83a 	sub	r21,r21,r3
1001e3ec:	a800b81e 	bne	r21,zero,1001e6d0 <__umoddi3+0x4c4>
1001e3f0:	8028d43a 	srli	r20,r16,16
1001e3f4:	8c23c83a 	sub	r17,r17,r16
1001e3f8:	85bfffcc 	andi	r22,r16,65535
1001e3fc:	8809883a 	mov	r4,r17
1001e400:	a00b883a 	mov	r5,r20
1001e404:	00146f40 	call	100146f4 <__umodsi3>
1001e408:	8809883a 	mov	r4,r17
1001e40c:	a00b883a 	mov	r5,r20
1001e410:	1025883a 	mov	r18,r2
1001e414:	00146ec0 	call	100146ec <__udivsi3>
1001e418:	1009883a 	mov	r4,r2
1001e41c:	b00b883a 	mov	r5,r22
1001e420:	00146fc0 	call	100146fc <__mulsi3>
1001e424:	1009883a 	mov	r4,r2
1001e428:	9006943a 	slli	r3,r18,16
1001e42c:	9804d43a 	srli	r2,r19,16
1001e430:	1886b03a 	or	r3,r3,r2
1001e434:	1900032e 	bgeu	r3,r4,1001e444 <__umoddi3+0x238>
1001e438:	1c07883a 	add	r3,r3,r16
1001e43c:	1c000136 	bltu	r3,r16,1001e444 <__umoddi3+0x238>
1001e440:	1900f336 	bltu	r3,r4,1001e810 <__umoddi3+0x604>
1001e444:	1923c83a 	sub	r17,r3,r4
1001e448:	8809883a 	mov	r4,r17
1001e44c:	a00b883a 	mov	r5,r20
1001e450:	00146f40 	call	100146f4 <__umodsi3>
1001e454:	102f883a 	mov	r23,r2
1001e458:	8809883a 	mov	r4,r17
1001e45c:	a00b883a 	mov	r5,r20
1001e460:	b82e943a 	slli	r23,r23,16
1001e464:	00146ec0 	call	100146ec <__udivsi3>
1001e468:	1009883a 	mov	r4,r2
1001e46c:	b00b883a 	mov	r5,r22
1001e470:	9cffffcc 	andi	r19,r19,65535
1001e474:	00146fc0 	call	100146fc <__mulsi3>
1001e478:	bce6b03a 	or	r19,r23,r19
1001e47c:	9880042e 	bgeu	r19,r2,1001e490 <__umoddi3+0x284>
1001e480:	9c27883a 	add	r19,r19,r16
1001e484:	9c000236 	bltu	r19,r16,1001e490 <__umoddi3+0x284>
1001e488:	9880012e 	bgeu	r19,r2,1001e490 <__umoddi3+0x284>
1001e48c:	9c27883a 	add	r19,r19,r16
1001e490:	9885c83a 	sub	r2,r19,r2
1001e494:	1544d83a 	srl	r2,r2,r21
1001e498:	0007883a 	mov	r3,zero
1001e49c:	00000206 	br	1001e4a8 <__umoddi3+0x29c>
1001e4a0:	2005883a 	mov	r2,r4
1001e4a4:	2807883a 	mov	r3,r5
1001e4a8:	dfc00c17 	ldw	ra,48(sp)
1001e4ac:	df000b17 	ldw	fp,44(sp)
1001e4b0:	ddc00a17 	ldw	r23,40(sp)
1001e4b4:	dd800917 	ldw	r22,36(sp)
1001e4b8:	dd400817 	ldw	r21,32(sp)
1001e4bc:	dd000717 	ldw	r20,28(sp)
1001e4c0:	dcc00617 	ldw	r19,24(sp)
1001e4c4:	dc800517 	ldw	r18,20(sp)
1001e4c8:	dc400417 	ldw	r17,16(sp)
1001e4cc:	dc000317 	ldw	r16,12(sp)
1001e4d0:	dec00d04 	addi	sp,sp,52
1001e4d4:	f800283a 	ret
1001e4d8:	00803fc4 	movi	r2,255
1001e4dc:	11c0b236 	bltu	r2,r7,1001e7a8 <__umoddi3+0x59c>
1001e4e0:	0007883a 	mov	r3,zero
1001e4e4:	0027883a 	mov	r19,zero
1001e4e8:	003f9b06 	br	1001e358 <__alt_data_end+0xf801e358>
1001e4ec:	00804034 	movhi	r2,256
1001e4f0:	10bfffc4 	addi	r2,r2,-1
1001e4f4:	1180b236 	bltu	r2,r6,1001e7c0 <__umoddi3+0x5b4>
1001e4f8:	00800404 	movi	r2,16
1001e4fc:	1009883a 	mov	r4,r2
1001e500:	003f5a06 	br	1001e26c <__alt_data_end+0xf801e26c>
1001e504:	00803fc4 	movi	r2,255
1001e508:	1400b036 	bltu	r2,r16,1001e7cc <__umoddi3+0x5c0>
1001e50c:	0005883a 	mov	r2,zero
1001e510:	0007883a 	mov	r3,zero
1001e514:	003fad06 	br	1001e3cc <__alt_data_end+0xf801e3cc>
1001e518:	34c4d83a 	srl	r2,r6,r19
1001e51c:	3c0e983a 	sll	r7,r7,r16
1001e520:	8cf8d83a 	srl	fp,r17,r19
1001e524:	8c22983a 	sll	r17,r17,r16
1001e528:	38a8b03a 	or	r20,r7,r2
1001e52c:	a02ad43a 	srli	r21,r20,16
1001e530:	94c4d83a 	srl	r2,r18,r19
1001e534:	e009883a 	mov	r4,fp
1001e538:	a80b883a 	mov	r5,r21
1001e53c:	342c983a 	sll	r22,r6,r16
1001e540:	88a2b03a 	or	r17,r17,r2
1001e544:	00146f40 	call	100146f4 <__umodsi3>
1001e548:	e009883a 	mov	r4,fp
1001e54c:	a80b883a 	mov	r5,r21
1001e550:	a5ffffcc 	andi	r23,r20,65535
1001e554:	d8800215 	stw	r2,8(sp)
1001e558:	00146ec0 	call	100146ec <__udivsi3>
1001e55c:	1009883a 	mov	r4,r2
1001e560:	b80b883a 	mov	r5,r23
1001e564:	1039883a 	mov	fp,r2
1001e568:	00146fc0 	call	100146fc <__mulsi3>
1001e56c:	d8c00217 	ldw	r3,8(sp)
1001e570:	1009883a 	mov	r4,r2
1001e574:	8804d43a 	srli	r2,r17,16
1001e578:	1806943a 	slli	r3,r3,16
1001e57c:	9424983a 	sll	r18,r18,r16
1001e580:	1886b03a 	or	r3,r3,r2
1001e584:	1900042e 	bgeu	r3,r4,1001e598 <__umoddi3+0x38c>
1001e588:	1d07883a 	add	r3,r3,r20
1001e58c:	e0bfffc4 	addi	r2,fp,-1
1001e590:	1d009b2e 	bgeu	r3,r20,1001e800 <__umoddi3+0x5f4>
1001e594:	1039883a 	mov	fp,r2
1001e598:	1907c83a 	sub	r3,r3,r4
1001e59c:	1809883a 	mov	r4,r3
1001e5a0:	a80b883a 	mov	r5,r21
1001e5a4:	d8c00215 	stw	r3,8(sp)
1001e5a8:	00146f40 	call	100146f4 <__umodsi3>
1001e5ac:	d8c00217 	ldw	r3,8(sp)
1001e5b0:	a80b883a 	mov	r5,r21
1001e5b4:	d8800015 	stw	r2,0(sp)
1001e5b8:	1809883a 	mov	r4,r3
1001e5bc:	00146ec0 	call	100146ec <__udivsi3>
1001e5c0:	1009883a 	mov	r4,r2
1001e5c4:	b80b883a 	mov	r5,r23
1001e5c8:	102b883a 	mov	r21,r2
1001e5cc:	00146fc0 	call	100146fc <__mulsi3>
1001e5d0:	d9c00017 	ldw	r7,0(sp)
1001e5d4:	8c7fffcc 	andi	r17,r17,65535
1001e5d8:	380e943a 	slli	r7,r7,16
1001e5dc:	3c4eb03a 	or	r7,r7,r17
1001e5e0:	3880042e 	bgeu	r7,r2,1001e5f4 <__umoddi3+0x3e8>
1001e5e4:	3d0f883a 	add	r7,r7,r20
1001e5e8:	a8ffffc4 	addi	r3,r21,-1
1001e5ec:	3d00802e 	bgeu	r7,r20,1001e7f0 <__umoddi3+0x5e4>
1001e5f0:	182b883a 	mov	r21,r3
1001e5f4:	e038943a 	slli	fp,fp,16
1001e5f8:	b010d43a 	srli	r8,r22,16
1001e5fc:	b1bfffcc 	andi	r6,r22,65535
1001e600:	af2ab03a 	or	r21,r21,fp
1001e604:	a82ed43a 	srli	r23,r21,16
1001e608:	ad7fffcc 	andi	r21,r21,65535
1001e60c:	300b883a 	mov	r5,r6
1001e610:	a809883a 	mov	r4,r21
1001e614:	38a3c83a 	sub	r17,r7,r2
1001e618:	d9800115 	stw	r6,4(sp)
1001e61c:	da000015 	stw	r8,0(sp)
1001e620:	00146fc0 	call	100146fc <__mulsi3>
1001e624:	da000017 	ldw	r8,0(sp)
1001e628:	a809883a 	mov	r4,r21
1001e62c:	1039883a 	mov	fp,r2
1001e630:	400b883a 	mov	r5,r8
1001e634:	da000215 	stw	r8,8(sp)
1001e638:	00146fc0 	call	100146fc <__mulsi3>
1001e63c:	d9800117 	ldw	r6,4(sp)
1001e640:	b809883a 	mov	r4,r23
1001e644:	d8800015 	stw	r2,0(sp)
1001e648:	300b883a 	mov	r5,r6
1001e64c:	00146fc0 	call	100146fc <__mulsi3>
1001e650:	d8c00217 	ldw	r3,8(sp)
1001e654:	b809883a 	mov	r4,r23
1001e658:	102b883a 	mov	r21,r2
1001e65c:	180b883a 	mov	r5,r3
1001e660:	00146fc0 	call	100146fc <__mulsi3>
1001e664:	d9c00017 	ldw	r7,0(sp)
1001e668:	1007883a 	mov	r3,r2
1001e66c:	e004d43a 	srli	r2,fp,16
1001e670:	a9c9883a 	add	r4,r21,r7
1001e674:	2089883a 	add	r4,r4,r2
1001e678:	2540022e 	bgeu	r4,r21,1001e684 <__umoddi3+0x478>
1001e67c:	00800074 	movhi	r2,1
1001e680:	1887883a 	add	r3,r3,r2
1001e684:	2004d43a 	srli	r2,r4,16
1001e688:	2008943a 	slli	r4,r4,16
1001e68c:	e73fffcc 	andi	fp,fp,65535
1001e690:	1887883a 	add	r3,r3,r2
1001e694:	2709883a 	add	r4,r4,fp
1001e698:	88c03d36 	bltu	r17,r3,1001e790 <__umoddi3+0x584>
1001e69c:	88c06126 	beq	r17,r3,1001e824 <__umoddi3+0x618>
1001e6a0:	88c7c83a 	sub	r3,r17,r3
1001e6a4:	202d883a 	mov	r22,r4
1001e6a8:	95adc83a 	sub	r22,r18,r22
1001e6ac:	95a5803a 	cmpltu	r18,r18,r22
1001e6b0:	1c87c83a 	sub	r3,r3,r18
1001e6b4:	1cc4983a 	sll	r2,r3,r19
1001e6b8:	b42cd83a 	srl	r22,r22,r16
1001e6bc:	1c06d83a 	srl	r3,r3,r16
1001e6c0:	1584b03a 	or	r2,r2,r22
1001e6c4:	003f7806 	br	1001e4a8 <__alt_data_end+0xf801e4a8>
1001e6c8:	002b883a 	mov	r21,zero
1001e6cc:	003ef506 	br	1001e2a4 <__alt_data_end+0xf801e2a4>
1001e6d0:	8560983a 	sll	r16,r16,r21
1001e6d4:	88e6d83a 	srl	r19,r17,r3
1001e6d8:	90c6d83a 	srl	r3,r18,r3
1001e6dc:	8028d43a 	srli	r20,r16,16
1001e6e0:	8d62983a 	sll	r17,r17,r21
1001e6e4:	9809883a 	mov	r4,r19
1001e6e8:	a00b883a 	mov	r5,r20
1001e6ec:	88eeb03a 	or	r23,r17,r3
1001e6f0:	00146f40 	call	100146f4 <__umodsi3>
1001e6f4:	9809883a 	mov	r4,r19
1001e6f8:	a00b883a 	mov	r5,r20
1001e6fc:	1023883a 	mov	r17,r2
1001e700:	85bfffcc 	andi	r22,r16,65535
1001e704:	00146ec0 	call	100146ec <__udivsi3>
1001e708:	1009883a 	mov	r4,r2
1001e70c:	b00b883a 	mov	r5,r22
1001e710:	00146fc0 	call	100146fc <__mulsi3>
1001e714:	1007883a 	mov	r3,r2
1001e718:	8808943a 	slli	r4,r17,16
1001e71c:	b804d43a 	srli	r2,r23,16
1001e720:	9566983a 	sll	r19,r18,r21
1001e724:	2088b03a 	or	r4,r4,r2
1001e728:	20c0042e 	bgeu	r4,r3,1001e73c <__umoddi3+0x530>
1001e72c:	2409883a 	add	r4,r4,r16
1001e730:	24000236 	bltu	r4,r16,1001e73c <__umoddi3+0x530>
1001e734:	20c0012e 	bgeu	r4,r3,1001e73c <__umoddi3+0x530>
1001e738:	2409883a 	add	r4,r4,r16
1001e73c:	20e5c83a 	sub	r18,r4,r3
1001e740:	9009883a 	mov	r4,r18
1001e744:	a00b883a 	mov	r5,r20
1001e748:	00146f40 	call	100146f4 <__umodsi3>
1001e74c:	1023883a 	mov	r17,r2
1001e750:	9009883a 	mov	r4,r18
1001e754:	a00b883a 	mov	r5,r20
1001e758:	8822943a 	slli	r17,r17,16
1001e75c:	00146ec0 	call	100146ec <__udivsi3>
1001e760:	1009883a 	mov	r4,r2
1001e764:	b00b883a 	mov	r5,r22
1001e768:	bdffffcc 	andi	r23,r23,65535
1001e76c:	00146fc0 	call	100146fc <__mulsi3>
1001e770:	8de2b03a 	or	r17,r17,r23
1001e774:	8880042e 	bgeu	r17,r2,1001e788 <__umoddi3+0x57c>
1001e778:	8c23883a 	add	r17,r17,r16
1001e77c:	8c000236 	bltu	r17,r16,1001e788 <__umoddi3+0x57c>
1001e780:	8880012e 	bgeu	r17,r2,1001e788 <__umoddi3+0x57c>
1001e784:	8c23883a 	add	r17,r17,r16
1001e788:	88a3c83a 	sub	r17,r17,r2
1001e78c:	003f1b06 	br	1001e3fc <__alt_data_end+0xf801e3fc>
1001e790:	25adc83a 	sub	r22,r4,r22
1001e794:	1d07c83a 	sub	r3,r3,r20
1001e798:	2589803a 	cmpltu	r4,r4,r22
1001e79c:	1907c83a 	sub	r3,r3,r4
1001e7a0:	88c7c83a 	sub	r3,r17,r3
1001e7a4:	003fc006 	br	1001e6a8 <__alt_data_end+0xf801e6a8>
1001e7a8:	00c00204 	movi	r3,8
1001e7ac:	1827883a 	mov	r19,r3
1001e7b0:	003ee906 	br	1001e358 <__alt_data_end+0xf801e358>
1001e7b4:	00c00604 	movi	r3,24
1001e7b8:	1827883a 	mov	r19,r3
1001e7bc:	003ee606 	br	1001e358 <__alt_data_end+0xf801e358>
1001e7c0:	00800604 	movi	r2,24
1001e7c4:	1009883a 	mov	r4,r2
1001e7c8:	003ea806 	br	1001e26c <__alt_data_end+0xf801e26c>
1001e7cc:	00800204 	movi	r2,8
1001e7d0:	1007883a 	mov	r3,r2
1001e7d4:	003efd06 	br	1001e3cc <__alt_data_end+0xf801e3cc>
1001e7d8:	00800604 	movi	r2,24
1001e7dc:	1007883a 	mov	r3,r2
1001e7e0:	003efa06 	br	1001e3cc <__alt_data_end+0xf801e3cc>
1001e7e4:	00800204 	movi	r2,8
1001e7e8:	1009883a 	mov	r4,r2
1001e7ec:	003e9f06 	br	1001e26c <__alt_data_end+0xf801e26c>
1001e7f0:	38bf7f2e 	bgeu	r7,r2,1001e5f0 <__alt_data_end+0xf801e5f0>
1001e7f4:	ad7fff84 	addi	r21,r21,-2
1001e7f8:	3d0f883a 	add	r7,r7,r20
1001e7fc:	003f7d06 	br	1001e5f4 <__alt_data_end+0xf801e5f4>
1001e800:	193f642e 	bgeu	r3,r4,1001e594 <__alt_data_end+0xf801e594>
1001e804:	e73fff84 	addi	fp,fp,-2
1001e808:	1d07883a 	add	r3,r3,r20
1001e80c:	003f6206 	br	1001e598 <__alt_data_end+0xf801e598>
1001e810:	1c07883a 	add	r3,r3,r16
1001e814:	003f0b06 	br	1001e444 <__alt_data_end+0xf801e444>
1001e818:	9005883a 	mov	r2,r18
1001e81c:	a007883a 	mov	r3,r20
1001e820:	003f2106 	br	1001e4a8 <__alt_data_end+0xf801e4a8>
1001e824:	913fda36 	bltu	r18,r4,1001e790 <__alt_data_end+0xf801e790>
1001e828:	202d883a 	mov	r22,r4
1001e82c:	0007883a 	mov	r3,zero
1001e830:	003f9d06 	br	1001e6a8 <__alt_data_end+0xf801e6a8>

1001e834 <_fpadd_parts>:
1001e834:	2005883a 	mov	r2,r4
1001e838:	21000017 	ldw	r4,0(r4)
1001e83c:	01c00044 	movi	r7,1
1001e840:	3900622e 	bgeu	r7,r4,1001e9cc <_fpadd_parts+0x198>
1001e844:	28c00017 	ldw	r3,0(r5)
1001e848:	38c05f2e 	bgeu	r7,r3,1001e9c8 <_fpadd_parts+0x194>
1001e84c:	01c00104 	movi	r7,4
1001e850:	21c0c626 	beq	r4,r7,1001eb6c <_fpadd_parts+0x338>
1001e854:	19c05c26 	beq	r3,r7,1001e9c8 <_fpadd_parts+0x194>
1001e858:	01c00084 	movi	r7,2
1001e85c:	19c06b26 	beq	r3,r7,1001ea0c <_fpadd_parts+0x1d8>
1001e860:	21c05926 	beq	r4,r7,1001e9c8 <_fpadd_parts+0x194>
1001e864:	11c00217 	ldw	r7,8(r2)
1001e868:	2ac00217 	ldw	r11,8(r5)
1001e86c:	13000317 	ldw	r12,12(r2)
1001e870:	13400417 	ldw	r13,16(r2)
1001e874:	3ac9c83a 	sub	r4,r7,r11
1001e878:	2a000317 	ldw	r8,12(r5)
1001e87c:	2a400417 	ldw	r9,16(r5)
1001e880:	2015883a 	mov	r10,r4
1001e884:	20007516 	blt	r4,zero,1001ea5c <_fpadd_parts+0x228>
1001e888:	00c00fc4 	movi	r3,63
1001e88c:	1a805016 	blt	r3,r10,1001e9d0 <_fpadd_parts+0x19c>
1001e890:	0100870e 	bge	zero,r4,1001eab0 <_fpadd_parts+0x27c>
1001e894:	50fff804 	addi	r3,r10,-32
1001e898:	18009916 	blt	r3,zero,1001eb00 <_fpadd_parts+0x2cc>
1001e89c:	48d6d83a 	srl	r11,r9,r3
1001e8a0:	001d883a 	mov	r14,zero
1001e8a4:	18009e16 	blt	r3,zero,1001eb20 <_fpadd_parts+0x2ec>
1001e8a8:	01000044 	movi	r4,1
1001e8ac:	20c6983a 	sll	r3,r4,r3
1001e8b0:	0015883a 	mov	r10,zero
1001e8b4:	513fffc4 	addi	r4,r10,-1
1001e8b8:	2295403a 	cmpgeu	r10,r4,r10
1001e8bc:	1a87c83a 	sub	r3,r3,r10
1001e8c0:	1a52703a 	and	r9,r3,r9
1001e8c4:	2210703a 	and	r8,r4,r8
1001e8c8:	4250b03a 	or	r8,r8,r9
1001e8cc:	4010c03a 	cmpne	r8,r8,zero
1001e8d0:	42d0b03a 	or	r8,r8,r11
1001e8d4:	7013883a 	mov	r9,r14
1001e8d8:	11000117 	ldw	r4,4(r2)
1001e8dc:	28800117 	ldw	r2,4(r5)
1001e8e0:	20804126 	beq	r4,r2,1001e9e8 <_fpadd_parts+0x1b4>
1001e8e4:	20006326 	beq	r4,zero,1001ea74 <_fpadd_parts+0x240>
1001e8e8:	4305c83a 	sub	r2,r8,r12
1001e8ec:	4091803a 	cmpltu	r8,r8,r2
1001e8f0:	4b47c83a 	sub	r3,r9,r13
1001e8f4:	1a07c83a 	sub	r3,r3,r8
1001e8f8:	18006316 	blt	r3,zero,1001ea88 <_fpadd_parts+0x254>
1001e8fc:	30000115 	stw	zero,4(r6)
1001e900:	31c00215 	stw	r7,8(r6)
1001e904:	30800315 	stw	r2,12(r6)
1001e908:	30c00415 	stw	r3,16(r6)
1001e90c:	11ffffc4 	addi	r7,r2,-1
1001e910:	388b403a 	cmpgeu	r5,r7,r2
1001e914:	194bc83a 	sub	r5,r3,r5
1001e918:	01040034 	movhi	r4,4096
1001e91c:	213fffc4 	addi	r4,r4,-1
1001e920:	21401736 	bltu	r4,r5,1001e980 <_fpadd_parts+0x14c>
1001e924:	29008226 	beq	r5,r4,1001eb30 <_fpadd_parts+0x2fc>
1001e928:	31400217 	ldw	r5,8(r6)
1001e92c:	02840034 	movhi	r10,4096
1001e930:	52bfffc4 	addi	r10,r10,-1
1001e934:	033fff84 	movi	r12,-2
1001e938:	297fffc4 	addi	r5,r5,-1
1001e93c:	00000106 	br	1001e944 <_fpadd_parts+0x110>
1001e940:	3a804a26 	beq	r7,r10,1001ea6c <_fpadd_parts+0x238>
1001e944:	1089883a 	add	r4,r2,r2
1001e948:	2091803a 	cmpltu	r8,r4,r2
1001e94c:	18c7883a 	add	r3,r3,r3
1001e950:	227fffc4 	addi	r9,r4,-1
1001e954:	40d1883a 	add	r8,r8,r3
1001e958:	490f403a 	cmpgeu	r7,r9,r4
1001e95c:	41cfc83a 	sub	r7,r8,r7
1001e960:	2817883a 	mov	r11,r5
1001e964:	2005883a 	mov	r2,r4
1001e968:	4007883a 	mov	r3,r8
1001e96c:	297fffc4 	addi	r5,r5,-1
1001e970:	51fff32e 	bgeu	r10,r7,1001e940 <__alt_data_end+0xf801e940>
1001e974:	31000315 	stw	r4,12(r6)
1001e978:	32000415 	stw	r8,16(r6)
1001e97c:	32c00215 	stw	r11,8(r6)
1001e980:	010000c4 	movi	r4,3
1001e984:	31000015 	stw	r4,0(r6)
1001e988:	01080034 	movhi	r4,8192
1001e98c:	213fffc4 	addi	r4,r4,-1
1001e990:	20c00b2e 	bgeu	r4,r3,1001e9c0 <_fpadd_parts+0x18c>
1001e994:	180e97fa 	slli	r7,r3,31
1001e998:	1008d07a 	srli	r4,r2,1
1001e99c:	31400217 	ldw	r5,8(r6)
1001e9a0:	1806d07a 	srli	r3,r3,1
1001e9a4:	1080004c 	andi	r2,r2,1
1001e9a8:	3908b03a 	or	r4,r7,r4
1001e9ac:	1108b03a 	or	r4,r2,r4
1001e9b0:	29400044 	addi	r5,r5,1
1001e9b4:	31000315 	stw	r4,12(r6)
1001e9b8:	30c00415 	stw	r3,16(r6)
1001e9bc:	31400215 	stw	r5,8(r6)
1001e9c0:	3005883a 	mov	r2,r6
1001e9c4:	f800283a 	ret
1001e9c8:	2805883a 	mov	r2,r5
1001e9cc:	f800283a 	ret
1001e9d0:	59c01e0e 	bge	r11,r7,1001ea4c <_fpadd_parts+0x218>
1001e9d4:	11000117 	ldw	r4,4(r2)
1001e9d8:	28800117 	ldw	r2,4(r5)
1001e9dc:	0011883a 	mov	r8,zero
1001e9e0:	0013883a 	mov	r9,zero
1001e9e4:	20bfbf1e 	bne	r4,r2,1001e8e4 <__alt_data_end+0xf801e8e4>
1001e9e8:	4305883a 	add	r2,r8,r12
1001e9ec:	1207803a 	cmpltu	r3,r2,r8
1001e9f0:	4b53883a 	add	r9,r9,r13
1001e9f4:	1a47883a 	add	r3,r3,r9
1001e9f8:	31000115 	stw	r4,4(r6)
1001e9fc:	31c00215 	stw	r7,8(r6)
1001ea00:	30800315 	stw	r2,12(r6)
1001ea04:	30c00415 	stw	r3,16(r6)
1001ea08:	003fdd06 	br	1001e980 <__alt_data_end+0xf801e980>
1001ea0c:	20ffef1e 	bne	r4,r3,1001e9cc <__alt_data_end+0xf801e9cc>
1001ea10:	31000015 	stw	r4,0(r6)
1001ea14:	10c00117 	ldw	r3,4(r2)
1001ea18:	30c00115 	stw	r3,4(r6)
1001ea1c:	10c00217 	ldw	r3,8(r2)
1001ea20:	11000117 	ldw	r4,4(r2)
1001ea24:	29400117 	ldw	r5,4(r5)
1001ea28:	30c00215 	stw	r3,8(r6)
1001ea2c:	10c00317 	ldw	r3,12(r2)
1001ea30:	2908703a 	and	r4,r5,r4
1001ea34:	30c00315 	stw	r3,12(r6)
1001ea38:	10c00417 	ldw	r3,16(r2)
1001ea3c:	31000115 	stw	r4,4(r6)
1001ea40:	3005883a 	mov	r2,r6
1001ea44:	30c00415 	stw	r3,16(r6)
1001ea48:	f800283a 	ret
1001ea4c:	580f883a 	mov	r7,r11
1001ea50:	0019883a 	mov	r12,zero
1001ea54:	001b883a 	mov	r13,zero
1001ea58:	003f9f06 	br	1001e8d8 <__alt_data_end+0xf801e8d8>
1001ea5c:	0115c83a 	sub	r10,zero,r4
1001ea60:	00c00fc4 	movi	r3,63
1001ea64:	1abfda16 	blt	r3,r10,1001e9d0 <__alt_data_end+0xf801e9d0>
1001ea68:	003f8906 	br	1001e890 <__alt_data_end+0xf801e890>
1001ea6c:	627fb52e 	bgeu	r12,r9,1001e944 <__alt_data_end+0xf801e944>
1001ea70:	003fc006 	br	1001e974 <__alt_data_end+0xf801e974>
1001ea74:	6205c83a 	sub	r2,r12,r8
1001ea78:	6099803a 	cmpltu	r12,r12,r2
1001ea7c:	6a47c83a 	sub	r3,r13,r9
1001ea80:	1b07c83a 	sub	r3,r3,r12
1001ea84:	183f9d0e 	bge	r3,zero,1001e8fc <__alt_data_end+0xf801e8fc>
1001ea88:	0085c83a 	sub	r2,zero,r2
1001ea8c:	1008c03a 	cmpne	r4,r2,zero
1001ea90:	00c7c83a 	sub	r3,zero,r3
1001ea94:	1907c83a 	sub	r3,r3,r4
1001ea98:	01000044 	movi	r4,1
1001ea9c:	31000115 	stw	r4,4(r6)
1001eaa0:	31c00215 	stw	r7,8(r6)
1001eaa4:	30800315 	stw	r2,12(r6)
1001eaa8:	30c00415 	stw	r3,16(r6)
1001eaac:	003f9706 	br	1001e90c <__alt_data_end+0xf801e90c>
1001eab0:	203f8926 	beq	r4,zero,1001e8d8 <__alt_data_end+0xf801e8d8>
1001eab4:	50fff804 	addi	r3,r10,-32
1001eab8:	3a8f883a 	add	r7,r7,r10
1001eabc:	18002316 	blt	r3,zero,1001eb4c <_fpadd_parts+0x318>
1001eac0:	68d6d83a 	srl	r11,r13,r3
1001eac4:	001d883a 	mov	r14,zero
1001eac8:	18001c16 	blt	r3,zero,1001eb3c <_fpadd_parts+0x308>
1001eacc:	01000044 	movi	r4,1
1001ead0:	20c6983a 	sll	r3,r4,r3
1001ead4:	0015883a 	mov	r10,zero
1001ead8:	513fffc4 	addi	r4,r10,-1
1001eadc:	2295403a 	cmpgeu	r10,r4,r10
1001eae0:	1a87c83a 	sub	r3,r3,r10
1001eae4:	1b5a703a 	and	r13,r3,r13
1001eae8:	2318703a 	and	r12,r4,r12
1001eaec:	6358b03a 	or	r12,r12,r13
1001eaf0:	6018c03a 	cmpne	r12,r12,zero
1001eaf4:	62d8b03a 	or	r12,r12,r11
1001eaf8:	701b883a 	mov	r13,r14
1001eafc:	003f7606 	br	1001e8d8 <__alt_data_end+0xf801e8d8>
1001eb00:	4808907a 	slli	r4,r9,1
1001eb04:	02c007c4 	movi	r11,31
1001eb08:	5a97c83a 	sub	r11,r11,r10
1001eb0c:	22c8983a 	sll	r4,r4,r11
1001eb10:	4296d83a 	srl	r11,r8,r10
1001eb14:	4a9cd83a 	srl	r14,r9,r10
1001eb18:	22d6b03a 	or	r11,r4,r11
1001eb1c:	003f6106 	br	1001e8a4 <__alt_data_end+0xf801e8a4>
1001eb20:	00c00044 	movi	r3,1
1001eb24:	1a94983a 	sll	r10,r3,r10
1001eb28:	0007883a 	mov	r3,zero
1001eb2c:	003f6106 	br	1001e8b4 <__alt_data_end+0xf801e8b4>
1001eb30:	013fff84 	movi	r4,-2
1001eb34:	21ff7c2e 	bgeu	r4,r7,1001e928 <__alt_data_end+0xf801e928>
1001eb38:	003f9106 	br	1001e980 <__alt_data_end+0xf801e980>
1001eb3c:	00c00044 	movi	r3,1
1001eb40:	1a94983a 	sll	r10,r3,r10
1001eb44:	0007883a 	mov	r3,zero
1001eb48:	003fe306 	br	1001ead8 <__alt_data_end+0xf801ead8>
1001eb4c:	6816907a 	slli	r11,r13,1
1001eb50:	010007c4 	movi	r4,31
1001eb54:	2289c83a 	sub	r4,r4,r10
1001eb58:	5908983a 	sll	r4,r11,r4
1001eb5c:	6296d83a 	srl	r11,r12,r10
1001eb60:	6a9cd83a 	srl	r14,r13,r10
1001eb64:	22d6b03a 	or	r11,r4,r11
1001eb68:	003fd706 	br	1001eac8 <__alt_data_end+0xf801eac8>
1001eb6c:	193f971e 	bne	r3,r4,1001e9cc <__alt_data_end+0xf801e9cc>
1001eb70:	11000117 	ldw	r4,4(r2)
1001eb74:	28c00117 	ldw	r3,4(r5)
1001eb78:	20ff9426 	beq	r4,r3,1001e9cc <__alt_data_end+0xf801e9cc>
1001eb7c:	008400b4 	movhi	r2,4098
1001eb80:	108f4504 	addi	r2,r2,15636
1001eb84:	f800283a 	ret

1001eb88 <__adddf3>:
1001eb88:	deffec04 	addi	sp,sp,-80
1001eb8c:	d9001115 	stw	r4,68(sp)
1001eb90:	d9401215 	stw	r5,72(sp)
1001eb94:	d9001104 	addi	r4,sp,68
1001eb98:	d9400a04 	addi	r5,sp,40
1001eb9c:	dfc01315 	stw	ra,76(sp)
1001eba0:	d9c01015 	stw	r7,64(sp)
1001eba4:	d9800f15 	stw	r6,60(sp)
1001eba8:	001f7880 	call	1001f788 <__unpack_d>
1001ebac:	d9000f04 	addi	r4,sp,60
1001ebb0:	d9400504 	addi	r5,sp,20
1001ebb4:	001f7880 	call	1001f788 <__unpack_d>
1001ebb8:	d9000a04 	addi	r4,sp,40
1001ebbc:	d9400504 	addi	r5,sp,20
1001ebc0:	d80d883a 	mov	r6,sp
1001ebc4:	001e8340 	call	1001e834 <_fpadd_parts>
1001ebc8:	1009883a 	mov	r4,r2
1001ebcc:	001f5640 	call	1001f564 <__pack_d>
1001ebd0:	dfc01317 	ldw	ra,76(sp)
1001ebd4:	dec01404 	addi	sp,sp,80
1001ebd8:	f800283a 	ret

1001ebdc <__subdf3>:
1001ebdc:	deffec04 	addi	sp,sp,-80
1001ebe0:	d9001115 	stw	r4,68(sp)
1001ebe4:	d9401215 	stw	r5,72(sp)
1001ebe8:	d9001104 	addi	r4,sp,68
1001ebec:	d9400a04 	addi	r5,sp,40
1001ebf0:	dfc01315 	stw	ra,76(sp)
1001ebf4:	d9c01015 	stw	r7,64(sp)
1001ebf8:	d9800f15 	stw	r6,60(sp)
1001ebfc:	001f7880 	call	1001f788 <__unpack_d>
1001ec00:	d9000f04 	addi	r4,sp,60
1001ec04:	d9400504 	addi	r5,sp,20
1001ec08:	001f7880 	call	1001f788 <__unpack_d>
1001ec0c:	d8800617 	ldw	r2,24(sp)
1001ec10:	d9000a04 	addi	r4,sp,40
1001ec14:	d9400504 	addi	r5,sp,20
1001ec18:	d80d883a 	mov	r6,sp
1001ec1c:	1080005c 	xori	r2,r2,1
1001ec20:	d8800615 	stw	r2,24(sp)
1001ec24:	001e8340 	call	1001e834 <_fpadd_parts>
1001ec28:	1009883a 	mov	r4,r2
1001ec2c:	001f5640 	call	1001f564 <__pack_d>
1001ec30:	dfc01317 	ldw	ra,76(sp)
1001ec34:	dec01404 	addi	sp,sp,80
1001ec38:	f800283a 	ret

1001ec3c <__muldf3>:
1001ec3c:	deffe404 	addi	sp,sp,-112
1001ec40:	d9001115 	stw	r4,68(sp)
1001ec44:	d9401215 	stw	r5,72(sp)
1001ec48:	d9001104 	addi	r4,sp,68
1001ec4c:	d9400a04 	addi	r5,sp,40
1001ec50:	dfc01b15 	stw	ra,108(sp)
1001ec54:	d9800f15 	stw	r6,60(sp)
1001ec58:	d9c01015 	stw	r7,64(sp)
1001ec5c:	ddc01a15 	stw	r23,104(sp)
1001ec60:	dd801915 	stw	r22,100(sp)
1001ec64:	dd401815 	stw	r21,96(sp)
1001ec68:	dd001715 	stw	r20,92(sp)
1001ec6c:	dcc01615 	stw	r19,88(sp)
1001ec70:	dc801515 	stw	r18,84(sp)
1001ec74:	dc401415 	stw	r17,80(sp)
1001ec78:	dc001315 	stw	r16,76(sp)
1001ec7c:	001f7880 	call	1001f788 <__unpack_d>
1001ec80:	d9000f04 	addi	r4,sp,60
1001ec84:	d9400504 	addi	r5,sp,20
1001ec88:	001f7880 	call	1001f788 <__unpack_d>
1001ec8c:	d8c00a17 	ldw	r3,40(sp)
1001ec90:	00800044 	movi	r2,1
1001ec94:	10c01136 	bltu	r2,r3,1001ecdc <__muldf3+0xa0>
1001ec98:	d8c00b17 	ldw	r3,44(sp)
1001ec9c:	d8800617 	ldw	r2,24(sp)
1001eca0:	d9000a04 	addi	r4,sp,40
1001eca4:	1884c03a 	cmpne	r2,r3,r2
1001eca8:	d8800b15 	stw	r2,44(sp)
1001ecac:	001f5640 	call	1001f564 <__pack_d>
1001ecb0:	dfc01b17 	ldw	ra,108(sp)
1001ecb4:	ddc01a17 	ldw	r23,104(sp)
1001ecb8:	dd801917 	ldw	r22,100(sp)
1001ecbc:	dd401817 	ldw	r21,96(sp)
1001ecc0:	dd001717 	ldw	r20,92(sp)
1001ecc4:	dcc01617 	ldw	r19,88(sp)
1001ecc8:	dc801517 	ldw	r18,84(sp)
1001eccc:	dc401417 	ldw	r17,80(sp)
1001ecd0:	dc001317 	ldw	r16,76(sp)
1001ecd4:	dec01c04 	addi	sp,sp,112
1001ecd8:	f800283a 	ret
1001ecdc:	d9000517 	ldw	r4,20(sp)
1001ece0:	11000636 	bltu	r2,r4,1001ecfc <__muldf3+0xc0>
1001ece4:	d8800617 	ldw	r2,24(sp)
1001ece8:	d8c00b17 	ldw	r3,44(sp)
1001ecec:	d9000504 	addi	r4,sp,20
1001ecf0:	1884c03a 	cmpne	r2,r3,r2
1001ecf4:	d8800615 	stw	r2,24(sp)
1001ecf8:	003fec06 	br	1001ecac <__alt_data_end+0xf801ecac>
1001ecfc:	00800104 	movi	r2,4
1001ed00:	1880051e 	bne	r3,r2,1001ed18 <__muldf3+0xdc>
1001ed04:	00800084 	movi	r2,2
1001ed08:	20bfe31e 	bne	r4,r2,1001ec98 <__alt_data_end+0xf801ec98>
1001ed0c:	010400b4 	movhi	r4,4098
1001ed10:	210f4504 	addi	r4,r4,15636
1001ed14:	003fe506 	br	1001ecac <__alt_data_end+0xf801ecac>
1001ed18:	2080031e 	bne	r4,r2,1001ed28 <__muldf3+0xec>
1001ed1c:	00800084 	movi	r2,2
1001ed20:	18bffa26 	beq	r3,r2,1001ed0c <__alt_data_end+0xf801ed0c>
1001ed24:	003fef06 	br	1001ece4 <__alt_data_end+0xf801ece4>
1001ed28:	00800084 	movi	r2,2
1001ed2c:	18bfda26 	beq	r3,r2,1001ec98 <__alt_data_end+0xf801ec98>
1001ed30:	20bfec26 	beq	r4,r2,1001ece4 <__alt_data_end+0xf801ece4>
1001ed34:	dc000d17 	ldw	r16,52(sp)
1001ed38:	dd000817 	ldw	r20,32(sp)
1001ed3c:	dc800917 	ldw	r18,36(sp)
1001ed40:	8009883a 	mov	r4,r16
1001ed44:	000b883a 	mov	r5,zero
1001ed48:	a00d883a 	mov	r6,r20
1001ed4c:	000f883a 	mov	r7,zero
1001ed50:	00147240 	call	10014724 <__muldi3>
1001ed54:	dc400e17 	ldw	r17,56(sp)
1001ed58:	9009883a 	mov	r4,r18
1001ed5c:	800d883a 	mov	r6,r16
1001ed60:	000b883a 	mov	r5,zero
1001ed64:	000f883a 	mov	r7,zero
1001ed68:	102f883a 	mov	r23,r2
1001ed6c:	1827883a 	mov	r19,r3
1001ed70:	00147240 	call	10014724 <__muldi3>
1001ed74:	900d883a 	mov	r6,r18
1001ed78:	8809883a 	mov	r4,r17
1001ed7c:	000b883a 	mov	r5,zero
1001ed80:	000f883a 	mov	r7,zero
1001ed84:	102b883a 	mov	r21,r2
1001ed88:	1821883a 	mov	r16,r3
1001ed8c:	00147240 	call	10014724 <__muldi3>
1001ed90:	8809883a 	mov	r4,r17
1001ed94:	000b883a 	mov	r5,zero
1001ed98:	a00d883a 	mov	r6,r20
1001ed9c:	000f883a 	mov	r7,zero
1001eda0:	102d883a 	mov	r22,r2
1001eda4:	1825883a 	mov	r18,r3
1001eda8:	00147240 	call	10014724 <__muldi3>
1001edac:	154b883a 	add	r5,r2,r21
1001edb0:	2889803a 	cmpltu	r4,r5,r2
1001edb4:	1c07883a 	add	r3,r3,r16
1001edb8:	20c9883a 	add	r4,r4,r3
1001edbc:	24004b36 	bltu	r4,r16,1001eeec <__muldf3+0x2b0>
1001edc0:	8100011e 	bne	r16,r4,1001edc8 <__muldf3+0x18c>
1001edc4:	2d404936 	bltu	r5,r21,1001eeec <__muldf3+0x2b0>
1001edc8:	0011883a 	mov	r8,zero
1001edcc:	0007883a 	mov	r3,zero
1001edd0:	2ccb883a 	add	r5,r5,r19
1001edd4:	b80d883a 	mov	r6,r23
1001edd8:	2cc0012e 	bgeu	r5,r19,1001ede0 <__muldf3+0x1a4>
1001eddc:	02000044 	movi	r8,1
1001ede0:	258f883a 	add	r7,r4,r22
1001ede4:	3909803a 	cmpltu	r4,r7,r4
1001ede8:	da400c17 	ldw	r9,48(sp)
1001edec:	2489883a 	add	r4,r4,r18
1001edf0:	d8800717 	ldw	r2,28(sp)
1001edf4:	20c9883a 	add	r4,r4,r3
1001edf8:	da800b17 	ldw	r10,44(sp)
1001edfc:	d8c00617 	ldw	r3,24(sp)
1001ee00:	3a11883a 	add	r8,r7,r8
1001ee04:	4885883a 	add	r2,r9,r2
1001ee08:	50c6c03a 	cmpne	r3,r10,r3
1001ee0c:	41cf803a 	cmpltu	r7,r8,r7
1001ee10:	12400104 	addi	r9,r2,4
1001ee14:	d8c00115 	stw	r3,4(sp)
1001ee18:	3909883a 	add	r4,r7,r4
1001ee1c:	da400215 	stw	r9,8(sp)
1001ee20:	03480034 	movhi	r13,8192
1001ee24:	6b7fffc4 	addi	r13,r13,-1
1001ee28:	4007883a 	mov	r3,r8
1001ee2c:	6900102e 	bgeu	r13,r4,1001ee70 <__muldf3+0x234>
1001ee30:	10800144 	addi	r2,r2,5
1001ee34:	180ed07a 	srli	r7,r3,1
1001ee38:	18c0004c 	andi	r3,r3,1
1001ee3c:	201097fa 	slli	r8,r4,31
1001ee40:	281697fa 	slli	r11,r5,31
1001ee44:	2008d07a 	srli	r4,r4,1
1001ee48:	3014d07a 	srli	r10,r6,1
1001ee4c:	2812d07a 	srli	r9,r5,1
1001ee50:	1019883a 	mov	r12,r2
1001ee54:	18000226 	beq	r3,zero,1001ee60 <__muldf3+0x224>
1001ee58:	5a8cb03a 	or	r6,r11,r10
1001ee5c:	49600034 	orhi	r5,r9,32768
1001ee60:	41c6b03a 	or	r3,r8,r7
1001ee64:	10800044 	addi	r2,r2,1
1001ee68:	693ff236 	bltu	r13,r4,1001ee34 <__alt_data_end+0xf801ee34>
1001ee6c:	db000215 	stw	r12,8(sp)
1001ee70:	03440034 	movhi	r13,4096
1001ee74:	6b7fffc4 	addi	r13,r13,-1
1001ee78:	69001336 	bltu	r13,r4,1001eec8 <__muldf3+0x28c>
1001ee7c:	d8800217 	ldw	r2,8(sp)
1001ee80:	10bfffc4 	addi	r2,r2,-1
1001ee84:	18d3883a 	add	r9,r3,r3
1001ee88:	48c7803a 	cmpltu	r3,r9,r3
1001ee8c:	2109883a 	add	r4,r4,r4
1001ee90:	190f883a 	add	r7,r3,r4
1001ee94:	3191883a 	add	r8,r6,r6
1001ee98:	4197803a 	cmpltu	r11,r8,r6
1001ee9c:	2955883a 	add	r10,r5,r5
1001eea0:	1019883a 	mov	r12,r2
1001eea4:	4807883a 	mov	r3,r9
1001eea8:	3809883a 	mov	r4,r7
1001eeac:	2800010e 	bge	r5,zero,1001eeb4 <__muldf3+0x278>
1001eeb0:	48c00054 	ori	r3,r9,1
1001eeb4:	400d883a 	mov	r6,r8
1001eeb8:	5a8b883a 	add	r5,r11,r10
1001eebc:	10bfffc4 	addi	r2,r2,-1
1001eec0:	69fff02e 	bgeu	r13,r7,1001ee84 <__alt_data_end+0xf801ee84>
1001eec4:	db000215 	stw	r12,8(sp)
1001eec8:	18803fcc 	andi	r2,r3,255
1001eecc:	01c02004 	movi	r7,128
1001eed0:	11c00926 	beq	r2,r7,1001eef8 <__muldf3+0x2bc>
1001eed4:	008000c4 	movi	r2,3
1001eed8:	d9000415 	stw	r4,16(sp)
1001eedc:	d8c00315 	stw	r3,12(sp)
1001eee0:	d8800015 	stw	r2,0(sp)
1001eee4:	d809883a 	mov	r4,sp
1001eee8:	003f7006 	br	1001ecac <__alt_data_end+0xf801ecac>
1001eeec:	0011883a 	mov	r8,zero
1001eef0:	00c00044 	movi	r3,1
1001eef4:	003fb606 	br	1001edd0 <__alt_data_end+0xf801edd0>
1001eef8:	19c0400c 	andi	r7,r3,256
1001eefc:	383ff51e 	bne	r7,zero,1001eed4 <__alt_data_end+0xf801eed4>
1001ef00:	314ab03a 	or	r5,r6,r5
1001ef04:	283ff326 	beq	r5,zero,1001eed4 <__alt_data_end+0xf801eed4>
1001ef08:	1885883a 	add	r2,r3,r2
1001ef0c:	10cb803a 	cmpltu	r5,r2,r3
1001ef10:	00ffc004 	movi	r3,-256
1001ef14:	10c6703a 	and	r3,r2,r3
1001ef18:	2909883a 	add	r4,r5,r4
1001ef1c:	003fed06 	br	1001eed4 <__alt_data_end+0xf801eed4>

1001ef20 <__divdf3>:
1001ef20:	defff104 	addi	sp,sp,-60
1001ef24:	d9000c15 	stw	r4,48(sp)
1001ef28:	d9400d15 	stw	r5,52(sp)
1001ef2c:	d9000c04 	addi	r4,sp,48
1001ef30:	d9400504 	addi	r5,sp,20
1001ef34:	dfc00e15 	stw	ra,56(sp)
1001ef38:	d9800a15 	stw	r6,40(sp)
1001ef3c:	d9c00b15 	stw	r7,44(sp)
1001ef40:	001f7880 	call	1001f788 <__unpack_d>
1001ef44:	d9000a04 	addi	r4,sp,40
1001ef48:	d80b883a 	mov	r5,sp
1001ef4c:	001f7880 	call	1001f788 <__unpack_d>
1001ef50:	d8c00517 	ldw	r3,20(sp)
1001ef54:	00800044 	movi	r2,1
1001ef58:	10c00536 	bltu	r2,r3,1001ef70 <__divdf3+0x50>
1001ef5c:	d9000504 	addi	r4,sp,20
1001ef60:	001f5640 	call	1001f564 <__pack_d>
1001ef64:	dfc00e17 	ldw	ra,56(sp)
1001ef68:	dec00f04 	addi	sp,sp,60
1001ef6c:	f800283a 	ret
1001ef70:	d9000017 	ldw	r4,0(sp)
1001ef74:	11000536 	bltu	r2,r4,1001ef8c <__divdf3+0x6c>
1001ef78:	d809883a 	mov	r4,sp
1001ef7c:	001f5640 	call	1001f564 <__pack_d>
1001ef80:	dfc00e17 	ldw	ra,56(sp)
1001ef84:	dec00f04 	addi	sp,sp,60
1001ef88:	f800283a 	ret
1001ef8c:	d9800617 	ldw	r6,24(sp)
1001ef90:	d9400117 	ldw	r5,4(sp)
1001ef94:	00800104 	movi	r2,4
1001ef98:	314af03a 	xor	r5,r6,r5
1001ef9c:	d9400615 	stw	r5,24(sp)
1001efa0:	18800226 	beq	r3,r2,1001efac <__divdf3+0x8c>
1001efa4:	01400084 	movi	r5,2
1001efa8:	1940041e 	bne	r3,r5,1001efbc <__divdf3+0x9c>
1001efac:	193feb1e 	bne	r3,r4,1001ef5c <__alt_data_end+0xf801ef5c>
1001efb0:	010400b4 	movhi	r4,4098
1001efb4:	210f4504 	addi	r4,r4,15636
1001efb8:	003fe906 	br	1001ef60 <__alt_data_end+0xf801ef60>
1001efbc:	20803326 	beq	r4,r2,1001f08c <__divdf3+0x16c>
1001efc0:	21403726 	beq	r4,r5,1001f0a0 <__divdf3+0x180>
1001efc4:	d8800217 	ldw	r2,8(sp)
1001efc8:	d9000717 	ldw	r4,28(sp)
1001efcc:	d8c00917 	ldw	r3,36(sp)
1001efd0:	da000417 	ldw	r8,16(sp)
1001efd4:	2089c83a 	sub	r4,r4,r2
1001efd8:	d9000715 	stw	r4,28(sp)
1001efdc:	d8800817 	ldw	r2,32(sp)
1001efe0:	dbc00317 	ldw	r15,12(sp)
1001efe4:	1a000236 	bltu	r3,r8,1001eff0 <__divdf3+0xd0>
1001efe8:	40c0081e 	bne	r8,r3,1001f00c <__divdf3+0xec>
1001efec:	13c0072e 	bgeu	r2,r15,1001f00c <__divdf3+0xec>
1001eff0:	108b883a 	add	r5,r2,r2
1001eff4:	288d803a 	cmpltu	r6,r5,r2
1001eff8:	18c7883a 	add	r3,r3,r3
1001effc:	213fffc4 	addi	r4,r4,-1
1001f000:	2805883a 	mov	r2,r5
1001f004:	30c7883a 	add	r3,r6,r3
1001f008:	d9000715 	stw	r4,28(sp)
1001f00c:	01400f44 	movi	r5,61
1001f010:	000f883a 	mov	r7,zero
1001f014:	01040034 	movhi	r4,4096
1001f018:	0019883a 	mov	r12,zero
1001f01c:	001b883a 	mov	r13,zero
1001f020:	201697fa 	slli	r11,r4,31
1001f024:	3814d07a 	srli	r10,r7,1
1001f028:	297fffc4 	addi	r5,r5,-1
1001f02c:	1a000936 	bltu	r3,r8,1001f054 <__divdf3+0x134>
1001f030:	13cdc83a 	sub	r6,r2,r15
1001f034:	1193803a 	cmpltu	r9,r2,r6
1001f038:	1a1dc83a 	sub	r14,r3,r8
1001f03c:	40c0011e 	bne	r8,r3,1001f044 <__divdf3+0x124>
1001f040:	13c00436 	bltu	r2,r15,1001f054 <__divdf3+0x134>
1001f044:	3005883a 	mov	r2,r6
1001f048:	7247c83a 	sub	r3,r14,r9
1001f04c:	61d8b03a 	or	r12,r12,r7
1001f050:	691ab03a 	or	r13,r13,r4
1001f054:	108d883a 	add	r6,r2,r2
1001f058:	3093803a 	cmpltu	r9,r6,r2
1001f05c:	18c7883a 	add	r3,r3,r3
1001f060:	5a8eb03a 	or	r7,r11,r10
1001f064:	2008d07a 	srli	r4,r4,1
1001f068:	3005883a 	mov	r2,r6
1001f06c:	48c7883a 	add	r3,r9,r3
1001f070:	283feb1e 	bne	r5,zero,1001f020 <__alt_data_end+0xf801f020>
1001f074:	61003fcc 	andi	r4,r12,255
1001f078:	01402004 	movi	r5,128
1001f07c:	21400b26 	beq	r4,r5,1001f0ac <__divdf3+0x18c>
1001f080:	db000815 	stw	r12,32(sp)
1001f084:	db400915 	stw	r13,36(sp)
1001f088:	003fb406 	br	1001ef5c <__alt_data_end+0xf801ef5c>
1001f08c:	d8000815 	stw	zero,32(sp)
1001f090:	d8000915 	stw	zero,36(sp)
1001f094:	d8000715 	stw	zero,28(sp)
1001f098:	d9000504 	addi	r4,sp,20
1001f09c:	003fb006 	br	1001ef60 <__alt_data_end+0xf801ef60>
1001f0a0:	d8800515 	stw	r2,20(sp)
1001f0a4:	d9000504 	addi	r4,sp,20
1001f0a8:	003fad06 	br	1001ef60 <__alt_data_end+0xf801ef60>
1001f0ac:	6140400c 	andi	r5,r12,256
1001f0b0:	283ff31e 	bne	r5,zero,1001f080 <__alt_data_end+0xf801f080>
1001f0b4:	30c4b03a 	or	r2,r6,r3
1001f0b8:	103ff126 	beq	r2,zero,1001f080 <__alt_data_end+0xf801f080>
1001f0bc:	6109883a 	add	r4,r12,r4
1001f0c0:	2305803a 	cmpltu	r2,r4,r12
1001f0c4:	033fc004 	movi	r12,-256
1001f0c8:	2318703a 	and	r12,r4,r12
1001f0cc:	135b883a 	add	r13,r2,r13
1001f0d0:	003feb06 	br	1001f080 <__alt_data_end+0xf801f080>

1001f0d4 <__eqdf2>:
1001f0d4:	defff104 	addi	sp,sp,-60
1001f0d8:	d9000c15 	stw	r4,48(sp)
1001f0dc:	d9400d15 	stw	r5,52(sp)
1001f0e0:	d9000c04 	addi	r4,sp,48
1001f0e4:	d9400504 	addi	r5,sp,20
1001f0e8:	dfc00e15 	stw	ra,56(sp)
1001f0ec:	d9800a15 	stw	r6,40(sp)
1001f0f0:	d9c00b15 	stw	r7,44(sp)
1001f0f4:	001f7880 	call	1001f788 <__unpack_d>
1001f0f8:	d9000a04 	addi	r4,sp,40
1001f0fc:	d80b883a 	mov	r5,sp
1001f100:	001f7880 	call	1001f788 <__unpack_d>
1001f104:	d8c00517 	ldw	r3,20(sp)
1001f108:	00800044 	movi	r2,1
1001f10c:	10c0052e 	bgeu	r2,r3,1001f124 <__eqdf2+0x50>
1001f110:	d8c00017 	ldw	r3,0(sp)
1001f114:	10c0032e 	bgeu	r2,r3,1001f124 <__eqdf2+0x50>
1001f118:	d9000504 	addi	r4,sp,20
1001f11c:	d80b883a 	mov	r5,sp
1001f120:	001f88c0 	call	1001f88c <__fpcmp_parts_d>
1001f124:	dfc00e17 	ldw	ra,56(sp)
1001f128:	dec00f04 	addi	sp,sp,60
1001f12c:	f800283a 	ret

1001f130 <__nedf2>:
1001f130:	defff104 	addi	sp,sp,-60
1001f134:	d9000c15 	stw	r4,48(sp)
1001f138:	d9400d15 	stw	r5,52(sp)
1001f13c:	d9000c04 	addi	r4,sp,48
1001f140:	d9400504 	addi	r5,sp,20
1001f144:	dfc00e15 	stw	ra,56(sp)
1001f148:	d9800a15 	stw	r6,40(sp)
1001f14c:	d9c00b15 	stw	r7,44(sp)
1001f150:	001f7880 	call	1001f788 <__unpack_d>
1001f154:	d9000a04 	addi	r4,sp,40
1001f158:	d80b883a 	mov	r5,sp
1001f15c:	001f7880 	call	1001f788 <__unpack_d>
1001f160:	d8c00517 	ldw	r3,20(sp)
1001f164:	00800044 	movi	r2,1
1001f168:	10c0052e 	bgeu	r2,r3,1001f180 <__nedf2+0x50>
1001f16c:	d8c00017 	ldw	r3,0(sp)
1001f170:	10c0032e 	bgeu	r2,r3,1001f180 <__nedf2+0x50>
1001f174:	d9000504 	addi	r4,sp,20
1001f178:	d80b883a 	mov	r5,sp
1001f17c:	001f88c0 	call	1001f88c <__fpcmp_parts_d>
1001f180:	dfc00e17 	ldw	ra,56(sp)
1001f184:	dec00f04 	addi	sp,sp,60
1001f188:	f800283a 	ret

1001f18c <__gtdf2>:
1001f18c:	defff104 	addi	sp,sp,-60
1001f190:	d9000c15 	stw	r4,48(sp)
1001f194:	d9400d15 	stw	r5,52(sp)
1001f198:	d9000c04 	addi	r4,sp,48
1001f19c:	d9400504 	addi	r5,sp,20
1001f1a0:	dfc00e15 	stw	ra,56(sp)
1001f1a4:	d9800a15 	stw	r6,40(sp)
1001f1a8:	d9c00b15 	stw	r7,44(sp)
1001f1ac:	001f7880 	call	1001f788 <__unpack_d>
1001f1b0:	d9000a04 	addi	r4,sp,40
1001f1b4:	d80b883a 	mov	r5,sp
1001f1b8:	001f7880 	call	1001f788 <__unpack_d>
1001f1bc:	d8c00517 	ldw	r3,20(sp)
1001f1c0:	00800044 	movi	r2,1
1001f1c4:	10c0082e 	bgeu	r2,r3,1001f1e8 <__gtdf2+0x5c>
1001f1c8:	d8c00017 	ldw	r3,0(sp)
1001f1cc:	10c0062e 	bgeu	r2,r3,1001f1e8 <__gtdf2+0x5c>
1001f1d0:	d9000504 	addi	r4,sp,20
1001f1d4:	d80b883a 	mov	r5,sp
1001f1d8:	001f88c0 	call	1001f88c <__fpcmp_parts_d>
1001f1dc:	dfc00e17 	ldw	ra,56(sp)
1001f1e0:	dec00f04 	addi	sp,sp,60
1001f1e4:	f800283a 	ret
1001f1e8:	00bfffc4 	movi	r2,-1
1001f1ec:	003ffb06 	br	1001f1dc <__alt_data_end+0xf801f1dc>

1001f1f0 <__gedf2>:
1001f1f0:	defff104 	addi	sp,sp,-60
1001f1f4:	d9000c15 	stw	r4,48(sp)
1001f1f8:	d9400d15 	stw	r5,52(sp)
1001f1fc:	d9000c04 	addi	r4,sp,48
1001f200:	d9400504 	addi	r5,sp,20
1001f204:	dfc00e15 	stw	ra,56(sp)
1001f208:	d9800a15 	stw	r6,40(sp)
1001f20c:	d9c00b15 	stw	r7,44(sp)
1001f210:	001f7880 	call	1001f788 <__unpack_d>
1001f214:	d9000a04 	addi	r4,sp,40
1001f218:	d80b883a 	mov	r5,sp
1001f21c:	001f7880 	call	1001f788 <__unpack_d>
1001f220:	d8c00517 	ldw	r3,20(sp)
1001f224:	00800044 	movi	r2,1
1001f228:	10c0082e 	bgeu	r2,r3,1001f24c <__gedf2+0x5c>
1001f22c:	d8c00017 	ldw	r3,0(sp)
1001f230:	10c0062e 	bgeu	r2,r3,1001f24c <__gedf2+0x5c>
1001f234:	d9000504 	addi	r4,sp,20
1001f238:	d80b883a 	mov	r5,sp
1001f23c:	001f88c0 	call	1001f88c <__fpcmp_parts_d>
1001f240:	dfc00e17 	ldw	ra,56(sp)
1001f244:	dec00f04 	addi	sp,sp,60
1001f248:	f800283a 	ret
1001f24c:	00bfffc4 	movi	r2,-1
1001f250:	003ffb06 	br	1001f240 <__alt_data_end+0xf801f240>

1001f254 <__ltdf2>:
1001f254:	defff104 	addi	sp,sp,-60
1001f258:	d9000c15 	stw	r4,48(sp)
1001f25c:	d9400d15 	stw	r5,52(sp)
1001f260:	d9000c04 	addi	r4,sp,48
1001f264:	d9400504 	addi	r5,sp,20
1001f268:	dfc00e15 	stw	ra,56(sp)
1001f26c:	d9800a15 	stw	r6,40(sp)
1001f270:	d9c00b15 	stw	r7,44(sp)
1001f274:	001f7880 	call	1001f788 <__unpack_d>
1001f278:	d9000a04 	addi	r4,sp,40
1001f27c:	d80b883a 	mov	r5,sp
1001f280:	001f7880 	call	1001f788 <__unpack_d>
1001f284:	d8c00517 	ldw	r3,20(sp)
1001f288:	00800044 	movi	r2,1
1001f28c:	10c0052e 	bgeu	r2,r3,1001f2a4 <__ltdf2+0x50>
1001f290:	d8c00017 	ldw	r3,0(sp)
1001f294:	10c0032e 	bgeu	r2,r3,1001f2a4 <__ltdf2+0x50>
1001f298:	d9000504 	addi	r4,sp,20
1001f29c:	d80b883a 	mov	r5,sp
1001f2a0:	001f88c0 	call	1001f88c <__fpcmp_parts_d>
1001f2a4:	dfc00e17 	ldw	ra,56(sp)
1001f2a8:	dec00f04 	addi	sp,sp,60
1001f2ac:	f800283a 	ret

1001f2b0 <__floatsidf>:
1001f2b0:	2004d7fa 	srli	r2,r4,31
1001f2b4:	defff904 	addi	sp,sp,-28
1001f2b8:	00c000c4 	movi	r3,3
1001f2bc:	dfc00615 	stw	ra,24(sp)
1001f2c0:	dc000515 	stw	r16,20(sp)
1001f2c4:	d8c00015 	stw	r3,0(sp)
1001f2c8:	d8800115 	stw	r2,4(sp)
1001f2cc:	2000081e 	bne	r4,zero,1001f2f0 <__floatsidf+0x40>
1001f2d0:	00800084 	movi	r2,2
1001f2d4:	d8800015 	stw	r2,0(sp)
1001f2d8:	d809883a 	mov	r4,sp
1001f2dc:	001f5640 	call	1001f564 <__pack_d>
1001f2e0:	dfc00617 	ldw	ra,24(sp)
1001f2e4:	dc000517 	ldw	r16,20(sp)
1001f2e8:	dec00704 	addi	sp,sp,28
1001f2ec:	f800283a 	ret
1001f2f0:	00c00f04 	movi	r3,60
1001f2f4:	d8c00215 	stw	r3,8(sp)
1001f2f8:	10000f1e 	bne	r2,zero,1001f338 <__floatsidf+0x88>
1001f2fc:	2021883a 	mov	r16,r4
1001f300:	8009883a 	mov	r4,r16
1001f304:	00148340 	call	10014834 <__clzsi2>
1001f308:	11000744 	addi	r4,r2,29
1001f30c:	0100110e 	bge	zero,r4,1001f354 <__floatsidf+0xa4>
1001f310:	10ffff44 	addi	r3,r2,-3
1001f314:	18001216 	blt	r3,zero,1001f360 <__floatsidf+0xb0>
1001f318:	80c6983a 	sll	r3,r16,r3
1001f31c:	0009883a 	mov	r4,zero
1001f320:	014007c4 	movi	r5,31
1001f324:	2885c83a 	sub	r2,r5,r2
1001f328:	d9000315 	stw	r4,12(sp)
1001f32c:	d8c00415 	stw	r3,16(sp)
1001f330:	d8800215 	stw	r2,8(sp)
1001f334:	003fe806 	br	1001f2d8 <__alt_data_end+0xf801f2d8>
1001f338:	00a00034 	movhi	r2,32768
1001f33c:	20800e26 	beq	r4,r2,1001f378 <__floatsidf+0xc8>
1001f340:	0121c83a 	sub	r16,zero,r4
1001f344:	8009883a 	mov	r4,r16
1001f348:	00148340 	call	10014834 <__clzsi2>
1001f34c:	11000744 	addi	r4,r2,29
1001f350:	013fef16 	blt	zero,r4,1001f310 <__alt_data_end+0xf801f310>
1001f354:	dc000315 	stw	r16,12(sp)
1001f358:	d8000415 	stw	zero,16(sp)
1001f35c:	003fde06 	br	1001f2d8 <__alt_data_end+0xf801f2d8>
1001f360:	800ad07a 	srli	r5,r16,1
1001f364:	00c007c4 	movi	r3,31
1001f368:	1907c83a 	sub	r3,r3,r4
1001f36c:	28c6d83a 	srl	r3,r5,r3
1001f370:	8108983a 	sll	r4,r16,r4
1001f374:	003fea06 	br	1001f320 <__alt_data_end+0xf801f320>
1001f378:	0005883a 	mov	r2,zero
1001f37c:	00f07834 	movhi	r3,49632
1001f380:	003fd706 	br	1001f2e0 <__alt_data_end+0xf801f2e0>

1001f384 <__fixdfsi>:
1001f384:	defff804 	addi	sp,sp,-32
1001f388:	d9000515 	stw	r4,20(sp)
1001f38c:	d9400615 	stw	r5,24(sp)
1001f390:	d9000504 	addi	r4,sp,20
1001f394:	d80b883a 	mov	r5,sp
1001f398:	dfc00715 	stw	ra,28(sp)
1001f39c:	001f7880 	call	1001f788 <__unpack_d>
1001f3a0:	d8800017 	ldw	r2,0(sp)
1001f3a4:	00c00084 	movi	r3,2
1001f3a8:	10c01c26 	beq	r2,r3,1001f41c <__fixdfsi+0x98>
1001f3ac:	00c00044 	movi	r3,1
1001f3b0:	18801a2e 	bgeu	r3,r2,1001f41c <__fixdfsi+0x98>
1001f3b4:	00c00104 	movi	r3,4
1001f3b8:	10c01126 	beq	r2,r3,1001f400 <__fixdfsi+0x7c>
1001f3bc:	d8800217 	ldw	r2,8(sp)
1001f3c0:	10001616 	blt	r2,zero,1001f41c <__fixdfsi+0x98>
1001f3c4:	00c00784 	movi	r3,30
1001f3c8:	18800d16 	blt	r3,r2,1001f400 <__fixdfsi+0x7c>
1001f3cc:	00c00f04 	movi	r3,60
1001f3d0:	1885c83a 	sub	r2,r3,r2
1001f3d4:	10fff804 	addi	r3,r2,-32
1001f3d8:	d9400317 	ldw	r5,12(sp)
1001f3dc:	d9000417 	ldw	r4,16(sp)
1001f3e0:	18001216 	blt	r3,zero,1001f42c <__fixdfsi+0xa8>
1001f3e4:	20c4d83a 	srl	r2,r4,r3
1001f3e8:	d8c00117 	ldw	r3,4(sp)
1001f3ec:	18000826 	beq	r3,zero,1001f410 <__fixdfsi+0x8c>
1001f3f0:	0085c83a 	sub	r2,zero,r2
1001f3f4:	dfc00717 	ldw	ra,28(sp)
1001f3f8:	dec00804 	addi	sp,sp,32
1001f3fc:	f800283a 	ret
1001f400:	d8800117 	ldw	r2,4(sp)
1001f404:	00e00034 	movhi	r3,32768
1001f408:	1005003a 	cmpeq	r2,r2,zero
1001f40c:	1885c83a 	sub	r2,r3,r2
1001f410:	dfc00717 	ldw	ra,28(sp)
1001f414:	dec00804 	addi	sp,sp,32
1001f418:	f800283a 	ret
1001f41c:	0005883a 	mov	r2,zero
1001f420:	dfc00717 	ldw	ra,28(sp)
1001f424:	dec00804 	addi	sp,sp,32
1001f428:	f800283a 	ret
1001f42c:	2008907a 	slli	r4,r4,1
1001f430:	018007c4 	movi	r6,31
1001f434:	308dc83a 	sub	r6,r6,r2
1001f438:	2188983a 	sll	r4,r4,r6
1001f43c:	2884d83a 	srl	r2,r5,r2
1001f440:	2084b03a 	or	r2,r4,r2
1001f444:	003fe806 	br	1001f3e8 <__alt_data_end+0xf801f3e8>

1001f448 <__floatunsidf>:
1001f448:	defff904 	addi	sp,sp,-28
1001f44c:	dc000515 	stw	r16,20(sp)
1001f450:	dfc00615 	stw	ra,24(sp)
1001f454:	d8000115 	stw	zero,4(sp)
1001f458:	2021883a 	mov	r16,r4
1001f45c:	20001726 	beq	r4,zero,1001f4bc <__floatunsidf+0x74>
1001f460:	008000c4 	movi	r2,3
1001f464:	d8800015 	stw	r2,0(sp)
1001f468:	00800f04 	movi	r2,60
1001f46c:	d8800215 	stw	r2,8(sp)
1001f470:	00148340 	call	10014834 <__clzsi2>
1001f474:	10c00744 	addi	r3,r2,29
1001f478:	18001816 	blt	r3,zero,1001f4dc <__floatunsidf+0x94>
1001f47c:	18002d26 	beq	r3,zero,1001f534 <__floatunsidf+0xec>
1001f480:	113fff44 	addi	r4,r2,-3
1001f484:	20002e16 	blt	r4,zero,1001f540 <__floatunsidf+0xf8>
1001f488:	8108983a 	sll	r4,r16,r4
1001f48c:	0021883a 	mov	r16,zero
1001f490:	014007c4 	movi	r5,31
1001f494:	2885c83a 	sub	r2,r5,r2
1001f498:	dc000315 	stw	r16,12(sp)
1001f49c:	d9000415 	stw	r4,16(sp)
1001f4a0:	d8800215 	stw	r2,8(sp)
1001f4a4:	d809883a 	mov	r4,sp
1001f4a8:	001f5640 	call	1001f564 <__pack_d>
1001f4ac:	dfc00617 	ldw	ra,24(sp)
1001f4b0:	dc000517 	ldw	r16,20(sp)
1001f4b4:	dec00704 	addi	sp,sp,28
1001f4b8:	f800283a 	ret
1001f4bc:	00800084 	movi	r2,2
1001f4c0:	d809883a 	mov	r4,sp
1001f4c4:	d8800015 	stw	r2,0(sp)
1001f4c8:	001f5640 	call	1001f564 <__pack_d>
1001f4cc:	dfc00617 	ldw	ra,24(sp)
1001f4d0:	dc000517 	ldw	r16,20(sp)
1001f4d4:	dec00704 	addi	sp,sp,28
1001f4d8:	f800283a 	ret
1001f4dc:	00c7c83a 	sub	r3,zero,r3
1001f4e0:	193ff804 	addi	r4,r3,-32
1001f4e4:	20001c16 	blt	r4,zero,1001f558 <__floatunsidf+0x110>
1001f4e8:	000b883a 	mov	r5,zero
1001f4ec:	2009d7fa 	srai	r4,r4,31
1001f4f0:	80c6d83a 	srl	r3,r16,r3
1001f4f4:	297fffc4 	addi	r5,r5,-1
1001f4f8:	2c20703a 	and	r16,r5,r16
1001f4fc:	8020c03a 	cmpne	r16,r16,zero
1001f500:	1906703a 	and	r3,r3,r4
1001f504:	010007c4 	movi	r4,31
1001f508:	80c6b03a 	or	r3,r16,r3
1001f50c:	2085c83a 	sub	r2,r4,r2
1001f510:	d809883a 	mov	r4,sp
1001f514:	d8c00315 	stw	r3,12(sp)
1001f518:	d8000415 	stw	zero,16(sp)
1001f51c:	d8800215 	stw	r2,8(sp)
1001f520:	001f5640 	call	1001f564 <__pack_d>
1001f524:	dfc00617 	ldw	ra,24(sp)
1001f528:	dc000517 	ldw	r16,20(sp)
1001f52c:	dec00704 	addi	sp,sp,28
1001f530:	f800283a 	ret
1001f534:	dc000315 	stw	r16,12(sp)
1001f538:	d8000415 	stw	zero,16(sp)
1001f53c:	003fd906 	br	1001f4a4 <__alt_data_end+0xf801f4a4>
1001f540:	800ad07a 	srli	r5,r16,1
1001f544:	010007c4 	movi	r4,31
1001f548:	20c9c83a 	sub	r4,r4,r3
1001f54c:	2908d83a 	srl	r4,r5,r4
1001f550:	80e0983a 	sll	r16,r16,r3
1001f554:	003fce06 	br	1001f490 <__alt_data_end+0xf801f490>
1001f558:	01400044 	movi	r5,1
1001f55c:	28ca983a 	sll	r5,r5,r3
1001f560:	003fe206 	br	1001f4ec <__alt_data_end+0xf801f4ec>

1001f564 <__pack_d>:
1001f564:	20800017 	ldw	r2,0(r4)
1001f568:	defff804 	addi	sp,sp,-32
1001f56c:	dcc00315 	stw	r19,12(sp)
1001f570:	dc800215 	stw	r18,8(sp)
1001f574:	dfc00715 	stw	ra,28(sp)
1001f578:	dd800615 	stw	r22,24(sp)
1001f57c:	dd400515 	stw	r21,20(sp)
1001f580:	dd000415 	stw	r20,16(sp)
1001f584:	dc400115 	stw	r17,4(sp)
1001f588:	dc000015 	stw	r16,0(sp)
1001f58c:	04800044 	movi	r18,1
1001f590:	24400317 	ldw	r17,12(r4)
1001f594:	24000417 	ldw	r16,16(r4)
1001f598:	24c00117 	ldw	r19,4(r4)
1001f59c:	9080422e 	bgeu	r18,r2,1001f6a8 <__pack_d+0x144>
1001f5a0:	00c00104 	movi	r3,4
1001f5a4:	10c03c26 	beq	r2,r3,1001f698 <__pack_d+0x134>
1001f5a8:	00c00084 	movi	r3,2
1001f5ac:	10c01926 	beq	r2,r3,1001f614 <__pack_d+0xb0>
1001f5b0:	8c04b03a 	or	r2,r17,r16
1001f5b4:	10001726 	beq	r2,zero,1001f614 <__pack_d+0xb0>
1001f5b8:	21000217 	ldw	r4,8(r4)
1001f5bc:	00bf0084 	movi	r2,-1022
1001f5c0:	20804016 	blt	r4,r2,1001f6c4 <__pack_d+0x160>
1001f5c4:	0080ffc4 	movi	r2,1023
1001f5c8:	11003316 	blt	r2,r4,1001f698 <__pack_d+0x134>
1001f5cc:	88803fcc 	andi	r2,r17,255
1001f5d0:	00c02004 	movi	r3,128
1001f5d4:	10c02926 	beq	r2,r3,1001f67c <__pack_d+0x118>
1001f5d8:	88801fc4 	addi	r2,r17,127
1001f5dc:	1463803a 	cmpltu	r17,r2,r17
1001f5e0:	8c21883a 	add	r16,r17,r16
1001f5e4:	1023883a 	mov	r17,r2
1001f5e8:	00880034 	movhi	r2,8192
1001f5ec:	10bfffc4 	addi	r2,r2,-1
1001f5f0:	14001c36 	bltu	r2,r16,1001f664 <__pack_d+0x100>
1001f5f4:	2100ffc4 	addi	r4,r4,1023
1001f5f8:	8006963a 	slli	r3,r16,24
1001f5fc:	8804d23a 	srli	r2,r17,8
1001f600:	8020913a 	slli	r16,r16,4
1001f604:	2101ffcc 	andi	r4,r4,2047
1001f608:	1884b03a 	or	r2,r3,r2
1001f60c:	8020d33a 	srli	r16,r16,12
1001f610:	00000306 	br	1001f620 <__pack_d+0xbc>
1001f614:	0009883a 	mov	r4,zero
1001f618:	0005883a 	mov	r2,zero
1001f61c:	0021883a 	mov	r16,zero
1001f620:	2008953a 	slli	r4,r4,20
1001f624:	982697fa 	slli	r19,r19,31
1001f628:	00c00434 	movhi	r3,16
1001f62c:	18ffffc4 	addi	r3,r3,-1
1001f630:	80e0703a 	and	r16,r16,r3
1001f634:	8106b03a 	or	r3,r16,r4
1001f638:	1cc6b03a 	or	r3,r3,r19
1001f63c:	dfc00717 	ldw	ra,28(sp)
1001f640:	dd800617 	ldw	r22,24(sp)
1001f644:	dd400517 	ldw	r21,20(sp)
1001f648:	dd000417 	ldw	r20,16(sp)
1001f64c:	dcc00317 	ldw	r19,12(sp)
1001f650:	dc800217 	ldw	r18,8(sp)
1001f654:	dc400117 	ldw	r17,4(sp)
1001f658:	dc000017 	ldw	r16,0(sp)
1001f65c:	dec00804 	addi	sp,sp,32
1001f660:	f800283a 	ret
1001f664:	800697fa 	slli	r3,r16,31
1001f668:	8804d07a 	srli	r2,r17,1
1001f66c:	21010004 	addi	r4,r4,1024
1001f670:	8020d07a 	srli	r16,r16,1
1001f674:	18a2b03a 	or	r17,r3,r2
1001f678:	003fdf06 	br	1001f5f8 <__alt_data_end+0xf801f5f8>
1001f67c:	88c0400c 	andi	r3,r17,256
1001f680:	183fd926 	beq	r3,zero,1001f5e8 <__alt_data_end+0xf801f5e8>
1001f684:	8885883a 	add	r2,r17,r2
1001f688:	1463803a 	cmpltu	r17,r2,r17
1001f68c:	8c21883a 	add	r16,r17,r16
1001f690:	1023883a 	mov	r17,r2
1001f694:	003fd406 	br	1001f5e8 <__alt_data_end+0xf801f5e8>
1001f698:	0101ffc4 	movi	r4,2047
1001f69c:	0005883a 	mov	r2,zero
1001f6a0:	0021883a 	mov	r16,zero
1001f6a4:	003fde06 	br	1001f620 <__alt_data_end+0xf801f620>
1001f6a8:	84000234 	orhi	r16,r16,8
1001f6ac:	00c00434 	movhi	r3,16
1001f6b0:	18ffffc4 	addi	r3,r3,-1
1001f6b4:	8805883a 	mov	r2,r17
1001f6b8:	80e0703a 	and	r16,r16,r3
1001f6bc:	0101ffc4 	movi	r4,2047
1001f6c0:	003fd706 	br	1001f620 <__alt_data_end+0xf801f620>
1001f6c4:	1129c83a 	sub	r20,r2,r4
1001f6c8:	00800e04 	movi	r2,56
1001f6cc:	15002716 	blt	r2,r20,1001f76c <__pack_d+0x208>
1001f6d0:	800b883a 	mov	r5,r16
1001f6d4:	a00d883a 	mov	r6,r20
1001f6d8:	8809883a 	mov	r4,r17
1001f6dc:	001f95c0 	call	1001f95c <__lshrdi3>
1001f6e0:	9009883a 	mov	r4,r18
1001f6e4:	000b883a 	mov	r5,zero
1001f6e8:	a00d883a 	mov	r6,r20
1001f6ec:	102d883a 	mov	r22,r2
1001f6f0:	182b883a 	mov	r21,r3
1001f6f4:	001f9a00 	call	1001f9a0 <__ashldi3>
1001f6f8:	1009003a 	cmpeq	r4,r2,zero
1001f6fc:	1907c83a 	sub	r3,r3,r4
1001f700:	10bfffc4 	addi	r2,r2,-1
1001f704:	1c20703a 	and	r16,r3,r16
1001f708:	1444703a 	and	r2,r2,r17
1001f70c:	1404b03a 	or	r2,r2,r16
1001f710:	1004c03a 	cmpne	r2,r2,zero
1001f714:	1584b03a 	or	r2,r2,r22
1001f718:	11003fcc 	andi	r4,r2,255
1001f71c:	01402004 	movi	r5,128
1001f720:	a807883a 	mov	r3,r21
1001f724:	2140131e 	bne	r4,r5,1001f774 <__pack_d+0x210>
1001f728:	1140400c 	andi	r5,r2,256
1001f72c:	28000426 	beq	r5,zero,1001f740 <__pack_d+0x1dc>
1001f730:	1109883a 	add	r4,r2,r4
1001f734:	2085803a 	cmpltu	r2,r4,r2
1001f738:	1547883a 	add	r3,r2,r21
1001f73c:	2005883a 	mov	r2,r4
1001f740:	1808963a 	slli	r4,r3,24
1001f744:	1004d23a 	srli	r2,r2,8
1001f748:	1820913a 	slli	r16,r3,4
1001f74c:	01440034 	movhi	r5,4096
1001f750:	297fffc4 	addi	r5,r5,-1
1001f754:	2084b03a 	or	r2,r4,r2
1001f758:	8020d33a 	srli	r16,r16,12
1001f75c:	01000044 	movi	r4,1
1001f760:	28ffaf36 	bltu	r5,r3,1001f620 <__alt_data_end+0xf801f620>
1001f764:	0009883a 	mov	r4,zero
1001f768:	003fad06 	br	1001f620 <__alt_data_end+0xf801f620>
1001f76c:	0005883a 	mov	r2,zero
1001f770:	0007883a 	mov	r3,zero
1001f774:	11001fc4 	addi	r4,r2,127
1001f778:	2085803a 	cmpltu	r2,r4,r2
1001f77c:	10c7883a 	add	r3,r2,r3
1001f780:	2005883a 	mov	r2,r4
1001f784:	003fee06 	br	1001f740 <__alt_data_end+0xf801f740>

1001f788 <__unpack_d>:
1001f788:	21800117 	ldw	r6,4(r4)
1001f78c:	20c00017 	ldw	r3,0(r4)
1001f790:	3004d7fa 	srli	r2,r6,31
1001f794:	3008d53a 	srli	r4,r6,20
1001f798:	28800115 	stw	r2,4(r5)
1001f79c:	2101ffcc 	andi	r4,r4,2047
1001f7a0:	00800434 	movhi	r2,16
1001f7a4:	10bfffc4 	addi	r2,r2,-1
1001f7a8:	3084703a 	and	r2,r6,r2
1001f7ac:	20001a1e 	bne	r4,zero,1001f818 <__unpack_d+0x90>
1001f7b0:	1888b03a 	or	r4,r3,r2
1001f7b4:	20002626 	beq	r4,zero,1001f850 <__unpack_d+0xc8>
1001f7b8:	1808d63a 	srli	r4,r3,24
1001f7bc:	1004923a 	slli	r2,r2,8
1001f7c0:	01bf0084 	movi	r6,-1022
1001f7c4:	29800215 	stw	r6,8(r5)
1001f7c8:	2084b03a 	or	r2,r4,r2
1001f7cc:	010000c4 	movi	r4,3
1001f7d0:	29000015 	stw	r4,0(r5)
1001f7d4:	02040034 	movhi	r8,4096
1001f7d8:	423fffc4 	addi	r8,r8,-1
1001f7dc:	1806923a 	slli	r3,r3,8
1001f7e0:	40801836 	bltu	r8,r2,1001f844 <__unpack_d+0xbc>
1001f7e4:	013f0044 	movi	r4,-1023
1001f7e8:	18cd883a 	add	r6,r3,r3
1001f7ec:	30c7803a 	cmpltu	r3,r6,r3
1001f7f0:	1085883a 	add	r2,r2,r2
1001f7f4:	1885883a 	add	r2,r3,r2
1001f7f8:	200f883a 	mov	r7,r4
1001f7fc:	3007883a 	mov	r3,r6
1001f800:	213fffc4 	addi	r4,r4,-1
1001f804:	40bff82e 	bgeu	r8,r2,1001f7e8 <__alt_data_end+0xf801f7e8>
1001f808:	29c00215 	stw	r7,8(r5)
1001f80c:	28c00315 	stw	r3,12(r5)
1001f810:	28800415 	stw	r2,16(r5)
1001f814:	f800283a 	ret
1001f818:	01c1ffc4 	movi	r7,2047
1001f81c:	21c00f26 	beq	r4,r7,1001f85c <__unpack_d+0xd4>
1001f820:	180cd63a 	srli	r6,r3,24
1001f824:	1004923a 	slli	r2,r2,8
1001f828:	213f0044 	addi	r4,r4,-1023
1001f82c:	1806923a 	slli	r3,r3,8
1001f830:	3084b03a 	or	r2,r6,r2
1001f834:	29000215 	stw	r4,8(r5)
1001f838:	010000c4 	movi	r4,3
1001f83c:	10840034 	orhi	r2,r2,4096
1001f840:	29000015 	stw	r4,0(r5)
1001f844:	28c00315 	stw	r3,12(r5)
1001f848:	28800415 	stw	r2,16(r5)
1001f84c:	f800283a 	ret
1001f850:	00800084 	movi	r2,2
1001f854:	28800015 	stw	r2,0(r5)
1001f858:	f800283a 	ret
1001f85c:	1888b03a 	or	r4,r3,r2
1001f860:	20000526 	beq	r4,zero,1001f878 <__unpack_d+0xf0>
1001f864:	3180022c 	andhi	r6,r6,8
1001f868:	30000626 	beq	r6,zero,1001f884 <__unpack_d+0xfc>
1001f86c:	01000044 	movi	r4,1
1001f870:	29000015 	stw	r4,0(r5)
1001f874:	003ff306 	br	1001f844 <__alt_data_end+0xf801f844>
1001f878:	00800104 	movi	r2,4
1001f87c:	28800015 	stw	r2,0(r5)
1001f880:	f800283a 	ret
1001f884:	28000015 	stw	zero,0(r5)
1001f888:	003fee06 	br	1001f844 <__alt_data_end+0xf801f844>

1001f88c <__fpcmp_parts_d>:
1001f88c:	20c00017 	ldw	r3,0(r4)
1001f890:	00800044 	movi	r2,1
1001f894:	10c0142e 	bgeu	r2,r3,1001f8e8 <__fpcmp_parts_d+0x5c>
1001f898:	29800017 	ldw	r6,0(r5)
1001f89c:	1180122e 	bgeu	r2,r6,1001f8e8 <__fpcmp_parts_d+0x5c>
1001f8a0:	01c00104 	movi	r7,4
1001f8a4:	19c02826 	beq	r3,r7,1001f948 <__fpcmp_parts_d+0xbc>
1001f8a8:	31c00926 	beq	r6,r7,1001f8d0 <__fpcmp_parts_d+0x44>
1001f8ac:	01c00084 	movi	r7,2
1001f8b0:	19c00626 	beq	r3,r7,1001f8cc <__fpcmp_parts_d+0x40>
1001f8b4:	31c00a26 	beq	r6,r7,1001f8e0 <__fpcmp_parts_d+0x54>
1001f8b8:	20c00117 	ldw	r3,4(r4)
1001f8bc:	29800117 	ldw	r6,4(r5)
1001f8c0:	19800b26 	beq	r3,r6,1001f8f0 <__fpcmp_parts_d+0x64>
1001f8c4:	1800041e 	bne	r3,zero,1001f8d8 <__fpcmp_parts_d+0x4c>
1001f8c8:	f800283a 	ret
1001f8cc:	30c01a26 	beq	r6,r3,1001f938 <__fpcmp_parts_d+0xac>
1001f8d0:	28800117 	ldw	r2,4(r5)
1001f8d4:	1000041e 	bne	r2,zero,1001f8e8 <__fpcmp_parts_d+0x5c>
1001f8d8:	00bfffc4 	movi	r2,-1
1001f8dc:	f800283a 	ret
1001f8e0:	20800117 	ldw	r2,4(r4)
1001f8e4:	103ffc1e 	bne	r2,zero,1001f8d8 <__alt_data_end+0xf801f8d8>
1001f8e8:	00800044 	movi	r2,1
1001f8ec:	f800283a 	ret
1001f8f0:	21c00217 	ldw	r7,8(r4)
1001f8f4:	29800217 	ldw	r6,8(r5)
1001f8f8:	31c0020e 	bge	r6,r7,1001f904 <__fpcmp_parts_d+0x78>
1001f8fc:	183ff61e 	bne	r3,zero,1001f8d8 <__alt_data_end+0xf801f8d8>
1001f900:	f800283a 	ret
1001f904:	39800a16 	blt	r7,r6,1001f930 <__fpcmp_parts_d+0xa4>
1001f908:	20800417 	ldw	r2,16(r4)
1001f90c:	29800417 	ldw	r6,16(r5)
1001f910:	21c00317 	ldw	r7,12(r4)
1001f914:	29000317 	ldw	r4,12(r5)
1001f918:	30800936 	bltu	r6,r2,1001f940 <__fpcmp_parts_d+0xb4>
1001f91c:	1180011e 	bne	r2,r6,1001f924 <__fpcmp_parts_d+0x98>
1001f920:	21c00736 	bltu	r4,r7,1001f940 <__fpcmp_parts_d+0xb4>
1001f924:	11800236 	bltu	r2,r6,1001f930 <__fpcmp_parts_d+0xa4>
1001f928:	3080031e 	bne	r6,r2,1001f938 <__fpcmp_parts_d+0xac>
1001f92c:	3900022e 	bgeu	r7,r4,1001f938 <__fpcmp_parts_d+0xac>
1001f930:	183fe926 	beq	r3,zero,1001f8d8 <__alt_data_end+0xf801f8d8>
1001f934:	003fec06 	br	1001f8e8 <__alt_data_end+0xf801f8e8>
1001f938:	0005883a 	mov	r2,zero
1001f93c:	f800283a 	ret
1001f940:	183fe926 	beq	r3,zero,1001f8e8 <__alt_data_end+0xf801f8e8>
1001f944:	003fe406 	br	1001f8d8 <__alt_data_end+0xf801f8d8>
1001f948:	30ffe51e 	bne	r6,r3,1001f8e0 <__alt_data_end+0xf801f8e0>
1001f94c:	28c00117 	ldw	r3,4(r5)
1001f950:	20800117 	ldw	r2,4(r4)
1001f954:	1885c83a 	sub	r2,r3,r2
1001f958:	f800283a 	ret

1001f95c <__lshrdi3>:
1001f95c:	2005883a 	mov	r2,r4
1001f960:	2807883a 	mov	r3,r5
1001f964:	30000826 	beq	r6,zero,1001f988 <__lshrdi3+0x2c>
1001f968:	01000804 	movi	r4,32
1001f96c:	2189c83a 	sub	r4,r4,r6
1001f970:	0100060e 	bge	zero,r4,1001f98c <__lshrdi3+0x30>
1001f974:	1184d83a 	srl	r2,r2,r6
1001f978:	2908983a 	sll	r4,r5,r4
1001f97c:	298cd83a 	srl	r6,r5,r6
1001f980:	2084b03a 	or	r2,r4,r2
1001f984:	3007883a 	mov	r3,r6
1001f988:	f800283a 	ret
1001f98c:	0105c83a 	sub	r2,zero,r4
1001f990:	000d883a 	mov	r6,zero
1001f994:	2884d83a 	srl	r2,r5,r2
1001f998:	3007883a 	mov	r3,r6
1001f99c:	003ffa06 	br	1001f988 <__alt_data_end+0xf801f988>

1001f9a0 <__ashldi3>:
1001f9a0:	2005883a 	mov	r2,r4
1001f9a4:	2807883a 	mov	r3,r5
1001f9a8:	30000826 	beq	r6,zero,1001f9cc <__ashldi3+0x2c>
1001f9ac:	01000804 	movi	r4,32
1001f9b0:	2189c83a 	sub	r4,r4,r6
1001f9b4:	0100060e 	bge	zero,r4,1001f9d0 <__ashldi3+0x30>
1001f9b8:	1108d83a 	srl	r4,r2,r4
1001f9bc:	2986983a 	sll	r3,r5,r6
1001f9c0:	118c983a 	sll	r6,r2,r6
1001f9c4:	20c6b03a 	or	r3,r4,r3
1001f9c8:	3005883a 	mov	r2,r6
1001f9cc:	f800283a 	ret
1001f9d0:	0107c83a 	sub	r3,zero,r4
1001f9d4:	000d883a 	mov	r6,zero
1001f9d8:	10c6983a 	sll	r3,r2,r3
1001f9dc:	3005883a 	mov	r2,r6
1001f9e0:	003ffa06 	br	1001f9cc <__alt_data_end+0xf801f9cc>

1001f9e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001f9e4:	defffe04 	addi	sp,sp,-8
1001f9e8:	dfc00115 	stw	ra,4(sp)
1001f9ec:	df000015 	stw	fp,0(sp)
1001f9f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001f9f4:	008400b4 	movhi	r2,4098
1001f9f8:	1096f904 	addi	r2,r2,23524
1001f9fc:	10800017 	ldw	r2,0(r2)
1001fa00:	10000526 	beq	r2,zero,1001fa18 <alt_get_errno+0x34>
1001fa04:	008400b4 	movhi	r2,4098
1001fa08:	1096f904 	addi	r2,r2,23524
1001fa0c:	10800017 	ldw	r2,0(r2)
1001fa10:	103ee83a 	callr	r2
1001fa14:	00000206 	br	1001fa20 <alt_get_errno+0x3c>
1001fa18:	008400b4 	movhi	r2,4098
1001fa1c:	109ec604 	addi	r2,r2,31512
}
1001fa20:	e037883a 	mov	sp,fp
1001fa24:	dfc00117 	ldw	ra,4(sp)
1001fa28:	df000017 	ldw	fp,0(sp)
1001fa2c:	dec00204 	addi	sp,sp,8
1001fa30:	f800283a 	ret

1001fa34 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1001fa34:	defffb04 	addi	sp,sp,-20
1001fa38:	dfc00415 	stw	ra,16(sp)
1001fa3c:	df000315 	stw	fp,12(sp)
1001fa40:	df000304 	addi	fp,sp,12
1001fa44:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1001fa48:	e0bfff17 	ldw	r2,-4(fp)
1001fa4c:	10000716 	blt	r2,zero,1001fa6c <close+0x38>
1001fa50:	e13fff17 	ldw	r4,-4(fp)
1001fa54:	01400304 	movi	r5,12
1001fa58:	00146fc0 	call	100146fc <__mulsi3>
1001fa5c:	00c400b4 	movhi	r3,4098
1001fa60:	18d26904 	addi	r3,r3,18852
1001fa64:	10c5883a 	add	r2,r2,r3
1001fa68:	00000106 	br	1001fa70 <close+0x3c>
1001fa6c:	0005883a 	mov	r2,zero
1001fa70:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1001fa74:	e0bffd17 	ldw	r2,-12(fp)
1001fa78:	10001826 	beq	r2,zero,1001fadc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1001fa7c:	e0bffd17 	ldw	r2,-12(fp)
1001fa80:	10800017 	ldw	r2,0(r2)
1001fa84:	10800417 	ldw	r2,16(r2)
1001fa88:	10000626 	beq	r2,zero,1001faa4 <close+0x70>
1001fa8c:	e0bffd17 	ldw	r2,-12(fp)
1001fa90:	10800017 	ldw	r2,0(r2)
1001fa94:	10800417 	ldw	r2,16(r2)
1001fa98:	e13ffd17 	ldw	r4,-12(fp)
1001fa9c:	103ee83a 	callr	r2
1001faa0:	00000106 	br	1001faa8 <close+0x74>
1001faa4:	0005883a 	mov	r2,zero
1001faa8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1001faac:	e13fff17 	ldw	r4,-4(fp)
1001fab0:	00203c40 	call	100203c4 <alt_release_fd>
    if (rval < 0)
1001fab4:	e0bffe17 	ldw	r2,-8(fp)
1001fab8:	1000060e 	bge	r2,zero,1001fad4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
1001fabc:	001f9e40 	call	1001f9e4 <alt_get_errno>
1001fac0:	e0fffe17 	ldw	r3,-8(fp)
1001fac4:	00c7c83a 	sub	r3,zero,r3
1001fac8:	10c00015 	stw	r3,0(r2)
      return -1;
1001facc:	00bfffc4 	movi	r2,-1
1001fad0:	00000606 	br	1001faec <close+0xb8>
    }
    return 0;
1001fad4:	0005883a 	mov	r2,zero
1001fad8:	00000406 	br	1001faec <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1001fadc:	001f9e40 	call	1001f9e4 <alt_get_errno>
1001fae0:	00c01444 	movi	r3,81
1001fae4:	10c00015 	stw	r3,0(r2)
    return -1;
1001fae8:	00bfffc4 	movi	r2,-1
  }
}
1001faec:	e037883a 	mov	sp,fp
1001faf0:	dfc00117 	ldw	ra,4(sp)
1001faf4:	df000017 	ldw	fp,0(sp)
1001faf8:	dec00204 	addi	sp,sp,8
1001fafc:	f800283a 	ret

1001fb00 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1001fb00:	defffc04 	addi	sp,sp,-16
1001fb04:	df000315 	stw	fp,12(sp)
1001fb08:	df000304 	addi	fp,sp,12
1001fb0c:	e13ffd15 	stw	r4,-12(fp)
1001fb10:	e17ffe15 	stw	r5,-8(fp)
1001fb14:	e1bfff15 	stw	r6,-4(fp)
  return len;
1001fb18:	e0bfff17 	ldw	r2,-4(fp)
}
1001fb1c:	e037883a 	mov	sp,fp
1001fb20:	df000017 	ldw	fp,0(sp)
1001fb24:	dec00104 	addi	sp,sp,4
1001fb28:	f800283a 	ret

1001fb2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001fb2c:	defffe04 	addi	sp,sp,-8
1001fb30:	dfc00115 	stw	ra,4(sp)
1001fb34:	df000015 	stw	fp,0(sp)
1001fb38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001fb3c:	008400b4 	movhi	r2,4098
1001fb40:	1096f904 	addi	r2,r2,23524
1001fb44:	10800017 	ldw	r2,0(r2)
1001fb48:	10000526 	beq	r2,zero,1001fb60 <alt_get_errno+0x34>
1001fb4c:	008400b4 	movhi	r2,4098
1001fb50:	1096f904 	addi	r2,r2,23524
1001fb54:	10800017 	ldw	r2,0(r2)
1001fb58:	103ee83a 	callr	r2
1001fb5c:	00000206 	br	1001fb68 <alt_get_errno+0x3c>
1001fb60:	008400b4 	movhi	r2,4098
1001fb64:	109ec604 	addi	r2,r2,31512
}
1001fb68:	e037883a 	mov	sp,fp
1001fb6c:	dfc00117 	ldw	ra,4(sp)
1001fb70:	df000017 	ldw	fp,0(sp)
1001fb74:	dec00204 	addi	sp,sp,8
1001fb78:	f800283a 	ret

1001fb7c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1001fb7c:	defffb04 	addi	sp,sp,-20
1001fb80:	dfc00415 	stw	ra,16(sp)
1001fb84:	df000315 	stw	fp,12(sp)
1001fb88:	df000304 	addi	fp,sp,12
1001fb8c:	e13ffe15 	stw	r4,-8(fp)
1001fb90:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001fb94:	e0bffe17 	ldw	r2,-8(fp)
1001fb98:	10000716 	blt	r2,zero,1001fbb8 <fstat+0x3c>
1001fb9c:	e13ffe17 	ldw	r4,-8(fp)
1001fba0:	01400304 	movi	r5,12
1001fba4:	00146fc0 	call	100146fc <__mulsi3>
1001fba8:	00c400b4 	movhi	r3,4098
1001fbac:	18d26904 	addi	r3,r3,18852
1001fbb0:	10c5883a 	add	r2,r2,r3
1001fbb4:	00000106 	br	1001fbbc <fstat+0x40>
1001fbb8:	0005883a 	mov	r2,zero
1001fbbc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1001fbc0:	e0bffd17 	ldw	r2,-12(fp)
1001fbc4:	10001026 	beq	r2,zero,1001fc08 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1001fbc8:	e0bffd17 	ldw	r2,-12(fp)
1001fbcc:	10800017 	ldw	r2,0(r2)
1001fbd0:	10800817 	ldw	r2,32(r2)
1001fbd4:	10000726 	beq	r2,zero,1001fbf4 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
1001fbd8:	e0bffd17 	ldw	r2,-12(fp)
1001fbdc:	10800017 	ldw	r2,0(r2)
1001fbe0:	10800817 	ldw	r2,32(r2)
1001fbe4:	e13ffd17 	ldw	r4,-12(fp)
1001fbe8:	e17fff17 	ldw	r5,-4(fp)
1001fbec:	103ee83a 	callr	r2
1001fbf0:	00000906 	br	1001fc18 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1001fbf4:	e0bfff17 	ldw	r2,-4(fp)
1001fbf8:	00c80004 	movi	r3,8192
1001fbfc:	10c00115 	stw	r3,4(r2)
      return 0;
1001fc00:	0005883a 	mov	r2,zero
1001fc04:	00000406 	br	1001fc18 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1001fc08:	001fb2c0 	call	1001fb2c <alt_get_errno>
1001fc0c:	00c01444 	movi	r3,81
1001fc10:	10c00015 	stw	r3,0(r2)
    return -1;
1001fc14:	00bfffc4 	movi	r2,-1
  }
}
1001fc18:	e037883a 	mov	sp,fp
1001fc1c:	dfc00117 	ldw	ra,4(sp)
1001fc20:	df000017 	ldw	fp,0(sp)
1001fc24:	dec00204 	addi	sp,sp,8
1001fc28:	f800283a 	ret

1001fc2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001fc2c:	defffe04 	addi	sp,sp,-8
1001fc30:	dfc00115 	stw	ra,4(sp)
1001fc34:	df000015 	stw	fp,0(sp)
1001fc38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001fc3c:	008400b4 	movhi	r2,4098
1001fc40:	1096f904 	addi	r2,r2,23524
1001fc44:	10800017 	ldw	r2,0(r2)
1001fc48:	10000526 	beq	r2,zero,1001fc60 <alt_get_errno+0x34>
1001fc4c:	008400b4 	movhi	r2,4098
1001fc50:	1096f904 	addi	r2,r2,23524
1001fc54:	10800017 	ldw	r2,0(r2)
1001fc58:	103ee83a 	callr	r2
1001fc5c:	00000206 	br	1001fc68 <alt_get_errno+0x3c>
1001fc60:	008400b4 	movhi	r2,4098
1001fc64:	109ec604 	addi	r2,r2,31512
}
1001fc68:	e037883a 	mov	sp,fp
1001fc6c:	dfc00117 	ldw	ra,4(sp)
1001fc70:	df000017 	ldw	fp,0(sp)
1001fc74:	dec00204 	addi	sp,sp,8
1001fc78:	f800283a 	ret

1001fc7c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1001fc7c:	deffed04 	addi	sp,sp,-76
1001fc80:	dfc01215 	stw	ra,72(sp)
1001fc84:	df001115 	stw	fp,68(sp)
1001fc88:	df001104 	addi	fp,sp,68
1001fc8c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001fc90:	e0bfff17 	ldw	r2,-4(fp)
1001fc94:	10000716 	blt	r2,zero,1001fcb4 <isatty+0x38>
1001fc98:	e13fff17 	ldw	r4,-4(fp)
1001fc9c:	01400304 	movi	r5,12
1001fca0:	00146fc0 	call	100146fc <__mulsi3>
1001fca4:	00c400b4 	movhi	r3,4098
1001fca8:	18d26904 	addi	r3,r3,18852
1001fcac:	10c5883a 	add	r2,r2,r3
1001fcb0:	00000106 	br	1001fcb8 <isatty+0x3c>
1001fcb4:	0005883a 	mov	r2,zero
1001fcb8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1001fcbc:	e0bfef17 	ldw	r2,-68(fp)
1001fcc0:	10000e26 	beq	r2,zero,1001fcfc <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1001fcc4:	e0bfef17 	ldw	r2,-68(fp)
1001fcc8:	10800017 	ldw	r2,0(r2)
1001fccc:	10800817 	ldw	r2,32(r2)
1001fcd0:	1000021e 	bne	r2,zero,1001fcdc <isatty+0x60>
    {
      return 1;
1001fcd4:	00800044 	movi	r2,1
1001fcd8:	00000c06 	br	1001fd0c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1001fcdc:	e0bff004 	addi	r2,fp,-64
1001fce0:	e13fff17 	ldw	r4,-4(fp)
1001fce4:	100b883a 	mov	r5,r2
1001fce8:	001fb7c0 	call	1001fb7c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1001fcec:	e0bff117 	ldw	r2,-60(fp)
1001fcf0:	10880020 	cmpeqi	r2,r2,8192
1001fcf4:	10803fcc 	andi	r2,r2,255
1001fcf8:	00000406 	br	1001fd0c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1001fcfc:	001fc2c0 	call	1001fc2c <alt_get_errno>
1001fd00:	00c01444 	movi	r3,81
1001fd04:	10c00015 	stw	r3,0(r2)
    return 0;
1001fd08:	0005883a 	mov	r2,zero
  }
}
1001fd0c:	e037883a 	mov	sp,fp
1001fd10:	dfc00117 	ldw	ra,4(sp)
1001fd14:	df000017 	ldw	fp,0(sp)
1001fd18:	dec00204 	addi	sp,sp,8
1001fd1c:	f800283a 	ret

1001fd20 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1001fd20:	defffc04 	addi	sp,sp,-16
1001fd24:	df000315 	stw	fp,12(sp)
1001fd28:	df000304 	addi	fp,sp,12
1001fd2c:	e13ffd15 	stw	r4,-12(fp)
1001fd30:	e17ffe15 	stw	r5,-8(fp)
1001fd34:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1001fd38:	e0fffe17 	ldw	r3,-8(fp)
1001fd3c:	e0bffd17 	ldw	r2,-12(fp)
1001fd40:	18800e26 	beq	r3,r2,1001fd7c <alt_load_section+0x5c>
  {
    while( to != end )
1001fd44:	00000a06 	br	1001fd70 <alt_load_section+0x50>
    {
      *to++ = *from++;
1001fd48:	e0bffd17 	ldw	r2,-12(fp)
1001fd4c:	10c00017 	ldw	r3,0(r2)
1001fd50:	e0bffe17 	ldw	r2,-8(fp)
1001fd54:	10c00015 	stw	r3,0(r2)
1001fd58:	e0bffe17 	ldw	r2,-8(fp)
1001fd5c:	10800104 	addi	r2,r2,4
1001fd60:	e0bffe15 	stw	r2,-8(fp)
1001fd64:	e0bffd17 	ldw	r2,-12(fp)
1001fd68:	10800104 	addi	r2,r2,4
1001fd6c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1001fd70:	e0fffe17 	ldw	r3,-8(fp)
1001fd74:	e0bfff17 	ldw	r2,-4(fp)
1001fd78:	18bff31e 	bne	r3,r2,1001fd48 <__alt_data_end+0xf801fd48>
    {
      *to++ = *from++;
    }
  }
}
1001fd7c:	e037883a 	mov	sp,fp
1001fd80:	df000017 	ldw	fp,0(sp)
1001fd84:	dec00104 	addi	sp,sp,4
1001fd88:	f800283a 	ret

1001fd8c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1001fd8c:	defffe04 	addi	sp,sp,-8
1001fd90:	dfc00115 	stw	ra,4(sp)
1001fd94:	df000015 	stw	fp,0(sp)
1001fd98:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1001fd9c:	010400b4 	movhi	r4,4098
1001fda0:	21171004 	addi	r4,r4,23616
1001fda4:	014400b4 	movhi	r5,4098
1001fda8:	294f5a04 	addi	r5,r5,15720
1001fdac:	018400b4 	movhi	r6,4098
1001fdb0:	31971004 	addi	r6,r6,23616
1001fdb4:	001fd200 	call	1001fd20 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1001fdb8:	01040034 	movhi	r4,4096
1001fdbc:	21000804 	addi	r4,r4,32
1001fdc0:	01440034 	movhi	r5,4096
1001fdc4:	29400804 	addi	r5,r5,32
1001fdc8:	01840034 	movhi	r6,4096
1001fdcc:	31806e04 	addi	r6,r6,440
1001fdd0:	001fd200 	call	1001fd20 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1001fdd4:	010400b4 	movhi	r4,4098
1001fdd8:	2109d204 	addi	r4,r4,10056
1001fddc:	014400b4 	movhi	r5,4098
1001fde0:	2949d204 	addi	r5,r5,10056
1001fde4:	018400b4 	movhi	r6,4098
1001fde8:	318f5a04 	addi	r6,r6,15720
1001fdec:	001fd200 	call	1001fd20 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1001fdf0:	00218bc0 	call	100218bc <alt_dcache_flush_all>
  alt_icache_flush_all();
1001fdf4:	0021d7c0 	call	10021d7c <alt_icache_flush_all>
}
1001fdf8:	e037883a 	mov	sp,fp
1001fdfc:	dfc00117 	ldw	ra,4(sp)
1001fe00:	df000017 	ldw	fp,0(sp)
1001fe04:	dec00204 	addi	sp,sp,8
1001fe08:	f800283a 	ret

1001fe0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001fe0c:	defffe04 	addi	sp,sp,-8
1001fe10:	dfc00115 	stw	ra,4(sp)
1001fe14:	df000015 	stw	fp,0(sp)
1001fe18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001fe1c:	008400b4 	movhi	r2,4098
1001fe20:	1096f904 	addi	r2,r2,23524
1001fe24:	10800017 	ldw	r2,0(r2)
1001fe28:	10000526 	beq	r2,zero,1001fe40 <alt_get_errno+0x34>
1001fe2c:	008400b4 	movhi	r2,4098
1001fe30:	1096f904 	addi	r2,r2,23524
1001fe34:	10800017 	ldw	r2,0(r2)
1001fe38:	103ee83a 	callr	r2
1001fe3c:	00000206 	br	1001fe48 <alt_get_errno+0x3c>
1001fe40:	008400b4 	movhi	r2,4098
1001fe44:	109ec604 	addi	r2,r2,31512
}
1001fe48:	e037883a 	mov	sp,fp
1001fe4c:	dfc00117 	ldw	ra,4(sp)
1001fe50:	df000017 	ldw	fp,0(sp)
1001fe54:	dec00204 	addi	sp,sp,8
1001fe58:	f800283a 	ret

1001fe5c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1001fe5c:	defff904 	addi	sp,sp,-28
1001fe60:	dfc00615 	stw	ra,24(sp)
1001fe64:	df000515 	stw	fp,20(sp)
1001fe68:	df000504 	addi	fp,sp,20
1001fe6c:	e13ffd15 	stw	r4,-12(fp)
1001fe70:	e17ffe15 	stw	r5,-8(fp)
1001fe74:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1001fe78:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001fe7c:	e0bffd17 	ldw	r2,-12(fp)
1001fe80:	10000716 	blt	r2,zero,1001fea0 <lseek+0x44>
1001fe84:	e13ffd17 	ldw	r4,-12(fp)
1001fe88:	01400304 	movi	r5,12
1001fe8c:	00146fc0 	call	100146fc <__mulsi3>
1001fe90:	00c400b4 	movhi	r3,4098
1001fe94:	18d26904 	addi	r3,r3,18852
1001fe98:	10c5883a 	add	r2,r2,r3
1001fe9c:	00000106 	br	1001fea4 <lseek+0x48>
1001fea0:	0005883a 	mov	r2,zero
1001fea4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1001fea8:	e0bffc17 	ldw	r2,-16(fp)
1001feac:	10001026 	beq	r2,zero,1001fef0 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1001feb0:	e0bffc17 	ldw	r2,-16(fp)
1001feb4:	10800017 	ldw	r2,0(r2)
1001feb8:	10800717 	ldw	r2,28(r2)
1001febc:	10000926 	beq	r2,zero,1001fee4 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1001fec0:	e0bffc17 	ldw	r2,-16(fp)
1001fec4:	10800017 	ldw	r2,0(r2)
1001fec8:	10800717 	ldw	r2,28(r2)
1001fecc:	e13ffc17 	ldw	r4,-16(fp)
1001fed0:	e17ffe17 	ldw	r5,-8(fp)
1001fed4:	e1bfff17 	ldw	r6,-4(fp)
1001fed8:	103ee83a 	callr	r2
1001fedc:	e0bffb15 	stw	r2,-20(fp)
1001fee0:	00000506 	br	1001fef8 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1001fee4:	00bfde84 	movi	r2,-134
1001fee8:	e0bffb15 	stw	r2,-20(fp)
1001feec:	00000206 	br	1001fef8 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
1001fef0:	00bfebc4 	movi	r2,-81
1001fef4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1001fef8:	e0bffb17 	ldw	r2,-20(fp)
1001fefc:	1000060e 	bge	r2,zero,1001ff18 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1001ff00:	001fe0c0 	call	1001fe0c <alt_get_errno>
1001ff04:	e0fffb17 	ldw	r3,-20(fp)
1001ff08:	00c7c83a 	sub	r3,zero,r3
1001ff0c:	10c00015 	stw	r3,0(r2)
    rc = -1;
1001ff10:	00bfffc4 	movi	r2,-1
1001ff14:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1001ff18:	e0bffb17 	ldw	r2,-20(fp)
}
1001ff1c:	e037883a 	mov	sp,fp
1001ff20:	dfc00117 	ldw	ra,4(sp)
1001ff24:	df000017 	ldw	fp,0(sp)
1001ff28:	dec00204 	addi	sp,sp,8
1001ff2c:	f800283a 	ret

1001ff30 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1001ff30:	defffd04 	addi	sp,sp,-12
1001ff34:	dfc00215 	stw	ra,8(sp)
1001ff38:	df000115 	stw	fp,4(sp)
1001ff3c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1001ff40:	0009883a 	mov	r4,zero
1001ff44:	002066c0 	call	1002066c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1001ff48:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1001ff4c:	00206a00 	call	100206a0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1001ff50:	010400b4 	movhi	r4,4098
1001ff54:	210f4d04 	addi	r4,r4,15668
1001ff58:	014400b4 	movhi	r5,4098
1001ff5c:	294f4d04 	addi	r5,r5,15668
1001ff60:	018400b4 	movhi	r6,4098
1001ff64:	318f4d04 	addi	r6,r6,15668
1001ff68:	00221400 	call	10022140 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1001ff6c:	00219c80 	call	100219c8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1001ff70:	010400b4 	movhi	r4,4098
1001ff74:	21068904 	addi	r4,r4,6692
1001ff78:	00223740 	call	10022374 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1001ff7c:	d127e217 	ldw	r4,-24696(gp)
1001ff80:	d0e7e317 	ldw	r3,-24692(gp)
1001ff84:	d0a7e417 	ldw	r2,-24688(gp)
1001ff88:	180b883a 	mov	r5,r3
1001ff8c:	100d883a 	mov	r6,r2
1001ff90:	0013d440 	call	10013d44 <main>
1001ff94:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1001ff98:	01000044 	movi	r4,1
1001ff9c:	001fa340 	call	1001fa34 <close>
  exit (result);
1001ffa0:	e13fff17 	ldw	r4,-4(fp)
1001ffa4:	00223880 	call	10022388 <exit>

1001ffa8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1001ffa8:	defffe04 	addi	sp,sp,-8
1001ffac:	df000115 	stw	fp,4(sp)
1001ffb0:	df000104 	addi	fp,sp,4
1001ffb4:	e13fff15 	stw	r4,-4(fp)
}
1001ffb8:	e037883a 	mov	sp,fp
1001ffbc:	df000017 	ldw	fp,0(sp)
1001ffc0:	dec00104 	addi	sp,sp,4
1001ffc4:	f800283a 	ret

1001ffc8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1001ffc8:	defffe04 	addi	sp,sp,-8
1001ffcc:	df000115 	stw	fp,4(sp)
1001ffd0:	df000104 	addi	fp,sp,4
1001ffd4:	e13fff15 	stw	r4,-4(fp)
}
1001ffd8:	e037883a 	mov	sp,fp
1001ffdc:	df000017 	ldw	fp,0(sp)
1001ffe0:	dec00104 	addi	sp,sp,4
1001ffe4:	f800283a 	ret

1001ffe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001ffe8:	defffe04 	addi	sp,sp,-8
1001ffec:	dfc00115 	stw	ra,4(sp)
1001fff0:	df000015 	stw	fp,0(sp)
1001fff4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001fff8:	008400b4 	movhi	r2,4098
1001fffc:	1096f904 	addi	r2,r2,23524
10020000:	10800017 	ldw	r2,0(r2)
10020004:	10000526 	beq	r2,zero,1002001c <alt_get_errno+0x34>
10020008:	008400b4 	movhi	r2,4098
1002000c:	1096f904 	addi	r2,r2,23524
10020010:	10800017 	ldw	r2,0(r2)
10020014:	103ee83a 	callr	r2
10020018:	00000206 	br	10020024 <alt_get_errno+0x3c>
1002001c:	008400b4 	movhi	r2,4098
10020020:	109ec604 	addi	r2,r2,31512
}
10020024:	e037883a 	mov	sp,fp
10020028:	dfc00117 	ldw	ra,4(sp)
1002002c:	df000017 	ldw	fp,0(sp)
10020030:	dec00204 	addi	sp,sp,8
10020034:	f800283a 	ret

10020038 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10020038:	defffb04 	addi	sp,sp,-20
1002003c:	dfc00415 	stw	ra,16(sp)
10020040:	df000315 	stw	fp,12(sp)
10020044:	dc000215 	stw	r16,8(sp)
10020048:	df000204 	addi	fp,sp,8
1002004c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10020050:	e0bfff17 	ldw	r2,-4(fp)
10020054:	10800217 	ldw	r2,8(r2)
10020058:	10d00034 	orhi	r3,r2,16384
1002005c:	e0bfff17 	ldw	r2,-4(fp)
10020060:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10020064:	e03ffe15 	stw	zero,-8(fp)
10020068:	00002206 	br	100200f4 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1002006c:	040400b4 	movhi	r16,4098
10020070:	84126904 	addi	r16,r16,18852
10020074:	e0bffe17 	ldw	r2,-8(fp)
10020078:	1009883a 	mov	r4,r2
1002007c:	01400304 	movi	r5,12
10020080:	00146fc0 	call	100146fc <__mulsi3>
10020084:	8085883a 	add	r2,r16,r2
10020088:	10c00017 	ldw	r3,0(r2)
1002008c:	e0bfff17 	ldw	r2,-4(fp)
10020090:	10800017 	ldw	r2,0(r2)
10020094:	1880141e 	bne	r3,r2,100200e8 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10020098:	040400b4 	movhi	r16,4098
1002009c:	84126904 	addi	r16,r16,18852
100200a0:	e0bffe17 	ldw	r2,-8(fp)
100200a4:	1009883a 	mov	r4,r2
100200a8:	01400304 	movi	r5,12
100200ac:	00146fc0 	call	100146fc <__mulsi3>
100200b0:	8085883a 	add	r2,r16,r2
100200b4:	10800204 	addi	r2,r2,8
100200b8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100200bc:	10000a0e 	bge	r2,zero,100200e8 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
100200c0:	e13ffe17 	ldw	r4,-8(fp)
100200c4:	01400304 	movi	r5,12
100200c8:	00146fc0 	call	100146fc <__mulsi3>
100200cc:	00c400b4 	movhi	r3,4098
100200d0:	18d26904 	addi	r3,r3,18852
100200d4:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100200d8:	e0bfff17 	ldw	r2,-4(fp)
100200dc:	18800226 	beq	r3,r2,100200e8 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
100200e0:	00bffcc4 	movi	r2,-13
100200e4:	00000a06 	br	10020110 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100200e8:	e0bffe17 	ldw	r2,-8(fp)
100200ec:	10800044 	addi	r2,r2,1
100200f0:	e0bffe15 	stw	r2,-8(fp)
100200f4:	008400b4 	movhi	r2,4098
100200f8:	1096f804 	addi	r2,r2,23520
100200fc:	10800017 	ldw	r2,0(r2)
10020100:	1007883a 	mov	r3,r2
10020104:	e0bffe17 	ldw	r2,-8(fp)
10020108:	18bfd82e 	bgeu	r3,r2,1002006c <__alt_data_end+0xf802006c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1002010c:	0005883a 	mov	r2,zero
}
10020110:	e037883a 	mov	sp,fp
10020114:	dfc00217 	ldw	ra,8(sp)
10020118:	df000117 	ldw	fp,4(sp)
1002011c:	dc000017 	ldw	r16,0(sp)
10020120:	dec00304 	addi	sp,sp,12
10020124:	f800283a 	ret

10020128 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10020128:	defff604 	addi	sp,sp,-40
1002012c:	dfc00915 	stw	ra,36(sp)
10020130:	df000815 	stw	fp,32(sp)
10020134:	df000804 	addi	fp,sp,32
10020138:	e13ffd15 	stw	r4,-12(fp)
1002013c:	e17ffe15 	stw	r5,-8(fp)
10020140:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10020144:	00bfffc4 	movi	r2,-1
10020148:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1002014c:	00bffb44 	movi	r2,-19
10020150:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10020154:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10020158:	e13ffd17 	ldw	r4,-12(fp)
1002015c:	014400b4 	movhi	r5,4098
10020160:	2956f604 	addi	r5,r5,23512
10020164:	0021a800 	call	10021a80 <alt_find_dev>
10020168:	e0bff815 	stw	r2,-32(fp)
1002016c:	e0bff817 	ldw	r2,-32(fp)
10020170:	1000051e 	bne	r2,zero,10020188 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10020174:	e13ffd17 	ldw	r4,-12(fp)
10020178:	0021b100 	call	10021b10 <alt_find_file>
1002017c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10020180:	00800044 	movi	r2,1
10020184:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10020188:	e0bff817 	ldw	r2,-32(fp)
1002018c:	10002a26 	beq	r2,zero,10020238 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10020190:	e13ff817 	ldw	r4,-32(fp)
10020194:	0021ca80 	call	10021ca8 <alt_get_fd>
10020198:	e0bff915 	stw	r2,-28(fp)
1002019c:	e0bff917 	ldw	r2,-28(fp)
100201a0:	1000030e 	bge	r2,zero,100201b0 <open+0x88>
    {
      status = index;
100201a4:	e0bff917 	ldw	r2,-28(fp)
100201a8:	e0bffa15 	stw	r2,-24(fp)
100201ac:	00002406 	br	10020240 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
100201b0:	e13ff917 	ldw	r4,-28(fp)
100201b4:	01400304 	movi	r5,12
100201b8:	00146fc0 	call	100146fc <__mulsi3>
100201bc:	00c400b4 	movhi	r3,4098
100201c0:	18d26904 	addi	r3,r3,18852
100201c4:	10c5883a 	add	r2,r2,r3
100201c8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100201cc:	e0fffe17 	ldw	r3,-8(fp)
100201d0:	00900034 	movhi	r2,16384
100201d4:	10bfffc4 	addi	r2,r2,-1
100201d8:	1886703a 	and	r3,r3,r2
100201dc:	e0bffc17 	ldw	r2,-16(fp)
100201e0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100201e4:	e0bffb17 	ldw	r2,-20(fp)
100201e8:	1000051e 	bne	r2,zero,10020200 <open+0xd8>
100201ec:	e13ffc17 	ldw	r4,-16(fp)
100201f0:	00200380 	call	10020038 <alt_file_locked>
100201f4:	e0bffa15 	stw	r2,-24(fp)
100201f8:	e0bffa17 	ldw	r2,-24(fp)
100201fc:	10001016 	blt	r2,zero,10020240 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10020200:	e0bff817 	ldw	r2,-32(fp)
10020204:	10800317 	ldw	r2,12(r2)
10020208:	10000826 	beq	r2,zero,1002022c <open+0x104>
1002020c:	e0bff817 	ldw	r2,-32(fp)
10020210:	10800317 	ldw	r2,12(r2)
10020214:	e13ffc17 	ldw	r4,-16(fp)
10020218:	e17ffd17 	ldw	r5,-12(fp)
1002021c:	e1bffe17 	ldw	r6,-8(fp)
10020220:	e1ffff17 	ldw	r7,-4(fp)
10020224:	103ee83a 	callr	r2
10020228:	00000106 	br	10020230 <open+0x108>
1002022c:	0005883a 	mov	r2,zero
10020230:	e0bffa15 	stw	r2,-24(fp)
10020234:	00000206 	br	10020240 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10020238:	00bffb44 	movi	r2,-19
1002023c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10020240:	e0bffa17 	ldw	r2,-24(fp)
10020244:	1000080e 	bge	r2,zero,10020268 <open+0x140>
  {
    alt_release_fd (index);  
10020248:	e13ff917 	ldw	r4,-28(fp)
1002024c:	00203c40 	call	100203c4 <alt_release_fd>
    ALT_ERRNO = -status;
10020250:	001ffe80 	call	1001ffe8 <alt_get_errno>
10020254:	e0fffa17 	ldw	r3,-24(fp)
10020258:	00c7c83a 	sub	r3,zero,r3
1002025c:	10c00015 	stw	r3,0(r2)
    return -1;
10020260:	00bfffc4 	movi	r2,-1
10020264:	00000106 	br	1002026c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
10020268:	e0bff917 	ldw	r2,-28(fp)
}
1002026c:	e037883a 	mov	sp,fp
10020270:	dfc00117 	ldw	ra,4(sp)
10020274:	df000017 	ldw	fp,0(sp)
10020278:	dec00204 	addi	sp,sp,8
1002027c:	f800283a 	ret

10020280 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10020280:	defffe04 	addi	sp,sp,-8
10020284:	dfc00115 	stw	ra,4(sp)
10020288:	df000015 	stw	fp,0(sp)
1002028c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10020290:	008400b4 	movhi	r2,4098
10020294:	1096f904 	addi	r2,r2,23524
10020298:	10800017 	ldw	r2,0(r2)
1002029c:	10000526 	beq	r2,zero,100202b4 <alt_get_errno+0x34>
100202a0:	008400b4 	movhi	r2,4098
100202a4:	1096f904 	addi	r2,r2,23524
100202a8:	10800017 	ldw	r2,0(r2)
100202ac:	103ee83a 	callr	r2
100202b0:	00000206 	br	100202bc <alt_get_errno+0x3c>
100202b4:	008400b4 	movhi	r2,4098
100202b8:	109ec604 	addi	r2,r2,31512
}
100202bc:	e037883a 	mov	sp,fp
100202c0:	dfc00117 	ldw	ra,4(sp)
100202c4:	df000017 	ldw	fp,0(sp)
100202c8:	dec00204 	addi	sp,sp,8
100202cc:	f800283a 	ret

100202d0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
100202d0:	defff904 	addi	sp,sp,-28
100202d4:	dfc00615 	stw	ra,24(sp)
100202d8:	df000515 	stw	fp,20(sp)
100202dc:	df000504 	addi	fp,sp,20
100202e0:	e13ffd15 	stw	r4,-12(fp)
100202e4:	e17ffe15 	stw	r5,-8(fp)
100202e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100202ec:	e0bffd17 	ldw	r2,-12(fp)
100202f0:	10000716 	blt	r2,zero,10020310 <read+0x40>
100202f4:	e13ffd17 	ldw	r4,-12(fp)
100202f8:	01400304 	movi	r5,12
100202fc:	00146fc0 	call	100146fc <__mulsi3>
10020300:	00c400b4 	movhi	r3,4098
10020304:	18d26904 	addi	r3,r3,18852
10020308:	10c5883a 	add	r2,r2,r3
1002030c:	00000106 	br	10020314 <read+0x44>
10020310:	0005883a 	mov	r2,zero
10020314:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10020318:	e0bffb17 	ldw	r2,-20(fp)
1002031c:	10002026 	beq	r2,zero,100203a0 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10020320:	e0bffb17 	ldw	r2,-20(fp)
10020324:	10800217 	ldw	r2,8(r2)
10020328:	108000cc 	andi	r2,r2,3
1002032c:	10800060 	cmpeqi	r2,r2,1
10020330:	1000171e 	bne	r2,zero,10020390 <read+0xc0>
        (fd->dev->read))
10020334:	e0bffb17 	ldw	r2,-20(fp)
10020338:	10800017 	ldw	r2,0(r2)
1002033c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10020340:	10001326 	beq	r2,zero,10020390 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10020344:	e0bffb17 	ldw	r2,-20(fp)
10020348:	10800017 	ldw	r2,0(r2)
1002034c:	10c00517 	ldw	r3,20(r2)
10020350:	e0bfff17 	ldw	r2,-4(fp)
10020354:	e13ffb17 	ldw	r4,-20(fp)
10020358:	e17ffe17 	ldw	r5,-8(fp)
1002035c:	100d883a 	mov	r6,r2
10020360:	183ee83a 	callr	r3
10020364:	e0bffc15 	stw	r2,-16(fp)
10020368:	e0bffc17 	ldw	r2,-16(fp)
1002036c:	1000060e 	bge	r2,zero,10020388 <read+0xb8>
        {
          ALT_ERRNO = -rval;
10020370:	00202800 	call	10020280 <alt_get_errno>
10020374:	e0fffc17 	ldw	r3,-16(fp)
10020378:	00c7c83a 	sub	r3,zero,r3
1002037c:	10c00015 	stw	r3,0(r2)
          return -1;
10020380:	00bfffc4 	movi	r2,-1
10020384:	00000a06 	br	100203b0 <read+0xe0>
        }
        return rval;
10020388:	e0bffc17 	ldw	r2,-16(fp)
1002038c:	00000806 	br	100203b0 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10020390:	00202800 	call	10020280 <alt_get_errno>
10020394:	00c00344 	movi	r3,13
10020398:	10c00015 	stw	r3,0(r2)
1002039c:	00000306 	br	100203ac <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
100203a0:	00202800 	call	10020280 <alt_get_errno>
100203a4:	00c01444 	movi	r3,81
100203a8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
100203ac:	00bfffc4 	movi	r2,-1
}
100203b0:	e037883a 	mov	sp,fp
100203b4:	dfc00117 	ldw	ra,4(sp)
100203b8:	df000017 	ldw	fp,0(sp)
100203bc:	dec00204 	addi	sp,sp,8
100203c0:	f800283a 	ret

100203c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
100203c4:	defffc04 	addi	sp,sp,-16
100203c8:	dfc00315 	stw	ra,12(sp)
100203cc:	df000215 	stw	fp,8(sp)
100203d0:	dc000115 	stw	r16,4(sp)
100203d4:	df000104 	addi	fp,sp,4
100203d8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
100203dc:	e0bfff17 	ldw	r2,-4(fp)
100203e0:	108000d0 	cmplti	r2,r2,3
100203e4:	1000111e 	bne	r2,zero,1002042c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
100203e8:	040400b4 	movhi	r16,4098
100203ec:	84126904 	addi	r16,r16,18852
100203f0:	e0bfff17 	ldw	r2,-4(fp)
100203f4:	1009883a 	mov	r4,r2
100203f8:	01400304 	movi	r5,12
100203fc:	00146fc0 	call	100146fc <__mulsi3>
10020400:	8085883a 	add	r2,r16,r2
10020404:	10800204 	addi	r2,r2,8
10020408:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1002040c:	040400b4 	movhi	r16,4098
10020410:	84126904 	addi	r16,r16,18852
10020414:	e0bfff17 	ldw	r2,-4(fp)
10020418:	1009883a 	mov	r4,r2
1002041c:	01400304 	movi	r5,12
10020420:	00146fc0 	call	100146fc <__mulsi3>
10020424:	8085883a 	add	r2,r16,r2
10020428:	10000015 	stw	zero,0(r2)
  }
}
1002042c:	e037883a 	mov	sp,fp
10020430:	dfc00217 	ldw	ra,8(sp)
10020434:	df000117 	ldw	fp,4(sp)
10020438:	dc000017 	ldw	r16,0(sp)
1002043c:	dec00304 	addi	sp,sp,12
10020440:	f800283a 	ret

10020444 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10020444:	defff904 	addi	sp,sp,-28
10020448:	df000615 	stw	fp,24(sp)
1002044c:	df000604 	addi	fp,sp,24
10020450:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10020454:	0005303a 	rdctl	r2,status
10020458:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1002045c:	e0fffc17 	ldw	r3,-16(fp)
10020460:	00bfff84 	movi	r2,-2
10020464:	1884703a 	and	r2,r3,r2
10020468:	1001703a 	wrctl	status,r2
  
  return context;
1002046c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10020470:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10020474:	d0a00f17 	ldw	r2,-32708(gp)
10020478:	10c000c4 	addi	r3,r2,3
1002047c:	00bfff04 	movi	r2,-4
10020480:	1884703a 	and	r2,r3,r2
10020484:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10020488:	d0e00f17 	ldw	r3,-32708(gp)
1002048c:	e0bfff17 	ldw	r2,-4(fp)
10020490:	1885883a 	add	r2,r3,r2
10020494:	00c60034 	movhi	r3,6144
10020498:	18c00004 	addi	r3,r3,0
1002049c:	1880062e 	bgeu	r3,r2,100204b8 <sbrk+0x74>
100204a0:	e0bffa17 	ldw	r2,-24(fp)
100204a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100204a8:	e0bffd17 	ldw	r2,-12(fp)
100204ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
100204b0:	00bfffc4 	movi	r2,-1
100204b4:	00000b06 	br	100204e4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
100204b8:	d0a00f17 	ldw	r2,-32708(gp)
100204bc:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
100204c0:	d0e00f17 	ldw	r3,-32708(gp)
100204c4:	e0bfff17 	ldw	r2,-4(fp)
100204c8:	1885883a 	add	r2,r3,r2
100204cc:	d0a00f15 	stw	r2,-32708(gp)
100204d0:	e0bffa17 	ldw	r2,-24(fp)
100204d4:	e0bffe15 	stw	r2,-8(fp)
100204d8:	e0bffe17 	ldw	r2,-8(fp)
100204dc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
100204e0:	e0bffb17 	ldw	r2,-20(fp)
} 
100204e4:	e037883a 	mov	sp,fp
100204e8:	df000017 	ldw	fp,0(sp)
100204ec:	dec00104 	addi	sp,sp,4
100204f0:	f800283a 	ret

100204f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100204f4:	defffe04 	addi	sp,sp,-8
100204f8:	dfc00115 	stw	ra,4(sp)
100204fc:	df000015 	stw	fp,0(sp)
10020500:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10020504:	008400b4 	movhi	r2,4098
10020508:	1096f904 	addi	r2,r2,23524
1002050c:	10800017 	ldw	r2,0(r2)
10020510:	10000526 	beq	r2,zero,10020528 <alt_get_errno+0x34>
10020514:	008400b4 	movhi	r2,4098
10020518:	1096f904 	addi	r2,r2,23524
1002051c:	10800017 	ldw	r2,0(r2)
10020520:	103ee83a 	callr	r2
10020524:	00000206 	br	10020530 <alt_get_errno+0x3c>
10020528:	008400b4 	movhi	r2,4098
1002052c:	109ec604 	addi	r2,r2,31512
}
10020530:	e037883a 	mov	sp,fp
10020534:	dfc00117 	ldw	ra,4(sp)
10020538:	df000017 	ldw	fp,0(sp)
1002053c:	dec00204 	addi	sp,sp,8
10020540:	f800283a 	ret

10020544 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10020544:	defff904 	addi	sp,sp,-28
10020548:	dfc00615 	stw	ra,24(sp)
1002054c:	df000515 	stw	fp,20(sp)
10020550:	df000504 	addi	fp,sp,20
10020554:	e13ffd15 	stw	r4,-12(fp)
10020558:	e17ffe15 	stw	r5,-8(fp)
1002055c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10020560:	e0bffd17 	ldw	r2,-12(fp)
10020564:	10000716 	blt	r2,zero,10020584 <write+0x40>
10020568:	e13ffd17 	ldw	r4,-12(fp)
1002056c:	01400304 	movi	r5,12
10020570:	00146fc0 	call	100146fc <__mulsi3>
10020574:	00c400b4 	movhi	r3,4098
10020578:	18d26904 	addi	r3,r3,18852
1002057c:	10c5883a 	add	r2,r2,r3
10020580:	00000106 	br	10020588 <write+0x44>
10020584:	0005883a 	mov	r2,zero
10020588:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1002058c:	e0bffb17 	ldw	r2,-20(fp)
10020590:	10001f26 	beq	r2,zero,10020610 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10020594:	e0bffb17 	ldw	r2,-20(fp)
10020598:	10800217 	ldw	r2,8(r2)
1002059c:	108000cc 	andi	r2,r2,3
100205a0:	10001726 	beq	r2,zero,10020600 <write+0xbc>
100205a4:	e0bffb17 	ldw	r2,-20(fp)
100205a8:	10800017 	ldw	r2,0(r2)
100205ac:	10800617 	ldw	r2,24(r2)
100205b0:	10001326 	beq	r2,zero,10020600 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
100205b4:	e0bffb17 	ldw	r2,-20(fp)
100205b8:	10800017 	ldw	r2,0(r2)
100205bc:	10c00617 	ldw	r3,24(r2)
100205c0:	e0bfff17 	ldw	r2,-4(fp)
100205c4:	e13ffb17 	ldw	r4,-20(fp)
100205c8:	e17ffe17 	ldw	r5,-8(fp)
100205cc:	100d883a 	mov	r6,r2
100205d0:	183ee83a 	callr	r3
100205d4:	e0bffc15 	stw	r2,-16(fp)
100205d8:	e0bffc17 	ldw	r2,-16(fp)
100205dc:	1000060e 	bge	r2,zero,100205f8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
100205e0:	00204f40 	call	100204f4 <alt_get_errno>
100205e4:	e0fffc17 	ldw	r3,-16(fp)
100205e8:	00c7c83a 	sub	r3,zero,r3
100205ec:	10c00015 	stw	r3,0(r2)
        return -1;
100205f0:	00bfffc4 	movi	r2,-1
100205f4:	00000a06 	br	10020620 <write+0xdc>
      }
      return rval;
100205f8:	e0bffc17 	ldw	r2,-16(fp)
100205fc:	00000806 	br	10020620 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
10020600:	00204f40 	call	100204f4 <alt_get_errno>
10020604:	00c00344 	movi	r3,13
10020608:	10c00015 	stw	r3,0(r2)
1002060c:	00000306 	br	1002061c <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10020610:	00204f40 	call	100204f4 <alt_get_errno>
10020614:	00c01444 	movi	r3,81
10020618:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1002061c:	00bfffc4 	movi	r2,-1
}
10020620:	e037883a 	mov	sp,fp
10020624:	dfc00117 	ldw	ra,4(sp)
10020628:	df000017 	ldw	fp,0(sp)
1002062c:	dec00204 	addi	sp,sp,8
10020630:	f800283a 	ret

10020634 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10020634:	defffd04 	addi	sp,sp,-12
10020638:	dfc00215 	stw	ra,8(sp)
1002063c:	df000115 	stw	fp,4(sp)
10020640:	df000104 	addi	fp,sp,4
10020644:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10020648:	e13fff17 	ldw	r4,-4(fp)
1002064c:	014400b4 	movhi	r5,4098
10020650:	2956f604 	addi	r5,r5,23512
10020654:	00219280 	call	10021928 <alt_dev_llist_insert>
}
10020658:	e037883a 	mov	sp,fp
1002065c:	dfc00117 	ldw	ra,4(sp)
10020660:	df000017 	ldw	fp,0(sp)
10020664:	dec00204 	addi	sp,sp,8
10020668:	f800283a 	ret

1002066c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1002066c:	defffd04 	addi	sp,sp,-12
10020670:	dfc00215 	stw	ra,8(sp)
10020674:	df000115 	stw	fp,4(sp)
10020678:	df000104 	addi	fp,sp,4
1002067c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10020680:	00223540 	call	10022354 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10020684:	00800044 	movi	r2,1
10020688:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1002068c:	e037883a 	mov	sp,fp
10020690:	dfc00117 	ldw	ra,4(sp)
10020694:	df000017 	ldw	fp,0(sp)
10020698:	dec00204 	addi	sp,sp,8
1002069c:	f800283a 	ret

100206a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
100206a0:	defffe04 	addi	sp,sp,-8
100206a4:	dfc00115 	stw	ra,4(sp)
100206a8:	df000015 	stw	fp,0(sp)
100206ac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100206b0:	010400b4 	movhi	r4,4098
100206b4:	2112d304 	addi	r4,r4,19276
100206b8:	000b883a 	mov	r5,zero
100206bc:	01800144 	movi	r6,5
100206c0:	00208580 	call	10020858 <altera_avalon_jtag_uart_init>
100206c4:	010400b4 	movhi	r4,4098
100206c8:	2112c904 	addi	r4,r4,19236
100206cc:	00206340 	call	10020634 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100206d0:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
100206d4:	010400b4 	movhi	r4,4098
100206d8:	2116e104 	addi	r4,r4,23428
100206dc:	0021c240 	call	10021c24 <alt_fs_reg>
}
100206e0:	e037883a 	mov	sp,fp
100206e4:	dfc00117 	ldw	ra,4(sp)
100206e8:	df000017 	ldw	fp,0(sp)
100206ec:	dec00204 	addi	sp,sp,8
100206f0:	f800283a 	ret

100206f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
100206f4:	defffa04 	addi	sp,sp,-24
100206f8:	dfc00515 	stw	ra,20(sp)
100206fc:	df000415 	stw	fp,16(sp)
10020700:	df000404 	addi	fp,sp,16
10020704:	e13ffd15 	stw	r4,-12(fp)
10020708:	e17ffe15 	stw	r5,-8(fp)
1002070c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10020710:	e0bffd17 	ldw	r2,-12(fp)
10020714:	10800017 	ldw	r2,0(r2)
10020718:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1002071c:	e0bffc17 	ldw	r2,-16(fp)
10020720:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
10020724:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10020728:	10800217 	ldw	r2,8(r2)
1002072c:	1809883a 	mov	r4,r3
10020730:	e17ffe17 	ldw	r5,-8(fp)
10020734:	e1bfff17 	ldw	r6,-4(fp)
10020738:	100f883a 	mov	r7,r2
1002073c:	0020d1c0 	call	10020d1c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10020740:	e037883a 	mov	sp,fp
10020744:	dfc00117 	ldw	ra,4(sp)
10020748:	df000017 	ldw	fp,0(sp)
1002074c:	dec00204 	addi	sp,sp,8
10020750:	f800283a 	ret

10020754 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10020754:	defffa04 	addi	sp,sp,-24
10020758:	dfc00515 	stw	ra,20(sp)
1002075c:	df000415 	stw	fp,16(sp)
10020760:	df000404 	addi	fp,sp,16
10020764:	e13ffd15 	stw	r4,-12(fp)
10020768:	e17ffe15 	stw	r5,-8(fp)
1002076c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10020770:	e0bffd17 	ldw	r2,-12(fp)
10020774:	10800017 	ldw	r2,0(r2)
10020778:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1002077c:	e0bffc17 	ldw	r2,-16(fp)
10020780:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
10020784:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10020788:	10800217 	ldw	r2,8(r2)
1002078c:	1809883a 	mov	r4,r3
10020790:	e17ffe17 	ldw	r5,-8(fp)
10020794:	e1bfff17 	ldw	r6,-4(fp)
10020798:	100f883a 	mov	r7,r2
1002079c:	0020f340 	call	10020f34 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
100207a0:	e037883a 	mov	sp,fp
100207a4:	dfc00117 	ldw	ra,4(sp)
100207a8:	df000017 	ldw	fp,0(sp)
100207ac:	dec00204 	addi	sp,sp,8
100207b0:	f800283a 	ret

100207b4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
100207b4:	defffc04 	addi	sp,sp,-16
100207b8:	dfc00315 	stw	ra,12(sp)
100207bc:	df000215 	stw	fp,8(sp)
100207c0:	df000204 	addi	fp,sp,8
100207c4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100207c8:	e0bfff17 	ldw	r2,-4(fp)
100207cc:	10800017 	ldw	r2,0(r2)
100207d0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100207d4:	e0bffe17 	ldw	r2,-8(fp)
100207d8:	10c00a04 	addi	r3,r2,40
100207dc:	e0bfff17 	ldw	r2,-4(fp)
100207e0:	10800217 	ldw	r2,8(r2)
100207e4:	1809883a 	mov	r4,r3
100207e8:	100b883a 	mov	r5,r2
100207ec:	0020bc00 	call	10020bc0 <altera_avalon_jtag_uart_close>
}
100207f0:	e037883a 	mov	sp,fp
100207f4:	dfc00117 	ldw	ra,4(sp)
100207f8:	df000017 	ldw	fp,0(sp)
100207fc:	dec00204 	addi	sp,sp,8
10020800:	f800283a 	ret

10020804 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10020804:	defffa04 	addi	sp,sp,-24
10020808:	dfc00515 	stw	ra,20(sp)
1002080c:	df000415 	stw	fp,16(sp)
10020810:	df000404 	addi	fp,sp,16
10020814:	e13ffd15 	stw	r4,-12(fp)
10020818:	e17ffe15 	stw	r5,-8(fp)
1002081c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10020820:	e0bffd17 	ldw	r2,-12(fp)
10020824:	10800017 	ldw	r2,0(r2)
10020828:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1002082c:	e0bffc17 	ldw	r2,-16(fp)
10020830:	10800a04 	addi	r2,r2,40
10020834:	1009883a 	mov	r4,r2
10020838:	e17ffe17 	ldw	r5,-8(fp)
1002083c:	e1bfff17 	ldw	r6,-4(fp)
10020840:	0020c280 	call	10020c28 <altera_avalon_jtag_uart_ioctl>
}
10020844:	e037883a 	mov	sp,fp
10020848:	dfc00117 	ldw	ra,4(sp)
1002084c:	df000017 	ldw	fp,0(sp)
10020850:	dec00204 	addi	sp,sp,8
10020854:	f800283a 	ret

10020858 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10020858:	defffa04 	addi	sp,sp,-24
1002085c:	dfc00515 	stw	ra,20(sp)
10020860:	df000415 	stw	fp,16(sp)
10020864:	df000404 	addi	fp,sp,16
10020868:	e13ffd15 	stw	r4,-12(fp)
1002086c:	e17ffe15 	stw	r5,-8(fp)
10020870:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10020874:	e0bffd17 	ldw	r2,-12(fp)
10020878:	00c00044 	movi	r3,1
1002087c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10020880:	e0bffd17 	ldw	r2,-12(fp)
10020884:	10800017 	ldw	r2,0(r2)
10020888:	10800104 	addi	r2,r2,4
1002088c:	e0fffd17 	ldw	r3,-12(fp)
10020890:	18c00817 	ldw	r3,32(r3)
10020894:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10020898:	e0fffe17 	ldw	r3,-8(fp)
1002089c:	e0bfff17 	ldw	r2,-4(fp)
100208a0:	d8000015 	stw	zero,0(sp)
100208a4:	1809883a 	mov	r4,r3
100208a8:	100b883a 	mov	r5,r2
100208ac:	018400b4 	movhi	r6,4098
100208b0:	31824604 	addi	r6,r6,2328
100208b4:	e1fffd17 	ldw	r7,-12(fp)
100208b8:	0021d980 	call	10021d98 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100208bc:	e0bffd17 	ldw	r2,-12(fp)
100208c0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100208c4:	e0bffd17 	ldw	r2,-12(fp)
100208c8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100208cc:	008400b4 	movhi	r2,4098
100208d0:	109ed104 	addi	r2,r2,31556
100208d4:	10800017 	ldw	r2,0(r2)
100208d8:	1809883a 	mov	r4,r3
100208dc:	100b883a 	mov	r5,r2
100208e0:	018400b4 	movhi	r6,4098
100208e4:	3182c704 	addi	r6,r6,2844
100208e8:	e1fffd17 	ldw	r7,-12(fp)
100208ec:	002177c0 	call	1002177c <alt_alarm_start>
100208f0:	1000040e 	bge	r2,zero,10020904 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
100208f4:	e0bffd17 	ldw	r2,-12(fp)
100208f8:	00e00034 	movhi	r3,32768
100208fc:	18ffffc4 	addi	r3,r3,-1
10020900:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10020904:	e037883a 	mov	sp,fp
10020908:	dfc00117 	ldw	ra,4(sp)
1002090c:	df000017 	ldw	fp,0(sp)
10020910:	dec00204 	addi	sp,sp,8
10020914:	f800283a 	ret

10020918 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10020918:	defff804 	addi	sp,sp,-32
1002091c:	df000715 	stw	fp,28(sp)
10020920:	df000704 	addi	fp,sp,28
10020924:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10020928:	e0bfff17 	ldw	r2,-4(fp)
1002092c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10020930:	e0bffb17 	ldw	r2,-20(fp)
10020934:	10800017 	ldw	r2,0(r2)
10020938:	e0bffc15 	stw	r2,-16(fp)
1002093c:	00000106 	br	10020944 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
10020940:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10020944:	e0bffc17 	ldw	r2,-16(fp)
10020948:	10800104 	addi	r2,r2,4
1002094c:	10800037 	ldwio	r2,0(r2)
10020950:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10020954:	e0bffd17 	ldw	r2,-12(fp)
10020958:	1080c00c 	andi	r2,r2,768
1002095c:	10006a26 	beq	r2,zero,10020b08 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10020960:	e0bffd17 	ldw	r2,-12(fp)
10020964:	1080400c 	andi	r2,r2,256
10020968:	10003326 	beq	r2,zero,10020a38 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1002096c:	00800074 	movhi	r2,1
10020970:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10020974:	e0bffb17 	ldw	r2,-20(fp)
10020978:	10800a17 	ldw	r2,40(r2)
1002097c:	10800044 	addi	r2,r2,1
10020980:	1081ffcc 	andi	r2,r2,2047
10020984:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10020988:	e0bffb17 	ldw	r2,-20(fp)
1002098c:	10c00b17 	ldw	r3,44(r2)
10020990:	e0bffe17 	ldw	r2,-8(fp)
10020994:	18801426 	beq	r3,r2,100209e8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10020998:	e0bffc17 	ldw	r2,-16(fp)
1002099c:	10800037 	ldwio	r2,0(r2)
100209a0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
100209a4:	e0bff917 	ldw	r2,-28(fp)
100209a8:	10a0000c 	andi	r2,r2,32768
100209ac:	10001026 	beq	r2,zero,100209f0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
100209b0:	e0bffb17 	ldw	r2,-20(fp)
100209b4:	10800a17 	ldw	r2,40(r2)
100209b8:	e0fff917 	ldw	r3,-28(fp)
100209bc:	e13ffb17 	ldw	r4,-20(fp)
100209c0:	2085883a 	add	r2,r4,r2
100209c4:	10800e04 	addi	r2,r2,56
100209c8:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100209cc:	e0bffb17 	ldw	r2,-20(fp)
100209d0:	10800a17 	ldw	r2,40(r2)
100209d4:	10800044 	addi	r2,r2,1
100209d8:	10c1ffcc 	andi	r3,r2,2047
100209dc:	e0bffb17 	ldw	r2,-20(fp)
100209e0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
100209e4:	003fe306 	br	10020974 <__alt_data_end+0xf8020974>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
100209e8:	0001883a 	nop
100209ec:	00000106 	br	100209f4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
100209f0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
100209f4:	e0bff917 	ldw	r2,-28(fp)
100209f8:	10bfffec 	andhi	r2,r2,65535
100209fc:	10000e26 	beq	r2,zero,10020a38 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10020a00:	e0bffb17 	ldw	r2,-20(fp)
10020a04:	10c00817 	ldw	r3,32(r2)
10020a08:	00bfff84 	movi	r2,-2
10020a0c:	1886703a 	and	r3,r3,r2
10020a10:	e0bffb17 	ldw	r2,-20(fp)
10020a14:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10020a18:	e0bffc17 	ldw	r2,-16(fp)
10020a1c:	10800104 	addi	r2,r2,4
10020a20:	e0fffb17 	ldw	r3,-20(fp)
10020a24:	18c00817 	ldw	r3,32(r3)
10020a28:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10020a2c:	e0bffc17 	ldw	r2,-16(fp)
10020a30:	10800104 	addi	r2,r2,4
10020a34:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10020a38:	e0bffd17 	ldw	r2,-12(fp)
10020a3c:	1080800c 	andi	r2,r2,512
10020a40:	103fbf26 	beq	r2,zero,10020940 <__alt_data_end+0xf8020940>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10020a44:	e0bffd17 	ldw	r2,-12(fp)
10020a48:	1004d43a 	srli	r2,r2,16
10020a4c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10020a50:	00001406 	br	10020aa4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10020a54:	e0bffc17 	ldw	r2,-16(fp)
10020a58:	e0fffb17 	ldw	r3,-20(fp)
10020a5c:	18c00d17 	ldw	r3,52(r3)
10020a60:	e13ffb17 	ldw	r4,-20(fp)
10020a64:	20c7883a 	add	r3,r4,r3
10020a68:	18c20e04 	addi	r3,r3,2104
10020a6c:	18c00003 	ldbu	r3,0(r3)
10020a70:	18c03fcc 	andi	r3,r3,255
10020a74:	18c0201c 	xori	r3,r3,128
10020a78:	18ffe004 	addi	r3,r3,-128
10020a7c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10020a80:	e0bffb17 	ldw	r2,-20(fp)
10020a84:	10800d17 	ldw	r2,52(r2)
10020a88:	10800044 	addi	r2,r2,1
10020a8c:	10c1ffcc 	andi	r3,r2,2047
10020a90:	e0bffb17 	ldw	r2,-20(fp)
10020a94:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10020a98:	e0bffa17 	ldw	r2,-24(fp)
10020a9c:	10bfffc4 	addi	r2,r2,-1
10020aa0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10020aa4:	e0bffa17 	ldw	r2,-24(fp)
10020aa8:	10000526 	beq	r2,zero,10020ac0 <altera_avalon_jtag_uart_irq+0x1a8>
10020aac:	e0bffb17 	ldw	r2,-20(fp)
10020ab0:	10c00d17 	ldw	r3,52(r2)
10020ab4:	e0bffb17 	ldw	r2,-20(fp)
10020ab8:	10800c17 	ldw	r2,48(r2)
10020abc:	18bfe51e 	bne	r3,r2,10020a54 <__alt_data_end+0xf8020a54>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10020ac0:	e0bffa17 	ldw	r2,-24(fp)
10020ac4:	103f9e26 	beq	r2,zero,10020940 <__alt_data_end+0xf8020940>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10020ac8:	e0bffb17 	ldw	r2,-20(fp)
10020acc:	10c00817 	ldw	r3,32(r2)
10020ad0:	00bfff44 	movi	r2,-3
10020ad4:	1886703a 	and	r3,r3,r2
10020ad8:	e0bffb17 	ldw	r2,-20(fp)
10020adc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10020ae0:	e0bffb17 	ldw	r2,-20(fp)
10020ae4:	10800017 	ldw	r2,0(r2)
10020ae8:	10800104 	addi	r2,r2,4
10020aec:	e0fffb17 	ldw	r3,-20(fp)
10020af0:	18c00817 	ldw	r3,32(r3)
10020af4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10020af8:	e0bffc17 	ldw	r2,-16(fp)
10020afc:	10800104 	addi	r2,r2,4
10020b00:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10020b04:	003f8e06 	br	10020940 <__alt_data_end+0xf8020940>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10020b08:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10020b0c:	e037883a 	mov	sp,fp
10020b10:	df000017 	ldw	fp,0(sp)
10020b14:	dec00104 	addi	sp,sp,4
10020b18:	f800283a 	ret

10020b1c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10020b1c:	defffc04 	addi	sp,sp,-16
10020b20:	df000315 	stw	fp,12(sp)
10020b24:	df000304 	addi	fp,sp,12
10020b28:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10020b2c:	e0bfff17 	ldw	r2,-4(fp)
10020b30:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10020b34:	e0bffd17 	ldw	r2,-12(fp)
10020b38:	10800017 	ldw	r2,0(r2)
10020b3c:	10800104 	addi	r2,r2,4
10020b40:	10800037 	ldwio	r2,0(r2)
10020b44:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10020b48:	e0bffe17 	ldw	r2,-8(fp)
10020b4c:	1081000c 	andi	r2,r2,1024
10020b50:	10000a26 	beq	r2,zero,10020b7c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10020b54:	e0bffd17 	ldw	r2,-12(fp)
10020b58:	10800017 	ldw	r2,0(r2)
10020b5c:	10800104 	addi	r2,r2,4
10020b60:	e0fffd17 	ldw	r3,-12(fp)
10020b64:	18c00817 	ldw	r3,32(r3)
10020b68:	18c10014 	ori	r3,r3,1024
10020b6c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
10020b70:	e0bffd17 	ldw	r2,-12(fp)
10020b74:	10000915 	stw	zero,36(r2)
10020b78:	00000a06 	br	10020ba4 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10020b7c:	e0bffd17 	ldw	r2,-12(fp)
10020b80:	10800917 	ldw	r2,36(r2)
10020b84:	00e00034 	movhi	r3,32768
10020b88:	18ffff04 	addi	r3,r3,-4
10020b8c:	18800536 	bltu	r3,r2,10020ba4 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
10020b90:	e0bffd17 	ldw	r2,-12(fp)
10020b94:	10800917 	ldw	r2,36(r2)
10020b98:	10c00044 	addi	r3,r2,1
10020b9c:	e0bffd17 	ldw	r2,-12(fp)
10020ba0:	10c00915 	stw	r3,36(r2)
10020ba4:	008400b4 	movhi	r2,4098
10020ba8:	109ed104 	addi	r2,r2,31556
10020bac:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10020bb0:	e037883a 	mov	sp,fp
10020bb4:	df000017 	ldw	fp,0(sp)
10020bb8:	dec00104 	addi	sp,sp,4
10020bbc:	f800283a 	ret

10020bc0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10020bc0:	defffd04 	addi	sp,sp,-12
10020bc4:	df000215 	stw	fp,8(sp)
10020bc8:	df000204 	addi	fp,sp,8
10020bcc:	e13ffe15 	stw	r4,-8(fp)
10020bd0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10020bd4:	00000506 	br	10020bec <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10020bd8:	e0bfff17 	ldw	r2,-4(fp)
10020bdc:	1090000c 	andi	r2,r2,16384
10020be0:	10000226 	beq	r2,zero,10020bec <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10020be4:	00bffd44 	movi	r2,-11
10020be8:	00000b06 	br	10020c18 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10020bec:	e0bffe17 	ldw	r2,-8(fp)
10020bf0:	10c00d17 	ldw	r3,52(r2)
10020bf4:	e0bffe17 	ldw	r2,-8(fp)
10020bf8:	10800c17 	ldw	r2,48(r2)
10020bfc:	18800526 	beq	r3,r2,10020c14 <altera_avalon_jtag_uart_close+0x54>
10020c00:	e0bffe17 	ldw	r2,-8(fp)
10020c04:	10c00917 	ldw	r3,36(r2)
10020c08:	e0bffe17 	ldw	r2,-8(fp)
10020c0c:	10800117 	ldw	r2,4(r2)
10020c10:	18bff136 	bltu	r3,r2,10020bd8 <__alt_data_end+0xf8020bd8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10020c14:	0005883a 	mov	r2,zero
}
10020c18:	e037883a 	mov	sp,fp
10020c1c:	df000017 	ldw	fp,0(sp)
10020c20:	dec00104 	addi	sp,sp,4
10020c24:	f800283a 	ret

10020c28 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10020c28:	defffa04 	addi	sp,sp,-24
10020c2c:	df000515 	stw	fp,20(sp)
10020c30:	df000504 	addi	fp,sp,20
10020c34:	e13ffd15 	stw	r4,-12(fp)
10020c38:	e17ffe15 	stw	r5,-8(fp)
10020c3c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10020c40:	00bff9c4 	movi	r2,-25
10020c44:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10020c48:	e0bffe17 	ldw	r2,-8(fp)
10020c4c:	10da8060 	cmpeqi	r3,r2,27137
10020c50:	1800031e 	bne	r3,zero,10020c60 <altera_avalon_jtag_uart_ioctl+0x38>
10020c54:	109a80a0 	cmpeqi	r2,r2,27138
10020c58:	1000181e 	bne	r2,zero,10020cbc <altera_avalon_jtag_uart_ioctl+0x94>
10020c5c:	00002606 	br	10020cf8 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10020c60:	e0bffd17 	ldw	r2,-12(fp)
10020c64:	10c00117 	ldw	r3,4(r2)
10020c68:	00a00034 	movhi	r2,32768
10020c6c:	10bfffc4 	addi	r2,r2,-1
10020c70:	18802226 	beq	r3,r2,10020cfc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
10020c74:	e0bfff17 	ldw	r2,-4(fp)
10020c78:	10800017 	ldw	r2,0(r2)
10020c7c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10020c80:	e0bffc17 	ldw	r2,-16(fp)
10020c84:	10800090 	cmplti	r2,r2,2
10020c88:	1000061e 	bne	r2,zero,10020ca4 <altera_avalon_jtag_uart_ioctl+0x7c>
10020c8c:	e0fffc17 	ldw	r3,-16(fp)
10020c90:	00a00034 	movhi	r2,32768
10020c94:	10bfffc4 	addi	r2,r2,-1
10020c98:	18800226 	beq	r3,r2,10020ca4 <altera_avalon_jtag_uart_ioctl+0x7c>
10020c9c:	e0bffc17 	ldw	r2,-16(fp)
10020ca0:	00000206 	br	10020cac <altera_avalon_jtag_uart_ioctl+0x84>
10020ca4:	00a00034 	movhi	r2,32768
10020ca8:	10bfff84 	addi	r2,r2,-2
10020cac:	e0fffd17 	ldw	r3,-12(fp)
10020cb0:	18800115 	stw	r2,4(r3)
      rc = 0;
10020cb4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10020cb8:	00001006 	br	10020cfc <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10020cbc:	e0bffd17 	ldw	r2,-12(fp)
10020cc0:	10c00117 	ldw	r3,4(r2)
10020cc4:	00a00034 	movhi	r2,32768
10020cc8:	10bfffc4 	addi	r2,r2,-1
10020ccc:	18800d26 	beq	r3,r2,10020d04 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10020cd0:	e0bffd17 	ldw	r2,-12(fp)
10020cd4:	10c00917 	ldw	r3,36(r2)
10020cd8:	e0bffd17 	ldw	r2,-12(fp)
10020cdc:	10800117 	ldw	r2,4(r2)
10020ce0:	1885803a 	cmpltu	r2,r3,r2
10020ce4:	10c03fcc 	andi	r3,r2,255
10020ce8:	e0bfff17 	ldw	r2,-4(fp)
10020cec:	10c00015 	stw	r3,0(r2)
      rc = 0;
10020cf0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10020cf4:	00000306 	br	10020d04 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
10020cf8:	00000306 	br	10020d08 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10020cfc:	0001883a 	nop
10020d00:	00000106 	br	10020d08 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10020d04:	0001883a 	nop

  default:
    break;
  }

  return rc;
10020d08:	e0bffb17 	ldw	r2,-20(fp)
}
10020d0c:	e037883a 	mov	sp,fp
10020d10:	df000017 	ldw	fp,0(sp)
10020d14:	dec00104 	addi	sp,sp,4
10020d18:	f800283a 	ret

10020d1c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10020d1c:	defff304 	addi	sp,sp,-52
10020d20:	dfc00c15 	stw	ra,48(sp)
10020d24:	df000b15 	stw	fp,44(sp)
10020d28:	df000b04 	addi	fp,sp,44
10020d2c:	e13ffc15 	stw	r4,-16(fp)
10020d30:	e17ffd15 	stw	r5,-12(fp)
10020d34:	e1bffe15 	stw	r6,-8(fp)
10020d38:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10020d3c:	e0bffd17 	ldw	r2,-12(fp)
10020d40:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10020d44:	00004706 	br	10020e64 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10020d48:	e0bffc17 	ldw	r2,-16(fp)
10020d4c:	10800a17 	ldw	r2,40(r2)
10020d50:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10020d54:	e0bffc17 	ldw	r2,-16(fp)
10020d58:	10800b17 	ldw	r2,44(r2)
10020d5c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10020d60:	e0fff717 	ldw	r3,-36(fp)
10020d64:	e0bff817 	ldw	r2,-32(fp)
10020d68:	18800536 	bltu	r3,r2,10020d80 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10020d6c:	e0fff717 	ldw	r3,-36(fp)
10020d70:	e0bff817 	ldw	r2,-32(fp)
10020d74:	1885c83a 	sub	r2,r3,r2
10020d78:	e0bff615 	stw	r2,-40(fp)
10020d7c:	00000406 	br	10020d90 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10020d80:	00c20004 	movi	r3,2048
10020d84:	e0bff817 	ldw	r2,-32(fp)
10020d88:	1885c83a 	sub	r2,r3,r2
10020d8c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10020d90:	e0bff617 	ldw	r2,-40(fp)
10020d94:	10001e26 	beq	r2,zero,10020e10 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10020d98:	e0fffe17 	ldw	r3,-8(fp)
10020d9c:	e0bff617 	ldw	r2,-40(fp)
10020da0:	1880022e 	bgeu	r3,r2,10020dac <altera_avalon_jtag_uart_read+0x90>
        n = space;
10020da4:	e0bffe17 	ldw	r2,-8(fp)
10020da8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10020dac:	e0bff817 	ldw	r2,-32(fp)
10020db0:	10800e04 	addi	r2,r2,56
10020db4:	e0fffc17 	ldw	r3,-16(fp)
10020db8:	1885883a 	add	r2,r3,r2
10020dbc:	e13ff517 	ldw	r4,-44(fp)
10020dc0:	100b883a 	mov	r5,r2
10020dc4:	e1bff617 	ldw	r6,-40(fp)
10020dc8:	0016dd80 	call	10016dd8 <memcpy>
      ptr   += n;
10020dcc:	e0fff517 	ldw	r3,-44(fp)
10020dd0:	e0bff617 	ldw	r2,-40(fp)
10020dd4:	1885883a 	add	r2,r3,r2
10020dd8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10020ddc:	e0fffe17 	ldw	r3,-8(fp)
10020de0:	e0bff617 	ldw	r2,-40(fp)
10020de4:	1885c83a 	sub	r2,r3,r2
10020de8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10020dec:	e0fff817 	ldw	r3,-32(fp)
10020df0:	e0bff617 	ldw	r2,-40(fp)
10020df4:	1885883a 	add	r2,r3,r2
10020df8:	10c1ffcc 	andi	r3,r2,2047
10020dfc:	e0bffc17 	ldw	r2,-16(fp)
10020e00:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10020e04:	e0bffe17 	ldw	r2,-8(fp)
10020e08:	00bfcf16 	blt	zero,r2,10020d48 <__alt_data_end+0xf8020d48>
10020e0c:	00000106 	br	10020e14 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10020e10:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10020e14:	e0fff517 	ldw	r3,-44(fp)
10020e18:	e0bffd17 	ldw	r2,-12(fp)
10020e1c:	1880141e 	bne	r3,r2,10020e70 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10020e20:	e0bfff17 	ldw	r2,-4(fp)
10020e24:	1090000c 	andi	r2,r2,16384
10020e28:	1000131e 	bne	r2,zero,10020e78 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10020e2c:	0001883a 	nop
10020e30:	e0bffc17 	ldw	r2,-16(fp)
10020e34:	10c00a17 	ldw	r3,40(r2)
10020e38:	e0bff717 	ldw	r2,-36(fp)
10020e3c:	1880051e 	bne	r3,r2,10020e54 <altera_avalon_jtag_uart_read+0x138>
10020e40:	e0bffc17 	ldw	r2,-16(fp)
10020e44:	10c00917 	ldw	r3,36(r2)
10020e48:	e0bffc17 	ldw	r2,-16(fp)
10020e4c:	10800117 	ldw	r2,4(r2)
10020e50:	18bff736 	bltu	r3,r2,10020e30 <__alt_data_end+0xf8020e30>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10020e54:	e0bffc17 	ldw	r2,-16(fp)
10020e58:	10c00a17 	ldw	r3,40(r2)
10020e5c:	e0bff717 	ldw	r2,-36(fp)
10020e60:	18800726 	beq	r3,r2,10020e80 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10020e64:	e0bffe17 	ldw	r2,-8(fp)
10020e68:	00bfb716 	blt	zero,r2,10020d48 <__alt_data_end+0xf8020d48>
10020e6c:	00000506 	br	10020e84 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10020e70:	0001883a 	nop
10020e74:	00000306 	br	10020e84 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10020e78:	0001883a 	nop
10020e7c:	00000106 	br	10020e84 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10020e80:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10020e84:	e0fff517 	ldw	r3,-44(fp)
10020e88:	e0bffd17 	ldw	r2,-12(fp)
10020e8c:	18801726 	beq	r3,r2,10020eec <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10020e90:	0005303a 	rdctl	r2,status
10020e94:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10020e98:	e0fffa17 	ldw	r3,-24(fp)
10020e9c:	00bfff84 	movi	r2,-2
10020ea0:	1884703a 	and	r2,r3,r2
10020ea4:	1001703a 	wrctl	status,r2
  
  return context;
10020ea8:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10020eac:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10020eb0:	e0bffc17 	ldw	r2,-16(fp)
10020eb4:	10800817 	ldw	r2,32(r2)
10020eb8:	10c00054 	ori	r3,r2,1
10020ebc:	e0bffc17 	ldw	r2,-16(fp)
10020ec0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10020ec4:	e0bffc17 	ldw	r2,-16(fp)
10020ec8:	10800017 	ldw	r2,0(r2)
10020ecc:	10800104 	addi	r2,r2,4
10020ed0:	e0fffc17 	ldw	r3,-16(fp)
10020ed4:	18c00817 	ldw	r3,32(r3)
10020ed8:	10c00035 	stwio	r3,0(r2)
10020edc:	e0bff917 	ldw	r2,-28(fp)
10020ee0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10020ee4:	e0bffb17 	ldw	r2,-20(fp)
10020ee8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10020eec:	e0fff517 	ldw	r3,-44(fp)
10020ef0:	e0bffd17 	ldw	r2,-12(fp)
10020ef4:	18800426 	beq	r3,r2,10020f08 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
10020ef8:	e0fff517 	ldw	r3,-44(fp)
10020efc:	e0bffd17 	ldw	r2,-12(fp)
10020f00:	1885c83a 	sub	r2,r3,r2
10020f04:	00000606 	br	10020f20 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
10020f08:	e0bfff17 	ldw	r2,-4(fp)
10020f0c:	1090000c 	andi	r2,r2,16384
10020f10:	10000226 	beq	r2,zero,10020f1c <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
10020f14:	00bffd44 	movi	r2,-11
10020f18:	00000106 	br	10020f20 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
10020f1c:	00bffec4 	movi	r2,-5
}
10020f20:	e037883a 	mov	sp,fp
10020f24:	dfc00117 	ldw	ra,4(sp)
10020f28:	df000017 	ldw	fp,0(sp)
10020f2c:	dec00204 	addi	sp,sp,8
10020f30:	f800283a 	ret

10020f34 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10020f34:	defff304 	addi	sp,sp,-52
10020f38:	dfc00c15 	stw	ra,48(sp)
10020f3c:	df000b15 	stw	fp,44(sp)
10020f40:	df000b04 	addi	fp,sp,44
10020f44:	e13ffc15 	stw	r4,-16(fp)
10020f48:	e17ffd15 	stw	r5,-12(fp)
10020f4c:	e1bffe15 	stw	r6,-8(fp)
10020f50:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10020f54:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10020f58:	e0bffd17 	ldw	r2,-12(fp)
10020f5c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10020f60:	00003706 	br	10021040 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10020f64:	e0bffc17 	ldw	r2,-16(fp)
10020f68:	10800c17 	ldw	r2,48(r2)
10020f6c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
10020f70:	e0bffc17 	ldw	r2,-16(fp)
10020f74:	10800d17 	ldw	r2,52(r2)
10020f78:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10020f7c:	e0fff817 	ldw	r3,-32(fp)
10020f80:	e0bff517 	ldw	r2,-44(fp)
10020f84:	1880062e 	bgeu	r3,r2,10020fa0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10020f88:	e0fff517 	ldw	r3,-44(fp)
10020f8c:	e0bff817 	ldw	r2,-32(fp)
10020f90:	1885c83a 	sub	r2,r3,r2
10020f94:	10bfffc4 	addi	r2,r2,-1
10020f98:	e0bff615 	stw	r2,-40(fp)
10020f9c:	00000b06 	br	10020fcc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10020fa0:	e0bff517 	ldw	r2,-44(fp)
10020fa4:	10000526 	beq	r2,zero,10020fbc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10020fa8:	00c20004 	movi	r3,2048
10020fac:	e0bff817 	ldw	r2,-32(fp)
10020fb0:	1885c83a 	sub	r2,r3,r2
10020fb4:	e0bff615 	stw	r2,-40(fp)
10020fb8:	00000406 	br	10020fcc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10020fbc:	00c1ffc4 	movi	r3,2047
10020fc0:	e0bff817 	ldw	r2,-32(fp)
10020fc4:	1885c83a 	sub	r2,r3,r2
10020fc8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10020fcc:	e0bff617 	ldw	r2,-40(fp)
10020fd0:	10001e26 	beq	r2,zero,1002104c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10020fd4:	e0fffe17 	ldw	r3,-8(fp)
10020fd8:	e0bff617 	ldw	r2,-40(fp)
10020fdc:	1880022e 	bgeu	r3,r2,10020fe8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10020fe0:	e0bffe17 	ldw	r2,-8(fp)
10020fe4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10020fe8:	e0bff817 	ldw	r2,-32(fp)
10020fec:	10820e04 	addi	r2,r2,2104
10020ff0:	e0fffc17 	ldw	r3,-16(fp)
10020ff4:	1885883a 	add	r2,r3,r2
10020ff8:	1009883a 	mov	r4,r2
10020ffc:	e17ffd17 	ldw	r5,-12(fp)
10021000:	e1bff617 	ldw	r6,-40(fp)
10021004:	0016dd80 	call	10016dd8 <memcpy>
      ptr   += n;
10021008:	e0fffd17 	ldw	r3,-12(fp)
1002100c:	e0bff617 	ldw	r2,-40(fp)
10021010:	1885883a 	add	r2,r3,r2
10021014:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10021018:	e0fffe17 	ldw	r3,-8(fp)
1002101c:	e0bff617 	ldw	r2,-40(fp)
10021020:	1885c83a 	sub	r2,r3,r2
10021024:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10021028:	e0fff817 	ldw	r3,-32(fp)
1002102c:	e0bff617 	ldw	r2,-40(fp)
10021030:	1885883a 	add	r2,r3,r2
10021034:	10c1ffcc 	andi	r3,r2,2047
10021038:	e0bffc17 	ldw	r2,-16(fp)
1002103c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10021040:	e0bffe17 	ldw	r2,-8(fp)
10021044:	00bfc716 	blt	zero,r2,10020f64 <__alt_data_end+0xf8020f64>
10021048:	00000106 	br	10021050 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1002104c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10021050:	0005303a 	rdctl	r2,status
10021054:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10021058:	e0fffa17 	ldw	r3,-24(fp)
1002105c:	00bfff84 	movi	r2,-2
10021060:	1884703a 	and	r2,r3,r2
10021064:	1001703a 	wrctl	status,r2
  
  return context;
10021068:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1002106c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10021070:	e0bffc17 	ldw	r2,-16(fp)
10021074:	10800817 	ldw	r2,32(r2)
10021078:	10c00094 	ori	r3,r2,2
1002107c:	e0bffc17 	ldw	r2,-16(fp)
10021080:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10021084:	e0bffc17 	ldw	r2,-16(fp)
10021088:	10800017 	ldw	r2,0(r2)
1002108c:	10800104 	addi	r2,r2,4
10021090:	e0fffc17 	ldw	r3,-16(fp)
10021094:	18c00817 	ldw	r3,32(r3)
10021098:	10c00035 	stwio	r3,0(r2)
1002109c:	e0bff917 	ldw	r2,-28(fp)
100210a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100210a4:	e0bffb17 	ldw	r2,-20(fp)
100210a8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100210ac:	e0bffe17 	ldw	r2,-8(fp)
100210b0:	0080100e 	bge	zero,r2,100210f4 <altera_avalon_jtag_uart_write+0x1c0>
    {
      if (flags & O_NONBLOCK)
100210b4:	e0bfff17 	ldw	r2,-4(fp)
100210b8:	1090000c 	andi	r2,r2,16384
100210bc:	1000101e 	bne	r2,zero,10021100 <altera_avalon_jtag_uart_write+0x1cc>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
100210c0:	0001883a 	nop
100210c4:	e0bffc17 	ldw	r2,-16(fp)
100210c8:	10c00d17 	ldw	r3,52(r2)
100210cc:	e0bff517 	ldw	r2,-44(fp)
100210d0:	1880051e 	bne	r3,r2,100210e8 <altera_avalon_jtag_uart_write+0x1b4>
100210d4:	e0bffc17 	ldw	r2,-16(fp)
100210d8:	10c00917 	ldw	r3,36(r2)
100210dc:	e0bffc17 	ldw	r2,-16(fp)
100210e0:	10800117 	ldw	r2,4(r2)
100210e4:	18bff736 	bltu	r3,r2,100210c4 <__alt_data_end+0xf80210c4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
100210e8:	e0bffc17 	ldw	r2,-16(fp)
100210ec:	10800917 	ldw	r2,36(r2)
100210f0:	1000051e 	bne	r2,zero,10021108 <altera_avalon_jtag_uart_write+0x1d4>
         break;
    }
  }
  while (count > 0);
100210f4:	e0bffe17 	ldw	r2,-8(fp)
100210f8:	00bfd116 	blt	zero,r2,10021040 <__alt_data_end+0xf8021040>
100210fc:	00000306 	br	1002110c <altera_avalon_jtag_uart_write+0x1d8>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10021100:	0001883a 	nop
10021104:	00000106 	br	1002110c <altera_avalon_jtag_uart_write+0x1d8>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10021108:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1002110c:	e0fffd17 	ldw	r3,-12(fp)
10021110:	e0bff717 	ldw	r2,-36(fp)
10021114:	18800426 	beq	r3,r2,10021128 <altera_avalon_jtag_uart_write+0x1f4>
    return ptr - start;
10021118:	e0fffd17 	ldw	r3,-12(fp)
1002111c:	e0bff717 	ldw	r2,-36(fp)
10021120:	1885c83a 	sub	r2,r3,r2
10021124:	00000606 	br	10021140 <altera_avalon_jtag_uart_write+0x20c>
  else if (flags & O_NONBLOCK)
10021128:	e0bfff17 	ldw	r2,-4(fp)
1002112c:	1090000c 	andi	r2,r2,16384
10021130:	10000226 	beq	r2,zero,1002113c <altera_avalon_jtag_uart_write+0x208>
    return -EWOULDBLOCK;
10021134:	00bffd44 	movi	r2,-11
10021138:	00000106 	br	10021140 <altera_avalon_jtag_uart_write+0x20c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1002113c:	00bffec4 	movi	r2,-5
}
10021140:	e037883a 	mov	sp,fp
10021144:	dfc00117 	ldw	ra,4(sp)
10021148:	df000017 	ldw	fp,0(sp)
1002114c:	dec00204 	addi	sp,sp,8
10021150:	f800283a 	ret

10021154 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
10021154:	deffeb04 	addi	sp,sp,-84
10021158:	df001415 	stw	fp,80(sp)
1002115c:	dc401315 	stw	r17,76(sp)
10021160:	dc001215 	stw	r16,72(sp)
10021164:	df001204 	addi	fp,sp,72
10021168:	e13ffb15 	stw	r4,-20(fp)
1002116c:	e17ffc15 	stw	r5,-16(fp)
10021170:	e1bffd15 	stw	r6,-12(fp)
10021174:	e1fffe15 	stw	r7,-8(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
10021178:	e0bffb17 	ldw	r2,-20(fp)
1002117c:	10800017 	ldw	r2,0(r2)
10021180:	e0bfee15 	stw	r2,-72(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
10021184:	e0bfee17 	ldw	r2,-72(fp)
10021188:	10800217 	ldw	r2,8(r2)
1002118c:	e0bff715 	stw	r2,-36(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10021190:	e0bff717 	ldw	r2,-36(fp)
10021194:	10bfffc4 	addi	r2,r2,-1
10021198:	e0bff815 	stw	r2,-32(fp)

  while (*++ptr != 0)
1002119c:	e0bff817 	ldw	r2,-32(fp)
100211a0:	10800044 	addi	r2,r2,1
100211a4:	e0bff815 	stw	r2,-32(fp)
100211a8:	e0bff817 	ldw	r2,-32(fp)
100211ac:	10800003 	ldbu	r2,0(r2)
100211b0:	10803fcc 	andi	r2,r2,255
100211b4:	1080201c 	xori	r2,r2,128
100211b8:	10bfe004 	addi	r2,r2,-128
100211bc:	103ff71e 	bne	r2,zero,1002119c <__alt_data_end+0xf802119c>
    ;

  return ptr - string;
100211c0:	e0fff817 	ldw	r3,-32(fp)
100211c4:	e0bff717 	ldw	r2,-36(fp)
100211c8:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
100211cc:	10800044 	addi	r2,r2,1
100211d0:	e0fffc17 	ldw	r3,-16(fp)
100211d4:	1885883a 	add	r2,r3,r2
100211d8:	e0bffc15 	stw	r2,-16(fp)

  r3 = (int)&hcinfo;
100211dc:	d0a01f04 	addi	r2,gp,-32644
100211e0:	e0bfef15 	stw	r2,-68(fp)
  r4 = (int)name;
100211e4:	e0bffc17 	ldw	r2,-16(fp)
100211e8:	e0bff015 	stw	r2,-64(fp)
  r5 = flags;
100211ec:	e0bffd17 	ldw	r2,-12(fp)
100211f0:	e0bff115 	stw	r2,-60(fp)
  r6 = mode;
100211f4:	e0bffe17 	ldw	r2,-8(fp)
100211f8:	e0bff215 	stw	r2,-56(fp)
100211fc:	e0bffc17 	ldw	r2,-16(fp)
10021200:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10021204:	e0bff917 	ldw	r2,-28(fp)
10021208:	10bfffc4 	addi	r2,r2,-1
1002120c:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
10021210:	e0bffa17 	ldw	r2,-24(fp)
10021214:	10800044 	addi	r2,r2,1
10021218:	e0bffa15 	stw	r2,-24(fp)
1002121c:	e0bffa17 	ldw	r2,-24(fp)
10021220:	10800003 	ldbu	r2,0(r2)
10021224:	10803fcc 	andi	r2,r2,255
10021228:	1080201c 	xori	r2,r2,128
1002122c:	10bfe004 	addi	r2,r2,-128
10021230:	103ff71e 	bne	r2,zero,10021210 <__alt_data_end+0xf8021210>
    ;

  return ptr - string;
10021234:	e0fffa17 	ldw	r3,-24(fp)
10021238:	e0bff917 	ldw	r2,-28(fp)
1002123c:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
10021240:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
10021244:	e13ff017 	ldw	r4,-64(fp)
10021248:	e13fff15 	stw	r4,-4(fp)
1002124c:	e17ff117 	ldw	r5,-60(fp)
10021250:	e1bff217 	ldw	r6,-56(fp)
10021254:	e1fff317 	ldw	r7,-52(fp)
10021258:	e0ffef17 	ldw	r3,-68(fp)
1002125c:	1821883a 	mov	r16,r3
10021260:	8007883a 	mov	r3,r16
10021264:	e13fff17 	ldw	r4,-4(fp)
10021268:	003da07a 	break	1
1002126c:	1821883a 	mov	r16,r3
10021270:	1023883a 	mov	r17,r2
10021274:	e47ff415 	stw	r17,-48(fp)
10021278:	e43fef15 	stw	r16,-68(fp)

  handle = (void *)r2;
1002127c:	e0bff417 	ldw	r2,-48(fp)
10021280:	e0bff515 	stw	r2,-44(fp)
  error = r3;
10021284:	e0bfef17 	ldw	r2,-68(fp)
10021288:	e0bff615 	stw	r2,-40(fp)

  if (error == 0)
1002128c:	e0bff617 	ldw	r2,-40(fp)
10021290:	1000031e 	bne	r2,zero,100212a0 <alt_hostfs_open+0x14c>
    fd->priv = handle;
10021294:	e0bffb17 	ldw	r2,-20(fp)
10021298:	e0fff517 	ldw	r3,-44(fp)
1002129c:	10c00115 	stw	r3,4(r2)

  return -error;
100212a0:	e0bff617 	ldw	r2,-40(fp)
100212a4:	0085c83a 	sub	r2,zero,r2
}
100212a8:	e037883a 	mov	sp,fp
100212ac:	df000217 	ldw	fp,8(sp)
100212b0:	dc400117 	ldw	r17,4(sp)
100212b4:	dc000017 	ldw	r16,0(sp)
100212b8:	dec00304 	addi	sp,sp,12
100212bc:	f800283a 	ret

100212c0 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
100212c0:	defffa04 	addi	sp,sp,-24
100212c4:	df000515 	stw	fp,20(sp)
100212c8:	dc000415 	stw	r16,16(sp)
100212cc:	df000404 	addi	fp,sp,16
100212d0:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
100212d4:	d0a01c04 	addi	r2,gp,-32656
100212d8:	e0bffc15 	stw	r2,-16(fp)
  r4 = (int)fd->priv;
100212dc:	e0bfff17 	ldw	r2,-4(fp)
100212e0:	10800117 	ldw	r2,4(r2)
100212e4:	e0bffd15 	stw	r2,-12(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
100212e8:	e0bffd17 	ldw	r2,-12(fp)
100212ec:	e0fffc17 	ldw	r3,-16(fp)
100212f0:	1821883a 	mov	r16,r3
100212f4:	8007883a 	mov	r3,r16
100212f8:	1009883a 	mov	r4,r2
100212fc:	003da07a 	break	1
10021300:	1821883a 	mov	r16,r3
10021304:	e43ffc15 	stw	r16,-16(fp)

  error = r3;
10021308:	e0bffc17 	ldw	r2,-16(fp)
1002130c:	e0bffe15 	stw	r2,-8(fp)

  return -error;
10021310:	e0bffe17 	ldw	r2,-8(fp)
10021314:	0085c83a 	sub	r2,zero,r2
}
10021318:	e037883a 	mov	sp,fp
1002131c:	df000117 	ldw	fp,4(sp)
10021320:	dc000017 	ldw	r16,0(sp)
10021324:	dec00204 	addi	sp,sp,8
10021328:	f800283a 	ret

1002132c <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
1002132c:	defff204 	addi	sp,sp,-56
10021330:	df000d15 	stw	fp,52(sp)
10021334:	dc400c15 	stw	r17,48(sp)
10021338:	dc000b15 	stw	r16,44(sp)
1002133c:	df000b04 	addi	fp,sp,44
10021340:	e13ffc15 	stw	r4,-16(fp)
10021344:	e17ffd15 	stw	r5,-12(fp)
10021348:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
1002134c:	d0a01904 	addi	r2,gp,-32668
10021350:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
10021354:	e0bffc17 	ldw	r2,-16(fp)
10021358:	10800117 	ldw	r2,4(r2)
1002135c:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
10021360:	e0bffd17 	ldw	r2,-12(fp)
10021364:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
10021368:	e0bffe17 	ldw	r2,-8(fp)
1002136c:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
10021370:	e13ff617 	ldw	r4,-40(fp)
10021374:	e13fff15 	stw	r4,-4(fp)
10021378:	e17ff717 	ldw	r5,-36(fp)
1002137c:	e1bff817 	ldw	r6,-32(fp)
10021380:	e0fff517 	ldw	r3,-44(fp)
10021384:	1821883a 	mov	r16,r3
10021388:	8007883a 	mov	r3,r16
1002138c:	e13fff17 	ldw	r4,-4(fp)
10021390:	003da07a 	break	1
10021394:	1821883a 	mov	r16,r3
10021398:	1023883a 	mov	r17,r2
1002139c:	e47ff915 	stw	r17,-28(fp)
100213a0:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
100213a4:	e0bff917 	ldw	r2,-28(fp)
100213a8:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
100213ac:	e0bff517 	ldw	r2,-44(fp)
100213b0:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
100213b4:	e0bffb17 	ldw	r2,-20(fp)
100213b8:	10000326 	beq	r2,zero,100213c8 <alt_hostfs_read+0x9c>
100213bc:	e0bffb17 	ldw	r2,-20(fp)
100213c0:	0085c83a 	sub	r2,zero,r2
100213c4:	00000106 	br	100213cc <alt_hostfs_read+0xa0>
100213c8:	e0bffa17 	ldw	r2,-24(fp)
}
100213cc:	e037883a 	mov	sp,fp
100213d0:	df000217 	ldw	fp,8(sp)
100213d4:	dc400117 	ldw	r17,4(sp)
100213d8:	dc000017 	ldw	r16,0(sp)
100213dc:	dec00304 	addi	sp,sp,12
100213e0:	f800283a 	ret

100213e4 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
100213e4:	defff204 	addi	sp,sp,-56
100213e8:	df000d15 	stw	fp,52(sp)
100213ec:	dc400c15 	stw	r17,48(sp)
100213f0:	dc000b15 	stw	r16,44(sp)
100213f4:	df000b04 	addi	fp,sp,44
100213f8:	e13ffc15 	stw	r4,-16(fp)
100213fc:	e17ffd15 	stw	r5,-12(fp)
10021400:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
10021404:	d0a01604 	addi	r2,gp,-32680
10021408:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
1002140c:	e0bffc17 	ldw	r2,-16(fp)
10021410:	10800117 	ldw	r2,4(r2)
10021414:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
10021418:	e0bffd17 	ldw	r2,-12(fp)
1002141c:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
10021420:	e0bffe17 	ldw	r2,-8(fp)
10021424:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
10021428:	e13ff617 	ldw	r4,-40(fp)
1002142c:	e13fff15 	stw	r4,-4(fp)
10021430:	e17ff717 	ldw	r5,-36(fp)
10021434:	e1bff817 	ldw	r6,-32(fp)
10021438:	e0fff517 	ldw	r3,-44(fp)
1002143c:	1821883a 	mov	r16,r3
10021440:	8007883a 	mov	r3,r16
10021444:	e13fff17 	ldw	r4,-4(fp)
10021448:	003da07a 	break	1
1002144c:	1821883a 	mov	r16,r3
10021450:	1023883a 	mov	r17,r2
10021454:	e47ff915 	stw	r17,-28(fp)
10021458:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
1002145c:	e0bff917 	ldw	r2,-28(fp)
10021460:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
10021464:	e0bff517 	ldw	r2,-44(fp)
10021468:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
1002146c:	e0bffb17 	ldw	r2,-20(fp)
10021470:	10000326 	beq	r2,zero,10021480 <alt_hostfs_write+0x9c>
10021474:	e0bffb17 	ldw	r2,-20(fp)
10021478:	0085c83a 	sub	r2,zero,r2
1002147c:	00000106 	br	10021484 <alt_hostfs_write+0xa0>
10021480:	e0bffa17 	ldw	r2,-24(fp)
}
10021484:	e037883a 	mov	sp,fp
10021488:	df000217 	ldw	fp,8(sp)
1002148c:	dc400117 	ldw	r17,4(sp)
10021490:	dc000017 	ldw	r16,0(sp)
10021494:	dec00304 	addi	sp,sp,12
10021498:	f800283a 	ret

1002149c <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
1002149c:	defff204 	addi	sp,sp,-56
100214a0:	df000d15 	stw	fp,52(sp)
100214a4:	dc400c15 	stw	r17,48(sp)
100214a8:	dc000b15 	stw	r16,44(sp)
100214ac:	df000b04 	addi	fp,sp,44
100214b0:	e13ffc15 	stw	r4,-16(fp)
100214b4:	e17ffd15 	stw	r5,-12(fp)
100214b8:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
100214bc:	d0a01304 	addi	r2,gp,-32692
100214c0:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
100214c4:	e0bffc17 	ldw	r2,-16(fp)
100214c8:	10800117 	ldw	r2,4(r2)
100214cc:	e0bff615 	stw	r2,-40(fp)
  r5 = ptr;
100214d0:	e0bffd17 	ldw	r2,-12(fp)
100214d4:	e0bff715 	stw	r2,-36(fp)
  r6 = dir;
100214d8:	e0bffe17 	ldw	r2,-8(fp)
100214dc:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
100214e0:	e13ff617 	ldw	r4,-40(fp)
100214e4:	e13fff15 	stw	r4,-4(fp)
100214e8:	e17ff717 	ldw	r5,-36(fp)
100214ec:	e1bff817 	ldw	r6,-32(fp)
100214f0:	e0fff517 	ldw	r3,-44(fp)
100214f4:	1821883a 	mov	r16,r3
100214f8:	8007883a 	mov	r3,r16
100214fc:	e13fff17 	ldw	r4,-4(fp)
10021500:	003da07a 	break	1
10021504:	1821883a 	mov	r16,r3
10021508:	1023883a 	mov	r17,r2
1002150c:	e47ff915 	stw	r17,-28(fp)
10021510:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
10021514:	e0bff917 	ldw	r2,-28(fp)
10021518:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
1002151c:	e0bff517 	ldw	r2,-44(fp)
10021520:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
10021524:	e0bffb17 	ldw	r2,-20(fp)
10021528:	10000326 	beq	r2,zero,10021538 <alt_hostfs_seek+0x9c>
1002152c:	e0bffb17 	ldw	r2,-20(fp)
10021530:	0085c83a 	sub	r2,zero,r2
10021534:	00000106 	br	1002153c <alt_hostfs_seek+0xa0>
10021538:	e0bffa17 	ldw	r2,-24(fp)
}
1002153c:	e037883a 	mov	sp,fp
10021540:	df000217 	ldw	fp,8(sp)
10021544:	dc400117 	ldw	r17,4(sp)
10021548:	dc000017 	ldw	r16,0(sp)
1002154c:	dec00304 	addi	sp,sp,12
10021550:	f800283a 	ret

10021554 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
10021554:	deffe204 	addi	sp,sp,-120
10021558:	df001d15 	stw	fp,116(sp)
1002155c:	dc401c15 	stw	r17,112(sp)
10021560:	dc001b15 	stw	r16,108(sp)
10021564:	df001b04 	addi	fp,sp,108
10021568:	e13ffd15 	stw	r4,-12(fp)
1002156c:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
10021570:	d0a01004 	addi	r2,gp,-32704
10021574:	e0bfe615 	stw	r2,-104(fp)
  r4 = (int)fd->priv;
10021578:	e0bffd17 	ldw	r2,-12(fp)
1002157c:	10800117 	ldw	r2,4(r2)
10021580:	e0bfe715 	stw	r2,-100(fp)
  r5 = (int)&hoststat;
10021584:	e0bfed04 	addi	r2,fp,-76
10021588:	e0bfe815 	stw	r2,-96(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
1002158c:	e13fe717 	ldw	r4,-100(fp)
10021590:	e13fff15 	stw	r4,-4(fp)
10021594:	e17fe817 	ldw	r5,-96(fp)
10021598:	e0ffe617 	ldw	r3,-104(fp)
1002159c:	1821883a 	mov	r16,r3
100215a0:	8007883a 	mov	r3,r16
100215a4:	e13fff17 	ldw	r4,-4(fp)
100215a8:	003da07a 	break	1
100215ac:	1821883a 	mov	r16,r3
100215b0:	1023883a 	mov	r17,r2
100215b4:	e47fe915 	stw	r17,-92(fp)
100215b8:	e43fe615 	stw	r16,-104(fp)

  rc = r2;
100215bc:	e0bfe917 	ldw	r2,-92(fp)
100215c0:	e0bfea15 	stw	r2,-88(fp)
  error = r3;
100215c4:	e0bfe617 	ldw	r2,-104(fp)
100215c8:	e0bfeb15 	stw	r2,-84(fp)

  if (error == 0)
100215cc:	e0bfeb17 	ldw	r2,-84(fp)
100215d0:	1000621e 	bne	r2,zero,1002175c <alt_hostfs_fstat+0x208>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
100215d4:	e0bfed04 	addi	r2,fp,-76
100215d8:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
100215dc:	e0bfe517 	ldw	r2,-108(fp)
100215e0:	10801004 	addi	r2,r2,64
100215e4:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
100215e8:	00001606 	br	10021644 <alt_hostfs_fstat+0xf0>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
100215ec:	e0bfe517 	ldw	r2,-108(fp)
100215f0:	10800017 	ldw	r2,0(r2)
100215f4:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
100215f8:	e0bfe517 	ldw	r2,-108(fp)
100215fc:	10800017 	ldw	r2,0(r2)
10021600:	10803fec 	andhi	r2,r2,255
10021604:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10021608:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
1002160c:	e0bfe517 	ldw	r2,-108(fp)
10021610:	10800017 	ldw	r2,0(r2)
10021614:	10bfc00c 	andi	r2,r2,65280
10021618:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
1002161c:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
10021620:	e0bfe517 	ldw	r2,-108(fp)
10021624:	10800017 	ldw	r2,0(r2)
10021628:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
1002162c:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10021630:	e0bfe517 	ldw	r2,-108(fp)
10021634:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
10021638:	e0bfe517 	ldw	r2,-108(fp)
1002163c:	10800104 	addi	r2,r2,4
10021640:	e0bfe515 	stw	r2,-108(fp)
10021644:	e0ffe517 	ldw	r3,-108(fp)
10021648:	e0bfec17 	ldw	r2,-80(fp)
1002164c:	18bfe736 	bltu	r3,r2,100215ec <__alt_data_end+0xf80215ec>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
10021650:	e0bffe17 	ldw	r2,-8(fp)
10021654:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
10021658:	e0bfe517 	ldw	r2,-108(fp)
1002165c:	10800f04 	addi	r2,r2,60
10021660:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
10021664:	00000506 	br	1002167c <alt_hostfs_fstat+0x128>
      *ptr = 0;
10021668:	e0bfe517 	ldw	r2,-108(fp)
1002166c:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
10021670:	e0bfe517 	ldw	r2,-108(fp)
10021674:	10800104 	addi	r2,r2,4
10021678:	e0bfe515 	stw	r2,-108(fp)
1002167c:	e0ffe517 	ldw	r3,-108(fp)
10021680:	e0bfec17 	ldw	r2,-80(fp)
10021684:	18bff836 	bltu	r3,r2,10021668 <__alt_data_end+0xf8021668>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
10021688:	e0bfed17 	ldw	r2,-76(fp)
1002168c:	1007883a 	mov	r3,r2
10021690:	e0bffe17 	ldw	r2,-8(fp)
10021694:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
10021698:	e0bfee17 	ldw	r2,-72(fp)
1002169c:	1007883a 	mov	r3,r2
100216a0:	e0bffe17 	ldw	r2,-8(fp)
100216a4:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
100216a8:	e0ffef17 	ldw	r3,-68(fp)
100216ac:	e0bffe17 	ldw	r2,-8(fp)
100216b0:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
100216b4:	e0bff017 	ldw	r2,-64(fp)
100216b8:	1007883a 	mov	r3,r2
100216bc:	e0bffe17 	ldw	r2,-8(fp)
100216c0:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
100216c4:	e0bff117 	ldw	r2,-60(fp)
100216c8:	1007883a 	mov	r3,r2
100216cc:	e0bffe17 	ldw	r2,-8(fp)
100216d0:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
100216d4:	e0bff217 	ldw	r2,-56(fp)
100216d8:	1007883a 	mov	r3,r2
100216dc:	e0bffe17 	ldw	r2,-8(fp)
100216e0:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
100216e4:	e0bff317 	ldw	r2,-52(fp)
100216e8:	1007883a 	mov	r3,r2
100216ec:	e0bffe17 	ldw	r2,-8(fp)
100216f0:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
100216f4:	e0bff517 	ldw	r2,-44(fp)
100216f8:	1007883a 	mov	r3,r2
100216fc:	e0bffe17 	ldw	r2,-8(fp)
10021700:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
10021704:	e0bffa17 	ldw	r2,-24(fp)
10021708:	1007883a 	mov	r3,r2
1002170c:	e0bffe17 	ldw	r2,-8(fp)
10021710:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
10021714:	e0bffb17 	ldw	r2,-20(fp)
10021718:	1007883a 	mov	r3,r2
1002171c:	e0bffe17 	ldw	r2,-8(fp)
10021720:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
10021724:	e0bffc17 	ldw	r2,-16(fp)
10021728:	1007883a 	mov	r3,r2
1002172c:	e0bffe17 	ldw	r2,-8(fp)
10021730:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
10021734:	e0bff717 	ldw	r2,-36(fp)
10021738:	1007883a 	mov	r3,r2
1002173c:	e0bffe17 	ldw	r2,-8(fp)
10021740:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
10021744:	e0bff917 	ldw	r2,-28(fp)
10021748:	1007883a 	mov	r3,r2
1002174c:	e0bffe17 	ldw	r2,-8(fp)
10021750:	10c00c15 	stw	r3,48(r2)

    return rc;
10021754:	e0bfea17 	ldw	r2,-88(fp)
10021758:	00000206 	br	10021764 <alt_hostfs_fstat+0x210>
  }
  else
    return -error;
1002175c:	e0bfeb17 	ldw	r2,-84(fp)
10021760:	0085c83a 	sub	r2,zero,r2
}
10021764:	e037883a 	mov	sp,fp
10021768:	df000217 	ldw	fp,8(sp)
1002176c:	dc400117 	ldw	r17,4(sp)
10021770:	dc000017 	ldw	r16,0(sp)
10021774:	dec00304 	addi	sp,sp,12
10021778:	f800283a 	ret

1002177c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1002177c:	defff504 	addi	sp,sp,-44
10021780:	df000a15 	stw	fp,40(sp)
10021784:	df000a04 	addi	fp,sp,40
10021788:	e13ffc15 	stw	r4,-16(fp)
1002178c:	e17ffd15 	stw	r5,-12(fp)
10021790:	e1bffe15 	stw	r6,-8(fp)
10021794:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10021798:	e03ff615 	stw	zero,-40(fp)
1002179c:	008400b4 	movhi	r2,4098
100217a0:	109ed104 	addi	r2,r2,31556
100217a4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
100217a8:	10003f26 	beq	r2,zero,100218a8 <alt_alarm_start+0x12c>
  {
    if (alarm)
100217ac:	e0bffc17 	ldw	r2,-16(fp)
100217b0:	10003b26 	beq	r2,zero,100218a0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
100217b4:	e0bffc17 	ldw	r2,-16(fp)
100217b8:	e0fffe17 	ldw	r3,-8(fp)
100217bc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
100217c0:	e0bffc17 	ldw	r2,-16(fp)
100217c4:	e0ffff17 	ldw	r3,-4(fp)
100217c8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100217cc:	0005303a 	rdctl	r2,status
100217d0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100217d4:	e0fff817 	ldw	r3,-32(fp)
100217d8:	00bfff84 	movi	r2,-2
100217dc:	1884703a 	and	r2,r3,r2
100217e0:	1001703a 	wrctl	status,r2
  
  return context;
100217e4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
100217e8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100217ec:	008400b4 	movhi	r2,4098
100217f0:	109ed204 	addi	r2,r2,31560
100217f4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
100217f8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100217fc:	e0fffd17 	ldw	r3,-12(fp)
10021800:	e0bff617 	ldw	r2,-40(fp)
10021804:	1885883a 	add	r2,r3,r2
10021808:	10c00044 	addi	r3,r2,1
1002180c:	e0bffc17 	ldw	r2,-16(fp)
10021810:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10021814:	e0bffc17 	ldw	r2,-16(fp)
10021818:	10c00217 	ldw	r3,8(r2)
1002181c:	e0bff617 	ldw	r2,-40(fp)
10021820:	1880042e 	bgeu	r3,r2,10021834 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10021824:	e0bffc17 	ldw	r2,-16(fp)
10021828:	00c00044 	movi	r3,1
1002182c:	10c00405 	stb	r3,16(r2)
10021830:	00000206 	br	1002183c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10021834:	e0bffc17 	ldw	r2,-16(fp)
10021838:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1002183c:	e0bffc17 	ldw	r2,-16(fp)
10021840:	00c400b4 	movhi	r3,4098
10021844:	18d70e04 	addi	r3,r3,23608
10021848:	e0fff915 	stw	r3,-28(fp)
1002184c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10021850:	e0bffa17 	ldw	r2,-24(fp)
10021854:	e0fff917 	ldw	r3,-28(fp)
10021858:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1002185c:	e0bff917 	ldw	r2,-28(fp)
10021860:	10c00017 	ldw	r3,0(r2)
10021864:	e0bffa17 	ldw	r2,-24(fp)
10021868:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1002186c:	e0bff917 	ldw	r2,-28(fp)
10021870:	10800017 	ldw	r2,0(r2)
10021874:	e0fffa17 	ldw	r3,-24(fp)
10021878:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1002187c:	e0bff917 	ldw	r2,-28(fp)
10021880:	e0fffa17 	ldw	r3,-24(fp)
10021884:	10c00015 	stw	r3,0(r2)
10021888:	e0bff717 	ldw	r2,-36(fp)
1002188c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10021890:	e0bffb17 	ldw	r2,-20(fp)
10021894:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10021898:	0005883a 	mov	r2,zero
1002189c:	00000306 	br	100218ac <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
100218a0:	00bffa84 	movi	r2,-22
100218a4:	00000106 	br	100218ac <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
100218a8:	00bfde84 	movi	r2,-134
  }
}
100218ac:	e037883a 	mov	sp,fp
100218b0:	df000017 	ldw	fp,0(sp)
100218b4:	dec00104 	addi	sp,sp,4
100218b8:	f800283a 	ret

100218bc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100218bc:	deffff04 	addi	sp,sp,-4
100218c0:	df000015 	stw	fp,0(sp)
100218c4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100218c8:	e037883a 	mov	sp,fp
100218cc:	df000017 	ldw	fp,0(sp)
100218d0:	dec00104 	addi	sp,sp,4
100218d4:	f800283a 	ret

100218d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100218d8:	defffe04 	addi	sp,sp,-8
100218dc:	dfc00115 	stw	ra,4(sp)
100218e0:	df000015 	stw	fp,0(sp)
100218e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100218e8:	008400b4 	movhi	r2,4098
100218ec:	1096f904 	addi	r2,r2,23524
100218f0:	10800017 	ldw	r2,0(r2)
100218f4:	10000526 	beq	r2,zero,1002190c <alt_get_errno+0x34>
100218f8:	008400b4 	movhi	r2,4098
100218fc:	1096f904 	addi	r2,r2,23524
10021900:	10800017 	ldw	r2,0(r2)
10021904:	103ee83a 	callr	r2
10021908:	00000206 	br	10021914 <alt_get_errno+0x3c>
1002190c:	008400b4 	movhi	r2,4098
10021910:	109ec604 	addi	r2,r2,31512
}
10021914:	e037883a 	mov	sp,fp
10021918:	dfc00117 	ldw	ra,4(sp)
1002191c:	df000017 	ldw	fp,0(sp)
10021920:	dec00204 	addi	sp,sp,8
10021924:	f800283a 	ret

10021928 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10021928:	defffa04 	addi	sp,sp,-24
1002192c:	dfc00515 	stw	ra,20(sp)
10021930:	df000415 	stw	fp,16(sp)
10021934:	df000404 	addi	fp,sp,16
10021938:	e13ffe15 	stw	r4,-8(fp)
1002193c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10021940:	e0bffe17 	ldw	r2,-8(fp)
10021944:	10000326 	beq	r2,zero,10021954 <alt_dev_llist_insert+0x2c>
10021948:	e0bffe17 	ldw	r2,-8(fp)
1002194c:	10800217 	ldw	r2,8(r2)
10021950:	1000051e 	bne	r2,zero,10021968 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
10021954:	00218d80 	call	100218d8 <alt_get_errno>
10021958:	00c00584 	movi	r3,22
1002195c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
10021960:	00bffa84 	movi	r2,-22
10021964:	00001306 	br	100219b4 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10021968:	e0bffe17 	ldw	r2,-8(fp)
1002196c:	e0ffff17 	ldw	r3,-4(fp)
10021970:	e0fffc15 	stw	r3,-16(fp)
10021974:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10021978:	e0bffd17 	ldw	r2,-12(fp)
1002197c:	e0fffc17 	ldw	r3,-16(fp)
10021980:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10021984:	e0bffc17 	ldw	r2,-16(fp)
10021988:	10c00017 	ldw	r3,0(r2)
1002198c:	e0bffd17 	ldw	r2,-12(fp)
10021990:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10021994:	e0bffc17 	ldw	r2,-16(fp)
10021998:	10800017 	ldw	r2,0(r2)
1002199c:	e0fffd17 	ldw	r3,-12(fp)
100219a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100219a4:	e0bffc17 	ldw	r2,-16(fp)
100219a8:	e0fffd17 	ldw	r3,-12(fp)
100219ac:	10c00015 	stw	r3,0(r2)

  return 0;  
100219b0:	0005883a 	mov	r2,zero
}
100219b4:	e037883a 	mov	sp,fp
100219b8:	dfc00117 	ldw	ra,4(sp)
100219bc:	df000017 	ldw	fp,0(sp)
100219c0:	dec00204 	addi	sp,sp,8
100219c4:	f800283a 	ret

100219c8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100219c8:	defffd04 	addi	sp,sp,-12
100219cc:	dfc00215 	stw	ra,8(sp)
100219d0:	df000115 	stw	fp,4(sp)
100219d4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100219d8:	008400b4 	movhi	r2,4098
100219dc:	1089d104 	addi	r2,r2,10052
100219e0:	e0bfff15 	stw	r2,-4(fp)
100219e4:	00000606 	br	10021a00 <_do_ctors+0x38>
        (*ctor) (); 
100219e8:	e0bfff17 	ldw	r2,-4(fp)
100219ec:	10800017 	ldw	r2,0(r2)
100219f0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100219f4:	e0bfff17 	ldw	r2,-4(fp)
100219f8:	10bfff04 	addi	r2,r2,-4
100219fc:	e0bfff15 	stw	r2,-4(fp)
10021a00:	e0ffff17 	ldw	r3,-4(fp)
10021a04:	008400b4 	movhi	r2,4098
10021a08:	1089d204 	addi	r2,r2,10056
10021a0c:	18bff62e 	bgeu	r3,r2,100219e8 <__alt_data_end+0xf80219e8>
        (*ctor) (); 
}
10021a10:	e037883a 	mov	sp,fp
10021a14:	dfc00117 	ldw	ra,4(sp)
10021a18:	df000017 	ldw	fp,0(sp)
10021a1c:	dec00204 	addi	sp,sp,8
10021a20:	f800283a 	ret

10021a24 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10021a24:	defffd04 	addi	sp,sp,-12
10021a28:	dfc00215 	stw	ra,8(sp)
10021a2c:	df000115 	stw	fp,4(sp)
10021a30:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10021a34:	008400b4 	movhi	r2,4098
10021a38:	1089d104 	addi	r2,r2,10052
10021a3c:	e0bfff15 	stw	r2,-4(fp)
10021a40:	00000606 	br	10021a5c <_do_dtors+0x38>
        (*dtor) (); 
10021a44:	e0bfff17 	ldw	r2,-4(fp)
10021a48:	10800017 	ldw	r2,0(r2)
10021a4c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10021a50:	e0bfff17 	ldw	r2,-4(fp)
10021a54:	10bfff04 	addi	r2,r2,-4
10021a58:	e0bfff15 	stw	r2,-4(fp)
10021a5c:	e0ffff17 	ldw	r3,-4(fp)
10021a60:	008400b4 	movhi	r2,4098
10021a64:	1089d204 	addi	r2,r2,10056
10021a68:	18bff62e 	bgeu	r3,r2,10021a44 <__alt_data_end+0xf8021a44>
        (*dtor) (); 
}
10021a6c:	e037883a 	mov	sp,fp
10021a70:	dfc00117 	ldw	ra,4(sp)
10021a74:	df000017 	ldw	fp,0(sp)
10021a78:	dec00204 	addi	sp,sp,8
10021a7c:	f800283a 	ret

10021a80 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10021a80:	defffa04 	addi	sp,sp,-24
10021a84:	dfc00515 	stw	ra,20(sp)
10021a88:	df000415 	stw	fp,16(sp)
10021a8c:	df000404 	addi	fp,sp,16
10021a90:	e13ffe15 	stw	r4,-8(fp)
10021a94:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10021a98:	e0bfff17 	ldw	r2,-4(fp)
10021a9c:	10800017 	ldw	r2,0(r2)
10021aa0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10021aa4:	e13ffe17 	ldw	r4,-8(fp)
10021aa8:	001841c0 	call	1001841c <strlen>
10021aac:	10800044 	addi	r2,r2,1
10021ab0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10021ab4:	00000d06 	br	10021aec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10021ab8:	e0bffc17 	ldw	r2,-16(fp)
10021abc:	10c00217 	ldw	r3,8(r2)
10021ac0:	e0bffd17 	ldw	r2,-12(fp)
10021ac4:	1809883a 	mov	r4,r3
10021ac8:	e17ffe17 	ldw	r5,-8(fp)
10021acc:	100d883a 	mov	r6,r2
10021ad0:	00223c00 	call	100223c0 <memcmp>
10021ad4:	1000021e 	bne	r2,zero,10021ae0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10021ad8:	e0bffc17 	ldw	r2,-16(fp)
10021adc:	00000706 	br	10021afc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10021ae0:	e0bffc17 	ldw	r2,-16(fp)
10021ae4:	10800017 	ldw	r2,0(r2)
10021ae8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10021aec:	e0fffc17 	ldw	r3,-16(fp)
10021af0:	e0bfff17 	ldw	r2,-4(fp)
10021af4:	18bff01e 	bne	r3,r2,10021ab8 <__alt_data_end+0xf8021ab8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10021af8:	0005883a 	mov	r2,zero
}
10021afc:	e037883a 	mov	sp,fp
10021b00:	dfc00117 	ldw	ra,4(sp)
10021b04:	df000017 	ldw	fp,0(sp)
10021b08:	dec00204 	addi	sp,sp,8
10021b0c:	f800283a 	ret

10021b10 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10021b10:	defffb04 	addi	sp,sp,-20
10021b14:	dfc00415 	stw	ra,16(sp)
10021b18:	df000315 	stw	fp,12(sp)
10021b1c:	df000304 	addi	fp,sp,12
10021b20:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10021b24:	008400b4 	movhi	r2,4098
10021b28:	1096f404 	addi	r2,r2,23504
10021b2c:	10800017 	ldw	r2,0(r2)
10021b30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10021b34:	00003106 	br	10021bfc <alt_find_file+0xec>
  {
    len = strlen(next->name);
10021b38:	e0bffd17 	ldw	r2,-12(fp)
10021b3c:	10800217 	ldw	r2,8(r2)
10021b40:	1009883a 	mov	r4,r2
10021b44:	001841c0 	call	1001841c <strlen>
10021b48:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10021b4c:	e0bffd17 	ldw	r2,-12(fp)
10021b50:	10c00217 	ldw	r3,8(r2)
10021b54:	e0bffe17 	ldw	r2,-8(fp)
10021b58:	10bfffc4 	addi	r2,r2,-1
10021b5c:	1885883a 	add	r2,r3,r2
10021b60:	10800003 	ldbu	r2,0(r2)
10021b64:	10803fcc 	andi	r2,r2,255
10021b68:	1080201c 	xori	r2,r2,128
10021b6c:	10bfe004 	addi	r2,r2,-128
10021b70:	10800bd8 	cmpnei	r2,r2,47
10021b74:	1000031e 	bne	r2,zero,10021b84 <alt_find_file+0x74>
    {
      len -= 1;
10021b78:	e0bffe17 	ldw	r2,-8(fp)
10021b7c:	10bfffc4 	addi	r2,r2,-1
10021b80:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10021b84:	e0bffe17 	ldw	r2,-8(fp)
10021b88:	e0ffff17 	ldw	r3,-4(fp)
10021b8c:	1885883a 	add	r2,r3,r2
10021b90:	10800003 	ldbu	r2,0(r2)
10021b94:	10803fcc 	andi	r2,r2,255
10021b98:	1080201c 	xori	r2,r2,128
10021b9c:	10bfe004 	addi	r2,r2,-128
10021ba0:	10800be0 	cmpeqi	r2,r2,47
10021ba4:	1000081e 	bne	r2,zero,10021bc8 <alt_find_file+0xb8>
10021ba8:	e0bffe17 	ldw	r2,-8(fp)
10021bac:	e0ffff17 	ldw	r3,-4(fp)
10021bb0:	1885883a 	add	r2,r3,r2
10021bb4:	10800003 	ldbu	r2,0(r2)
10021bb8:	10803fcc 	andi	r2,r2,255
10021bbc:	1080201c 	xori	r2,r2,128
10021bc0:	10bfe004 	addi	r2,r2,-128
10021bc4:	10000a1e 	bne	r2,zero,10021bf0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10021bc8:	e0bffd17 	ldw	r2,-12(fp)
10021bcc:	10c00217 	ldw	r3,8(r2)
10021bd0:	e0bffe17 	ldw	r2,-8(fp)
10021bd4:	1809883a 	mov	r4,r3
10021bd8:	e17fff17 	ldw	r5,-4(fp)
10021bdc:	100d883a 	mov	r6,r2
10021be0:	00223c00 	call	100223c0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10021be4:	1000021e 	bne	r2,zero,10021bf0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10021be8:	e0bffd17 	ldw	r2,-12(fp)
10021bec:	00000806 	br	10021c10 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10021bf0:	e0bffd17 	ldw	r2,-12(fp)
10021bf4:	10800017 	ldw	r2,0(r2)
10021bf8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10021bfc:	e0fffd17 	ldw	r3,-12(fp)
10021c00:	008400b4 	movhi	r2,4098
10021c04:	1096f404 	addi	r2,r2,23504
10021c08:	18bfcb1e 	bne	r3,r2,10021b38 <__alt_data_end+0xf8021b38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10021c0c:	0005883a 	mov	r2,zero
}
10021c10:	e037883a 	mov	sp,fp
10021c14:	dfc00117 	ldw	ra,4(sp)
10021c18:	df000017 	ldw	fp,0(sp)
10021c1c:	dec00204 	addi	sp,sp,8
10021c20:	f800283a 	ret

10021c24 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
10021c24:	defffc04 	addi	sp,sp,-16
10021c28:	df000315 	stw	fp,12(sp)
10021c2c:	df000304 	addi	fp,sp,12
10021c30:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
10021c34:	e0bfff17 	ldw	r2,-4(fp)
10021c38:	10800217 	ldw	r2,8(r2)
10021c3c:	1000021e 	bne	r2,zero,10021c48 <alt_fs_reg+0x24>
  {
    return -ENODEV;
10021c40:	00bffb44 	movi	r2,-19
10021c44:	00001406 	br	10021c98 <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
10021c48:	e0bfff17 	ldw	r2,-4(fp)
10021c4c:	00c400b4 	movhi	r3,4098
10021c50:	18d6f404 	addi	r3,r3,23504
10021c54:	e0fffd15 	stw	r3,-12(fp)
10021c58:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10021c5c:	e0bffe17 	ldw	r2,-8(fp)
10021c60:	e0fffd17 	ldw	r3,-12(fp)
10021c64:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10021c68:	e0bffd17 	ldw	r2,-12(fp)
10021c6c:	10c00017 	ldw	r3,0(r2)
10021c70:	e0bffe17 	ldw	r2,-8(fp)
10021c74:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10021c78:	e0bffd17 	ldw	r2,-12(fp)
10021c7c:	10800017 	ldw	r2,0(r2)
10021c80:	e0fffe17 	ldw	r3,-8(fp)
10021c84:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10021c88:	e0bffd17 	ldw	r2,-12(fp)
10021c8c:	e0fffe17 	ldw	r3,-8(fp)
10021c90:	10c00015 	stw	r3,0(r2)

  return 0;
10021c94:	0005883a 	mov	r2,zero
} 
10021c98:	e037883a 	mov	sp,fp
10021c9c:	df000017 	ldw	fp,0(sp)
10021ca0:	dec00104 	addi	sp,sp,4
10021ca4:	f800283a 	ret

10021ca8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10021ca8:	defffa04 	addi	sp,sp,-24
10021cac:	dfc00515 	stw	ra,20(sp)
10021cb0:	df000415 	stw	fp,16(sp)
10021cb4:	dc000315 	stw	r16,12(sp)
10021cb8:	df000304 	addi	fp,sp,12
10021cbc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
10021cc0:	00bffa04 	movi	r2,-24
10021cc4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10021cc8:	e03ffd15 	stw	zero,-12(fp)
10021ccc:	00002106 	br	10021d54 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10021cd0:	040400b4 	movhi	r16,4098
10021cd4:	84126904 	addi	r16,r16,18852
10021cd8:	e0bffd17 	ldw	r2,-12(fp)
10021cdc:	1009883a 	mov	r4,r2
10021ce0:	01400304 	movi	r5,12
10021ce4:	00146fc0 	call	100146fc <__mulsi3>
10021ce8:	8085883a 	add	r2,r16,r2
10021cec:	10800017 	ldw	r2,0(r2)
10021cf0:	1000151e 	bne	r2,zero,10021d48 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10021cf4:	040400b4 	movhi	r16,4098
10021cf8:	84126904 	addi	r16,r16,18852
10021cfc:	e0bffd17 	ldw	r2,-12(fp)
10021d00:	1009883a 	mov	r4,r2
10021d04:	01400304 	movi	r5,12
10021d08:	00146fc0 	call	100146fc <__mulsi3>
10021d0c:	8085883a 	add	r2,r16,r2
10021d10:	e0ffff17 	ldw	r3,-4(fp)
10021d14:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10021d18:	008400b4 	movhi	r2,4098
10021d1c:	1096f804 	addi	r2,r2,23520
10021d20:	10c00017 	ldw	r3,0(r2)
10021d24:	e0bffd17 	ldw	r2,-12(fp)
10021d28:	1880040e 	bge	r3,r2,10021d3c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10021d2c:	008400b4 	movhi	r2,4098
10021d30:	1096f804 	addi	r2,r2,23520
10021d34:	e0fffd17 	ldw	r3,-12(fp)
10021d38:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10021d3c:	e0bffd17 	ldw	r2,-12(fp)
10021d40:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10021d44:	00000606 	br	10021d60 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10021d48:	e0bffd17 	ldw	r2,-12(fp)
10021d4c:	10800044 	addi	r2,r2,1
10021d50:	e0bffd15 	stw	r2,-12(fp)
10021d54:	e0bffd17 	ldw	r2,-12(fp)
10021d58:	10800810 	cmplti	r2,r2,32
10021d5c:	103fdc1e 	bne	r2,zero,10021cd0 <__alt_data_end+0xf8021cd0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10021d60:	e0bffe17 	ldw	r2,-8(fp)
}
10021d64:	e037883a 	mov	sp,fp
10021d68:	dfc00217 	ldw	ra,8(sp)
10021d6c:	df000117 	ldw	fp,4(sp)
10021d70:	dc000017 	ldw	r16,0(sp)
10021d74:	dec00304 	addi	sp,sp,12
10021d78:	f800283a 	ret

10021d7c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10021d7c:	deffff04 	addi	sp,sp,-4
10021d80:	df000015 	stw	fp,0(sp)
10021d84:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10021d88:	e037883a 	mov	sp,fp
10021d8c:	df000017 	ldw	fp,0(sp)
10021d90:	dec00104 	addi	sp,sp,4
10021d94:	f800283a 	ret

10021d98 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10021d98:	defff904 	addi	sp,sp,-28
10021d9c:	dfc00615 	stw	ra,24(sp)
10021da0:	df000515 	stw	fp,20(sp)
10021da4:	df000504 	addi	fp,sp,20
10021da8:	e13ffc15 	stw	r4,-16(fp)
10021dac:	e17ffd15 	stw	r5,-12(fp)
10021db0:	e1bffe15 	stw	r6,-8(fp)
10021db4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10021db8:	e0800217 	ldw	r2,8(fp)
10021dbc:	d8800015 	stw	r2,0(sp)
10021dc0:	e13ffc17 	ldw	r4,-16(fp)
10021dc4:	e17ffd17 	ldw	r5,-12(fp)
10021dc8:	e1bffe17 	ldw	r6,-8(fp)
10021dcc:	e1ffff17 	ldw	r7,-4(fp)
10021dd0:	0021f700 	call	10021f70 <alt_iic_isr_register>
}  
10021dd4:	e037883a 	mov	sp,fp
10021dd8:	dfc00117 	ldw	ra,4(sp)
10021ddc:	df000017 	ldw	fp,0(sp)
10021de0:	dec00204 	addi	sp,sp,8
10021de4:	f800283a 	ret

10021de8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10021de8:	defff904 	addi	sp,sp,-28
10021dec:	df000615 	stw	fp,24(sp)
10021df0:	df000604 	addi	fp,sp,24
10021df4:	e13ffe15 	stw	r4,-8(fp)
10021df8:	e17fff15 	stw	r5,-4(fp)
10021dfc:	e0bfff17 	ldw	r2,-4(fp)
10021e00:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10021e04:	0005303a 	rdctl	r2,status
10021e08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10021e0c:	e0fffb17 	ldw	r3,-20(fp)
10021e10:	00bfff84 	movi	r2,-2
10021e14:	1884703a 	and	r2,r3,r2
10021e18:	1001703a 	wrctl	status,r2
  
  return context;
10021e1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10021e20:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10021e24:	e0bffa17 	ldw	r2,-24(fp)
10021e28:	00c00044 	movi	r3,1
10021e2c:	1884983a 	sll	r2,r3,r2
10021e30:	1007883a 	mov	r3,r2
10021e34:	008400b4 	movhi	r2,4098
10021e38:	109ed004 	addi	r2,r2,31552
10021e3c:	10800017 	ldw	r2,0(r2)
10021e40:	1886b03a 	or	r3,r3,r2
10021e44:	008400b4 	movhi	r2,4098
10021e48:	109ed004 	addi	r2,r2,31552
10021e4c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10021e50:	008400b4 	movhi	r2,4098
10021e54:	109ed004 	addi	r2,r2,31552
10021e58:	10800017 	ldw	r2,0(r2)
10021e5c:	100170fa 	wrctl	ienable,r2
10021e60:	e0bffc17 	ldw	r2,-16(fp)
10021e64:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10021e68:	e0bffd17 	ldw	r2,-12(fp)
10021e6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10021e70:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
10021e74:	e037883a 	mov	sp,fp
10021e78:	df000017 	ldw	fp,0(sp)
10021e7c:	dec00104 	addi	sp,sp,4
10021e80:	f800283a 	ret

10021e84 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10021e84:	defff904 	addi	sp,sp,-28
10021e88:	df000615 	stw	fp,24(sp)
10021e8c:	df000604 	addi	fp,sp,24
10021e90:	e13ffe15 	stw	r4,-8(fp)
10021e94:	e17fff15 	stw	r5,-4(fp)
10021e98:	e0bfff17 	ldw	r2,-4(fp)
10021e9c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10021ea0:	0005303a 	rdctl	r2,status
10021ea4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10021ea8:	e0fffb17 	ldw	r3,-20(fp)
10021eac:	00bfff84 	movi	r2,-2
10021eb0:	1884703a 	and	r2,r3,r2
10021eb4:	1001703a 	wrctl	status,r2
  
  return context;
10021eb8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10021ebc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10021ec0:	e0bffa17 	ldw	r2,-24(fp)
10021ec4:	00c00044 	movi	r3,1
10021ec8:	1884983a 	sll	r2,r3,r2
10021ecc:	0084303a 	nor	r2,zero,r2
10021ed0:	1007883a 	mov	r3,r2
10021ed4:	008400b4 	movhi	r2,4098
10021ed8:	109ed004 	addi	r2,r2,31552
10021edc:	10800017 	ldw	r2,0(r2)
10021ee0:	1886703a 	and	r3,r3,r2
10021ee4:	008400b4 	movhi	r2,4098
10021ee8:	109ed004 	addi	r2,r2,31552
10021eec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10021ef0:	008400b4 	movhi	r2,4098
10021ef4:	109ed004 	addi	r2,r2,31552
10021ef8:	10800017 	ldw	r2,0(r2)
10021efc:	100170fa 	wrctl	ienable,r2
10021f00:	e0bffc17 	ldw	r2,-16(fp)
10021f04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10021f08:	e0bffd17 	ldw	r2,-12(fp)
10021f0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10021f10:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
10021f14:	e037883a 	mov	sp,fp
10021f18:	df000017 	ldw	fp,0(sp)
10021f1c:	dec00104 	addi	sp,sp,4
10021f20:	f800283a 	ret

10021f24 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10021f24:	defffc04 	addi	sp,sp,-16
10021f28:	df000315 	stw	fp,12(sp)
10021f2c:	df000304 	addi	fp,sp,12
10021f30:	e13ffe15 	stw	r4,-8(fp)
10021f34:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10021f38:	000530fa 	rdctl	r2,ienable
10021f3c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10021f40:	e0bfff17 	ldw	r2,-4(fp)
10021f44:	00c00044 	movi	r3,1
10021f48:	1884983a 	sll	r2,r3,r2
10021f4c:	1007883a 	mov	r3,r2
10021f50:	e0bffd17 	ldw	r2,-12(fp)
10021f54:	1884703a 	and	r2,r3,r2
10021f58:	1004c03a 	cmpne	r2,r2,zero
10021f5c:	10803fcc 	andi	r2,r2,255
}
10021f60:	e037883a 	mov	sp,fp
10021f64:	df000017 	ldw	fp,0(sp)
10021f68:	dec00104 	addi	sp,sp,4
10021f6c:	f800283a 	ret

10021f70 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10021f70:	defff504 	addi	sp,sp,-44
10021f74:	dfc00a15 	stw	ra,40(sp)
10021f78:	df000915 	stw	fp,36(sp)
10021f7c:	df000904 	addi	fp,sp,36
10021f80:	e13ffc15 	stw	r4,-16(fp)
10021f84:	e17ffd15 	stw	r5,-12(fp)
10021f88:	e1bffe15 	stw	r6,-8(fp)
10021f8c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10021f90:	00bffa84 	movi	r2,-22
10021f94:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10021f98:	e0bffd17 	ldw	r2,-12(fp)
10021f9c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10021fa0:	e0bff817 	ldw	r2,-32(fp)
10021fa4:	10800808 	cmpgei	r2,r2,32
10021fa8:	1000271e 	bne	r2,zero,10022048 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10021fac:	0005303a 	rdctl	r2,status
10021fb0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10021fb4:	e0fffa17 	ldw	r3,-24(fp)
10021fb8:	00bfff84 	movi	r2,-2
10021fbc:	1884703a 	and	r2,r3,r2
10021fc0:	1001703a 	wrctl	status,r2
  
  return context;
10021fc4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10021fc8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10021fcc:	00c400b4 	movhi	r3,4098
10021fd0:	18dedd04 	addi	r3,r3,31604
10021fd4:	e0bff817 	ldw	r2,-32(fp)
10021fd8:	100490fa 	slli	r2,r2,3
10021fdc:	1885883a 	add	r2,r3,r2
10021fe0:	e0fffe17 	ldw	r3,-8(fp)
10021fe4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10021fe8:	00c400b4 	movhi	r3,4098
10021fec:	18dedd04 	addi	r3,r3,31604
10021ff0:	e0bff817 	ldw	r2,-32(fp)
10021ff4:	100490fa 	slli	r2,r2,3
10021ff8:	1885883a 	add	r2,r3,r2
10021ffc:	10800104 	addi	r2,r2,4
10022000:	e0ffff17 	ldw	r3,-4(fp)
10022004:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10022008:	e0bffe17 	ldw	r2,-8(fp)
1002200c:	10000526 	beq	r2,zero,10022024 <alt_iic_isr_register+0xb4>
10022010:	e0bff817 	ldw	r2,-32(fp)
10022014:	e13ffc17 	ldw	r4,-16(fp)
10022018:	100b883a 	mov	r5,r2
1002201c:	0021de80 	call	10021de8 <alt_ic_irq_enable>
10022020:	00000406 	br	10022034 <alt_iic_isr_register+0xc4>
10022024:	e0bff817 	ldw	r2,-32(fp)
10022028:	e13ffc17 	ldw	r4,-16(fp)
1002202c:	100b883a 	mov	r5,r2
10022030:	0021e840 	call	10021e84 <alt_ic_irq_disable>
10022034:	e0bff715 	stw	r2,-36(fp)
10022038:	e0bff917 	ldw	r2,-28(fp)
1002203c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10022040:	e0bffb17 	ldw	r2,-20(fp)
10022044:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10022048:	e0bff717 	ldw	r2,-36(fp)
}
1002204c:	e037883a 	mov	sp,fp
10022050:	dfc00117 	ldw	ra,4(sp)
10022054:	df000017 	ldw	fp,0(sp)
10022058:	dec00204 	addi	sp,sp,8
1002205c:	f800283a 	ret

10022060 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10022060:	defff804 	addi	sp,sp,-32
10022064:	dfc00715 	stw	ra,28(sp)
10022068:	df000615 	stw	fp,24(sp)
1002206c:	dc000515 	stw	r16,20(sp)
10022070:	df000504 	addi	fp,sp,20
10022074:	e13ffc15 	stw	r4,-16(fp)
10022078:	e17ffd15 	stw	r5,-12(fp)
1002207c:	e1bffe15 	stw	r6,-8(fp)
10022080:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10022084:	e13ffd17 	ldw	r4,-12(fp)
10022088:	e17ffe17 	ldw	r5,-8(fp)
1002208c:	e1bfff17 	ldw	r6,-4(fp)
10022090:	00201280 	call	10020128 <open>
10022094:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10022098:	e0bffb17 	ldw	r2,-20(fp)
1002209c:	10002216 	blt	r2,zero,10022128 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
100220a0:	040400b4 	movhi	r16,4098
100220a4:	84126904 	addi	r16,r16,18852
100220a8:	e0bffb17 	ldw	r2,-20(fp)
100220ac:	1009883a 	mov	r4,r2
100220b0:	01400304 	movi	r5,12
100220b4:	00146fc0 	call	100146fc <__mulsi3>
100220b8:	8085883a 	add	r2,r16,r2
100220bc:	10c00017 	ldw	r3,0(r2)
100220c0:	e0bffc17 	ldw	r2,-16(fp)
100220c4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100220c8:	040400b4 	movhi	r16,4098
100220cc:	84126904 	addi	r16,r16,18852
100220d0:	e0bffb17 	ldw	r2,-20(fp)
100220d4:	1009883a 	mov	r4,r2
100220d8:	01400304 	movi	r5,12
100220dc:	00146fc0 	call	100146fc <__mulsi3>
100220e0:	8085883a 	add	r2,r16,r2
100220e4:	10800104 	addi	r2,r2,4
100220e8:	10c00017 	ldw	r3,0(r2)
100220ec:	e0bffc17 	ldw	r2,-16(fp)
100220f0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100220f4:	040400b4 	movhi	r16,4098
100220f8:	84126904 	addi	r16,r16,18852
100220fc:	e0bffb17 	ldw	r2,-20(fp)
10022100:	1009883a 	mov	r4,r2
10022104:	01400304 	movi	r5,12
10022108:	00146fc0 	call	100146fc <__mulsi3>
1002210c:	8085883a 	add	r2,r16,r2
10022110:	10800204 	addi	r2,r2,8
10022114:	10c00017 	ldw	r3,0(r2)
10022118:	e0bffc17 	ldw	r2,-16(fp)
1002211c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10022120:	e13ffb17 	ldw	r4,-20(fp)
10022124:	00203c40 	call	100203c4 <alt_release_fd>
  }
} 
10022128:	e037883a 	mov	sp,fp
1002212c:	dfc00217 	ldw	ra,8(sp)
10022130:	df000117 	ldw	fp,4(sp)
10022134:	dc000017 	ldw	r16,0(sp)
10022138:	dec00304 	addi	sp,sp,12
1002213c:	f800283a 	ret

10022140 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10022140:	defffb04 	addi	sp,sp,-20
10022144:	dfc00415 	stw	ra,16(sp)
10022148:	df000315 	stw	fp,12(sp)
1002214c:	df000304 	addi	fp,sp,12
10022150:	e13ffd15 	stw	r4,-12(fp)
10022154:	e17ffe15 	stw	r5,-8(fp)
10022158:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1002215c:	010400b4 	movhi	r4,4098
10022160:	21126c04 	addi	r4,r4,18864
10022164:	e17ffd17 	ldw	r5,-12(fp)
10022168:	01800044 	movi	r6,1
1002216c:	01c07fc4 	movi	r7,511
10022170:	00220600 	call	10022060 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10022174:	010400b4 	movhi	r4,4098
10022178:	21126904 	addi	r4,r4,18852
1002217c:	e17ffe17 	ldw	r5,-8(fp)
10022180:	000d883a 	mov	r6,zero
10022184:	01c07fc4 	movi	r7,511
10022188:	00220600 	call	10022060 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1002218c:	010400b4 	movhi	r4,4098
10022190:	21126f04 	addi	r4,r4,18876
10022194:	e17fff17 	ldw	r5,-4(fp)
10022198:	01800044 	movi	r6,1
1002219c:	01c07fc4 	movi	r7,511
100221a0:	00220600 	call	10022060 <alt_open_fd>
}  
100221a4:	e037883a 	mov	sp,fp
100221a8:	dfc00117 	ldw	ra,4(sp)
100221ac:	df000017 	ldw	fp,0(sp)
100221b0:	dec00204 	addi	sp,sp,8
100221b4:	f800283a 	ret

100221b8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100221b8:	defffa04 	addi	sp,sp,-24
100221bc:	df000515 	stw	fp,20(sp)
100221c0:	df000504 	addi	fp,sp,20
100221c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100221c8:	0005303a 	rdctl	r2,status
100221cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100221d0:	e0fffc17 	ldw	r3,-16(fp)
100221d4:	00bfff84 	movi	r2,-2
100221d8:	1884703a 	and	r2,r3,r2
100221dc:	1001703a 	wrctl	status,r2
  
  return context;
100221e0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
100221e4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
100221e8:	e0bfff17 	ldw	r2,-4(fp)
100221ec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100221f0:	e0bffd17 	ldw	r2,-12(fp)
100221f4:	10800017 	ldw	r2,0(r2)
100221f8:	e0fffd17 	ldw	r3,-12(fp)
100221fc:	18c00117 	ldw	r3,4(r3)
10022200:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10022204:	e0bffd17 	ldw	r2,-12(fp)
10022208:	10800117 	ldw	r2,4(r2)
1002220c:	e0fffd17 	ldw	r3,-12(fp)
10022210:	18c00017 	ldw	r3,0(r3)
10022214:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10022218:	e0bffd17 	ldw	r2,-12(fp)
1002221c:	e0fffd17 	ldw	r3,-12(fp)
10022220:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10022224:	e0bffd17 	ldw	r2,-12(fp)
10022228:	e0fffd17 	ldw	r3,-12(fp)
1002222c:	10c00015 	stw	r3,0(r2)
10022230:	e0bffb17 	ldw	r2,-20(fp)
10022234:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10022238:	e0bffe17 	ldw	r2,-8(fp)
1002223c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10022240:	e037883a 	mov	sp,fp
10022244:	df000017 	ldw	fp,0(sp)
10022248:	dec00104 	addi	sp,sp,4
1002224c:	f800283a 	ret

10022250 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10022250:	defffb04 	addi	sp,sp,-20
10022254:	dfc00415 	stw	ra,16(sp)
10022258:	df000315 	stw	fp,12(sp)
1002225c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10022260:	d0a02317 	ldw	r2,-32628(gp)
10022264:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10022268:	d0a7e717 	ldw	r2,-24676(gp)
1002226c:	10800044 	addi	r2,r2,1
10022270:	d0a7e715 	stw	r2,-24676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10022274:	00002e06 	br	10022330 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10022278:	e0bffd17 	ldw	r2,-12(fp)
1002227c:	10800017 	ldw	r2,0(r2)
10022280:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10022284:	e0bffd17 	ldw	r2,-12(fp)
10022288:	10800403 	ldbu	r2,16(r2)
1002228c:	10803fcc 	andi	r2,r2,255
10022290:	10000426 	beq	r2,zero,100222a4 <alt_tick+0x54>
10022294:	d0a7e717 	ldw	r2,-24676(gp)
10022298:	1000021e 	bne	r2,zero,100222a4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1002229c:	e0bffd17 	ldw	r2,-12(fp)
100222a0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100222a4:	e0bffd17 	ldw	r2,-12(fp)
100222a8:	10800217 	ldw	r2,8(r2)
100222ac:	d0e7e717 	ldw	r3,-24676(gp)
100222b0:	18801d36 	bltu	r3,r2,10022328 <alt_tick+0xd8>
100222b4:	e0bffd17 	ldw	r2,-12(fp)
100222b8:	10800403 	ldbu	r2,16(r2)
100222bc:	10803fcc 	andi	r2,r2,255
100222c0:	1000191e 	bne	r2,zero,10022328 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100222c4:	e0bffd17 	ldw	r2,-12(fp)
100222c8:	10c00317 	ldw	r3,12(r2)
100222cc:	e0bffd17 	ldw	r2,-12(fp)
100222d0:	10800517 	ldw	r2,20(r2)
100222d4:	1009883a 	mov	r4,r2
100222d8:	183ee83a 	callr	r3
100222dc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100222e0:	e0bfff17 	ldw	r2,-4(fp)
100222e4:	1000031e 	bne	r2,zero,100222f4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100222e8:	e13ffd17 	ldw	r4,-12(fp)
100222ec:	00221b80 	call	100221b8 <alt_alarm_stop>
100222f0:	00000d06 	br	10022328 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100222f4:	e0bffd17 	ldw	r2,-12(fp)
100222f8:	10c00217 	ldw	r3,8(r2)
100222fc:	e0bfff17 	ldw	r2,-4(fp)
10022300:	1887883a 	add	r3,r3,r2
10022304:	e0bffd17 	ldw	r2,-12(fp)
10022308:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1002230c:	e0bffd17 	ldw	r2,-12(fp)
10022310:	10c00217 	ldw	r3,8(r2)
10022314:	d0a7e717 	ldw	r2,-24676(gp)
10022318:	1880032e 	bgeu	r3,r2,10022328 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1002231c:	e0bffd17 	ldw	r2,-12(fp)
10022320:	00c00044 	movi	r3,1
10022324:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10022328:	e0bffe17 	ldw	r2,-8(fp)
1002232c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10022330:	e0fffd17 	ldw	r3,-12(fp)
10022334:	d0a02304 	addi	r2,gp,-32628
10022338:	18bfcf1e 	bne	r3,r2,10022278 <__alt_data_end+0xf8022278>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1002233c:	0001883a 	nop
}
10022340:	e037883a 	mov	sp,fp
10022344:	dfc00117 	ldw	ra,4(sp)
10022348:	df000017 	ldw	fp,0(sp)
1002234c:	dec00204 	addi	sp,sp,8
10022350:	f800283a 	ret

10022354 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
10022354:	deffff04 	addi	sp,sp,-4
10022358:	df000015 	stw	fp,0(sp)
1002235c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10022360:	000170fa 	wrctl	ienable,zero
}
10022364:	e037883a 	mov	sp,fp
10022368:	df000017 	ldw	fp,0(sp)
1002236c:	dec00104 	addi	sp,sp,4
10022370:	f800283a 	ret

10022374 <atexit>:
10022374:	200b883a 	mov	r5,r4
10022378:	000d883a 	mov	r6,zero
1002237c:	0009883a 	mov	r4,zero
10022380:	000f883a 	mov	r7,zero
10022384:	002243c1 	jmpi	1002243c <__register_exitproc>

10022388 <exit>:
10022388:	defffe04 	addi	sp,sp,-8
1002238c:	000b883a 	mov	r5,zero
10022390:	dc000015 	stw	r16,0(sp)
10022394:	dfc00115 	stw	ra,4(sp)
10022398:	2021883a 	mov	r16,r4
1002239c:	002256c0 	call	1002256c <__call_exitprocs>
100223a0:	008400b4 	movhi	r2,4098
100223a4:	1096ef04 	addi	r2,r2,23484
100223a8:	11000017 	ldw	r4,0(r2)
100223ac:	20800f17 	ldw	r2,60(r4)
100223b0:	10000126 	beq	r2,zero,100223b8 <exit+0x30>
100223b4:	103ee83a 	callr	r2
100223b8:	8009883a 	mov	r4,r16
100223bc:	002270c0 	call	1002270c <_exit>

100223c0 <memcmp>:
100223c0:	01c000c4 	movi	r7,3
100223c4:	3980192e 	bgeu	r7,r6,1002242c <memcmp+0x6c>
100223c8:	2904b03a 	or	r2,r5,r4
100223cc:	11c4703a 	and	r2,r2,r7
100223d0:	10000f26 	beq	r2,zero,10022410 <memcmp+0x50>
100223d4:	20c00003 	ldbu	r3,0(r4)
100223d8:	28800003 	ldbu	r2,0(r5)
100223dc:	1880151e 	bne	r3,r2,10022434 <memcmp+0x74>
100223e0:	31bfff84 	addi	r6,r6,-2
100223e4:	01ffffc4 	movi	r7,-1
100223e8:	00000406 	br	100223fc <memcmp+0x3c>
100223ec:	20c00003 	ldbu	r3,0(r4)
100223f0:	28800003 	ldbu	r2,0(r5)
100223f4:	31bfffc4 	addi	r6,r6,-1
100223f8:	18800e1e 	bne	r3,r2,10022434 <memcmp+0x74>
100223fc:	21000044 	addi	r4,r4,1
10022400:	29400044 	addi	r5,r5,1
10022404:	31fff91e 	bne	r6,r7,100223ec <__alt_data_end+0xf80223ec>
10022408:	0005883a 	mov	r2,zero
1002240c:	f800283a 	ret
10022410:	20c00017 	ldw	r3,0(r4)
10022414:	28800017 	ldw	r2,0(r5)
10022418:	1880041e 	bne	r3,r2,1002242c <memcmp+0x6c>
1002241c:	31bfff04 	addi	r6,r6,-4
10022420:	21000104 	addi	r4,r4,4
10022424:	29400104 	addi	r5,r5,4
10022428:	39bff936 	bltu	r7,r6,10022410 <__alt_data_end+0xf8022410>
1002242c:	303fe91e 	bne	r6,zero,100223d4 <__alt_data_end+0xf80223d4>
10022430:	003ff506 	br	10022408 <__alt_data_end+0xf8022408>
10022434:	1885c83a 	sub	r2,r3,r2
10022438:	f800283a 	ret

1002243c <__register_exitproc>:
1002243c:	defffa04 	addi	sp,sp,-24
10022440:	008400b4 	movhi	r2,4098
10022444:	1096ef04 	addi	r2,r2,23484
10022448:	dc000315 	stw	r16,12(sp)
1002244c:	14000017 	ldw	r16,0(r2)
10022450:	dc400415 	stw	r17,16(sp)
10022454:	dfc00515 	stw	ra,20(sp)
10022458:	80805217 	ldw	r2,328(r16)
1002245c:	2023883a 	mov	r17,r4
10022460:	10003e26 	beq	r2,zero,1002255c <__register_exitproc+0x120>
10022464:	10c00117 	ldw	r3,4(r2)
10022468:	020007c4 	movi	r8,31
1002246c:	40c0180e 	bge	r8,r3,100224d0 <__register_exitproc+0x94>
10022470:	00840074 	movhi	r2,4097
10022474:	10994d04 	addi	r2,r2,25908
10022478:	1000061e 	bne	r2,zero,10022494 <__register_exitproc+0x58>
1002247c:	00bfffc4 	movi	r2,-1
10022480:	dfc00517 	ldw	ra,20(sp)
10022484:	dc400417 	ldw	r17,16(sp)
10022488:	dc000317 	ldw	r16,12(sp)
1002248c:	dec00604 	addi	sp,sp,24
10022490:	f800283a 	ret
10022494:	01006404 	movi	r4,400
10022498:	d9400015 	stw	r5,0(sp)
1002249c:	d9800115 	stw	r6,4(sp)
100224a0:	d9c00215 	stw	r7,8(sp)
100224a4:	00165340 	call	10016534 <malloc>
100224a8:	d9400017 	ldw	r5,0(sp)
100224ac:	d9800117 	ldw	r6,4(sp)
100224b0:	d9c00217 	ldw	r7,8(sp)
100224b4:	103ff126 	beq	r2,zero,1002247c <__alt_data_end+0xf802247c>
100224b8:	80c05217 	ldw	r3,328(r16)
100224bc:	10000115 	stw	zero,4(r2)
100224c0:	10c00015 	stw	r3,0(r2)
100224c4:	80805215 	stw	r2,328(r16)
100224c8:	10006215 	stw	zero,392(r2)
100224cc:	10006315 	stw	zero,396(r2)
100224d0:	10c00117 	ldw	r3,4(r2)
100224d4:	88000d1e 	bne	r17,zero,1002250c <__register_exitproc+0xd0>
100224d8:	19000084 	addi	r4,r3,2
100224dc:	2109883a 	add	r4,r4,r4
100224e0:	18c00044 	addi	r3,r3,1
100224e4:	2109883a 	add	r4,r4,r4
100224e8:	1109883a 	add	r4,r2,r4
100224ec:	10c00115 	stw	r3,4(r2)
100224f0:	0005883a 	mov	r2,zero
100224f4:	21400015 	stw	r5,0(r4)
100224f8:	dfc00517 	ldw	ra,20(sp)
100224fc:	dc400417 	ldw	r17,16(sp)
10022500:	dc000317 	ldw	r16,12(sp)
10022504:	dec00604 	addi	sp,sp,24
10022508:	f800283a 	ret
1002250c:	02400044 	movi	r9,1
10022510:	12806217 	ldw	r10,392(r2)
10022514:	48d2983a 	sll	r9,r9,r3
10022518:	19000804 	addi	r4,r3,32
1002251c:	18d1883a 	add	r8,r3,r3
10022520:	2109883a 	add	r4,r4,r4
10022524:	4211883a 	add	r8,r8,r8
10022528:	2109883a 	add	r4,r4,r4
1002252c:	1109883a 	add	r4,r2,r4
10022530:	1211883a 	add	r8,r2,r8
10022534:	5254b03a 	or	r10,r10,r9
10022538:	21c02215 	stw	r7,136(r4)
1002253c:	41802215 	stw	r6,136(r8)
10022540:	12806215 	stw	r10,392(r2)
10022544:	01000084 	movi	r4,2
10022548:	893fe31e 	bne	r17,r4,100224d8 <__alt_data_end+0xf80224d8>
1002254c:	11006317 	ldw	r4,396(r2)
10022550:	2252b03a 	or	r9,r4,r9
10022554:	12406315 	stw	r9,396(r2)
10022558:	003fdf06 	br	100224d8 <__alt_data_end+0xf80224d8>
1002255c:	008400b4 	movhi	r2,4098
10022560:	109f1d04 	addi	r2,r2,31860
10022564:	80805215 	stw	r2,328(r16)
10022568:	003fbe06 	br	10022464 <__alt_data_end+0xf8022464>

1002256c <__call_exitprocs>:
1002256c:	008400b4 	movhi	r2,4098
10022570:	1096ef04 	addi	r2,r2,23484
10022574:	10800017 	ldw	r2,0(r2)
10022578:	defff304 	addi	sp,sp,-52
1002257c:	df000b15 	stw	fp,44(sp)
10022580:	d8800015 	stw	r2,0(sp)
10022584:	10805204 	addi	r2,r2,328
10022588:	dd400815 	stw	r21,32(sp)
1002258c:	dfc00c15 	stw	ra,48(sp)
10022590:	ddc00a15 	stw	r23,40(sp)
10022594:	dd800915 	stw	r22,36(sp)
10022598:	dd000715 	stw	r20,28(sp)
1002259c:	dcc00615 	stw	r19,24(sp)
100225a0:	dc800515 	stw	r18,20(sp)
100225a4:	dc400415 	stw	r17,16(sp)
100225a8:	dc000315 	stw	r16,12(sp)
100225ac:	d9000115 	stw	r4,4(sp)
100225b0:	2839883a 	mov	fp,r5
100225b4:	d8800215 	stw	r2,8(sp)
100225b8:	057fffc4 	movi	r21,-1
100225bc:	d8800017 	ldw	r2,0(sp)
100225c0:	ddc00217 	ldw	r23,8(sp)
100225c4:	14805217 	ldw	r18,328(r2)
100225c8:	90001726 	beq	r18,zero,10022628 <__call_exitprocs+0xbc>
100225cc:	94400117 	ldw	r17,4(r18)
100225d0:	8c3fffc4 	addi	r16,r17,-1
100225d4:	80001116 	blt	r16,zero,1002261c <__call_exitprocs+0xb0>
100225d8:	8c400044 	addi	r17,r17,1
100225dc:	8427883a 	add	r19,r16,r16
100225e0:	8c63883a 	add	r17,r17,r17
100225e4:	95802204 	addi	r22,r18,136
100225e8:	9ce7883a 	add	r19,r19,r19
100225ec:	8c63883a 	add	r17,r17,r17
100225f0:	b4e7883a 	add	r19,r22,r19
100225f4:	9463883a 	add	r17,r18,r17
100225f8:	e0001726 	beq	fp,zero,10022658 <__call_exitprocs+0xec>
100225fc:	8c87c83a 	sub	r3,r17,r18
10022600:	b0c7883a 	add	r3,r22,r3
10022604:	18c01e17 	ldw	r3,120(r3)
10022608:	1f001326 	beq	r3,fp,10022658 <__call_exitprocs+0xec>
1002260c:	843fffc4 	addi	r16,r16,-1
10022610:	9cffff04 	addi	r19,r19,-4
10022614:	8c7fff04 	addi	r17,r17,-4
10022618:	857ff71e 	bne	r16,r21,100225f8 <__alt_data_end+0xf80225f8>
1002261c:	00840074 	movhi	r2,4097
10022620:	10995204 	addi	r2,r2,25928
10022624:	10002a1e 	bne	r2,zero,100226d0 <__call_exitprocs+0x164>
10022628:	dfc00c17 	ldw	ra,48(sp)
1002262c:	df000b17 	ldw	fp,44(sp)
10022630:	ddc00a17 	ldw	r23,40(sp)
10022634:	dd800917 	ldw	r22,36(sp)
10022638:	dd400817 	ldw	r21,32(sp)
1002263c:	dd000717 	ldw	r20,28(sp)
10022640:	dcc00617 	ldw	r19,24(sp)
10022644:	dc800517 	ldw	r18,20(sp)
10022648:	dc400417 	ldw	r17,16(sp)
1002264c:	dc000317 	ldw	r16,12(sp)
10022650:	dec00d04 	addi	sp,sp,52
10022654:	f800283a 	ret
10022658:	91000117 	ldw	r4,4(r18)
1002265c:	88c00017 	ldw	r3,0(r17)
10022660:	213fffc4 	addi	r4,r4,-1
10022664:	24001526 	beq	r4,r16,100226bc <__call_exitprocs+0x150>
10022668:	88000015 	stw	zero,0(r17)
1002266c:	183fe726 	beq	r3,zero,1002260c <__alt_data_end+0xf802260c>
10022670:	00800044 	movi	r2,1
10022674:	1408983a 	sll	r4,r2,r16
10022678:	91406217 	ldw	r5,392(r18)
1002267c:	95000117 	ldw	r20,4(r18)
10022680:	214a703a 	and	r5,r4,r5
10022684:	28000b26 	beq	r5,zero,100226b4 <__call_exitprocs+0x148>
10022688:	91406317 	ldw	r5,396(r18)
1002268c:	2148703a 	and	r4,r4,r5
10022690:	20000c1e 	bne	r4,zero,100226c4 <__call_exitprocs+0x158>
10022694:	99400017 	ldw	r5,0(r19)
10022698:	d9000117 	ldw	r4,4(sp)
1002269c:	183ee83a 	callr	r3
100226a0:	90c00117 	ldw	r3,4(r18)
100226a4:	1d3fc51e 	bne	r3,r20,100225bc <__alt_data_end+0xf80225bc>
100226a8:	b8c00017 	ldw	r3,0(r23)
100226ac:	1cbfd726 	beq	r3,r18,1002260c <__alt_data_end+0xf802260c>
100226b0:	003fc206 	br	100225bc <__alt_data_end+0xf80225bc>
100226b4:	183ee83a 	callr	r3
100226b8:	003ff906 	br	100226a0 <__alt_data_end+0xf80226a0>
100226bc:	94000115 	stw	r16,4(r18)
100226c0:	003fea06 	br	1002266c <__alt_data_end+0xf802266c>
100226c4:	99000017 	ldw	r4,0(r19)
100226c8:	183ee83a 	callr	r3
100226cc:	003ff406 	br	100226a0 <__alt_data_end+0xf80226a0>
100226d0:	90c00117 	ldw	r3,4(r18)
100226d4:	1800071e 	bne	r3,zero,100226f4 <__call_exitprocs+0x188>
100226d8:	90c00017 	ldw	r3,0(r18)
100226dc:	18000926 	beq	r3,zero,10022704 <__call_exitprocs+0x198>
100226e0:	9009883a 	mov	r4,r18
100226e4:	b8c00015 	stw	r3,0(r23)
100226e8:	00165480 	call	10016548 <free>
100226ec:	bc800017 	ldw	r18,0(r23)
100226f0:	003fb506 	br	100225c8 <__alt_data_end+0xf80225c8>
100226f4:	90c00017 	ldw	r3,0(r18)
100226f8:	902f883a 	mov	r23,r18
100226fc:	1825883a 	mov	r18,r3
10022700:	003fb106 	br	100225c8 <__alt_data_end+0xf80225c8>
10022704:	0007883a 	mov	r3,zero
10022708:	003ffb06 	br	100226f8 <__alt_data_end+0xf80226f8>

1002270c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1002270c:	defffc04 	addi	sp,sp,-16
10022710:	df000315 	stw	fp,12(sp)
10022714:	df000304 	addi	fp,sp,12
10022718:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1002271c:	0001883a 	nop
10022720:	e0bfff17 	ldw	r2,-4(fp)
10022724:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
10022728:	e0bffd17 	ldw	r2,-12(fp)
1002272c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10022730:	e0bffe17 	ldw	r2,-8(fp)
10022734:	10000226 	beq	r2,zero,10022740 <_exit+0x34>
    ALT_SIM_FAIL();
10022738:	002af070 	cmpltui	zero,zero,43969
1002273c:	00000106 	br	10022744 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
10022740:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10022744:	003fff06 	br	10022744 <__alt_data_end+0xf8022744>
